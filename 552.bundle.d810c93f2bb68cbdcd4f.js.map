{"version":3,"file":"552.bundle.d810c93f2bb68cbdcd4f.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/listComponentGenerator.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/cleanDenaturalizedDataset.ts","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopyViewport.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/dicomWebClient.ts","webpack:///../../../extensions/dicom-microscopy/src/id.js","webpack:///../../../extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","webpack:///../../../extensions/dicom-microscopy/src/utils/styles.js","webpack:///../../../extensions/dicom-microscopy/src/tools/viewerManager.js","webpack:///../../../extensions/dicom-microscopy/src/utils/RoiAnnotation.js","webpack:///../../../extensions/dicom-microscopy/src/utils/areaOfPolygon.js","webpack:///../../../extensions/dicom-microscopy/src/services/MicroscopyService.ts","webpack:///../../../extensions/dicom-microscopy/src/utils/callInputDialog.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/dcmCodeValues.js","webpack:///../../../extensions/dicom-microscopy/src/utils/toArray.js","webpack:///../../../extensions/dicom-microscopy/src/utils/loadSR.ts","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","webpack:///../../../extensions/dicom-microscopy/src/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/getPanelModule.tsx","webpack:///../../../extensions/dicom-microscopy/src/getCommandsModule.ts"],"sourcesContent":["const listComponentGenerator = props => {\r\n  const { list, itemGenerator } = props;\r\n  if (!list) {\r\n    return;\r\n  }\r\n  return list.map(item => {\r\n    if (!item) {\r\n      return;\r\n    }\r\n    const generator = item.generator || itemGenerator;\r\n    if (!generator) {\r\n      throw new Error(`No generator for ${item}`);\r\n    }\r\n    return generator({ ...props, item });\r\n  });\r\n};\r\n\r\nexport default listComponentGenerator;\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport listComponentGenerator from './listComponentGenerator';\r\nimport './ViewportOverlay.css';\r\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision, formatPN } from './utils';\r\n\r\ninterface OverlayItem {\r\n  id: string;\r\n  title: string;\r\n  value?: (props: any) => string;\r\n  condition?: (props: any) => boolean;\r\n  contents?: (props: any) => { className: string; value: any };\r\n  generator?: (props: any) => any;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} config is a configuration object that defines four lists of elements,\r\n * one topLeft, topRight, bottomLeft, bottomRight contents.\r\n * @param {*} extensionManager is used to load the image data.\r\n * @returns\r\n */\r\nexport const generateFromConfig = ({\r\n  topLeft = [],\r\n  topRight = [],\r\n  bottomLeft = [],\r\n  bottomRight = [],\r\n  itemGenerator = () => {},\r\n}: {\r\n  topLeft?: OverlayItem[];\r\n  topRight?: OverlayItem[];\r\n  bottomLeft?: OverlayItem[];\r\n  bottomRight?: OverlayItem[];\r\n  itemGenerator?: (props: any) => any;\r\n}) => {\r\n  return (props: any) => {\r\n    const topLeftClass = 'top-viewport left-viewport text-primary-light';\r\n    const topRightClass = 'top-viewport right-viewport-scrollbar text-primary-light';\r\n    const bottomRightClass = 'bottom-viewport right-viewport-scrollbar text-primary-light';\r\n    const bottomLeftClass = 'bottom-viewport left-viewport text-primary-light';\r\n    const overlay = 'absolute pointer-events-none microscopy-viewport-overlay';\r\n\r\n    return (\r\n      <>\r\n        {topLeft && topLeft.length > 0 && (\r\n          <div data-cy={'viewport-overlay-top-left'} className={classnames(overlay, topLeftClass)}>\r\n            {listComponentGenerator({ ...props, list: topLeft, itemGenerator })}\r\n          </div>\r\n        )}\r\n        {topRight && topRight.length > 0 && (\r\n          <div\r\n            data-cy={'viewport-overlay-top-right'}\r\n            className={classnames(overlay, topRightClass)}\r\n          >\r\n            {listComponentGenerator({\r\n              ...props,\r\n              list: topRight,\r\n              itemGenerator,\r\n            })}\r\n          </div>\r\n        )}\r\n        {bottomRight && bottomRight.length > 0 && (\r\n          <div\r\n            data-cy={'viewport-overlay-bottom-right'}\r\n            className={classnames(overlay, bottomRightClass)}\r\n          >\r\n            {listComponentGenerator({\r\n              ...props,\r\n              list: bottomRight,\r\n              itemGenerator,\r\n            })}\r\n          </div>\r\n        )}\r\n        {bottomLeft && bottomLeft.length > 0 && (\r\n          <div\r\n            data-cy={'viewport-overlay-bottom-left'}\r\n            className={classnames(overlay, bottomLeftClass)}\r\n          >\r\n            {listComponentGenerator({\r\n              ...props,\r\n              list: bottomLeft,\r\n              itemGenerator,\r\n            })}\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n};\r\n\r\nconst itemGenerator = (props: any) => {\r\n  const { item } = props;\r\n  const { title, value: valueFunc, condition, contents } = item;\r\n  props.image = { ...props.image, ...props.metadata };\r\n  props.formatDate = formatDICOMDate;\r\n  props.formatTime = formatDICOMTime;\r\n  props.formatPN = formatPN;\r\n  props.formatNumberPrecision = formatNumberPrecision;\r\n  if (condition && !condition(props)) {\r\n    return null;\r\n  }\r\n  if (!contents && !valueFunc) {\r\n    return null;\r\n  }\r\n  const value = valueFunc && valueFunc(props);\r\n  const contentsValue = (contents && contents(props)) || [\r\n    { className: 'mr-1', value: title },\r\n    { classname: 'mr-1 font-light', value },\r\n  ];\r\n\r\n  return (\r\n    <div key={item.id} className=\"flex flex-row\">\r\n      {contentsValue.map((content, idx) => (\r\n        <span key={idx} className={content.className}>\r\n          {content.value}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default generateFromConfig({});\r\n","import { dicomWebUtils } from '@ohif/extension-default';\r\n\r\nfunction isPrimitive(v: any) {\r\n  return !(typeof v == 'object' || Array.isArray(v));\r\n}\r\n\r\nconst vrNumerics = [\r\n  'DS',\r\n  'FL',\r\n  'FD',\r\n  'IS',\r\n  'OD',\r\n  'OF',\r\n  'OL',\r\n  'OV',\r\n  'SL',\r\n  'SS',\r\n  'SV',\r\n  'UL',\r\n  'US',\r\n  'UV',\r\n];\r\n\r\n/**\r\n * Specialized for DICOM JSON format dataset cleaning.\r\n * @param obj\r\n * @returns\r\n */\r\nexport default function cleanDenaturalizedDataset(\r\n  obj: any,\r\n  options: {\r\n    StudyInstanceUID: string;\r\n    SeriesInstanceUID: string;\r\n    dataSourceConfig: unknown;\r\n  }\r\n): any {\r\n  if (Array.isArray(obj)) {\r\n    const newAry = obj.map(o => (isPrimitive(o) ? o : cleanDenaturalizedDataset(o, options)));\r\n    return newAry;\r\n  } else if (isPrimitive(obj)) {\r\n    return obj;\r\n  } else {\r\n    Object.keys(obj).forEach(key => {\r\n      if (obj[key].Value === null && obj[key].vr) {\r\n        delete obj[key].Value;\r\n      } else if (Array.isArray(obj[key].Value) && obj[key].vr) {\r\n        if (obj[key].Value.length === 1 && obj[key].Value[0].BulkDataURI) {\r\n          dicomWebUtils.fixBulkDataURI(obj[key].Value[0], options, options.dataSourceConfig);\r\n\r\n          obj[key].BulkDataURI = obj[key].Value[0].BulkDataURI;\r\n\r\n          // prevent mixed-content blockage\r\n          if (window.location.protocol === 'https:' && obj[key].BulkDataURI.startsWith('http:')) {\r\n            obj[key].BulkDataURI = obj[key].BulkDataURI.replace('http:', 'https:');\r\n          }\r\n          delete obj[key].Value;\r\n        } else if (vrNumerics.includes(obj[key].vr)) {\r\n          obj[key].Value = obj[key].Value.map(v => +v);\r\n        } else {\r\n          obj[key].Value = obj[key].Value.map(entry => cleanDenaturalizedDataset(entry, options));\r\n        }\r\n      }\r\n    });\r\n    return obj;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingIndicatorProgress } from '@ohif/ui';\r\n\r\nimport './DicomMicroscopyViewport.css';\r\nimport ViewportOverlay from './components/ViewportOverlay';\r\nimport getDicomWebClient from './utils/dicomWebClient';\r\nimport dcmjs from 'dcmjs';\r\nimport cleanDenaturalizedDataset from './utils/cleanDenaturalizedDataset';\r\nimport MicroscopyService from './services/MicroscopyService';\r\n\r\nclass DicomMicroscopyViewport extends Component {\r\n  state = {\r\n    error: null as any,\r\n    isLoaded: false,\r\n  };\r\n\r\n  microscopyService: MicroscopyService;\r\n  viewer: any = null; // dicom-microscopy-viewer instance\r\n  managedViewer: any = null; // managed wrapper of microscopy-dicom extension\r\n\r\n  container = React.createRef();\r\n  overlayElement = React.createRef();\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    const { microscopyService } = this.props.servicesManager.services;\r\n    this.microscopyService = microscopyService;\r\n  }\r\n\r\n  static propTypes = {\r\n    viewportData: PropTypes.object,\r\n    activeViewportId: PropTypes.string,\r\n    setViewportActive: PropTypes.func,\r\n\r\n    // props from OHIF Viewport Grid\r\n    displaySets: PropTypes.array,\r\n    viewportId: PropTypes.string,\r\n    viewportLabel: PropTypes.string,\r\n    dataSource: PropTypes.object,\r\n    viewportOptions: PropTypes.object,\r\n    displaySetOptions: PropTypes.array,\r\n\r\n    // other props from wrapping component\r\n    servicesManager: PropTypes.object,\r\n    extensionManager: PropTypes.object,\r\n    commandsManager: PropTypes.object,\r\n    resizeRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: PropTypes.any })]),\r\n  };\r\n\r\n  /**\r\n   * Need to return this as a function to prevent webpack from munging it.\r\n   */\r\n  public static getImportPath() {\r\n    return '/dicom-microscopy-viewer/dicomMicroscopyViewer.min.js';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the nearest ROI from the mouse click point\r\n   *\r\n   * @param event\r\n   * @param autoselect\r\n   * @returns\r\n   */\r\n  getNearbyROI(event: Event, autoselect = true) {\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    const _drawingSource = symbols.find(p => p.description === 'drawingSource');\r\n    const _pyramid = symbols.find(p => p.description === 'pyramid');\r\n    const _map = symbols.find(p => p.description === 'map');\r\n    const _affine = symbols.find(p => p.description === 'affine');\r\n\r\n    const feature = this.viewer[_drawingSource].getClosestFeatureToCoordinate(\r\n      this.viewer[_map].getEventCoordinate(event)\r\n    );\r\n\r\n    if (!feature) {\r\n      return null;\r\n    }\r\n\r\n    const roiAnnotation = this.viewer._getROIFromFeature(\r\n      feature,\r\n      this.viewer[_pyramid].metadata,\r\n      this.viewer[_affine]\r\n    );\r\n    if (roiAnnotation && autoselect) {\r\n      this.microscopyService.selectAnnotation(roiAnnotation);\r\n    }\r\n    return roiAnnotation;\r\n  }\r\n\r\n  // install the microscopy renderer into the web page.\r\n  // you should only do this once.\r\n  async installOpenLayersRenderer(container, displaySet) {\r\n    const loadViewer = async metadata => {\r\n      await import(\r\n        /* webpackIgnore: true */ DicomMicroscopyViewport.getImportPath());\r\n      const { viewer: DicomMicroscopyViewer, metadata: metadataUtils } = (window as any).dicomMicroscopyViewer;\r\n\r\n      const microscopyViewer = DicomMicroscopyViewer.VolumeImageViewer;\r\n\r\n      const client = getDicomWebClient({\r\n        extensionManager: this.props.extensionManager,\r\n        servicesManager: this.props.servicesManager,\r\n      });\r\n\r\n      // Parse, format, and filter metadata\r\n      const volumeImages: any[] = [];\r\n\r\n      /**\r\n       * This block of code is the original way of loading DICOM into dicom-microscopy-viewer\r\n       * as in their documentation.\r\n       * But we have the metadata already loaded by our loaders.\r\n       * As the metadata for microscopy DIOM files tends to be big and we don't\r\n       * want to double load it, below we have the mechanism to reconstruct the\r\n       * DICOM JSON structure (denaturalized) from naturalized metadata.\r\n       * (NOTE: Our loaders cache only naturalized metadata, not the denaturalized.)\r\n       */\r\n      // {\r\n      //   const retrieveOptions = {\r\n      //     studyInstanceUID: metadata[0].StudyInstanceUID,\r\n      //     seriesInstanceUID: metadata[0].SeriesInstanceUID,\r\n      //   };\r\n      //   metadata = await client.retrieveSeriesMetadata(retrieveOptions);\r\n      //   // Parse, format, and filter metadata\r\n      //   metadata.forEach(m => {\r\n      //     if (\r\n      //       volumeImages.length > 0 &&\r\n      //       m['00200052'].Value[0] != volumeImages[0].FrameOfReferenceUID\r\n      //     ) {\r\n      //       console.warn(\r\n      //         'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\r\n      //         m['00200052'].Value[0]\r\n      //       );\r\n      //       m['00200052'].Value[0] = volumeImages[0].FrameOfReferenceUID;\r\n      //     }\r\n      //     NOTE: depending on different data source, image.ImageType sometimes\r\n      //     is a string, not a string array.\r\n      //     m['00080008'] = transformImageTypeUnnaturalized(m['00080008']);\r\n\r\n      //     const image = new metadataUtils.VLWholeSlideMicroscopyImage({\r\n      //       metadata: m,\r\n      //     });\r\n      //     const imageFlavor = image.ImageType[2];\r\n      //     if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\r\n      //       volumeImages.push(image);\r\n      //     }\r\n      //   });\r\n      // }\r\n\r\n      metadata.forEach(m => {\r\n        // NOTE: depending on different data source, image.ImageType sometimes\r\n        //    is a string, not a string array.\r\n        m.ImageType = typeof m.ImageType === 'string' ? m.ImageType.split('\\\\') : m.ImageType;\r\n\r\n        const inst = cleanDenaturalizedDataset(\r\n          dcmjs.data.DicomMetaDictionary.denaturalizeDataset(m),\r\n          {\r\n            StudyInstanceUID: m.StudyInstanceUID,\r\n            SeriesInstanceUID: m.SeriesInstanceUID,\r\n            dataSourceConfig: this.props.dataSource.getConfig(),\r\n          }\r\n        );\r\n        if (!inst['00480105']) {\r\n          // Optical Path Sequence, no OpticalPathIdentifier?\r\n          // NOTE: this is actually a not-well formatted DICOM VL Whole Slide Microscopy Image.\r\n          inst['00480105'] = {\r\n            vr: 'SQ',\r\n            Value: [\r\n              {\r\n                '00480106': {\r\n                  vr: 'SH',\r\n                  Value: ['1'],\r\n                },\r\n              },\r\n            ],\r\n          };\r\n        }\r\n        const image = new metadataUtils.VLWholeSlideMicroscopyImage({\r\n          metadata: inst,\r\n        });\r\n\r\n        const imageFlavor = image.ImageType[2];\r\n        if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\r\n          volumeImages.push(image);\r\n        }\r\n      });\r\n\r\n      // format metadata for microscopy-viewer\r\n      const options = {\r\n        client,\r\n        metadata: volumeImages,\r\n        retrieveRendered: false,\r\n        controls: ['overview', 'position'],\r\n      };\r\n\r\n      this.viewer = new microscopyViewer(options);\r\n\r\n      if (this.overlayElement && this.overlayElement.current && this.viewer.addViewportOverlay) {\r\n        this.viewer.addViewportOverlay({\r\n          element: this.overlayElement.current,\r\n          coordinates: [0, 0], // TODO: dicom-microscopy-viewer documentation says this can be false to be automatically, but it is not.\r\n          navigate: true,\r\n          className: 'OpenLayersOverlay',\r\n        });\r\n      }\r\n\r\n      this.viewer.render({ container });\r\n\r\n      const { StudyInstanceUID, SeriesInstanceUID } = displaySet;\r\n\r\n      this.managedViewer = this.microscopyService.addViewer(\r\n        this.viewer,\r\n        this.props.viewportId,\r\n        container,\r\n        StudyInstanceUID,\r\n        SeriesInstanceUID\r\n      );\r\n\r\n      this.managedViewer.addContextMenuCallback((event: Event) => {\r\n        // TODO: refactor this after Bill's changes on ContextMenu feature get merged\r\n        // const roiAnnotationNearBy = this.getNearbyROI(event);\r\n      });\r\n    };\r\n\r\n    this.microscopyService.clearAnnotations();\r\n\r\n    let smDisplaySet = displaySet;\r\n    if (displaySet.Modality === 'SR') {\r\n      // for SR displaySet, let's load the actual image displaySet\r\n      smDisplaySet = displaySet.getSourceDisplaySet();\r\n    }\r\n    console.log('Loading viewer metadata', smDisplaySet);\r\n\r\n    await loadViewer(smDisplaySet.others);\r\n\r\n    if (displaySet.Modality === 'SR') {\r\n      displaySet.load(smDisplaySet);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { displaySets, viewportOptions } = this.props;\r\n    // Todo-rename: this is always getting the 0\r\n    const displaySet = displaySets[0];\r\n    this.installOpenLayersRenderer(this.container.current, displaySet).then(() => {\r\n      this.setState({ isLoaded: true });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any): void {\r\n    if (this.managedViewer && prevProps.displaySets !== this.props.displaySets) {\r\n      const { displaySets } = this.props;\r\n      const displaySet = displaySets[0];\r\n\r\n      this.microscopyService.clearAnnotations();\r\n\r\n      // loading SR\r\n      if (displaySet.Modality === 'SR') {\r\n        const referencedDisplaySet = displaySet.getSourceDisplaySet();\r\n        displaySet.load(referencedDisplaySet);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.microscopyService.removeViewer(this.viewer);\r\n  }\r\n\r\n  setViewportActiveHandler = () => {\r\n    const { setViewportActive, viewportId, activeViewportId } = this.props;\r\n\r\n    if (viewportId !== activeViewportId) {\r\n      setViewportActive(viewportId);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const style = { width: '100%', height: '100%' };\r\n    const displaySet = this.props.displaySets[0];\r\n    const firstInstance = displaySet.firstInstance || displaySet.instance;\r\n\r\n    return (\r\n      <div\r\n        className={'DicomMicroscopyViewer'}\r\n        style={style}\r\n        onClick={this.setViewportActiveHandler}\r\n      >\r\n        <div style={{ ...style, display: 'none' }}>\r\n          <div style={{ ...style }} ref={this.overlayElement}>\r\n            <div style={{ position: 'relative', height: '100%', width: '100%' }}>\r\n              {displaySet && firstInstance.imageId && (\r\n                <ViewportOverlay\r\n                  displaySet={displaySet}\r\n                  instance={displaySet.instance}\r\n                  metadata={displaySet.metadata}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.error ? (\r\n          <h2>{JSON.stringify(this.state.error)}</h2>\r\n        ) : (\r\n          <div\r\n            style={style}\r\n            ref={(ref: any) => {\r\n              this.container.current = ref;\r\n              this.props.resizeRef.current = ref;\r\n            }}\r\n          />\r\n        )}\r\n        {this.state.isLoaded ? null : (\r\n          <LoadingIndicatorProgress className={'h-full w-full bg-black'} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DicomMicroscopyViewport;\r\n","import { errorHandler, DicomMetadataStore } from '@ohif/core';\r\nimport { StaticWadoClient } from '@ohif/extension-default';\r\n\r\n/**\r\n * create a DICOMwebClient object to be used by Dicom Microscopy Viewer\r\n *\r\n * Referenced the code from `/extensions/default/src/DicomWebDataSource/index.js`\r\n *\r\n * @param param0\r\n * @returns\r\n */\r\nexport default function getDicomWebClient({ extensionManager, servicesManager }: withAppTypes) {\r\n  const dataSourceConfig = window.config.dataSources.find(\r\n    ds => ds.sourceName === extensionManager.activeDataSource\r\n  );\r\n  const { userAuthenticationService } = servicesManager.services;\r\n\r\n  const { wadoRoot, staticWado, singlepart } = dataSourceConfig.configuration;\r\n\r\n  const wadoConfig = {\r\n    url: wadoRoot || '/dicomlocal',\r\n    staticWado,\r\n    singlepart,\r\n    headers: userAuthenticationService.getAuthorizationHeader(),\r\n    errorInterceptor: errorHandler.getHTTPErrorHandler(),\r\n  };\r\n\r\n  const client = new StaticWadoClient(wadoConfig);\r\n  client.wadoURL = wadoConfig.url;\r\n\r\n  if (extensionManager.activeDataSource === 'dicomlocal') {\r\n    /**\r\n     * For local data source, override the retrieveInstanceFrames() method of the\r\n     * dicomweb-client to retrieve image data from memory cached metadata.\r\n     * Other methods of the client doesn't matter, as we are feeding the DMV\r\n     * with the series metadata already.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.studyInstanceUID - Study Instance UID\r\n     * @param {String} options.seriesInstanceUID - Series Instance UID\r\n     * @param {String} options.sopInstanceUID - SOP Instance UID\r\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\r\n     * @param {Object} [options.queryParams] - HTTP query parameters\r\n     * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\r\n     */\r\n    //\r\n    client.retrieveInstanceFrames = async options => {\r\n      if (!('studyInstanceUID' in options)) {\r\n        throw new Error('Study Instance UID is required for retrieval of instance frames');\r\n      }\r\n      if (!('seriesInstanceUID' in options)) {\r\n        throw new Error('Series Instance UID is required for retrieval of instance frames');\r\n      }\r\n      if (!('sopInstanceUID' in options)) {\r\n        throw new Error('SOP Instance UID is required for retrieval of instance frames');\r\n      }\r\n      if (!('frameNumbers' in options)) {\r\n        throw new Error('frame numbers are required for retrieval of instance frames');\r\n      }\r\n      console.log(\r\n        `retrieve frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`\r\n      );\r\n\r\n      const instance = DicomMetadataStore.getInstance(\r\n        options.studyInstanceUID,\r\n        options.seriesInstanceUID,\r\n        options.sopInstanceUID\r\n      );\r\n\r\n      const frameNumbers = Array.isArray(options.frameNumbers)\r\n        ? options.frameNumbers\r\n        : options.frameNumbers.split(',');\r\n\r\n      return frameNumbers.map(fr =>\r\n        Array.isArray(instance.PixelData) ? instance.PixelData[+fr - 1] : instance.PixelData\r\n      );\r\n    };\r\n  }\r\n\r\n  return client;\r\n}\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","import { inv, multiply } from 'mathjs';\r\n\r\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\r\n// We should likely just expose this there.\r\n\r\nexport default function coordinateFormatScoord3d2Geometry(coordinates, pyramid) {\r\n  let transform = false;\r\n  if (!Array.isArray(coordinates[0])) {\r\n    coordinates = [coordinates];\r\n    transform = true;\r\n  }\r\n  const metadata = pyramid[pyramid.length - 1];\r\n  const orientation = metadata.ImageOrientationSlide;\r\n  const spacing = _getPixelSpacing(metadata);\r\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\r\n  const offset = [\r\n    Number(origin.XOffsetInSlideCoordinateSystem),\r\n    Number(origin.YOffsetInSlideCoordinateSystem),\r\n  ];\r\n\r\n  coordinates = coordinates.map(c => {\r\n    const slideCoord = [c[0], c[1]];\r\n    const pixelCoord = mapSlideCoord2PixelCoord({\r\n      offset,\r\n      orientation,\r\n      spacing,\r\n      point: slideCoord,\r\n    });\r\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\r\n  });\r\n  if (transform) {\r\n    return coordinates[0];\r\n  }\r\n  return coordinates;\r\n}\r\n\r\nfunction _getPixelSpacing(metadata) {\r\n  if (metadata.PixelSpacing) {\r\n    return metadata.PixelSpacing;\r\n  }\r\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\r\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\r\n  return pixelMeasures.PixelSpacing;\r\n}\r\n\r\nfunction mapSlideCoord2PixelCoord(options) {\r\n  // X and Y Offset in Slide Coordinate System\r\n  if (!('offset' in options)) {\r\n    throw new Error('Option \"offset\" is required.');\r\n  }\r\n  if (!Array.isArray(options.offset)) {\r\n    throw new Error('Option \"offset\" must be an array.');\r\n  }\r\n  if (options.offset.length !== 2) {\r\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\r\n  }\r\n  const offset = options.offset;\r\n\r\n  // Image Orientation Slide with direction cosines for Row and Column direction\r\n  if (!('orientation' in options)) {\r\n    throw new Error('Option \"orientation\" is required.');\r\n  }\r\n  if (!Array.isArray(options.orientation)) {\r\n    throw new Error('Option \"orientation\" must be an array.');\r\n  }\r\n  if (options.orientation.length !== 6) {\r\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\r\n  }\r\n  const orientation = options.orientation;\r\n\r\n  // Pixel Spacing along the Row and Column direction\r\n  if (!('spacing' in options)) {\r\n    throw new Error('Option \"spacing\" is required.');\r\n  }\r\n  if (!Array.isArray(options.spacing)) {\r\n    throw new Error('Option \"spacing\" must be an array.');\r\n  }\r\n  if (options.spacing.length !== 2) {\r\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\r\n  }\r\n  const spacing = options.spacing;\r\n\r\n  // X and Y coordinate in the Slide Coordinate System\r\n  if (!('point' in options)) {\r\n    throw new Error('Option \"point\" is required.');\r\n  }\r\n  if (!Array.isArray(options.point)) {\r\n    throw new Error('Option \"point\" must be an array.');\r\n  }\r\n  if (options.point.length !== 2) {\r\n    throw new Error('Option \"point\" must be an array with 2 elements.');\r\n  }\r\n  const point = options.point;\r\n\r\n  const m = [\r\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\r\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\r\n    [0, 0, 1],\r\n  ];\r\n  const mInverted = inv(m);\r\n\r\n  const vSlide = [[point[0]], [point[1]], [1]];\r\n\r\n  const vImage = multiply(mInverted, vSlide);\r\n\r\n  const row = Number(vImage[1][0].toFixed(4));\r\n  const col = Number(vImage[0][0].toFixed(4));\r\n  return [col, row];\r\n}\r\n","const defaultFill = {\r\n  color: 'rgba(255,255,255,0.4)',\r\n};\r\n\r\nconst emptyFill = {\r\n  color: 'rgba(255,255,255,0.0)',\r\n};\r\n\r\nconst defaultStroke = {\r\n  color: 'rgb(0,255,0)',\r\n  width: 1.5,\r\n};\r\n\r\nconst activeStroke = {\r\n  color: 'rgb(255,255,0)',\r\n  width: 1.5,\r\n};\r\n\r\nconst defaultStyle = {\r\n  image: {\r\n    circle: {\r\n      fill: defaultFill,\r\n      stroke: activeStroke,\r\n      radius: 5,\r\n    },\r\n  },\r\n  fill: defaultFill,\r\n  stroke: activeStroke,\r\n};\r\n\r\nconst emptyStyle = {\r\n  image: {\r\n    circle: {\r\n      fill: emptyFill,\r\n      stroke: defaultStroke,\r\n      radius: 5,\r\n    },\r\n  },\r\n  fill: emptyFill,\r\n  stroke: defaultStroke,\r\n};\r\n\r\nconst styles = {\r\n  active: defaultStyle,\r\n  default: emptyStyle,\r\n};\r\n\r\nexport default styles;\r\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\r\nimport styles from '../utils/styles';\r\n\r\nimport { PubSubService } from '@ohif/core';\r\n\r\n// Events from the third-party viewer\r\nconst ApiEvents = {\r\n  /** Triggered when a ROI was added. */\r\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\r\n  /** Triggered when a ROI was modified. */\r\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\r\n  /** Triggered when a ROI was removed. */\r\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\r\n  /** Triggered when a ROI was drawn. */\r\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\r\n  /** Triggered when a ROI was selected. */\r\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\r\n  /** Triggered when a viewport move has started. */\r\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\r\n  /** Triggered when a viewport move has ended. */\r\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\r\n  /** Triggered when a loading of data has started. */\r\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\r\n  /** Triggered when a loading of data has ended. */\r\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\r\n  /** Triggered when an error occurs during loading of data. */\r\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\r\n  /* Triggered when the loading of an image tile has started. */\r\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\r\n  /* Triggered when the loading of an image tile has ended. */\r\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\r\n  /* Triggered when the error occurs during loading of an image tile. */\r\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\r\n};\r\n\r\nconst EVENTS = {\r\n  ADDED: 'added',\r\n  MODIFIED: 'modified',\r\n  REMOVED: 'removed',\r\n  UPDATED: 'updated',\r\n  SELECTED: 'selected',\r\n};\r\n\r\n/**\r\n * ViewerManager encapsulates the complexity of the third-party viewer and\r\n * expose only the features/behaviors that are relevant to the application\r\n */\r\nclass ViewerManager extends PubSubService {\r\n  constructor(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\r\n    super(EVENTS);\r\n    this.viewer = viewer;\r\n    this.viewportId = viewportId;\r\n    this.container = container;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.seriesInstanceUID = seriesInstanceUID;\r\n\r\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\r\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\r\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\r\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\r\n    this.contextMenuCallback = () => {};\r\n\r\n    // init symbols\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\r\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\r\n    this._map = symbols.find(p => p.description === 'map');\r\n    this._affine = symbols.find(p => p.description === 'affine');\r\n\r\n    this.registerEvents();\r\n    this.activateDefaultInteractions();\r\n  }\r\n\r\n  addContextMenuCallback(callback) {\r\n    this.contextMenuCallback = callback;\r\n  }\r\n\r\n  /**\r\n   * Destroys this managed viewer instance, clearing all the event handlers\r\n   */\r\n  destroy() {\r\n    this.unregisterEvents();\r\n  }\r\n\r\n  /**\r\n   * This is to overrides the _broadcastEvent method of PubSubService and always\r\n   * send the ROI graphic object and this managed viewer instance.\r\n   * Due to the way that PubSubService is written, the same name override of the\r\n   * function doesn't work.\r\n   *\r\n   * @param {String} key key Subscription key\r\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\r\n   */\r\n  publish(key, roiGraphic) {\r\n    this._broadcastEvent(key, {\r\n      roiGraphic,\r\n      managedViewer: this,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers all the relevant event handlers for the third-party API\r\n   */\r\n  registerEvents() {\r\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\r\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\r\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\r\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\r\n  }\r\n\r\n  /**\r\n   * Clears all the relevant event handlers for the third-party API\r\n   */\r\n  unregisterEvents() {\r\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\r\n    this.container.removeEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\r\n    this.container.removeEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\r\n    this.container.removeEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_ADDED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiAddedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.ADDED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_MODIFIED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiModifiedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.MODIFIED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_REMOVED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiRemovedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.REMOVED, roiGraphic);\r\n    this.publish(EVENTS.UPDATED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Handles the ROI_SELECTED event triggered by the third-party API\r\n   *\r\n   * @param {Event} event Event triggered by the third-party API\r\n   */\r\n  roiSelectedHandler(event) {\r\n    const roiGraphic = event.detail.payload;\r\n    this.publish(EVENTS.SELECTED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Run the given callback operation without triggering any events for this\r\n   * instance, so subscribers will not be affected\r\n   *\r\n   * @param {Function} callback Callback that will run sinlently\r\n   */\r\n  runSilently(callback) {\r\n    this.unregisterEvents();\r\n    callback();\r\n    this.registerEvents();\r\n  }\r\n\r\n  /**\r\n   * Removes all the ROI graphics from the third-party API\r\n   */\r\n  clearRoiGraphics() {\r\n    this.runSilently(() => this.viewer.removeAllROIs());\r\n  }\r\n\r\n  showROIs() {\r\n    this.viewer.showROIs();\r\n  }\r\n\r\n  hideROIs() {\r\n    this.viewer.hideROIs();\r\n  }\r\n\r\n  /**\r\n   * Adds the given ROI graphic into the third-party API\r\n   *\r\n   * @param {Object} roiGraphic ROI graphic object to be added\r\n   */\r\n  addRoiGraphic(roiGraphic) {\r\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\r\n  }\r\n\r\n  /**\r\n   * Adds the given ROI graphic into the third-party API, and also add a label.\r\n   * Used for importing from SR.\r\n   *\r\n   * @param {Object} roiGraphic ROI graphic object to be added.\r\n   * @param {String} label The label of the annotation.\r\n   */\r\n  addRoiGraphicWithLabel(roiGraphic, label) {\r\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evaluations\r\n    // to hide all other geometries, we are not going to use its label.\r\n    // if (label) {\r\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\r\n    //   roiGraphic.properties.label = label;\r\n    // }\r\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\r\n\r\n    this._broadcastEvent(EVENTS.ADDED, {\r\n      roiGraphic,\r\n      managedViewer: this,\r\n      label,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets ROI style\r\n   *\r\n   * @param {String} uid ROI graphic UID to be styled\r\n   * @param {object} styleOptions - Style options\r\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\r\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\r\n   * @param {number} styleOptions.stroke.width - Width of the outline\r\n   * @param {object} styleOptions.fill - Style options for body the geometry\r\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\r\n   * @param {object} styleOptions.image - Style options for image\r\n   */\r\n  setROIStyle(uid, styleOptions) {\r\n    this.viewer.setROIStyle(uid, styleOptions);\r\n  }\r\n\r\n  /**\r\n   * Removes the ROI graphic with the given UID from the third-party API\r\n   *\r\n   * @param {String} uid ROI graphic UID to be removed\r\n   */\r\n  removeRoiGraphic(uid) {\r\n    this.viewer.removeROI(uid);\r\n  }\r\n\r\n  /**\r\n   * Update properties of regions of interest.\r\n   *\r\n   * @param {object} roi - ROI to be updated\r\n   * @param {string} roi.uid - Unique identifier of the region of interest\r\n   * @param {object} roi.properties - ROI properties\r\n   * @returns {void}\r\n   */\r\n  updateROIProperties({ uid, properties }) {\r\n    this.viewer.updateROI({ uid, properties });\r\n  }\r\n\r\n  /**\r\n   * Toggles overview map\r\n   *\r\n   * @returns {void}\r\n   */\r\n  toggleOverviewMap() {\r\n    this.viewer.toggleOverviewMap();\r\n  }\r\n\r\n  /**\r\n   * Activates the viewer default interactions\r\n   * @returns {void}\r\n   */\r\n  activateDefaultInteractions() {\r\n    /** Disable browser's native context menu inside the canvas */\r\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\r\n      'contextmenu',\r\n      event => {\r\n        event.preventDefault();\r\n        // comment out when context menu for microscopy is enabled\r\n        // if (typeof this.contextMenuCallback === 'function') {\r\n        //   this.contextMenuCallback(event);\r\n        // }\r\n      },\r\n      false\r\n    );\r\n    const defaultInteractions = [\r\n      [\r\n        'dragPan',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['middle'],\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        'dragZoom',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['right'],\r\n          },\r\n        },\r\n      ],\r\n      ['modify', {}],\r\n    ];\r\n    this.activateInteractions(defaultInteractions);\r\n  }\r\n\r\n  /**\r\n   * Activates interactions\r\n   * @param {Array} interactions Interactions to be activated\r\n   * @returns {void}\r\n   */\r\n  activateInteractions(interactions) {\r\n    const interactionsMap = {\r\n      draw: activate => (activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction'),\r\n      modify: activate => (activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction'),\r\n      translate: activate =>\r\n        activate ? 'activateTranslateInteraction' : 'deactivateTranslateInteraction',\r\n      snap: activate => (activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction'),\r\n      dragPan: activate =>\r\n        activate ? 'activateDragPanInteraction' : 'deactivateDragPanInteraction',\r\n      dragZoom: activate =>\r\n        activate ? 'activateDragZoomInteraction' : 'deactivateDragZoomInteraction',\r\n      select: activate => (activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction'),\r\n    };\r\n\r\n    const availableInteractionsName = Object.keys(interactionsMap);\r\n    availableInteractionsName.forEach(availableInteractionName => {\r\n      const interaction = interactions.find(\r\n        interaction => interaction[0] === availableInteractionName\r\n      );\r\n      if (!interaction) {\r\n        const deactivateInteractionMethod = interactionsMap[availableInteractionName](false);\r\n        this.viewer[deactivateInteractionMethod]();\r\n      } else {\r\n        const [name, config] = interaction;\r\n        const activateInteractionMethod = interactionsMap[name](true);\r\n        this.viewer[activateInteractionMethod](config);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Accesses the internals of third-party API and returns the OpenLayers Map\r\n   *\r\n   * @returns {Object} OpenLayers Map component instance\r\n   */\r\n  _getMapView() {\r\n    const map = this._getMap();\r\n    return map.getView();\r\n  }\r\n\r\n  _getMap() {\r\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\r\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\r\n    window['map'] = this.viewer[_map];\r\n    return this.viewer[_map];\r\n  }\r\n\r\n  /**\r\n   * Returns the current state for the OpenLayers View\r\n   *\r\n   * @returns {Object} Current view state\r\n   */\r\n  getViewState() {\r\n    const view = this._getMapView();\r\n    return {\r\n      center: view.getCenter(),\r\n      resolution: view.getResolution(),\r\n      zoom: view.getZoom(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets the current state for the OpenLayers View\r\n   *\r\n   * @param {Object} viewState View state to be applied\r\n   */\r\n  setViewState(viewState) {\r\n    const view = this._getMapView();\r\n\r\n    view.setZoom(viewState.zoom);\r\n    view.setResolution(viewState.resolution);\r\n    view.setCenter(viewState.center);\r\n  }\r\n\r\n  setViewStateByExtent(roiAnnotation) {\r\n    const coordinates = roiAnnotation.getCoordinates();\r\n\r\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\r\n      this._jumpToPolyline(coordinates);\r\n    } else if (Array.isArray(coordinates[0])) {\r\n      this._jumpToPolygonOrEllipse(coordinates);\r\n    } else {\r\n      this._jumpToPoint(coordinates);\r\n    }\r\n  }\r\n\r\n  _jumpToPoint(coord) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n    const view = this._getMapView();\r\n\r\n    view.setCenter(mappedCoord);\r\n  }\r\n\r\n  _jumpToPolyline(coord) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n    const view = this._getMapView();\r\n\r\n    const x = mappedCoord[0];\r\n    const y = mappedCoord[1];\r\n\r\n    const xab = (x[0] + y[0]) / 2;\r\n    const yab = (x[1] + y[1]) / 2;\r\n    const midpoint = [xab, yab];\r\n\r\n    view.setCenter(midpoint);\r\n  }\r\n\r\n  _jumpToPolygonOrEllipse(coordinates) {\r\n    const pyramid = this.viewer[this._pyramid].metadata;\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    coordinates.forEach(coord => {\r\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\r\n\r\n      const [x, y] = mappedCoord;\r\n      if (x < minX) {\r\n        minX = x;\r\n      } else if (x > maxX) {\r\n        maxX = x;\r\n      }\r\n\r\n      if (y < minY) {\r\n        minY = y;\r\n      } else if (y > maxY) {\r\n        maxY = y;\r\n      }\r\n    });\r\n\r\n    const width = maxX - minX;\r\n    const height = maxY - minY;\r\n\r\n    minX -= 0.5 * width;\r\n    maxX += 0.5 * width;\r\n    minY -= 0.5 * height;\r\n    maxY += 0.5 * height;\r\n\r\n    const map = this._getMap();\r\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n\r\nexport default ViewerManager;\r\n","import areaOfPolygon from './areaOfPolygon';\r\n\r\nimport { PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  LABEL_UPDATED: 'labelUpdated',\r\n  GRAPHIC_UPDATED: 'graphicUpdated',\r\n  VIEW_UPDATED: 'viewUpdated',\r\n  REMOVED: 'removed',\r\n};\r\n\r\n/**\r\n * Represents a single annotation for the Microscopy Viewer\r\n */\r\nclass RoiAnnotation extends PubSubService {\r\n  constructor(roiGraphic, studyInstanceUID, seriesInstanceUID, label = '', viewState = null) {\r\n    super(EVENTS);\r\n    this.uid = roiGraphic.uid;\r\n    this.roiGraphic = roiGraphic;\r\n    this.studyInstanceUID = studyInstanceUID;\r\n    this.seriesInstanceUID = seriesInstanceUID;\r\n    this.label = label;\r\n    this.viewState = viewState;\r\n    this.setMeasurements(roiGraphic);\r\n  }\r\n\r\n  getScoord3d() {\r\n    const roiGraphic = this.roiGraphic;\r\n\r\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\r\n    const _scoord3d = roiGraphicSymbols.find(s => String(s) === 'Symbol(scoord3d)');\r\n\r\n    return roiGraphic[_scoord3d];\r\n  }\r\n\r\n  getCoordinates() {\r\n    const scoord3d = this.getScoord3d();\r\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\r\n\r\n    const _coordinates = scoord3dSymbols.find(s => String(s) === 'Symbol(coordinates)');\r\n\r\n    const coordinates = scoord3d[_coordinates];\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * When called will trigger the REMOVED event\r\n   */\r\n  destroy() {\r\n    this._broadcastEvent(EVENTS.REMOVED, this);\r\n  }\r\n\r\n  /**\r\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\r\n   * event\r\n   *\r\n   * @param {Object} roiGraphic\r\n   */\r\n  setRoiGraphic(roiGraphic) {\r\n    this.roiGraphic = roiGraphic;\r\n    this.setMeasurements();\r\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Update ROI measurement values based on its scoord3d coordinates.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  setMeasurements() {\r\n    const type = this.roiGraphic.scoord3d.graphicType;\r\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\r\n\r\n    switch (type) {\r\n      case 'ELLIPSE':\r\n        // This is a circle so only need one side\r\n        const point1 = coordinates[0];\r\n        const point2 = coordinates[1];\r\n\r\n        let xLength2 = point2[0] - point1[0];\r\n        let yLength2 = point2[1] - point1[1];\r\n\r\n        xLength2 *= xLength2;\r\n        yLength2 *= yLength2;\r\n\r\n        const length = Math.sqrt(xLength2 + yLength2);\r\n        const radius = length / 2;\r\n\r\n        const areaEllipse = Math.PI * radius * radius;\r\n        this._area = areaEllipse;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POLYGON':\r\n        const areaPolygon = areaOfPolygon(coordinates);\r\n        this._area = areaPolygon;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POINT':\r\n        this._area = undefined;\r\n        this._length = undefined;\r\n        break;\r\n\r\n      case 'POLYLINE':\r\n        let len = 0;\r\n        for (let i = 1; i < coordinates.length; i++) {\r\n          const p1 = coordinates[i - 1];\r\n          const p2 = coordinates[i];\r\n\r\n          let xLen = p2[0] - p1[0];\r\n          let yLen = p2[1] - p1[1];\r\n\r\n          xLen *= xLen;\r\n          yLen *= yLen;\r\n          len += Math.sqrt(xLen + yLen);\r\n        }\r\n\r\n        this._area = undefined;\r\n        this._length = len;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the OpenLayer Map's view state for the annotation and triggers the\r\n   * VIEW_UPDATED event\r\n   *\r\n   * @param {Object} viewState The new view state for the annotation\r\n   */\r\n  setViewState(viewState) {\r\n    this.viewState = viewState;\r\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\r\n   *\r\n   * @param {String} label New label for the annotation\r\n   */\r\n  setLabel(label, finding) {\r\n    this.label = label || (finding && finding.CodeMeaning);\r\n    this.finding = finding || {\r\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\r\n      CodeValue: label,\r\n      CodeMeaning: label,\r\n    };\r\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\r\n  }\r\n\r\n  /**\r\n   * Returns the geometry type of the annotation concatenated with the label\r\n   * defined for the annotation.\r\n   * Difference with getDetailedLabel() is that this will return empty string for empty\r\n   * label.\r\n   *\r\n   * @returns {String} Text with geometry type and label\r\n   */\r\n  getLabel() {\r\n    const label = this.label ? `${this.label}` : '';\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Returns the geometry type of the annotation concatenated with the label\r\n   * defined for the annotation\r\n   *\r\n   * @returns {String} Text with geometry type and label\r\n   */\r\n  getDetailedLabel() {\r\n    const label = this.label ? `${this.label}` : '(empty)';\r\n    return label;\r\n  }\r\n\r\n  getLength() {\r\n    return this._length;\r\n  }\r\n\r\n  getArea() {\r\n    return this._area;\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n\r\nexport default RoiAnnotation;\r\n","export default function areaOfPolygon(coordinates) {\r\n  // Shoelace algorithm.\r\n  const n = coordinates.length;\r\n  let area = 0.0;\r\n  let j = n - 1;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    area += (coordinates[j][0] + coordinates[i][0]) * (coordinates[j][1] - coordinates[i][1]);\r\n    j = i; // j is previous vertex to i\r\n  }\r\n\r\n  // Return absolute value of half the sum\r\n  // (The value is halved as we are summing up triangles, not rectangles).\r\n  return Math.abs(area / 2.0);\r\n}\r\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\r\nimport RoiAnnotation, { EVENTS as AnnotationEvents } from '../utils/RoiAnnotation';\r\nimport styles from '../utils/styles';\r\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\r\n\r\nconst EVENTS = {\r\n  ANNOTATION_UPDATED: 'annotationUpdated',\r\n  ANNOTATION_SELECTED: 'annotationSelected',\r\n  ANNOTATION_REMOVED: 'annotationRemoved',\r\n  RELABEL: 'relabel',\r\n  DELETE: 'delete',\r\n};\r\n\r\n/**\r\n * MicroscopyService is responsible to manage multiple third-party API's\r\n * microscopy viewers expose methods to manage the interaction with these\r\n * viewers and handle their ROI graphics to create, remove and modify the\r\n * ROI annotations relevant to the application\r\n */\r\nexport default class MicroscopyService extends PubSubService {\r\n  public static REGISTRATION = servicesManager => {\r\n    return {\r\n      name: 'microscopyService',\r\n      altName: 'MicroscopyService',\r\n      create: ({ configuration = {} }) => {\r\n        return new MicroscopyService(servicesManager);\r\n      },\r\n    };\r\n  };\r\n\r\n  servicesManager: any;\r\n\r\n  managedViewers = new Set();\r\n  roiUids = new Set();\r\n  annotations = {};\r\n  selectedAnnotation = null;\r\n  pendingFocus = false;\r\n\r\n  constructor(servicesManager) {\r\n    super(EVENTS);\r\n    this.servicesManager = servicesManager;\r\n    this._onRoiAdded = this._onRoiAdded.bind(this);\r\n    this._onRoiModified = this._onRoiModified.bind(this);\r\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\r\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\r\n    this._onRoiSelected = this._onRoiSelected.bind(this);\r\n    this.isROIsVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Clears all the annotations and managed viewers, setting the manager state\r\n   * to its initial state\r\n   */\r\n  clear() {\r\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\r\n    this.managedViewers.clear();\r\n    for (const key in this.annotations) {\r\n      delete this.annotations[key];\r\n    }\r\n\r\n    this.roiUids.clear();\r\n    this.selectedAnnotation = null;\r\n    this.pendingFocus = false;\r\n  }\r\n\r\n  clearAnnotations() {\r\n    Object.keys(this.annotations).forEach(uid => {\r\n      this.removeAnnotation(this.annotations[uid]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is added, creating the correspondent annotation\r\n   * with the current graphic and view state.\r\n   * Creates a subscription for label updating for the created annotation and\r\n   * publishes an ANNOTATION_UPDATED event when it happens.\r\n   * Also triggers the relabel process after the graphic is placed.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiAdded(data) {\r\n    const { roiGraphic, managedViewer, label } = data;\r\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\r\n    const viewState = managedViewer.getViewState();\r\n\r\n    const roiAnnotation = new RoiAnnotation(\r\n      roiGraphic,\r\n      studyInstanceUID,\r\n      seriesInstanceUID,\r\n      '',\r\n      viewState\r\n    );\r\n\r\n    this.roiUids.add(roiGraphic.uid);\r\n    this.annotations[roiGraphic.uid] = roiAnnotation;\r\n\r\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\r\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\r\n    });\r\n\r\n    if (label !== undefined) {\r\n      roiAnnotation.setLabel(label);\r\n    } else {\r\n      const onRelabel = item =>\r\n        managedViewer.updateROIProperties({\r\n          uid: roiGraphic.uid,\r\n          properties: { label: item.label, finding: item.finding },\r\n        });\r\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is modified, updating the correspondent\r\n   * annotation with the current graphic and view state.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The modified ROI graphic object\r\n   */\r\n  _onRoiModified(data) {\r\n    const { roiGraphic, managedViewer } = data;\r\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\r\n    if (!roiAnnotation) {\r\n      return;\r\n    }\r\n    roiAnnotation.setRoiGraphic(roiGraphic);\r\n    roiAnnotation.setViewState(managedViewer.getViewState());\r\n  }\r\n\r\n  /**\r\n   * Observes when a ROI graphic is removed, reflecting the removal in the\r\n   * annotations' state.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The removed ROI graphic object\r\n   */\r\n  _onRoiRemoved(data) {\r\n    const { roiGraphic } = data;\r\n    this.roiUids.delete(roiGraphic.uid);\r\n    this.annotations[roiGraphic.uid].destroy();\r\n    delete this.annotations[roiGraphic.uid];\r\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\r\n  }\r\n\r\n  /**\r\n   * Observes any changes on ROI graphics and synchronize all the managed\r\n   * viewers to reflect those changes.\r\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiUpdated(data) {\r\n    const { roiGraphic, managedViewer } = data;\r\n    this.synchronizeViewers(managedViewer);\r\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\r\n  }\r\n\r\n  /**\r\n   * Observes when an ROI is selected.\r\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\r\n   *\r\n   * @param {Object} data The published data\r\n   * @param {Object} data.roiGraphic The added ROI graphic object\r\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\r\n   */\r\n  _onRoiSelected(data) {\r\n    const { roiGraphic } = data;\r\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\r\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\r\n      if (this.selectedAnnotation) {\r\n        this.clearSelection();\r\n      }\r\n      this.selectedAnnotation = selectedAnnotation;\r\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the subscriptions for the managed viewer being added\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being added\r\n   */\r\n  _addManagedViewerSubscriptions(managedViewer) {\r\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.ADDED,\r\n      this._onRoiAdded\r\n    );\r\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.MODIFIED,\r\n      this._onRoiModified\r\n    );\r\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.REMOVED,\r\n      this._onRoiRemoved\r\n    );\r\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.UPDATED,\r\n      this._onRoiUpdated\r\n    );\r\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(\r\n      ViewerEvents.UPDATED,\r\n      this._onRoiSelected\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes the subscriptions for the managed viewer being removed\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being removed\r\n   */\r\n  _removeManagedViewerSubscriptions(managedViewer) {\r\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\r\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\r\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\r\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\r\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\r\n\r\n    managedViewer._roiAddedSubscription = null;\r\n    managedViewer._roiModifiedSubscription = null;\r\n    managedViewer._roiRemovedSubscription = null;\r\n    managedViewer._roiUpdatedSubscription = null;\r\n    managedViewer._roiSelectedSubscription = null;\r\n  }\r\n\r\n  /**\r\n   * Returns the managed viewers that are displaying the image with the given\r\n   * study and series UIDs\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   * @param {String} seriesInstanceUID UID for the series\r\n   *\r\n   * @returns {Array} The managed viewers for the given series UID\r\n   */\r\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\r\n    const filter = managedViewer =>\r\n      managedViewer.studyInstanceUID === studyInstanceUID &&\r\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\r\n    return Array.from(this.managedViewers).filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the managed viewers that are displaying the image with the given\r\n   * study UID\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   *\r\n   * @returns {Array} The managed viewers for the given series UID\r\n   */\r\n  getManagedViewersForStudy(studyInstanceUID) {\r\n    const filter = managedViewer => managedViewer.studyInstanceUID === studyInstanceUID;\r\n    return Array.from(this.managedViewers).filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Restores the created annotations for the viewer being added\r\n   *\r\n   * @param {ViewerManager} managedViewer The viewer being added\r\n   */\r\n  _restoreAnnotations(managedViewer) {\r\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\r\n    const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\r\n    annotations.forEach(roiAnnotation => {\r\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a managed viewer instance for the given third-party API's viewer.\r\n   * Restores existing annotations for the given study/series.\r\n   * Adds event subscriptions for the viewer being added.\r\n   * Focuses the selected annotation when the viewer is being loaded into the\r\n   * active viewport.\r\n   *\r\n   * @param viewer - Third-party viewer API's object to be managed\r\n   * @param viewportId - The viewport Id where the viewer will be loaded\r\n   * @param container - The DOM element where it will be rendered\r\n   * @param studyInstanceUID - The study UID of the loaded image\r\n   * @param seriesInstanceUID - The series UID of the loaded image\r\n   * @param displaySets - All displaySets related to the same StudyInstanceUID\r\n   *\r\n   * @returns {ViewerManager} managed viewer\r\n   */\r\n  addViewer(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\r\n    const managedViewer = new ViewerManager(\r\n      viewer,\r\n      viewportId,\r\n      container,\r\n      studyInstanceUID,\r\n      seriesInstanceUID\r\n    );\r\n\r\n    this._restoreAnnotations(managedViewer);\r\n    viewer._manager = managedViewer;\r\n    this.managedViewers.add(managedViewer);\r\n\r\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\r\n    this._addManagedViewerSubscriptions(managedViewer);\r\n\r\n    if (this.pendingFocus) {\r\n      this.pendingFocus = false;\r\n      this.focusAnnotation(this.selectedAnnotation, viewportId);\r\n    }\r\n\r\n    return managedViewer;\r\n  }\r\n\r\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\r\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\r\n\r\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\r\n\r\n    if (!studyMetadata) {\r\n      return;\r\n    }\r\n\r\n    let derivedDisplaySets = FrameOfReferenceUID\r\n      ? displaySets.filter(\r\n          ds =>\r\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\r\n            // sometimes each depth instance has the different FrameOfReferenceID\r\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\r\n        )\r\n      : [];\r\n\r\n    if (!derivedDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\r\n\r\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\r\n      // Don't auto load\r\n      return;\r\n    }\r\n\r\n    // find most recent and load it.\r\n    let recentDateTime = 0;\r\n    let recentDisplaySet = derivedDisplaySets[0];\r\n\r\n    derivedDisplaySets.forEach(ds => {\r\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\r\n      if (dateTime > recentDateTime) {\r\n        recentDateTime = dateTime;\r\n        recentDisplaySet = ds;\r\n      }\r\n    });\r\n\r\n    recentDisplaySet.isLoading = true;\r\n\r\n    recentDisplaySet.load(smDisplaySet);\r\n  }\r\n\r\n  /**\r\n   * Removes the given third-party viewer API's object from the managed viewers\r\n   * and clears all its event subscriptions\r\n   *\r\n   * @param {Object} viewer Third-party viewer API's object to be removed\r\n   */\r\n  removeViewer(viewer) {\r\n    const managedViewer = viewer._manager;\r\n\r\n    this._removeManagedViewerSubscriptions(managedViewer);\r\n    managedViewer.destroy();\r\n    this.managedViewers.delete(managedViewer);\r\n  }\r\n\r\n  /**\r\n   * Toggle ROIs visibility\r\n   */\r\n  toggleROIsVisibility() {\r\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\r\n    this.isROIsVisible = !this.isROIsVisible;\r\n  }\r\n\r\n  /**\r\n   * Hide all ROIs\r\n   */\r\n  hideROIs() {\r\n    this.managedViewers.forEach(mv => mv.hideROIs());\r\n  }\r\n\r\n  /** Show all ROIs */\r\n  showROIs() {\r\n    this.managedViewers.forEach(mv => mv.showROIs());\r\n  }\r\n\r\n  /**\r\n   * Returns a RoiAnnotation instance for the given ROI UID\r\n   *\r\n   * @param {String} uid UID of the annotation\r\n   *\r\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\r\n   */\r\n  getAnnotation(uid) {\r\n    return this.annotations[uid];\r\n  }\r\n\r\n  /**\r\n   * Returns all the RoiAnnotation instances being managed\r\n   *\r\n   * @returns {Array} All RoiAnnotation instances\r\n   */\r\n  getAnnotations() {\r\n    const annotations = [];\r\n    Object.keys(this.annotations).forEach(uid => {\r\n      annotations.push(this.getAnnotation(uid));\r\n    });\r\n    return annotations;\r\n  }\r\n\r\n  /**\r\n   * Returns the RoiAnnotation instances registered with the given study UID\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   */\r\n  getAnnotationsForStudy(studyInstanceUID) {\r\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\r\n    return this.getAnnotations().filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the RoiAnnotation instances registered with the given study and\r\n   * series UIDs\r\n   *\r\n   * @param {String} studyInstanceUID UID for the study\r\n   * @param {String} seriesInstanceUID UID for the series\r\n   */\r\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\r\n    const filter = annotation =>\r\n      annotation.studyInstanceUID === studyInstanceUID &&\r\n      annotation.seriesInstanceUID === seriesInstanceUID;\r\n    return this.getAnnotations().filter(filter);\r\n  }\r\n\r\n  /**\r\n   * Returns the selected RoiAnnotation instance or null if none is selected\r\n   *\r\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\r\n   */\r\n  getSelectedAnnotation() {\r\n    return this.selectedAnnotation;\r\n  }\r\n\r\n  /**\r\n   * Clear current RoiAnnotation selection\r\n   */\r\n  clearSelection() {\r\n    if (this.selectedAnnotation) {\r\n      this.setROIStyle(this.selectedAnnotation.uid, {\r\n        stroke: {\r\n          color: '#00ff00',\r\n        },\r\n      });\r\n    }\r\n    this.selectedAnnotation = null;\r\n  }\r\n\r\n  /**\r\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\r\n   * event to notify all the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\r\n   */\r\n  selectAnnotation(roiAnnotation) {\r\n    if (this.selectedAnnotation) {\r\n      this.clearSelection();\r\n    }\r\n\r\n    this.selectedAnnotation = roiAnnotation;\r\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\r\n    this.setROIStyle(roiAnnotation.uid, styles.active);\r\n  }\r\n\r\n  /**\r\n   * Toggles overview map\r\n   *\r\n   * @param viewportId The active viewport index\r\n   * @returns {void}\r\n   */\r\n  toggleOverviewMap(viewportId) {\r\n    const managedViewers = Array.from(this.managedViewers);\r\n    const managedViewer = managedViewers.find(mv => mv.viewportId === viewportId);\r\n    if (managedViewer) {\r\n      managedViewer.toggleOverviewMap();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\r\n   * its removal on all third-party viewers being managed\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\r\n   */\r\n  removeAnnotation(roiAnnotation) {\r\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\r\n    const filter = managedViewer =>\r\n      managedViewer.studyInstanceUID === studyInstanceUID &&\r\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\r\n\r\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\r\n\r\n    managedViewers.forEach(managedViewer => managedViewer.removeRoiGraphic(uid));\r\n\r\n    if (this.annotations[uid]) {\r\n      this.roiUids.delete(uid);\r\n      this.annotations[uid].destroy();\r\n      delete this.annotations[uid];\r\n\r\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\r\n   * state of the managed viewer with the given viewport index.\r\n   * If the image for the given annotation is not yet loaded into the viewport,\r\n   * it will set a pendingFocus flag to true in order to perform the focus when\r\n   * the managed viewer instance is created.\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\r\n   * @param {string} viewportId Index of the viewport to focus\r\n   */\r\n  focusAnnotation(roiAnnotation, viewportId) {\r\n    const filter = mv => mv.viewportId === viewportId;\r\n    const managedViewer = Array.from(this.managedViewers).find(filter);\r\n    if (managedViewer) {\r\n      managedViewer.setViewStateByExtent(roiAnnotation);\r\n    } else {\r\n      this.pendingFocus = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Synchronize the ROI graphics for all the managed viewers that has the same\r\n   * series UID of the given managed viewer\r\n   *\r\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\r\n   */\r\n  synchronizeViewers(baseManagedViewer) {\r\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\r\n    const managedViewers = this._getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID);\r\n\r\n    // Prevent infinite loops arrising from updates.\r\n    managedViewers.forEach(managedViewer => this._removeManagedViewerSubscriptions(managedViewer));\r\n\r\n    managedViewers.forEach(managedViewer => {\r\n      if (managedViewer === baseManagedViewer) {\r\n        return;\r\n      }\r\n\r\n      const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\r\n      managedViewer.clearRoiGraphics();\r\n      annotations.forEach(roiAnnotation => {\r\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\r\n      });\r\n    });\r\n\r\n    managedViewers.forEach(managedViewer => this._addManagedViewerSubscriptions(managedViewer));\r\n  }\r\n\r\n  /**\r\n   * Activates interactions across all the viewers being managed\r\n   *\r\n   * @param {Array} interactions interactions\r\n   */\r\n  activateInteractions(interactions) {\r\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\r\n    this.activeInteractions = interactions;\r\n  }\r\n\r\n  getActiveInteractions() {\r\n    return this.activeInteractions;\r\n  }\r\n\r\n  /**\r\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\r\n   * publishing the RELABEL event to notify the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\r\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\r\n   */\r\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\r\n    if (!onRelabel) {\r\n      onRelabel = ({ label }) =>\r\n        this.managedViewers.forEach(mv =>\r\n          mv.updateROIProperties({\r\n            uid: roiAnnotation.uid,\r\n            properties: { label },\r\n          })\r\n        );\r\n    }\r\n\r\n    this._broadcastEvent(EVENTS.RELABEL, {\r\n      roiAnnotation,\r\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\r\n      successCallback: onRelabel,\r\n      newAnnotation,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Triggers the deletion process for the given RoiAnnotation instance, by\r\n   * publishing the DELETE event to notify the subscribers\r\n   *\r\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\r\n   */\r\n  triggerDelete(roiAnnotation) {\r\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\r\n  }\r\n\r\n  /**\r\n   * Set ROI style for all managed viewers\r\n   *\r\n   * @param {string} uid The ROI uid that will be styled\r\n   * @param {object} styleOptions - Style options\r\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\r\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\r\n   * @param {number} styleOptions.stroke.width - Width of the outline\r\n   * @param {object*} styleOptions.fill - Style options for body the geometry\r\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\r\n   * @param {object*} styleOptions.image - Style options for image\r\n   */\r\n  setROIStyle(uid, styleOptions) {\r\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\r\n  }\r\n\r\n  /**\r\n   * Get all managed viewers\r\n   *\r\n   * @returns {Array} managedViewers\r\n   */\r\n  getAllManagedViewers() {\r\n    return Array.from(this.managedViewers);\r\n  }\r\n}\r\n\r\nexport { EVENTS };\r\n","import React from 'react';\r\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\r\n\r\n/**\r\n *\r\n * @param {*} data\r\n * @param {*} data.text\r\n * @param {*} data.label\r\n * @param {*} event\r\n * @param {func} callback\r\n * @param {*} isArrowAnnotateInputDialog\r\n */\r\nexport default function callInputDialog({\r\n  uiDialogService,\r\n  title = 'Annotation',\r\n  defaultValue = '',\r\n  callback = (value: string, action: string) => {},\r\n}) {\r\n  const dialogId = 'microscopy-input-dialog';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.value, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: title,\r\n        value: { value: defaultValue },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.defaultValue}\r\n              onChange={event => {\r\n                event.persist();\r\n                setValue(value => ({ ...value, value: event.target.value }));\r\n              }}\r\n              onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  onSubmitHandler({ value, action: { id: 'save' } });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ExtensionManager, CommandsManager, DicomMetadataStore } from '@ohif/core';\r\nimport { MeasurementTable } from '@ohif/ui';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\r\nimport dcmjs from 'dcmjs';\r\nimport callInputDialog from '../../utils/callInputDialog';\r\nimport constructSR from '../../utils/constructSR';\r\nimport { saveByteArray } from '../../utils/saveByteArray';\r\n\r\nlet saving = false;\r\nconst { datasetToBuffer } = dcmjs.data;\r\n\r\nconst formatArea = area => {\r\n  let mult = 1;\r\n  let unit = 'mm';\r\n  if (area > 1000000) {\r\n    unit = 'm';\r\n    mult = 1 / 1000000;\r\n  } else if (area < 1) {\r\n    unit = 'μm';\r\n    mult = 1000000;\r\n  }\r\n  return `${(area * mult).toFixed(2)} ${unit}²`;\r\n};\r\n\r\nconst formatLength = (length, unit) => {\r\n  let mult = 1;\r\n  if (unit == 'km' || (!unit && length > 1000000)) {\r\n    unit = 'km';\r\n    mult = 1 / 1000000;\r\n  } else if (unit == 'm' || (!unit && length > 1000)) {\r\n    unit = 'm';\r\n    mult = 1 / 1000;\r\n  } else if (unit == 'μm' || (!unit && length < 1)) {\r\n    unit = 'μm';\r\n    mult = 1000;\r\n  } else if (unit && unit != 'mm') {\r\n    throw new Error(`Unknown length unit ${unit}`);\r\n  } else {\r\n    unit = 'mm';\r\n  }\r\n  return `${(length * mult).toFixed(2)} ${unit}`;\r\n};\r\n\r\ninterface IMicroscopyPanelProps extends WithTranslation {\r\n  viewports: PropTypes.array;\r\n  activeViewportId: PropTypes.string;\r\n\r\n  //\r\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\r\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\r\n\r\n  //\r\n  servicesManager: AppTypes.ServicesManager;\r\n  extensionManager: ExtensionManager;\r\n  commandsManager: CommandsManager;\r\n}\r\n\r\n/**\r\n * Microscopy Measurements Panel Component\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\r\n  const { microscopyService } = props.servicesManager.services;\r\n\r\n  const [studyInstanceUID, setStudyInstanceUID] = useState(null as string | null);\r\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\r\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\r\n  const { servicesManager, extensionManager } = props;\r\n\r\n  const { uiDialogService, displaySetService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const viewport = props.viewports.get(props.activeViewportId);\r\n    if (viewport?.displaySetInstanceUIDs[0]) {\r\n      const displaySet = displaySetService.getDisplaySetByUID(viewport.displaySetInstanceUIDs[0]);\r\n      if (displaySet) {\r\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\r\n      }\r\n    }\r\n  }, [props.viewports, props.activeViewportId]);\r\n\r\n  useEffect(() => {\r\n    const onAnnotationUpdated = () => {\r\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n      setRoiAnnotations(roiAnnotations);\r\n    };\r\n\r\n    const onAnnotationSelected = () => {\r\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\r\n      setSelectedAnnotation(selectedAnnotation);\r\n    };\r\n\r\n    const onAnnotationRemoved = () => {\r\n      onAnnotationUpdated();\r\n    };\r\n\r\n    const { unsubscribe: unsubscribeAnnotationUpdated } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_UPDATED,\r\n      onAnnotationUpdated\r\n    );\r\n    const { unsubscribe: unsubscribeAnnotationSelected } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_SELECTED,\r\n      onAnnotationSelected\r\n    );\r\n    const { unsubscribe: unsubscribeAnnotationRemoved } = microscopyService.subscribe(\r\n      MicroscopyEvents.ANNOTATION_REMOVED,\r\n      onAnnotationRemoved\r\n    );\r\n    onAnnotationUpdated();\r\n    onAnnotationSelected();\r\n\r\n    // on unload unsubscribe from events\r\n    return () => {\r\n      unsubscribeAnnotationUpdated();\r\n      unsubscribeAnnotationSelected();\r\n      unsubscribeAnnotationRemoved();\r\n    };\r\n  }, [studyInstanceUID]);\r\n\r\n  /**\r\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\r\n   * new series' description, and continue to save.\r\n   *\r\n   * @returns\r\n   */\r\n  const promptSave = () => {\r\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n\r\n    if (!annotations || saving) {\r\n      return;\r\n    }\r\n\r\n    callInputDialog({\r\n      uiDialogService,\r\n      title: 'Enter description of the Series',\r\n      defaultValue: '',\r\n      callback: (value: string, action: string) => {\r\n        switch (action) {\r\n          case 'save': {\r\n            saveFunction(value);\r\n          }\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  const getAllDisplaySets = (studyMetadata: any) => {\r\n    let allDisplaySets = [] as any[];\r\n    studyMetadata.series.forEach((series: any) => {\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\r\n      allDisplaySets = allDisplaySets.concat(displaySets);\r\n    });\r\n    return allDisplaySets;\r\n  };\r\n\r\n  /**\r\n   * Save annotations as a series\r\n   *\r\n   * @param SeriesDescription - series description\r\n   * @returns\r\n   */\r\n  const saveFunction = async (SeriesDescription: string) => {\r\n    const dataSource = extensionManager.getActiveDataSource()[0];\r\n    const { onSaveComplete } = props;\r\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\r\n\r\n    saving = true;\r\n\r\n    // There is only one viewer possible for one study,\r\n    // Since once study contains multiple resolution levels (series) of one whole\r\n    // Slide image.\r\n\r\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\r\n    const displaySets = getAllDisplaySets(studyMetadata);\r\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\r\n\r\n    // Get the next available series number after 4700.\r\n\r\n    const dsWithMetadata = displaySets.filter(\r\n      ds => ds.metadata && ds.metadata.SeriesNumber && typeof ds.metadata.SeriesNumber === 'number'\r\n    );\r\n\r\n    // Generate next series number\r\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\r\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\r\n    const SeriesNumber = maxSeriesNumber + 1;\r\n\r\n    const { instance: metadata } = smDisplaySet;\r\n\r\n    // construct SR dataset\r\n    const dataset = constructSR(metadata, { SeriesDescription, SeriesNumber }, annotations);\r\n\r\n    // Save in DICOM format\r\n    try {\r\n      if (dataSource) {\r\n        if (dataSource.wadoRoot == 'saveDicom') {\r\n          // download as DICOM file\r\n          const part10Buffer = datasetToBuffer(dataset);\r\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\r\n        } else {\r\n          // Save into Web Data source\r\n          const { StudyInstanceUID } = dataset;\r\n          await dataSource.store.dicom(dataset);\r\n          if (StudyInstanceUID) {\r\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\r\n          }\r\n        }\r\n        onSaveComplete({\r\n          title: 'SR Saved',\r\n          message: 'Measurements downloaded successfully',\r\n          type: 'success',\r\n        });\r\n      } else {\r\n        console.error('Server unspecified');\r\n      }\r\n    } catch (error) {\r\n      onSaveComplete({\r\n        title: 'SR Save Failed',\r\n        message: error.message || error.toString(),\r\n        type: 'error',\r\n      });\r\n    } finally {\r\n      saving = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * On clicking \"Reject annotations\" button\r\n   */\r\n  const onDeleteCurrentSRHandler = async () => {\r\n    try {\r\n      const activeViewport = props.viewports[props.activeViewportId];\r\n      const { StudyInstanceUID } = activeViewport;\r\n\r\n      // TODO: studies?\r\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n\r\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort((ds1: any, ds2: any) => {\r\n        const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\r\n        const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\r\n        return dateTime1 > dateTime2;\r\n      })[study.derivedDisplaySets.length - 1];\r\n\r\n      // TODO: use dataSource.reject.dicom()\r\n      // await DICOMSR.rejectMeasurements(\r\n      //   study.wadoRoot,\r\n      //   lastDerivedDisplaySet.StudyInstanceUID,\r\n      //   lastDerivedDisplaySet.SeriesInstanceUID\r\n      // );\r\n      props.onRejectComplete({\r\n        title: 'Report rejected',\r\n        message: 'Latest report rejected successfully',\r\n        type: 'success',\r\n      });\r\n    } catch (error) {\r\n      props.onRejectComplete({\r\n        title: 'Failed to reject report',\r\n        message: error.message,\r\n        type: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler for clicking event of an annotation item.\r\n   *\r\n   * @param param0\r\n   */\r\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\r\n    const roiAnnotation = microscopyService.getAnnotation(uid);\r\n    microscopyService.selectAnnotation(roiAnnotation);\r\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportId);\r\n  };\r\n\r\n  /**\r\n   * Handler for \"Edit\" action of an annotation item\r\n   * @param param0\r\n   */\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\r\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\r\n  };\r\n\r\n  const onMeasurementDeleteHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\r\n    const roiAnnotation = microscopyService.getAnnotation(uid);\r\n    microscopyService.removeAnnotation(roiAnnotation);\r\n  };\r\n\r\n  // Convert ROI annotations managed by microscopyService into our\r\n  // own format for display\r\n  const data = roiAnnotations.map((roiAnnotation, index) => {\r\n    const label = roiAnnotation.getDetailedLabel();\r\n    const area = roiAnnotation.getArea();\r\n    const length = roiAnnotation.getLength();\r\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\r\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\r\n\r\n    // other events\r\n    const { uid } = roiAnnotation;\r\n\r\n    // display text\r\n    const displayText = [];\r\n\r\n    if (area !== undefined) {\r\n      displayText.push(formatArea(area));\r\n    } else if (length !== undefined) {\r\n      displayText.push(\r\n        shortAxisLength\r\n          ? `${formatLength(length, 'μm')} x ${formatLength(shortAxisLength, 'μm')}`\r\n          : `${formatLength(length, 'μm')}`\r\n      );\r\n    }\r\n\r\n    // convert to measurementItem format compatible with <MeasurementTable /> component\r\n    return {\r\n      uid,\r\n      index,\r\n      label,\r\n      isActive: isSelected,\r\n      displayText,\r\n      roiAnnotation,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\r\n        data-cy={'measurements-panel'}\r\n      >\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          servicesManager={props.servicesManager}\r\n          data={data}\r\n          onClick={onMeasurementItemClickHandler}\r\n          onEdit={onMeasurementItemEditHandler}\r\n          onDelete={onMeasurementDeleteHandler}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(MicroscopyPanel);\r\n\r\nexport default connectedMicroscopyPanel;\r\n","import OHIF from '@ohif/core';\r\n\r\nconst { utils } = OHIF;\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\r\n};\r\n\r\nconst SOPClassHandlerId =\r\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler';\r\n\r\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const instance = instances[0];\r\n\r\n  let singleFrameInstance = instance;\r\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\r\n  for (const instanceI of instances) {\r\n    const framesI = +instanceI.NumberOfFrames || 1;\r\n    if (framesI < currentFrames) {\r\n      singleFrameInstance = instanceI;\r\n      currentFrames = framesI;\r\n    }\r\n  }\r\n  let imageIdForThumbnail = null;\r\n  if (singleFrameInstance) {\r\n    if (currentFrames == 1) {\r\n      // Not all DICOM server implementations support thumbnail service,\r\n      // So if we have a single-frame image, we will prefer it.\r\n      imageIdForThumbnail = singleFrameInstance.imageId;\r\n    }\r\n    if (!imageIdForThumbnail) {\r\n      // use the thumbnail service provided by DICOM server\r\n      const dataSource = extensionManager.getActiveDataSource()[0];\r\n      imageIdForThumbnail = dataSource.getImageIdsForInstance({\r\n        instance: singleFrameInstance,\r\n        thumbnail: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  const {\r\n    FrameOfReferenceUID,\r\n    SeriesDescription,\r\n    ContentDate,\r\n    ContentTime,\r\n    SeriesNumber,\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SOPClassUID,\r\n  } = instance;\r\n\r\n  instances = instances.map(inst => {\r\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\r\n    // When the Microscopy file was built by certain tool from multiple image files,\r\n    // each instance's FrameOfReferenceUID is sometimes different.\r\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\r\n    // the case is so often, so let's override this value manually here.\r\n    //\r\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\r\n\r\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\r\n\r\n    return inst;\r\n  });\r\n\r\n  const othersFrameOfReferenceUID = instances\r\n    .filter(v => v)\r\n    .map(inst => inst.FrameOfReferenceUID)\r\n    .filter((value, index, array) => array.indexOf(value) === index);\r\n  if (othersFrameOfReferenceUID.length > 1) {\r\n    console.warn(\r\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\r\n      othersFrameOfReferenceUID\r\n    );\r\n  }\r\n\r\n  const displaySet = {\r\n    plugin: 'microscopy',\r\n    Modality: 'SM',\r\n    altImageText: 'Microscopy',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    FrameOfReferenceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\r\n    // Map ContentDate/Time to SeriesTime for series list sorting.\r\n    SeriesDate: ContentDate,\r\n    SeriesTime: ContentTime,\r\n    SeriesNumber,\r\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\r\n    instance,\r\n    numImageFrames: 0,\r\n    numInstances: 1,\r\n    imageIdForThumbnail, // thumbnail image\r\n    others: instances, // all other level instances in the image Pyramid\r\n    othersFrameOfReferenceUID,\r\n  };\r\n\r\n  return [displaySet];\r\n}\r\n\r\nexport default function getDicomMicroscopySopClassHandler({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return {\r\n    name: 'DicomMicroscopySopClassHandler',\r\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\r\n    getDisplaySetsFromSeries,\r\n  };\r\n}\r\n","const DCM_CODE_VALUES = {\r\n  IMAGING_MEASUREMENTS: '126010',\r\n  MEASUREMENT_GROUP: '125007',\r\n  IMAGE_REGION: '111030',\r\n  FINDING: '121071',\r\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\r\n  LENGTH: '410668003',\r\n  AREA: '42798000',\r\n  SHORT_AXIS: 'G-A186',\r\n  LONG_AXIS: 'G-A185',\r\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\r\n};\r\n\r\nexport default DCM_CODE_VALUES;\r\n","export default function toArray(item) {\r\n  return Array.isArray(item) ? item : [item];\r\n}\r\n","import dcmjs from 'dcmjs';\r\n\r\nimport DCM_CODE_VALUES from './dcmCodeValues';\r\nimport toArray from './toArray';\r\nimport DicomMicroscopyViewport from '../DicomMicroscopyViewport';\r\n\r\nconst MeasurementReport = dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\r\n\r\n// Define as async so that it returns a promise, expected by the ViewportGrid\r\nexport default async function loadSR(\r\n  microscopyService,\r\n  microscopySRDisplaySet,\r\n  referencedDisplaySet\r\n) {\r\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\r\n\r\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\r\n\r\n  const managedViewers = microscopyService.getManagedViewersForStudy(StudyInstanceUID);\r\n\r\n  if (!managedViewers || !managedViewers.length) {\r\n    return;\r\n  }\r\n\r\n  microscopySRDisplaySet.isLoaded = true;\r\n\r\n  const { rois, labels } = await _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID);\r\n\r\n  const managedViewer = managedViewers[0];\r\n\r\n  for (let i = 0; i < rois.length; i++) {\r\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\r\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\r\n    // evaluation.\r\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evaluations\r\n    // to hide all other geometries, we are going to manually remove that\r\n    // evaluation item.\r\n    const roi = rois[i];\r\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\r\n    const _properties = roiSymbols.find(s => s.description === 'properties');\r\n    const properties = roi[_properties];\r\n    properties['evaluations'] = [];\r\n\r\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\r\n  }\r\n}\r\n\r\nasync function _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID) {\r\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\r\n  const tools = Object.getOwnPropertyNames(toolState);\r\n  // Does a dynamic import to prevent webpack from rebuilding the library\r\n  await import(/* webpackIgnore: true */ DicomMicroscopyViewport.getImportPath());\r\n  const DICOMMicroscopyViewer = (window as any).dicomMicroscopyViewer;\r\n\r\n  const measurementGroupContentItems = _getMeasurementGroups(naturalizedDataset);\r\n\r\n  const rois = [];\r\n  const labels = [];\r\n\r\n  tools.forEach(t => {\r\n    const toolSpecificToolState = toolState[t];\r\n    let scoord3d;\r\n\r\n    const capsToolType = t.toUpperCase();\r\n\r\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(mg => {\r\n      const imageRegionContentItem = toArray(mg.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\r\n      );\r\n\r\n      return imageRegionContentItem.GraphicType === capsToolType;\r\n    });\r\n\r\n    toolSpecificToolState.forEach((coordinates, index) => {\r\n      const properties = {};\r\n\r\n      const options = {\r\n        coordinates,\r\n        frameOfReferenceUID: FrameOfReferenceUID,\r\n      };\r\n\r\n      if (t === 'Polygon') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\r\n      } else if (t === 'Polyline') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\r\n      } else if (t === 'Point') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\r\n      } else if (t === 'Ellipse') {\r\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\r\n      } else {\r\n        throw new Error('Unsupported tool type');\r\n      }\r\n\r\n      const measurementGroup = measurementGroupContentItemsForTool[index];\r\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\r\n      );\r\n\r\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\r\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\r\n      );\r\n\r\n      /**\r\n       * Extract presentation state from tracking identifier.\r\n       * Currently is stored in SR but should be stored in its tags.\r\n       */\r\n      if (trackingGroup) {\r\n        const regExp = /\\(([^)]+)\\)/;\r\n        const matches = regExp.exec(trackingGroup.TextValue);\r\n        if (matches && matches[1]) {\r\n          properties.presentationState = JSON.parse(matches[1]);\r\n          properties.marker = properties.presentationState.marker;\r\n        }\r\n      }\r\n\r\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\r\n        [\r\n          DCM_CODE_VALUES.LENGTH,\r\n          DCM_CODE_VALUES.AREA,\r\n          DCM_CODE_VALUES.SHORT_AXIS,\r\n          DCM_CODE_VALUES.LONG_AXIS,\r\n          DCM_CODE_VALUES.ELLIPSE_AREA,\r\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\r\n      );\r\n\r\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\r\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(ci.ConceptNameCodeSequence.CodeValue)\r\n      );\r\n\r\n      /**\r\n       * TODO: Resolve bug in DCMJS.\r\n       * ConceptNameCodeSequence should be a sequence with only one item.\r\n       */\r\n      evaluations = evaluations.map(evaluation => {\r\n        const e = { ...evaluation };\r\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\r\n        return e;\r\n      });\r\n\r\n      /**\r\n       * TODO: Resolve bug in DCMJS.\r\n       * ConceptNameCodeSequence should be a sequence with only one item.\r\n       */\r\n      measurements = measurements.map(measurement => {\r\n        const m = { ...measurement };\r\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\r\n        return m;\r\n      });\r\n\r\n      if (measurements && measurements.length) {\r\n        properties.measurements = measurements;\r\n        console.log('[SR] retrieving measurements...', measurements);\r\n      }\r\n\r\n      if (evaluations && evaluations.length) {\r\n        properties.evaluations = evaluations;\r\n        console.log('[SR] retrieving evaluations...', evaluations);\r\n      }\r\n\r\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\r\n      rois.push(roi);\r\n\r\n      if (findingGroup) {\r\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\r\n      } else {\r\n        labels.push('');\r\n      }\r\n    });\r\n  });\r\n\r\n  return { rois, labels };\r\n}\r\n\r\nfunction _getMeasurementGroups(naturalizedDataset) {\r\n  const { ContentSequence } = naturalizedDataset;\r\n\r\n  const imagingMeasurementsContentItem = ContentSequence.find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\r\n  );\r\n\r\n  const measurementGroupContentItems = toArray(\r\n    imagingMeasurementsContentItem.ContentSequence\r\n  ).filter(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\r\n\r\n  return measurementGroupContentItems;\r\n}\r\n","import OHIF, { DicomMetadataStore } from '@ohif/core';\r\nimport loadSR from './utils/loadSR';\r\nimport toArray from './utils/toArray';\r\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\r\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\r\n\r\nconst { utils } = OHIF;\r\n\r\nconst SOP_CLASS_UIDS = {\r\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\r\n};\r\n\r\nconst SOPClassHandlerId =\r\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\r\n\r\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\r\n  const { ContentSequence } = naturalizedDataset;\r\n\r\n  const imagingMeasurementsContentItem = ContentSequence.find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\r\n  );\r\n\r\n  const firstMeasurementGroupContentItem = toArray(\r\n    imagingMeasurementsContentItem.ContentSequence\r\n  ).find(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\r\n\r\n  const imageRegionContentItem = toArray(firstMeasurementGroupContentItem.ContentSequence).find(\r\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\r\n  );\r\n\r\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\r\n}\r\n\r\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\r\n  // If the series has no instances, stop here\r\n  if (!instances || !instances.length) {\r\n    throw new Error('No instances were provided');\r\n  }\r\n\r\n  const { displaySetService, microscopyService } = servicesManager.services;\r\n\r\n  const instance = instances[0];\r\n\r\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\r\n  // TODO -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\r\n  const naturalizedDataset = DicomMetadataStore.getSeries(\r\n    instance.StudyInstanceUID,\r\n    instance.SeriesInstanceUID\r\n  ).instances[0];\r\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(naturalizedDataset);\r\n\r\n  const {\r\n    FrameOfReferenceUID,\r\n    SeriesDescription,\r\n    ContentDate,\r\n    ContentTime,\r\n    SeriesNumber,\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SOPClassUID,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    plugin: 'microscopy',\r\n    Modality: 'SR',\r\n    altImageText: 'Microscopy SR',\r\n    displaySetInstanceUID: utils.guid(),\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    ReferencedFrameOfReferenceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    SeriesDescription,\r\n    // Map the content date/time to the series date/time, these are only used for filtering.\r\n    SeriesDate: ContentDate,\r\n    SeriesTime: ContentTime,\r\n    SeriesNumber,\r\n    instance,\r\n    metadata: naturalizedDataset,\r\n    isDerived: true,\r\n    isLoading: false,\r\n    isLoaded: false,\r\n    loadError: false,\r\n  };\r\n\r\n  displaySet.load = function (referencedDisplaySet) {\r\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(error => {\r\n      displaySet.isLoaded = false;\r\n      displaySet.loadError = true;\r\n      throw new Error(error);\r\n    });\r\n  };\r\n\r\n  displaySet.getSourceDisplaySet = function () {\r\n    let allDisplaySets = [];\r\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n    studyMetadata.series.forEach(series => {\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\r\n      allDisplaySets = allDisplaySets.concat(displaySets);\r\n    });\r\n    return getSourceDisplaySet(allDisplaySets, displaySet);\r\n  };\r\n\r\n  return [displaySet];\r\n}\r\n\r\nexport default function getDicomMicroscopySRSopClassHandler({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return {\r\n    name: 'DicomMicroscopySRSopClassHandler',\r\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\r\n    getDisplaySetsFromSeries,\r\n  };\r\n}\r\n","/**\r\n * Get referenced SM displaySet from SR displaySet\r\n *\r\n * @param {*} allDisplaySets\r\n * @param {*} microscopySRDisplaySet\r\n * @returns\r\n */\r\nexport default function getSourceDisplaySet(allDisplaySets, microscopySRDisplaySet) {\r\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\r\n\r\n  const otherDisplaySets = allDisplaySets.filter(\r\n    ds => ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\r\n  );\r\n  const referencedDisplaySet = otherDisplaySets.find(\r\n    displaySet =>\r\n      displaySet.Modality === 'SM' &&\r\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\r\n        // sometimes each depth instance has the different FrameOfReferenceID\r\n        displaySet.othersFrameOfReferenceUID.includes(ReferencedFrameOfReferenceUID))\r\n  );\r\n\r\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\r\n    console.warn(\r\n      'No display set with FrameOfReferenceUID',\r\n      ReferencedFrameOfReferenceUID,\r\n      'single series, assuming data error, defaulting to only series.'\r\n    );\r\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\r\n  }\r\n\r\n  return referencedDisplaySet;\r\n}\r\n","import { id } from './id';\r\nimport React, { Suspense, useMemo } from 'react';\r\nimport getPanelModule from './getPanelModule';\r\nimport getCommandsModule from './getCommandsModule';\r\nimport { Types } from '@ohif/core';\r\n\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport getDicomMicroscopySopClassHandler from './DicomMicroscopySopClassHandler';\r\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\r\nimport MicroscopyService from './services/MicroscopyService';\r\nimport { useResizeDetector } from 'react-resize-detector';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import('./DicomMicroscopyViewport');\r\n});\r\n\r\nconst MicroscopyViewport = props => {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension: Types.Extensions.Extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  async preRegistration({ servicesManager }) {\r\n    servicesManager.registerService(MicroscopyService.REGISTRATION(servicesManager));\r\n  },\r\n\r\n  /**\r\n   * ViewportModule should provide a list of viewports that will be available in OHIF\r\n   * for Modes to consume and use in the viewports. Each viewport is defined by\r\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\r\n   * that is provided by the Cornerstone extension in OHIF.\r\n   */\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    /**\r\n     *\r\n     * @param props {*}\r\n     * @param props.displaySets\r\n     * @param props.viewportId\r\n     * @param props.viewportLabel\r\n     * @param props.dataSource\r\n     * @param props.viewportOptions\r\n     * @param props.displaySetOptions\r\n     * @returns\r\n     */\r\n    const ExtendedMicroscopyViewport = props => {\r\n      const { viewportOptions } = props;\r\n\r\n      const [viewportGrid, viewportGridService] = useViewportGrid();\r\n      const { activeViewportId } = viewportGrid;\r\n\r\n      const displaySetsKey = useMemo(() => {\r\n        return props.displaySets.map(ds => ds.displaySetInstanceUID).join('-');\r\n      }, [props.displaySets]);\r\n\r\n      const onResize = debounce(() => {\r\n        const { microscopyService } = servicesManager.services;\r\n        const managedViewer = microscopyService.getAllManagedViewers();\r\n\r\n        if (managedViewer && managedViewer.length > 0) {\r\n          managedViewer[0].viewer.resize();\r\n        }\r\n      }, 100);\r\n\r\n      const { ref: resizeRef } = useResizeDetector({\r\n        onResize,\r\n        handleHeight: true,\r\n        handleWidth: true,\r\n      });\r\n\r\n      return (\r\n        <MicroscopyViewport\r\n          key={displaySetsKey}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          activeViewportId={activeViewportId}\r\n          setViewportActive={(viewportId: string) => {\r\n            viewportGridService.setActiveViewportId(viewportId);\r\n          }}\r\n          viewportData={viewportOptions}\r\n          resizeRef={resizeRef}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [\r\n      {\r\n        name: 'microscopy-dicom',\r\n        component: ExtendedMicroscopyViewport,\r\n      },\r\n    ];\r\n  },\r\n\r\n  getToolbarModule({ servicesManager }) {\r\n    return [\r\n      {\r\n        name: 'evaluate.microscopyTool',\r\n        evaluate: ({ button }) => {\r\n          const { microscopyService } = servicesManager.services;\r\n\r\n          const activeInteractions = microscopyService.getActiveInteractions();\r\n          if (!activeInteractions) {\r\n            return false;\r\n          }\r\n          const isPrimaryActive = activeInteractions.find(interactions => {\r\n            const sameMouseButton = interactions[1].bindings.mouseButtons.includes('left');\r\n\r\n            if (!sameMouseButton) {\r\n              return false;\r\n            }\r\n\r\n            const notDraw = interactions[0] !== 'draw';\r\n\r\n            // there seems to be a custom logic for draw tool for some reason\r\n            return notDraw\r\n              ? interactions[0] === button.id\r\n              : interactions[1].geometryType === button.id;\r\n          });\r\n\r\n          return {\r\n            disabled: false,\r\n            className: isPrimaryActive\r\n              ? '!text-black bg-primary-light'\r\n              : '!text-common-bright hover:!bg-primary-dark hover:!text-primary-light',\r\n            // Todo: isActive right now is used for nested buttons where the primary\r\n            // button needs to be fully rounded (vs partial rounded) when active\r\n            // otherwise it does not have any other use\r\n            isActive: isPrimaryActive,\r\n          };\r\n        },\r\n      },\r\n    ];\r\n  },\r\n\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule({ servicesManager, commandsManager, extensionManager }) {\r\n    return [\r\n      getDicomMicroscopySopClassHandler({\r\n        servicesManager,\r\n        extensionManager,\r\n      }),\r\n      getDicomMicroscopySRSopClassHandler({\r\n        servicesManager,\r\n        extensionManager,\r\n      }),\r\n    ];\r\n  },\r\n\r\n  getPanelModule,\r\n\r\n  getCommandsModule,\r\n};\r\n\r\nexport default extension;\r\n","import React from 'react';\r\nimport { CommandsManager, ExtensionManager } from '@ohif/core';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nexport default function getPanelModule({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}: {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  commandsManager: CommandsManager;\r\n  extensionManager: ExtensionManager;\r\n}) {\r\n  const wrappedMeasurementPanel = () => {\r\n    const [{ activeViewportId, viewports }] = useViewportGrid();\r\n\r\n    return (\r\n      <MicroscopyPanel\r\n        viewports={viewports}\r\n        activeViewportId={activeViewportId}\r\n        onSaveComplete={() => {}}\r\n        onRejectComplete={() => {}}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'measure',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      secondaryLabel: 'Measurements',\r\n      component: wrappedMeasurementPanel,\r\n    },\r\n  ];\r\n}\r\n","import { CommandsManager, ExtensionManager } from '@ohif/core';\r\nimport styles from './utils/styles';\r\nimport callInputDialog from './utils/callInputDialog';\r\n\r\nexport default function getCommandsModule({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n}: {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  commandsManager: CommandsManager;\r\n  extensionManager: ExtensionManager;\r\n}) {\r\n  const { viewportGridService, uiDialogService, microscopyService } = servicesManager.services;\r\n\r\n  const actions = {\r\n    // Measurement tool commands:\r\n    deleteMeasurement: ({ uid }) => {\r\n      if (uid) {\r\n        const roiAnnotation = microscopyService.getAnnotation(uid);\r\n        if (roiAnnotation) {\r\n          microscopyService.removeAnnotation(roiAnnotation);\r\n        }\r\n      }\r\n    },\r\n\r\n    setLabel: ({ uid }) => {\r\n      const roiAnnotation = microscopyService.getAnnotation(uid);\r\n\r\n      callInputDialog({\r\n        uiDialogService,\r\n        defaultValue: '',\r\n        callback: (value: string, action: string) => {\r\n          switch (action) {\r\n            case 'save': {\r\n              roiAnnotation.setLabel(value);\r\n              microscopyService.triggerRelabel(roiAnnotation);\r\n            }\r\n          }\r\n        },\r\n      });\r\n    },\r\n\r\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\r\n      const dragPanOnMiddle = [\r\n        'dragPan',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['middle'],\r\n          },\r\n        },\r\n      ];\r\n      const dragZoomOnRight = [\r\n        'dragZoom',\r\n        {\r\n          bindings: {\r\n            mouseButtons: ['right'],\r\n          },\r\n        },\r\n      ];\r\n      if (\r\n        ['line', 'box', 'circle', 'point', 'polygon', 'freehandpolygon', 'freehandline'].indexOf(\r\n          toolName\r\n        ) >= 0\r\n      ) {\r\n        // TODO: read from configuration\r\n        const options = {\r\n          geometryType: toolName,\r\n          vertexEnabled: true,\r\n          styleOptions: styles.default,\r\n          bindings: {\r\n            mouseButtons: ['left'],\r\n          },\r\n        } as any;\r\n        if ('line' === toolName) {\r\n          options.minPoints = 2;\r\n          options.maxPoints = 2;\r\n        } else if ('point' === toolName) {\r\n          delete options.styleOptions;\r\n          delete options.vertexEnabled;\r\n        }\r\n\r\n        microscopyService.activateInteractions([\r\n          ['draw', options],\r\n          dragPanOnMiddle,\r\n          dragZoomOnRight,\r\n        ]);\r\n      } else if (toolName == 'dragPan') {\r\n        microscopyService.activateInteractions([\r\n          [\r\n            'dragPan',\r\n            {\r\n              bindings: {\r\n                mouseButtons: ['left', 'middle'],\r\n              },\r\n            },\r\n          ],\r\n          dragZoomOnRight,\r\n        ]);\r\n      } else {\r\n        microscopyService.activateInteractions([\r\n          [\r\n            toolName,\r\n            {\r\n              bindings: {\r\n                mouseButtons: ['left'],\r\n              },\r\n            },\r\n          ],\r\n          dragPanOnMiddle,\r\n          dragZoomOnRight,\r\n        ]);\r\n      }\r\n    },\r\n    toggleOverlays: () => {\r\n      // overlay\r\n      const overlays = document.getElementsByClassName('microscopy-viewport-overlay');\r\n      let onoff = false; // true if this will toggle on\r\n      for (let i = 0; i < overlays.length; i++) {\r\n        if (i === 0) {\r\n          onoff = overlays.item(0).classList.contains('hidden');\r\n        }\r\n        overlays.item(i).classList.toggle('hidden');\r\n      }\r\n\r\n      // overview\r\n      const { activeViewportId } = viewportGridService.getState();\r\n      microscopyService.toggleOverviewMap(activeViewportId);\r\n    },\r\n    toggleAnnotations: () => {\r\n      microscopyService.toggleROIsVisibility();\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    deleteMeasurement: {\r\n      commandFn: actions.deleteMeasurement,\r\n    },\r\n    setLabel: {\r\n      commandFn: actions.setLabel,\r\n    },\r\n    setToolActive: {\r\n      commandFn: actions.setToolActive,\r\n    },\r\n    toggleOverlays: {\r\n      commandFn: actions.toggleOverlays,\r\n    },\r\n    toggleAnnotations: {\r\n      commandFn: actions.toggleAnnotations,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'MICROSCOPY',\r\n  };\r\n}\r\n"],"names":["props","list","itemGenerator","map","item","generator","Error","generateFromConfig","topLeft","topRight","bottomLeft","bottomRight","overlay","React","length","className","classnames","listComponentGenerator","isPrimitive","v","Array","isArray","vrNumerics","cleanDenaturalizedDataset","obj","options","o","Object","keys","forEach","key","Value","vr","BulkDataURI","dicomWebUtils","dataSourceConfig","window","location","protocol","startsWith","replace","includes","entry","DicomMicroscopyViewport","Component","constructor","super","state","error","isLoaded","microscopyService","viewer","managedViewer","container","overlayElement","setViewportActiveHandler","setViewportActive","viewportId","activeViewportId","this","servicesManager","services","getImportPath","getNearbyROI","event","autoselect","symbols","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","feature","getClosestFeatureToCoordinate","getEventCoordinate","roiAnnotation","_getROIFromFeature","metadata","selectAnnotation","installOpenLayersRenderer","displaySet","clearAnnotations","smDisplaySet","Modality","getSourceDisplaySet","console","log","async","import","DicomMicroscopyViewer","metadataUtils","dicomMicroscopyViewer","microscopyViewer","VolumeImageViewer","client","extensionManager","config","dataSources","ds","sourceName","activeDataSource","userAuthenticationService","wadoRoot","staticWado","singlepart","configuration","wadoConfig","url","headers","getAuthorizationHeader","errorInterceptor","errorHandler","getHTTPErrorHandler","StaticWadoClient","wadoURL","retrieveInstanceFrames","frameNumbers","toString","sopInstanceUID","instance","DicomMetadataStore","getInstance","studyInstanceUID","seriesInstanceUID","split","fr","PixelData","getDicomWebClient","volumeImages","m","ImageType","inst","dcmjs","DicomMetaDictionary","denaturalizeDataset","StudyInstanceUID","SeriesInstanceUID","dataSource","getConfig","image","VLWholeSlideMicroscopyImage","imageFlavor","push","retrieveRendered","controls","current","addViewportOverlay","element","coordinates","navigate","render","addViewer","addContextMenuCallback","loadViewer","others","load","componentDidMount","displaySets","viewportOptions","then","setState","componentDidUpdate","prevProps","prevState","snapshot","referencedDisplaySet","componentWillUnmount","removeViewer","style","width","height","firstInstance","onClick","display","ref","position","imageId","ViewportOverlay","JSON","stringify","resizeRef","LoadingIndicatorProgress","propTypes","viewportData","PropTypes","viewportLabel","displaySetOptions","commandsManager","id","packageJson","coordinateFormatScoord3d2Geometry","pyramid","transform","orientation","ImageOrientationSlide","spacing","PixelSpacing","functionalGroup","SharedFunctionalGroupsSequence","PixelMeasuresSequence","_getPixelSpacing","origin","TotalPixelMatrixOriginSequence","offset","Number","XOffsetInSlideCoordinateSystem","YOffsetInSlideCoordinateSystem","c","slideCoord","pixelCoord","point","mInverted","inv","vSlide","vImage","multiply","row","toFixed","mapSlideCoord2PixelCoord","defaultFill","color","emptyFill","defaultStroke","activeStroke","active","circle","fill","stroke","radius","default","ApiEvents","ROI_ADDED","ROI_MODIFIED","ROI_REMOVED","ROI_DRAWN","ROI_SELECTED","MOVE_STARTED","MOVE_ENDED","LOADING_STARTED","LOADING_ENDED","LOADING_ERROR","FRAME_LOADING_STARTED","FRAME_LOADING_ENDED","FRAME_LOADING_ERROR","EVENTS","ADDED","MODIFIED","REMOVED","UPDATED","SELECTED","ViewerManager","PubSubService","onRoiAdded","roiAddedHandler","bind","onRoiModified","roiModifiedHandler","onRoiRemoved","roiRemovedHandler","onRoiSelected","roiSelectedHandler","contextMenuCallback","registerEvents","activateDefaultInteractions","callback","destroy","unregisterEvents","publish","roiGraphic","_broadcastEvent","addEventListener","removeEventListener","detail","payload","runSilently","clearRoiGraphics","removeAllROIs","showROIs","hideROIs","addRoiGraphic","addROI","styles","addRoiGraphicWithLabel","label","setROIStyle","uid","styleOptions","removeRoiGraphic","removeROI","updateROIProperties","properties","updateROI","toggleOverviewMap","document","querySelector","preventDefault","activateInteractions","bindings","mouseButtons","interactions","interactionsMap","draw","activate","modify","translate","snap","dragPan","dragZoom","select","availableInteractionName","interaction","name","activateInteractionMethod","deactivateInteractionMethod","_getMapView","_getMap","getView","s","String","getViewState","view","center","getCenter","resolution","getResolution","zoom","getZoom","setViewState","viewState","setZoom","setResolution","setCenter","setViewStateByExtent","getCoordinates","_jumpToPolyline","_jumpToPolygonOrEllipse","_jumpToPoint","coord","mappedCoord","x","y","midpoint","minX","Infinity","maxX","minY","maxY","fit","getSize","LABEL_UPDATED","GRAPHIC_UPDATED","VIEW_UPDATED","RoiAnnotation","setMeasurements","getScoord3d","scoord3d","setRoiGraphic","type","graphicType","graphicData","point1","point2","xLength2","yLength2","Math","sqrt","areaEllipse","PI","_area","_length","undefined","areaPolygon","n","area","j","i","abs","areaOfPolygon","len","p1","p2","xLen","yLen","setLabel","finding","CodeMeaning","CodingSchemeDesignator","CodeValue","getLabel","getDetailedLabel","getLength","getArea","ANNOTATION_UPDATED","ANNOTATION_SELECTED","ANNOTATION_REMOVED","RELABEL","DELETE","MicroscopyService","managedViewers","Set","roiUids","annotations","selectedAnnotation","pendingFocus","_onRoiAdded","_onRoiModified","_onRoiRemoved","_onRoiUpdated","_onRoiSelected","isROIsVisible","clear","removeAnnotation","data","add","subscribe","AnnotationEvents","onRelabel","triggerRelabel","getAnnotation","delete","synchronizeViewers","getSelectedAnnotation","clearSelection","_addManagedViewerSubscriptions","_roiAddedSubscription","ViewerEvents","_roiModifiedSubscription","_roiRemovedSubscription","_roiUpdatedSubscription","_roiSelectedSubscription","_removeManagedViewerSubscriptions","unsubscribe","_getManagedViewersForSeries","from","filter","getManagedViewersForStudy","_restoreAnnotations","getAnnotationsForSeries","_manager","focusAnnotation","_potentiallyLoadSR","studyMetadata","getStudy","FrameOfReferenceUID","othersFrameOfReferenceUID","derivedDisplaySets","ReferencedFrameOfReferenceUID","some","recentDateTime","recentDisplaySet","dateTime","SeriesDate","SeriesTime","isLoading","toggleROIsVisibility","mv","getAnnotations","getAnnotationsForStudy","a","annotation","baseManagedViewer","activeInteractions","getActiveInteractions","newAnnotation","deleteCallback","successCallback","triggerDelete","getAllManagedViewers","_MicroscopyService","REGISTRATION","altName","create","callInputDialog","uiDialogService","title","defaultValue","value","action","dialogId","onSubmitHandler","dismiss","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","Input","labelClassName","autoFocus","onChange","persist","target","onKeyPress","datasetToBuffer","formatLength","unit","mult","connectedMicroscopyPanel","withTranslation","setStudyInstanceUID","useState","roiAnnotations","setRoiAnnotations","setSelectedAnnotation","displaySetService","useEffect","viewport","viewports","get","displaySetInstanceUIDs","getDisplaySetByUID","onAnnotationUpdated","onAnnotationSelected","unsubscribeAnnotationUpdated","MicroscopyEvents","unsubscribeAnnotationSelected","unsubscribeAnnotationRemoved","onAnnotationRemoved","index","shortAxisLength","isSelected","displayText","formatArea","isActive","MeasurementTable","onMeasurementItemClickHandler","onEdit","onMeasurementItemEditHandler","runCommand","onDelete","onMeasurementDeleteHandler","utils","OHIF","SOP_CLASS_UIDS","getDicomMicroscopySopClassHandler","sopClassUids","getDisplaySetsFromSeries","instances","singleFrameInstance","currentFrames","NumberOfFrames","instanceI","framesI","imageIdForThumbnail","getActiveDataSource","getImageIdsForInstance","thumbnail","SeriesDescription","ContentDate","ContentTime","SeriesNumber","SOPInstanceUID","SOPClassUID","array","indexOf","warn","plugin","altImageText","displaySetInstanceUID","guid","SOPClassHandlerId","numImageFrames","numInstances","_getDisplaySetsFromSeries","IMAGING_MEASUREMENTS","MEASUREMENT_GROUP","IMAGE_REGION","FINDING","TRACKING_UNIQUE_IDENTIFIER","LENGTH","AREA","SHORT_AXIS","LONG_AXIS","ELLIPSE_AREA","toArray","MeasurementReport","DICOMMicroscopyViewer","loadSR","microscopySRDisplaySet","naturalizedDataset","rois","labels","toolState","generateToolState","tools","getOwnPropertyNames","measurementGroupContentItems","ContentSequence","ci","ConceptNameCodeSequence","DCM_CODE_VALUES","_getMeasurementGroups","t","toolSpecificToolState","capsToolType","toUpperCase","measurementGroupContentItemsForTool","mg","GraphicType","frameOfReferenceUID","Polygon","Polyline","Point","Ellipse","measurementGroup","findingGroup","trackingGroup","matches","exec","TextValue","presentationState","parse","marker","measurements","evaluations","evaluation","e","measurement","roi","ROI","ConceptCodeSequence","_getROIsFromToolState","getSeries","firstMeasurementGroupContentItem","_getReferencedFrameOfReferenceUID","isDerived","loadError","catch","allDisplaySets","series","getDisplaySetsForSeries","concat","otherDisplaySets","getDicomMicroscopySRSopClassHandler","MicroscopyViewport","Suspense","fallback","extension","preRegistration","registerService","getViewportModule","component","viewportGrid","viewportGridService","useViewportGrid","displaySetsKey","useMemo","join","onResize","debounce","resize","useResizeDetector","handleHeight","handleWidth","_extends","setActiveViewportId","getToolbarModule","evaluate","button","isPrimaryActive","geometryType","disabled","getSopClassHandlerModule","getPanelModule","iconName","iconLabel","secondaryLabel","wrappedMeasurementPanel","MicroscopyPanel","onSaveComplete","onRejectComplete","getCommandsModule","deleteMeasurement","setToolActive","toolName","toolGroupId","dragPanOnMiddle","dragZoomOnRight","vertexEnabled","minPoints","maxPoints","toggleOverlays","overlays","getElementsByClassName","onoff","classList","contains","toggle","getState","toggleAnnotations","definitions","commandFn","defaultContext"],"sourceRoot":""}