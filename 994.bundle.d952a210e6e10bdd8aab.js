"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[994,757],{26196:(e,t,n)=>{n.d(t,{Z:()=>C,I:()=>U});var s=n(43001),r=n(3827),a=n.n(r),i=n(261),o=n(44530),c=n(49023);const d=-1,u=0,l=1,S=2,p=3,g=4,I=5,m={id:"measurementTracking",initial:"idle",context:{activeViewportId:null,trackedStudy:"",trackedSeries:[],ignoredSeries:[],prevTrackedStudy:"",prevTrackedSeries:[],prevIgnoredSeries:[],ignoredSRSeriesForHydration:[],isDirty:!1},states:{off:{type:"final"},labellingOnly:{on:{TRACK_SERIES:[{target:"promptLabelAnnotation",actions:["setPreviousState"]},{target:"off"}]}},idle:{entry:"clearContext",on:{TRACK_SERIES:[{target:"promptLabelAnnotation",cond:"isLabelOnMeasure",actions:["setPreviousState"]},{target:"promptBeginTracking",actions:["setPreviousState"]}],SET_TRACKED_SERIES:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries","setIsDirtyToClean"]}],PROMPT_HYDRATE_SR:{target:"promptHydrateStructuredReport",cond:"hasNotIgnoredSRSeriesForHydration"},RESTORE_PROMPT_HYDRATE_SR:"promptHydrateStructuredReport",HYDRATE_SR:"hydrateStructuredReport",UPDATE_ACTIVE_VIEWPORT_ID:{actions:(0,i.f0)({activeViewportId:(e,t)=>t.activeViewportId})}}},promptBeginTracking:{invoke:{src:"promptBeginTracking",onDone:[{target:"tracking",actions:["setTrackedStudyAndSeries","setIsDirty"],cond:"shouldSetStudyAndSeries"},{target:"labellingOnly",cond:"isLabelOnMeasureAndShouldKillMachine"},{target:"off",cond:"shouldKillMachine"},{target:"idle"}],onError:{target:"idle"}}},tracking:{on:{TRACK_SERIES:[{target:"promptLabelAnnotation",cond:"isLabelOnMeasure",actions:["setPreviousState"]},{target:"promptTrackNewStudy",cond:"isNewStudy"},{target:"promptTrackNewSeries",cond:"isNewSeries"}],UNTRACK_SERIES:[{target:"tracking",actions:["removeTrackedSeries","setIsDirty"],cond:"hasRemainingTrackedSeries"},{target:"idle"}],SET_TRACKED_SERIES:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries"]}],SAVE_REPORT:"promptSaveReport",SET_DIRTY:[{target:"tracking",actions:["setIsDirty"],cond:"shouldSetDirty"},{target:"tracking"}]}},promptTrackNewSeries:{invoke:{src:"promptTrackNewSeries",onDone:[{target:"tracking",actions:["addTrackedSeries","setIsDirty"],cond:"shouldAddSeries"},{target:"tracking",actions:["discardPreviouslyTrackedMeasurements","setTrackedStudyAndSeries","setIsDirty"],cond:"shouldSetStudyAndSeries"},{target:"promptSaveReport",cond:"shouldPromptSaveReport"},{target:"tracking"}],onError:{target:"idle"}}},promptTrackNewStudy:{invoke:{src:"promptTrackNewStudy",onDone:[{target:"tracking",actions:["discardPreviouslyTrackedMeasurements","setTrackedStudyAndSeries","setIsDirty"],cond:"shouldSetStudyAndSeries"},{target:"tracking",actions:["ignoreSeries"],cond:"shouldAddIgnoredSeries"},{target:"promptSaveReport",cond:"shouldPromptSaveReport"},{target:"tracking"}],onError:{target:"idle"}}},promptSaveReport:{invoke:{src:"promptSaveReport",onDone:[{target:"idle",actions:["clearAllMeasurements","showStructuredReportDisplaySetInActiveViewport"],cond:"shouldSaveAndContinueWithSameReport"},{target:"tracking",actions:["discardPreviouslyTrackedMeasurements","setTrackedStudyAndSeries"],cond:"shouldSaveAndStartNewReport"},{target:"tracking"}],onError:{target:"idle"}}},promptHydrateStructuredReport:{invoke:{src:"promptHydrateStructuredReport",onDone:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries","jumpToSameImageInActiveViewport","setIsDirtyToClean"],cond:"shouldHydrateStructuredReport"},{target:"idle",actions:["ignoreHydrationForSRSeries"],cond:"shouldIgnoreHydrationForSR"}],onError:{target:"idle"}}},hydrateStructuredReport:{invoke:{src:"hydrateStructuredReport",onDone:[{target:"tracking",actions:["setTrackedStudyAndMultipleSeries","jumpToSameImageInActiveViewport","setIsDirtyToClean"]}],onError:{target:"idle"}}},promptLabelAnnotation:{invoke:{src:"promptLabelAnnotation",onDone:[{target:"labellingOnly",cond:"wasLabellingOnly"},{target:"promptBeginTracking",cond:"wasIdle"},{target:"promptTrackNewStudy",cond:"wasTrackingAndIsNewStudy"},{target:"promptTrackNewSeries",cond:"wasTrackingAndIsNewSeries"},{target:"tracking",cond:"wasTracking"},{target:"off"}]}}},strict:!0},y={services:{},actions:{discardPreviouslyTrackedMeasurements:(e,t)=>{console.log("discardPreviouslyTrackedMeasurements: not implemented")},clearAllMeasurements:(e,t)=>{console.log("clearAllMeasurements: not implemented")},jumpToFirstMeasurementInActiveViewport:(e,t)=>{console.warn("jumpToFirstMeasurementInActiveViewport: not implemented")},showStructuredReportDisplaySetInActiveViewport:(e,t)=>{console.warn("showStructuredReportDisplaySetInActiveViewport: not implemented")},clearContext:(0,i.f0)({trackedStudy:"",trackedSeries:[],ignoredSeries:[],prevTrackedStudy:"",prevTrackedSeries:[],prevIgnoredSeries:[]}),setTrackedStudyAndSeries:(0,i.f0)(((e,t)=>({prevTrackedStudy:e.trackedStudy,prevTrackedSeries:e.trackedSeries.slice(),prevIgnoredSeries:e.ignoredSeries.slice(),trackedStudy:t.data.StudyInstanceUID,trackedSeries:[t.data.SeriesInstanceUID],ignoredSeries:[]}))),setTrackedStudyAndMultipleSeries:(0,i.f0)(((e,t)=>{const n=t.StudyInstanceUID||t.data.StudyInstanceUID,s=t.SeriesInstanceUIDs||t.data.SeriesInstanceUIDs;return{prevTrackedStudy:e.trackedStudy,prevTrackedSeries:e.trackedSeries.slice(),prevIgnoredSeries:e.ignoredSeries.slice(),trackedStudy:n,trackedSeries:[...e.trackedSeries,...s],ignoredSeries:[]}})),setIsDirtyToClean:(0,i.f0)(((e,t)=>({isDirty:!1}))),setIsDirty:(0,i.f0)(((e,t)=>({isDirty:!0}))),ignoreSeries:(0,i.f0)(((e,t)=>({prevIgnoredSeries:[...e.ignoredSeries],ignoredSeries:[...e.ignoredSeries,t.data.SeriesInstanceUID]}))),ignoreHydrationForSRSeries:(0,i.f0)(((e,t)=>({ignoredSRSeriesForHydration:[...e.ignoredSRSeriesForHydration,t.data.srSeriesInstanceUID]}))),addTrackedSeries:(0,i.f0)(((e,t)=>({prevTrackedSeries:[...e.trackedSeries],trackedSeries:[...e.trackedSeries,t.data.SeriesInstanceUID]}))),removeTrackedSeries:(0,i.f0)(((e,t)=>({prevTrackedSeries:e.trackedSeries.slice().filter((e=>e!==t.SeriesInstanceUID)),trackedSeries:e.trackedSeries.slice().filter((e=>e!==t.SeriesInstanceUID))}))),setPreviousState:(0,i.f0)(((e,t,n)=>({prevState:n.state.value})))},guards:{shouldSetDirty:(e,t)=>void 0===t.SeriesInstanceUID||e.trackedSeries.includes(t.SeriesInstanceUID),wasLabellingOnly:(e,t,n)=>"labellingOnly"===e.prevState,wasIdle:(e,t,n)=>"idle"===e.prevState,wasTracking:(e,t,n)=>"tracking"===e.prevState,wasTrackingAndIsNewStudy:(e,t,n)=>"tracking"===e.prevState&&!e.ignoredSeries.includes(t.data.SeriesInstanceUID)&&e.trackedStudy!==t.data.StudyInstanceUID,wasTrackingAndIsNewSeries:(e,t,n)=>"tracking"===e.prevState&&!e.ignoredSeries.includes(t.data.SeriesInstanceUID)&&!e.trackedSeries.includes(t.data.SeriesInstanceUID),shouldKillMachine:(e,t)=>t.data&&t.data.userResponse===d,shouldAddSeries:(e,t)=>t.data&&t.data.userResponse===S,shouldSetStudyAndSeries:(e,t)=>t.data&&t.data.userResponse===p,shouldAddIgnoredSeries:(e,t)=>t.data&&t.data.userResponse===g,shouldPromptSaveReport:(e,t)=>t.data&&t.data.userResponse===l,shouldIgnoreHydrationForSR:(e,t)=>t.data&&t.data.userResponse===u,shouldSaveAndContinueWithSameReport:(e,t)=>t.data&&t.data.userResponse===l&&!0===t.data.isBackupSave,shouldSaveAndStartNewReport:(e,t)=>t.data&&t.data.userResponse===l&&!1===t.data.isBackupSave,shouldHydrateStructuredReport:(e,t)=>t.data&&t.data.userResponse===I,hasRemainingTrackedSeries:(e,t)=>e.trackedSeries.length>1||!e.trackedSeries.includes(t.SeriesInstanceUID),hasNotIgnoredSRSeriesForHydration:(e,t)=>!e.ignoredSRSeriesForHydration.includes(t.SeriesInstanceUID),isNewStudy:(e,t)=>!e.ignoredSeries.includes(t.SeriesInstanceUID)&&e.trackedStudy!==t.StudyInstanceUID,isNewSeries:(e,t)=>!e.ignoredSeries.includes(t.SeriesInstanceUID)&&!e.trackedSeries.includes(t.SeriesInstanceUID)}};var D=n(68968);const v={NO_NEVER:-1,CANCEL:0,CREATE_REPORT:1,ADD_SERIES:2,SET_STUDY_AND_SERIES:3,NO_NOT_FOR_SERIES:4};const f=async function({servicesManager:e,commandsManager:t,extensionManager:n},s,r){const{uiDialogService:a,measurementService:i,displaySetService:o}=e.services,c=void 0===r.viewportId?r.data.viewportId:r.viewportId,d=void 0===r.isBackupSave?r.data.isBackupSave:r.isBackupSave,u=r?.data?.StudyInstanceUID,l=r?.data?.SeriesInstanceUID,{trackedStudy:S,trackedSeries:p}=s;let g;try{const s=await(0,D.createReportDialogPrompt)(a,{extensionManager:n});if(s.action===v.CREATE_REPORT){const r=n.getDataSources()[0],a=i.getMeasurements().filter((e=>S===e.referenceStudyUID&&p.includes(e.referenceSeriesUID))).filter((e=>null!=e.referencedImageId)),c=void 0===s.value||""===s.value?"Research Derived Series":s.value,d=function(e){const t=e.getActiveDisplaySets().filter((e=>"SR"===e.Modality)).map((e=>e.SeriesNumber));return Math.max(...t,4700)+1}(o),u=async()=>t.runCommand("storeMeasurements",{measurementData:a,dataSource:r,additionalFindingTypes:["ArrowAnnotate"],options:{SeriesDescription:c,SeriesNumber:d}},"CORNERSTONE_STRUCTURED_REPORT");g=await(0,D.createReportAsync)({servicesManager:e,getReport:u})}else s.action;return{userResponse:s.action,createdDisplaySetInstanceUIDs:g,StudyInstanceUID:u,SeriesInstanceUID:l,viewportId:c,isBackupSave:d}}catch(e){return null}};var E=n(97360);const k=0,T=5;const R=function({servicesManager:e,extensionManager:t,appConfig:n},s,r){const{uiViewportDialogService:a,displaySetService:i}=e.services,{viewportId:o,displaySetInstanceUID:d}=r,u=i.getDisplaySetByUID(d);return new Promise((async function(s,i){const l=n?.disableConfirmationPrompts?T:await function(e,t){return new Promise((function(n,s){const r="Do you want to continue tracking measurements for this study?",a=[{id:"no-hydrate",type:c.LZ.dt.secondary,text:"No",value:k},{id:"yes-hydrate",type:c.LZ.dt.primary,text:"Yes",value:T}],i=t=>{e.hide(),n(t)};e.show({viewportId:t,type:"info",message:r,actions:a,onSubmit:i,onOutsideClick:()=>{e.hide(),n(k)},onKeyPress:e=>{if("Enter"===e.key){const e=a.find((e=>e.value===T));i(e.value)}}})}))}(a,o);let S,p;if(l===T){console.warn("!! HYDRATING STRUCTURED REPORT");const s=(0,E.hydrateStructuredReport)({servicesManager:e,extensionManager:t,appConfig:n},d);S=s.StudyInstanceUID,p=s.SeriesInstanceUIDs}s({userResponse:l,displaySetInstanceUID:r.displaySetInstanceUID,srSeriesInstanceUID:u.SeriesInstanceUID,viewportId:o,StudyInstanceUID:S,SeriesInstanceUIDs:p})}))};const h=function({servicesManager:e,extensionManager:t,appConfig:n},s,r){const{displaySetService:a}=e.services,{viewportId:i,displaySetInstanceUID:o}=r,c=a.getDisplaySetByUID(o);return new Promise(((s,a)=>{const d=(0,E.hydrateStructuredReport)({servicesManager:e,extensionManager:t,appConfig:n},o),u=d.StudyInstanceUID,l=d.SeriesInstanceUIDs;s({displaySetInstanceUID:r.displaySetInstanceUID,srSeriesInstanceUID:c.SeriesInstanceUID,viewportId:i,StudyInstanceUID:u,SeriesInstanceUIDs:l})}))};var M=n(52490);const w=function({servicesManager:e,extensionManager:t},n,s){const{measurementService:r,customizationService:a}=e.services,{viewportId:i,StudyInstanceUID:o,SeriesInstanceUID:c,measurementId:d}=s,u=t.getModuleEntry("@ohif/extension-cornerstone.utilityModule.common"),{showLabelAnnotationPopup:l}=u.exports;return new Promise((async function(t){const n=a.get("measurementLabels"),s=r.getMeasurement(d),u=await l(s,e.services.uiDialogService,n);r.update(d,{...u},!0),t({StudyInstanceUID:o,SeriesInstanceUID:c,viewportId:i})}))},b=s.createContext();b.displayName="TrackedMeasurementsContext";const U=()=>(0,s.useContext)(b),A="@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr";function N({servicesManager:e,commandsManager:t,extensionManager:n},{children:r}){const[a]=(0,M.M)(),[u,l]=(0,c.O_)(),{activeViewportId:S,viewports:p}=u,{measurementService:g,displaySetService:I,customizationService:D,cornerstoneViewportService:v}=e.services,E=Object.assign({},y);E.actions=Object.assign({},E.actions,{jumpToFirstMeasurementInActiveViewport:(e,t)=>{const{trackedStudy:n,trackedSeries:s,activeViewportId:r}=e,a=g.getMeasurements().filter((e=>n===e.referenceStudyUID&&s.includes(e.referenceSeriesUID)));console.log("jumping to measurement reset viewport",r,a[0]);const i=a[0].displaySetInstanceUID,o=I.getDisplaySetByUID(i).images,c=o[0].imageId.startsWith("volumeId"),d=a[0].data;let u=0;!c&&d&&(u=o.findIndex((e=>{const t=Object.keys(d)[0].substring(8);return e.imageId===t})),-1===u&&(console.warn("Could not find image index for tracked measurement, using 0"),u=0)),l.setDisplaySetsForViewport({viewportId:r,displaySetInstanceUIDs:[i],viewportOptions:{initialImageOptions:{index:u}}})},jumpToSameImageInActiveViewport:(e,t)=>{const{trackedStudy:n,trackedSeries:s,activeViewportId:r}=e,a=g.getMeasurements().filter((e=>n===e.referenceStudyUID&&s.includes(e.referenceSeriesUID)))[0].displaySetInstanceUID,i=v.getCornerstoneViewport(r).getCurrentImageIdIndex();l.setDisplaySetsForViewport({viewportId:r,displaySetInstanceUIDs:[a],viewportOptions:{initialImageOptions:{index:i}}})},showStructuredReportDisplaySetInActiveViewport:(e,t)=>{if(t.data.createdDisplaySetInstanceUIDs.length>0){const e=t.data.createdDisplaySetInstanceUIDs[0];l.setDisplaySetsForViewport({viewportId:t.data.viewportId,displaySetInstanceUIDs:[e]})}},discardPreviouslyTrackedMeasurements:(e,t)=>{const n=g.getMeasurements().filter((t=>e.prevTrackedSeries.includes(t.referenceSeriesUID))).map((e=>e.id));for(let e=0;e<n.length;e++)g.remove(n[e])},clearAllMeasurements:(e,t)=>{const n=g.getMeasurements().map((e=>e.uid));for(let e=0;e<n.length;e++)g.remove(n[e])}}),E.services=Object.assign({},E.services,{promptSaveReport:f.bind(null,{servicesManager:e,commandsManager:t,extensionManager:n,appConfig:a}),promptHydrateStructuredReport:R.bind(null,{servicesManager:e,extensionManager:n,appConfig:a}),hydrateStructuredReport:h.bind(null,{servicesManager:e,extensionManager:n,appConfig:a}),promptLabelAnnotation:w.bind(null,{servicesManager:e,extensionManager:n})}),E.guards=Object.assign({},E.guards,{isLabelOnMeasure:(e,t,n)=>{const s=D.get("measurementLabels");return s?.labelOnMeasure},isLabelOnMeasureAndShouldKillMachine:(e,t,n)=>{const s=D.get("measurementLabels");return t.data&&t.data.userResponse===d&&s?.labelOnMeasure}});const k=(0,i.J)(m,E),[T,U]=(0,o.eO)(k);return(0,s.useEffect)((()=>{U("UPDATE_ACTIVE_VIEWPORT_ID",{activeViewportId:S})}),[S,U]),(0,s.useEffect)((()=>{(async()=>{if(p.size>0){const t=p.get(S);if(!t||!t?.displaySetInstanceUIDs?.length)return;const{displaySetService:n}=e.services,s=n.getDisplaySetByUID(t.displaySetInstanceUIDs[0]);if(!s)return;s.SOPClassHandlerId===A&&!s.isLoaded&&s.load&&await s.load(),s.SOPClassHandlerId===A&&!0===s.isRehydratable&&(console.log("sending event...",T),U("PROMPT_HYDRATE_SR",{displaySetInstanceUID:s.displaySetInstanceUID,SeriesInstanceUID:s.SeriesInstanceUID,viewportId:S}))}})()}),[T,S,U,e.services,p]),s.createElement(b.Provider,{value:[T,U]},r)}N.propTypes={children:a().oneOf([a().func,a().node]),servicesManager:a().object.isRequired,commandsManager:a().object.isRequired,extensionManager:a().object.isRequired,appConfig:a().object};const C=function({servicesManager:e,extensionManager:t,commandsManager:n}){const s=N.bind(null,{servicesManager:e,extensionManager:t,commandsManager:n});return[{name:"TrackedMeasurementsContext",context:b,provider:s}]}},64595:(e,t,n)=>{n.r(t),n.d(t,{default:()=>V});var s=n(26196),r=n(43001),a=n(3827),i=n.n(a),o=n(62474),c=n(69190),d=n(84793),u=n(49023);const{formatDate:l,createStudyBrowserTabs:S}=d.utils;function p({servicesManager:e,getImageSrc:t,getStudiesForPatientByMRN:n,requestDisplaySetCreationForStudy:a,dataSource:i}){const{displaySetService:d,uiDialogService:p,hangingProtocolService:g,uiNotificationService:y,measurementService:D,studyPrefetcherService:v}=e.services,f=(0,o.s0)(),{t:E}=(0,c.$G)("Common"),{StudyInstanceUIDs:k}=(0,u.zG)(),[{activeViewportId:T,viewports:R,isHangingProtocolLayout:h},M]=(0,u.O_)(),[w,b]=(0,s.I)(),[U,A]=(0,r.useState)("primary"),[N,C]=(0,r.useState)([...k]),[P,x]=(0,r.useState)([]),[O,_]=(0,r.useState)([]),[V,L]=(0,r.useState)({}),[j,F]=(0,r.useState)({}),[H,q]=(0,r.useState)(null),B=R.get(T)?.displaySetInstanceUIDs,{trackedSeries:Y}=w.context;(0,r.useEffect)((()=>{k.forEach((e=>async function(e){const t=await i.query.studies.search({studyInstanceUid:e});if(!t?.length)throw f("/notfoundstudy","_self"),new Error("Invalid study URL");let s=t;try{s=await n(t)}catch(e){console.warn(e)}const r=s.map((e=>({AccessionNumber:e.accession,StudyDate:e.date,StudyDescription:e.description,NumInstances:e.instances,ModalitiesInStudy:e.modalities,PatientID:e.mrn,PatientName:e.patientName,StudyInstanceUID:e.studyInstanceUid,StudyTime:e.time}))).map((e=>({studyInstanceUid:e.StudyInstanceUID,date:l(e.StudyDate)||E("NoStudyDate"),description:e.StudyDescription,modalities:e.ModalitiesInStudy,numInstances:e.NumInstances})));x((e=>{const t=[...e];for(const n of r)e.find((e=>e.studyInstanceUid===n.studyInstanceUid))||t.push(n);return t}))}(e)))}),[k,n]),(0,r.useEffect)((()=>{const e=d.activeDisplaySets;e.length&&e.forEach((async e=>{const n={},s=d.getDisplaySetByUID(e.displaySetInstanceUID),r=I(s,i.getImageIdsForDisplaySet(s));r&&!s?.unsupported&&(n[e.displaySetInstanceUID]=await t(r),F((e=>({...e,...n}))))}))}),[d,i,t]),(0,r.useEffect)((()=>{const e=d.activeDisplaySets;if(!e.length)return;const t=m(e,V,j,Y,R,M,i,d,p,y);_(t)}),[d.activeDisplaySets,V,Y,R,i,j]),(0,r.useEffect)((()=>{const{unsubscribe:e}=v.subscribe(v.EVENTS.DISPLAYSET_LOAD_PROGRESS,(e=>{const{displaySetInstanceUID:t,loadingProgress:n}=e;L((e=>({...e,[t]:n})))}));return()=>e()}),[v]),(0,r.useEffect)((()=>{const e=d.subscribe(d.EVENTS.DISPLAY_SETS_ADDED,(e=>{const{displaySetsAdded:n,options:s}=e;n.forEach((async e=>{const n=e.displaySetInstanceUID,r={},a=d.getDisplaySetByUID(n);if(a?.unsupported)return;s.madeInClient&&q(n);const o=I(a,i.getImageIdsForDisplaySet(a));o&&(r[n]=await t(o),F((e=>({...e,...r}))))}))}));return()=>{e.unsubscribe()}}),[d,i,t,j,Y,R]),(0,r.useEffect)((()=>{const e=d.subscribe(d.EVENTS.DISPLAY_SETS_CHANGED,(e=>{const t=m(e,V,j,Y,R,M,i,d,p,y);_(t)})),t=d.subscribe(d.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,(()=>{const e=m(d.getActiveDisplaySets(),V,j,Y,R,M,i,d,p,y);_(e)}));return()=>{e.unsubscribe(),t.unsubscribe()}}),[V,j,Y,R,i,d]);const K=S(k,P,O);(0,r.useEffect)((()=>{if(H){const e=H,t=document.getElementById(`thumbnail-${e}`);t&&"function"==typeof t.scrollIntoView&&(t.scrollIntoView({behavior:"smooth"}),q(null))}}),[H,N,U]),(0,r.useEffect)((()=>{if(!H)return;const e=function(e,t){for(let n=0;n<t.length;n++){const{studies:s}=t[n];for(let r=0;r<s.length;r++){const{displaySets:a}=s[r];for(let i=0;i<a.length;i++){if(a[i].displaySetInstanceUID===e)return{tabName:t[n].name,StudyInstanceUID:s[r].studyInstanceUid}}}}}(H,K);if(!e)return void console.warn("jumpToThumbnail: displaySet thumbnail not found.");const{tabName:t,StudyInstanceUID:n}=e;A(t);if(!N.includes(n)){const e=[...N,n];C(e)}}),[N,H,K]);const Z=e=>{p.create({id:"untrack-series",centralize:!0,isDraggable:!1,showOverlay:!0,content:u.Vq,contentProps:{title:"Untrack Series",body:()=>r.createElement("div",{className:"bg-primary-dark p-4 text-white"},r.createElement("p",null,"Are you sure you want to untrack this series?"),r.createElement("p",{className:"mt-2"},"This action cannot be undone and will delete all your existing measurements.")),actions:[{id:"cancel",text:"Cancel",type:u.LZ.dt.secondary},{id:"yes",text:"Yes",type:u.LZ.dt.primary,classes:["untrack-yes-button"]}],onClose:()=>p.dismiss({id:"untrack-series"}),onSubmit:async({action:t})=>{switch(t.id){case"yes":(()=>{const t=d.getDisplaySetByUID(e);b("UNTRACK_SERIES",{SeriesInstanceUID:t.SeriesInstanceUID}),D.getMeasurements().forEach((e=>{e.referenceSeriesUID===t.SeriesInstanceUID&&D.remove(e.uid)}))})(),p.dismiss({id:"untrack-series"});break;case"cancel":p.dismiss({id:"untrack-series"})}}}})};return r.createElement(u.eX,{tabs:K,servicesManager:e,activeTabName:U,expandedStudyInstanceUIDs:N,onClickStudy:function(e){const t=N.includes(e),n=t?[...N.filter((t=>t!==e))]:[...N,e];if(C(n),!t){a(d,e,!0)}},onClickTab:e=>{A(e)},onClickUntrack:e=>{Z(e)},onClickThumbnail:()=>{},onDoubleClickThumbnail:e=>{let t=[];const n=T;try{t=g.getViewportsRequireUpdate(n,e,h)}catch(e){console.warn(e),y.show({title:"Thumbnail Double Click",message:"The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.",type:"info",duration:3e3})}M.setDisplaySetsForViewports(t)},activeDisplaySetInstanceUIDs:B})}p.propTypes={servicesManager:i().object.isRequired,dataSource:i().shape({getImageIdsForDisplaySet:i().func.isRequired}).isRequired,getImageSrc:i().func.isRequired,getStudiesForPatientByMRN:i().func.isRequired,requestDisplaySetCreationForStudy:i().func.isRequired};const g=p;function I(e,t){let n;if(e.isDynamicVolume){const t=e.dynamicVolumeInfo.timePoints,s=t[Math.floor(t.length/2)];n=s[Math.floor(s.length/2)]}else n=t[Math.floor(t.length/2)];return n}function m(e,t,n,s,a,i,o,c,d,S){const p=[],g=[];return e.filter((e=>!e.excludeFromThumbnailBrowser)).forEach((e=>{const a=n[e.displaySetInstanceUID],I=function(e){if(y.includes(e.Modality)||e?.unsupported)return"thumbnailNoImage";return"thumbnailTracked"}(e),m=(i.getNumViewportPanes(),"thumbnailTracked"===I?p:g),{displaySetInstanceUID:D}=e,v=t?.[D],f={displaySetInstanceUID:D,description:e.SeriesDescription,seriesNumber:e.SeriesNumber,modality:e.Modality,seriesDate:l(e.SeriesDate),numInstances:e.numImageFrames,loadingProgress:v,countIcon:e.countIcon,messages:e.messages,StudyInstanceUID:e.StudyInstanceUID,componentType:I,imageSrc:a,dragData:{type:"displayset",displaySetInstanceUID:D},isTracked:s.includes(e.SeriesInstanceUID),isHydratedForDerivedDisplaySet:e.isHydrated};"thumbnailNoImage"===I&&(o.reject&&o.reject.series?(f.canReject=!e?.unsupported,f.onReject=()=>{d.create({id:"ds-reject-sr",centralize:!0,isDraggable:!1,showOverlay:!0,content:u.Vq,contentProps:{title:"Delete Report",body:()=>r.createElement("div",{className:"bg-primary-dark p-4 text-white"},r.createElement("p",null,"Are you sure you want to delete this report?"),r.createElement("p",{className:"mt-2"},"This action cannot be undone.")),actions:[{id:"cancel",text:"Cancel",type:u.LZ.dt.secondary},{id:"yes",text:"Yes",type:u.LZ.dt.primary,classes:["reject-yes-button"]}],onClose:()=>d.dismiss({id:"ds-reject-sr"}),onShow:()=>{document.querySelector(".reject-yes-button").focus()},onSubmit:async({action:t})=>{switch(t.id){case"yes":try{await o.reject.series(e.StudyInstanceUID,e.SeriesInstanceUID),c.deleteDisplaySet(D),d.dismiss({id:"ds-reject-sr"}),S.show({title:"Delete Report",message:"Report deleted successfully",type:"success"})}catch(e){d.dismiss({id:"ds-reject-sr"}),S.show({title:"Delete Report",message:"Failed to delete report",type:"error"})}break;case"cancel":d.dismiss({id:"ds-reject-sr"})}}}})}):f.canReject=!1),m.push(f)})),[...p,...g]}const y=["SR","SEG","SM","RTSTRUCT","RTPLAN","RTDOSE","DOC","OT"];const D=function(e,t){return new Promise(((n,s)=>{const r=document.createElement("canvas");e.utilities.loadImageToCanvas({canvas:r,imageId:t,thumbnail:!0}).then((e=>{n(r.toDataURL())})).catch(s)}))};const v=function(e,t,n,s){t.activeDisplaySets.some((e=>e.StudyInstanceUID===n))||e.retrieve.series.metadata({StudyInstanceUID:n,madeInClient:s})};function f({commandsManager:e,extensionManager:t,servicesManager:n}){const s=t.getActiveDataSource()[0],a=function(e){const t=e.getModuleEntry("@ohif/extension-default.utilityModule.common"),{getStudiesForPatientByMRN:n}=t.exports;return n}(t),i=a.bind(null,s),o=(0,r.useCallback)(function(e){const t=e.getModuleEntry("@ohif/extension-cornerstone.utilityModule.common");try{const{cornerstone:e}=t.exports.getCornerstoneLibraries();return D.bind(null,e)}catch(e){throw new Error("Required command not found")}}(t),[]),c=v.bind(null,s);return r.createElement(g,{servicesManager:n,dataSource:s,getImageSrc:o,getStudiesForPatientByMRN:i,requestDisplaySetCreationForStudy:c})}f.propTypes={commandsManager:i().object.isRequired,extensionManager:i().object.isRequired,servicesManager:i().object.isRequired};const E=f;var k=n(75213),T=n(52490),R=n(8324),h=n.n(R);const{downloadCSVReport:M}=d.utils,{formatDate:w}=d.utils,b={key:void 0,date:"",modality:"",description:""};function U({servicesManager:e,extensionManager:t}){const[n]=(0,u.O_)(),{t:a}=(0,c.$G)("MeasurementTable"),[i,o]=(0,r.useState)(Date.now().toString()),l=(0,k.N)(i,200),{measurementService:S,uiDialogService:p,displaySetService:g,customizationService:I}=e.services,[m,y]=(0,s.I)(),{trackedStudy:D,trackedSeries:v}=m.context,[f,E]=(0,r.useState)(b),[R,U]=(0,r.useState)([]),A=(0,r.useRef)(null),[N]=(0,T.M)();(0,r.useEffect)((()=>{const e=S.getMeasurements().filter((e=>D===e.referenceStudyUID&&v.includes(e.referenceSeriesUID))).map((e=>function(e,t,n){const{referenceStudyUID:s,referenceSeriesUID:r,SOPInstanceUID:a}=e,i=(d.DicomMetadataStore.getInstance(s,r,a),n.getDisplaySetsForSeries(r));if(!i[0]||!i[0].images)throw new Error('The tracked measurements panel should only be tracking "stack" displaySets.');const{displayText:o,uid:c,label:u,type:l,selected:S,findingSites:p,finding:g,referencedImageId:I}=e,m=p?.[0],y=u||g?.text||m?.text||"(empty)";let D=o||[];if(p){const e=[];p.forEach((t=>{t?.text!==y&&e.push(t.text)})),D=[...e,...D]}g&&g?.text!==y&&(D=[g.text,...D]);return{uid:c,label:y,baseLabel:u,measurementType:l,displayText:D,baseDisplayText:o,isActive:S,finding:g,findingSites:p,referencedImageId:I}}(e,S.VALUE_TYPES,g)));U(e)}),[S,D,v,l]);const C=async()=>{if(m.matches("tracking")){const e=D,t=d.DicomMetadataStore.getStudy(e),n=t.series[0].instances[0],{StudyDate:s,StudyDescription:r}=n,a=new Set;t.series.forEach((e=>{v.includes(e.SeriesInstanceUID)&&a.add(e.instances[0].Modality)}));const i=Array.from(a).join("/");f.key!==e&&E({key:e,date:s,modality:i,description:r})}else""!==D&&void 0!==D||E(b)};(0,r.useEffect)((()=>{C()}),[f.key,m,D,C]),(0,r.useEffect)((()=>{const e=S.EVENTS.MEASUREMENT_ADDED,t=S.EVENTS.RAW_MEASUREMENT_ADDED,n=S.EVENTS.MEASUREMENT_UPDATED,s=S.EVENTS.MEASUREMENT_REMOVED,r=S.EVENTS.MEASUREMENTS_CLEARED,a=[];return[e,t,n,s,r].forEach((t=>{a.push(S.subscribe(t,(()=>{o(Date.now().toString()),t===e&&h()((()=>{A.current.scrollTop=A.current.scrollHeight}),300)()})).unsubscribe)})),()=>{a.forEach((e=>{e()}))}}),[S,y]);const P=({uid:e,isActive:t})=>{S.jumpToMeasurement(n.activeViewportId,e),O({uid:e,isActive:t})},x=({uid:e,isActive:n})=>{P({uid:e,isActive:n});const s=I.get("measurementLabels"),r=S.getMeasurement(e),a=t.getModuleEntry("@ohif/extension-cornerstone.utilityModule.common"),{showLabelAnnotationPopup:i}=a.exports;i(r,p,s).then((t=>{S.update(e,{...t},!0)}))},O=({uid:e,isActive:t})=>{if(!t){const t=[...R],n=t.find((t=>t.uid===e));t.forEach((t=>t.isActive=t.uid===e)),n.isActive=!0,U(t)}},_=R.filter((e=>e.measurementType!==S.VALUE_TYPES.POINT&&e.referencedImageId)),V=R.filter((e=>e.measurementType===S.VALUE_TYPES.POINT&&e.referencedImageId)),L=R.filter((e=>null==e.referencedImageId)),j=0===V.length&&0===_.length&&0===L.length;return r.createElement(r.Fragment,null,r.createElement("div",{className:"invisible-scrollbar overflow-y-auto overflow-x-hidden",ref:A,"data-cy":"trackedMeasurements-panel"},f.key&&r.createElement(u.YL,{date:w(f.date),modality:f.modality,description:f.description}),r.createElement(u.wt,{title:"Measurements",data:_,servicesManager:e,onClick:P,onEdit:x}),0!==V.length&&r.createElement(u.wt,{title:"Additional Findings",data:V,servicesManager:e,onClick:P,onEdit:x}),0!==L.length&&r.createElement(u.wt,{title:"Non-tracked",data:L,servicesManager:e,onClick:P,onEdit:x})),!N?.disableEditing&&r.createElement("div",{className:"flex justify-center p-4"},r.createElement(u.EY,{t:a,actions:[{label:"Download CSV",onClick:async function(){const e=S.getMeasurements().filter((e=>D===e.referenceStudyUID&&v.includes(e.referenceSeriesUID)));M(e,S)}},{label:"Create Report",onClick:()=>{y("SAVE_REPORT",{viewportId:n.activeViewportId,isBackupSave:!0})}}],disabled:j})))}U.propTypes={servicesManager:i().shape({services:i().shape({measurementService:i().shape({getMeasurements:i().func.isRequired,VALUE_TYPES:i().object.isRequired}).isRequired}).isRequired}).isRequired};const A=U;var N=n(73577);const C=function({commandsManager:e,extensionManager:t,servicesManager:n}){return[{name:"seriesList",iconName:"tab-studies",iconLabel:"Studies",label:N.Z.t("SidePanel:Studies"),component:E.bind(null,{commandsManager:e,extensionManager:t,servicesManager:n})},{name:"trackedMeasurements",iconName:"tab-linear",iconLabel:"Measure",label:N.Z.t("SidePanel:Measurements"),component:A.bind(null,{commandsManager:e,extensionManager:t,servicesManager:n})}]};function P(){return P=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)({}).hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},P.apply(null,arguments)}const x=r.lazy((()=>n.e(498).then(n.bind(n,11498)))),O=e=>r.createElement(r.Suspense,{fallback:r.createElement("div",null,"Loading...")},r.createElement(x,e));const _=function({servicesManager:e,commandsManager:t,extensionManager:n}){return[{name:"cornerstone-tracked",component:s=>r.createElement(O,P({servicesManager:e,commandsManager:t,extensionManager:n},s))}]},V={id:JSON.parse('{"u2":"@ohif/extension-measurement-tracking"}').u2,getContextModule:s.Z,getPanelModule:C,getViewportModule:_}}}]);
//# sourceMappingURL=994.bundle.d952a210e6e10bdd8aab.js.map