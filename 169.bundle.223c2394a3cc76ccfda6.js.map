{"version":3,"file":"169.bundle.223c2394a3cc76ccfda6.js","mappings":"gOAMA,SAASA,GAA0B,aACjCC,EAAY,WACZC,EAAU,QACVC,EAAO,eACPC,EAAc,kBACdC,EAAiB,eACjBC,EAAc,gBACdC,IAEA,MAAM,YACJC,EAAW,2BACXC,EAA0B,oBAC1BC,EAAmB,iBACnBC,EAAgB,uBAChBC,GACEL,EAAgBM,UAEbC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GAoH/C,OAlFAC,EAAAA,EAAAA,YAAU,KACR,IAAKhB,EACH,OAGF,MAAMiB,EAAWT,EAA2BU,uBAAuBjB,GAEnE,GAAKgB,EAAL,CAIA,GAA+D,sBAA3DN,EAAuBQ,oBAAoBC,SAASC,GAA4B,CAElF,MAAMC,EAAgBd,EAA2Be,iBAAiBC,WAAUC,GAAQA,IAASxB,IAC7Fa,EAAeQ,GAAiB,EAClC,CAEA,GAAItB,EAAa0B,eAAiBC,EAAAA,MAAAA,aAAmBC,OAWrD,GAAI5B,EAAa0B,eAAiBC,EAAAA,MAAAA,aAAmBE,aAAc,CACjE,MAAMC,EAAYC,EAAAA,UAAAA,mCAChBd,GAGF,IAAKa,EACH,OAGF,MAAM,WAAEE,EAAU,eAAEC,GAAmBH,EACvC1B,EAAkB,CAAE4B,aAAYC,kBAClC,MAtBA,CACE,MAAMA,EAAkBhB,EAAkCiB,sBAAsBC,QAEhF/B,EAAkB,CAChB4B,WAAYI,KAAKC,MAAMJ,EAAiB,GACxCA,eAAgBA,GAIpB,CAjBA,CA8BA,GACC,CAAChC,EAAYD,KAEhBgB,EAAAA,EAAAA,YAAU,KACR,GAAIhB,GAAc0B,eAAiBC,EAAAA,MAAAA,aAAmBC,OACjD5B,GAAc0B,eAAiBC,EAAAA,MAAAA,aAAmBE,aACrD,OAGF,MAAMS,EAAmBC,IACvB,MAAM,gBAAEC,GAAoBD,EAAME,OAElCrC,EAAkB,CAChB4B,WAAYQ,EACZP,eAAgBjC,EAAa0C,KAAK,GAAGC,SAASC,QAC9C,EAKJ,OAFA1C,EAAQ2C,iBAAiBlB,EAAAA,MAAAA,OAAamB,sBAAuBR,GAEtD,KACLpC,EAAQ6C,oBAAoBpB,EAAAA,MAAAA,OAAamB,sBAAuBR,EAAiB,CAClF,GACA,CAACtC,EAAcE,KAElBc,EAAAA,EAAAA,YAAU,KACR,GAAIhB,GAAc0B,eAAiBC,EAAAA,MAAAA,aAAmBE,aACpD,OAGF,MAAMmB,EAAoBT,IACxB,MAAM,WAAEP,EAAU,eAAEC,GAAmBM,EAAME,OAE7CrC,EAAkB,CAAE4B,aAAYC,kBAAiB,EAKnD,OAFA/B,EAAQ2C,iBAAiBlB,EAAAA,MAAAA,OAAasB,iBAAkBD,GAEjD,KACL9C,EAAQ6C,oBAAoBpB,EAAAA,MAAAA,OAAasB,iBAAkBD,EAAkB,CAC9E,GACA,CAAChD,EAAcE,KAGfW,GAAeqC,EAAAA,cAACC,EAAAA,GAAc,CAC7BC,SAAUC,GApHiBC,EAACtB,EAAY/B,KAC1C,MAAMgB,EAAWT,EAA2BU,uBAAuBjB,IAE7D,cAAEsD,GAAkBhD,EAAYiD,WAUtC,GARID,IAEFhD,EAAYkD,SAASvD,EAAS,CAAED,eAChCM,EAAYmD,QAAQ,CAAErC,GAAIpB,EAAY0D,WAAW,KAGnDC,EAAAA,UAAAA,YAAyB3C,EAASf,QAAS,CAAE8B,aAAY6B,iBAAiB,IAEX,sBAA3DlD,EAAuBQ,oBAAoBC,SAASC,GAA4B,CAElF,MAAMyC,EAActD,EAA2Be,iBACzCD,EAAgBwC,EAAYtC,WAAUC,GAAQA,IAASxB,IACvD8D,EAAgBtD,EAAoBuD,8BAA8B,WAAW,GAC/E1C,GAAiB,IAEnBU,GAA+D,GAAhDV,EADsBc,KAAK6B,MAAMH,EAAYlB,OAAS,IAGrE9B,GAAe,IAEbQ,GAAiB,IAEnBZ,EAAiBwD,kBAAkBH,EAAe/B,GAClD5B,EAAkB,CAAE4B,WAAYA,EAAYC,eAAgB9B,EAAe8B,iBAE/E,GAuFmBqB,CAAuBD,EAAKpD,GAC7CkE,IAAKhE,EAAe8B,eAAiB9B,EAAe8B,eAAiB,EAAI,EACzEmC,OAAQ/D,EACRgE,MAAOlE,EAAe6B,YAG5B,CAEAjC,EAA0BuE,UAAY,CACpCtE,aAAcuE,IAAAA,OACdtE,WAAYsE,IAAAA,OAAiBC,WAC7BtE,QAASqE,IAAAA,WAAqBE,SAC9BpE,eAAgBkE,IAAAA,OAChBpE,eAAgBoE,IAAAA,OAAiBC,WACjCpE,kBAAmBmE,IAAAA,KAAeC,WAClClE,gBAAiBiE,IAAAA,OAAiBC,YAGpC,U,8CChJA,MAAM,wBAAEE,EAAuB,2BAAEC,GAA+B5C,EAAAA,UAAAA,YA0LhE,QAxLA,UAAoC,QAClC7B,EAAO,aACPF,EAAY,eACZG,EAAc,WACdF,EAAU,gBACVK,EAAe,mBACfsE,EAAqB,CAAC,MAAO,UAG7B,MAAOC,EAAUC,IAAe/D,EAAAA,EAAAA,UAAS,IAClCgE,EAAgBC,IAAqBjE,EAAAA,EAAAA,WAAS,IAC9CkE,EAAcC,IAAmBnE,EAAAA,EAAAA,WAAS,IAC3C,2BAAEP,GAA+BF,EAAgBM,UAEvDI,EAAAA,EAAAA,YAAU,KACR,MAAMmE,EAA0B9B,IAC9B,MAAM,SAAEwB,EAAQ,eAAEO,EAAc,OAAEC,GAAWhC,EAAIZ,YAEhC6C,IAAbT,GACFC,EAAYD,QAIcS,IAA1BD,EAAON,gBACPK,EAAeL,iBAAmBM,EAAON,gBAEzCC,EAAkBK,EAAON,qBAIDO,IAAxBD,EAAOJ,cACPG,EAAeH,eAAiBI,EAAOJ,cAEvCC,EAAgBG,EAAOJ,aACzB,EAKF,OAFA/E,EAAQ2C,iBAAiBlB,EAAAA,MAAAA,OAAa4D,gBAAiBJ,GAEhD,KACLjF,EAAQ6C,oBAAoBpB,EAAAA,MAAAA,OAAa4D,gBAAiBJ,EAAuB,CAClF,GACA,IAEH,MAAMK,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,IAAKzF,EACH,MAAO,GAGT,IAAI0F,EAAYC,EAChB,GAAkC,UAA9B3F,EAAa0B,aAA0B,CACzC,MAAMM,EAAa7B,EAAe6B,WAC5B4D,EAAU5F,EAAa0C,KAAK,GAAGC,WAAWX,GAGhD,IAAK4D,EACH,OAAO,IAGNF,aAAYC,iBAAkBE,EAAAA,SAAAA,IAAa,mBAAoBD,IAAY,CAAC,EACjF,KAAO,CACL,IAAK1F,KAAY4F,EAAAA,EAAAA,mBAAkB5F,GACjC,MAAO,GAGT,MAAM,SAAEe,IAAa6E,EAAAA,EAAAA,mBAAkB5F,IACjC,OAAE6F,EAAM,gBAAEC,GAAoB/E,EAASgF,YAEvCC,EAAYC,EAAAA,GAAAA,SAClBA,EAAAA,GAAAA,MAAWD,EAAWH,EAAQC,GAE9BL,EAAgB,EAAEI,EAAO,IAAKA,EAAO,IAAKA,EAAO,IACjDL,EAAaQ,CACf,CAEA,IAAKR,IAAeC,QAA8BL,IAAbT,EACnC,MAAO,GAGT,MAAMW,EAoDV,SAAgCE,EAAYC,EAAed,EAAUI,EAAcF,GACjF,MAAMqB,EAAY1B,EAAwBgB,GACpCW,EAAe3B,EAAwBiB,GACvCW,EAAoB3B,EAA2ByB,GAG/CZ,EAAU,CACde,IAH2B5B,EAA2B0B,GAItDG,KAAMF,EACNG,MAAOL,EACPM,OAAQL,GAKNpB,IACFO,EAAQe,IAAM5B,EAA2Ba,EAAQe,KACjDf,EAAQkB,OAAS/B,EAA2Ba,EAAQkB,SAGlD3B,IACFS,EAAQgB,KAAO7B,EAA2Ba,EAAQgB,MAClDhB,EAAQiB,MAAQ9B,EAA2Ba,EAAQiB,QAKrD,GAAiB,KAAb5B,IAAiC,MAAdA,EACrB,MAAO,CACL0B,IAAKf,EAAQgB,KACbA,KAAM7B,EAA2Ba,EAAQe,KACzCE,MAAO9B,EAA2Ba,EAAQkB,QAC1CA,OAAQlB,EAAQiB,OAEb,IAAkB,KAAd5B,GAAiC,MAAbA,EAC7B,MAAO,CACL0B,IAAK5B,EAA2Ba,EAAQgB,MACxCA,KAAMhB,EAAQe,IACdG,OAAQlB,EAAQgB,KAChBC,MAAOjB,EAAQkB,QAEZ,GAAiB,MAAb7B,IAAkC,MAAdA,EAC7B,MAAO,CACL0B,IAAK5B,EAA2Ba,EAAQe,KACxCC,KAAM7B,EAA2Ba,EAAQgB,MACzCE,OAAQ/B,EAA2Ba,EAAQkB,QAC3CD,MAAO9B,EAA2Ba,EAAQiB,QAI9C,OAAOjB,CACT,CAvGoBmB,CACdjB,EACAC,EACAd,EACAI,EACAF,GAKF,OAFqBvE,EAA2BoG,gBAAgB3G,GAOzD2E,EAAmBiC,KAAI,CAACC,EAAGC,IAChC7D,EAAAA,cAAA,OACE8D,UAAWC,IACT,eACA,GAAGH,2BACH,iBACA,cACA,aAEFI,IAAK,GAAGJ,4BAER5D,EAAAA,cAAA,OAAK8D,UAAU,4BAA4BxB,EAAQsB,QAfrDK,QAAQC,IAAI,2CACL,KAgBP,GACD,CACDpH,EACAG,EACA0E,EACAI,EACAF,EACAH,EACA1E,IAGF,OAAOgD,EAAAA,cAAA,OAAK8D,UAAU,0CAA0CxB,EAClE,ECpIA,SAAS6B,GAAmC,aAAErH,EAAY,QAAEE,IAC1D,MAAOoH,EAASC,IAAcxG,EAAAA,EAAAA,WAAS,IAChCyG,EAAOC,IAAY1G,EAAAA,EAAAA,WAAS,GAE7B2G,GAAmBC,EAAAA,EAAAA,QAAO,MAC1BC,GAAoBD,EAAAA,EAAAA,QAAO,MAE3BE,EAAkBxE,IACtByE,aAAaJ,EAAiBK,SAE9BL,EAAiBK,QAAUC,YAAW,KACpCT,GAAW,EAAK,GACf,GAAG,EAGFU,EAAwB5E,IAC5ByE,aAAaJ,EAAiBK,SAE9BR,GAAW,EAAM,EAGbW,EAAgB7E,IACpByE,aAAaJ,EAAiBK,SAE1BH,EAAkBG,UAAY1E,EAAIZ,OAAOmD,UAC3C6B,EAASpE,EAAIZ,OAAO+E,OACpBI,EAAkBG,QAAU,KAC9B,EAiBF,OAdA/G,EAAAA,EAAAA,YAAU,KACRd,EAAQ2C,iBAAiBlB,EAAAA,MAAAA,OAAamB,sBAAuB+E,GAC7D3H,EAAQ2C,iBAAiBlB,EAAAA,MAAAA,OAAawG,iBAAkBD,GACxDhI,EAAQ2C,iBAAiBlB,EAAAA,MAAAA,OAAayG,gBAAiBH,GAEhD,KACL/H,EAAQ6C,oBAAoBpB,EAAAA,MAAAA,OAAamB,sBAAuB+E,GAEhE3H,EAAQ6C,oBAAoBpB,EAAAA,MAAAA,OAAayG,gBAAiBH,GAE1D/H,EAAQ6C,oBAAoBpB,EAAAA,MAAAA,OAAawG,iBAAkBD,EAAc,IAE1E,CAAChI,EAASF,IAETwH,EAEAtE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK8D,UAAU,2DACb9D,EAAAA,cAAA,OAAK8D,UAAU,8DACb9D,EAAAA,cAAA,KAAG8D,UAAU,yCACX9D,EAAAA,cAAA,UAAI,uBACJA,EAAAA,cAAA,SAAG,0BACHA,EAAAA,cAAA,SAAIsE,OAQZF,EAIApE,EAAAA,cAAA,OAAK8D,UAAU,+EACb9D,EAAAA,cAAA,OAAK8D,UAAU,8DACb9D,EAAAA,cAAA,KAAG8D,UAAU,yCAAwC,gBAMtD,IACT,CAEAK,EAAmC/C,UAAY,CAC7CkD,MAAOjD,IAAAA,OACPrE,QAASqE,IAAAA,QAGX,UCHA,QA1EA,SAA6B8D,GAC3B,MAAM,WAAEpI,EAAU,QAAEC,EAAO,eAAEG,EAAc,gBAAEC,GAAoB+H,GAC3D,2BAAE7H,GAA+BF,EAAgBM,UAChDT,EAAgBC,IAAqBW,EAAAA,EAAAA,UAAS,CACnDiB,WAAY,EACZC,eAAgB,KAEXjC,EAAcsI,IAAmBvH,EAAAA,EAAAA,UAAS,MAmBjD,IAjBAC,EAAAA,EAAAA,YAAU,KACR,MAAM,YAAEuH,GAAgB/H,EAA2BgI,UACjDhI,EAA2BiI,OAAOC,uBAClCL,IACMA,EAAMpI,aAAeA,GAIzBqI,EAAgBD,EAAMrI,aAAa,IAIvC,MAAO,KACLuI,GAAa,CACd,GACA,CAACtI,KAECC,EACH,OAAO,KAGT,GAAIF,EAAc,CAChB,MAAM2I,EAAenI,EAA2BoG,gBAAgB3G,GAEhE,GAAI0I,GAAcC,iBAAiBC,qBAAqBC,aACtD,OAAO,IAEX,CAEA,OACE5F,EAAAA,cAAA,OAAK8D,UAAU,YACb9D,EAAAA,cAAC6F,EAAsB,CACrB9I,WAAYA,EACZD,aAAcA,EACdE,QAASA,EACTC,eAAgBA,EAChBC,kBAAmBA,EACnBC,eAAgBA,EAChBC,gBAAiBA,IAGnB4C,EAAAA,cAAC8F,EAAAA,GAA2B,CAC1B7I,eAAgBA,EAChBH,aAAcA,EACdC,WAAYA,EACZK,gBAAiBA,EACjBJ,QAASA,IAGXgD,EAAAA,cAACmE,EAAkC,CACjCrH,aAAcA,EACdE,QAASA,IAGXgD,EAAAA,cAAC+F,EAA0B,CACzB9I,eAAgBA,EAChBD,QAASA,EACTF,aAAcA,EACdM,gBAAiBA,EACjBL,WAAYA,IAIpB,E,qCCyEA,SAASiJ,GAAiB,WACxBjJ,EAAU,YACVM,EAAW,kBACX4I,EAAiB,UACjBxF,EACAyF,YAAaC,EAAe,qBAC5BC,IAEA,MAAQC,UAAWC,EAAsBC,EAAAA,IACvCH,EAAqBI,IAAI,eAAiB,CAAC,GAEtCN,EAAaO,IAAkB5I,EAAAA,EAAAA,UAASsI,IAE/CrI,EAAAA,EAAAA,YAAU,KACR2I,EAAeN,EAAgB,GAC9B,CAACA,KAKJrI,EAAAA,EAAAA,YAAU,KACR,IAAKoI,EACH,OAGF,MAAMQ,EAA6BvG,IACjC,MAAM,SAAEwG,EAAQ,eAAEC,EAAc,cAAEC,EAAa,aAAEC,GAAiB3G,EAAIZ,OACtEkH,EAAe,CAAEE,WAAUC,iBAAgBC,gBAAeE,MAAOD,GAAe,EAQlF,OALAE,EAAAA,YAAYrH,iBACVsH,EAAAA,GAAAA,EAAsBC,wCACtBR,GAGK,KACLM,EAAAA,YAAYnH,oBACVoH,EAAAA,GAAAA,EAAsBC,wCACtBR,EACD,CACF,GACA,CAACR,KAEJpI,EAAAA,EAAAA,YAAU,KACR,IAAKoI,EACH,OAGF,MAAM,SAAES,EAAQ,eAAEC,EAAc,cAAEC,EAAa,aAAEC,GAAiBZ,GAAe,CAAC,EACnEiB,EAAAA,MAAMC,UAAUT,GACxBC,eAAiBA,EAExBH,EAAe,CAAEE,WAAUC,iBAAgBC,gBAAeE,MAAOD,GAAe,GAC/E,IAEH,MAAMO,GAAoBC,EAAAA,EAAAA,cAAYnC,IACpC,MAAM,SAAEwB,EAAQ,eAAEC,GAAmBzB,EACtBgC,EAAAA,MAAMC,UAAUT,GACxBC,eAAiBA,CAAc,GACrC,IAEH,OACE5G,EAAAA,cAACsG,EAAmB,CAClBxC,UAAU,8CACVyD,UAAWtB,EACXxF,UAAWA,EACX+G,QAASA,KAEPnK,EAAYmD,QAAQ,CAClBrC,GAAIpB,EACJ0D,WAAW,IAEbpD,EAAYoK,kBAAiB,EAAM,EAErCC,kBAAmBjH,IACjBpD,EAAYmD,QAAQ,CAClBrC,GAAIpB,EACJ0D,aACA,EAEJkH,kBAAmBJ,GACjBlK,EAAYmD,QAAQ,CAClBrC,GAAIpB,EACJwK,cAGJrB,YAAaA,EACbmB,kBAAmBA,GAGzB,CAEA,MClPA,EDIA,UAA2B,iBACzBO,EAAgB,WAChB7K,EAAU,gBACVK,IAKA,MAAM,qBAAEgJ,EAAoB,kBAAEyB,EAAiB,oBAAEtK,GAAwBH,EAAgBM,WAClF,cAAE2C,EAAa,MAAEyH,GAASzK,IAAe0K,EAAAA,EAAAA,OACzC9B,EAAmB+B,IAAwBnK,EAAAA,EAAAA,UAAS,KACpDqI,EAAaO,IAAkB5I,EAAAA,EAAAA,UAAS,OACxCoK,IAAaC,EAAAA,EAAAA,KACdC,GAAe1D,EAAAA,EAAAA,QAAO,MAEtB2D,EAAcA,KAClB,IAAKN,IAAQ/K,KAAgB6K,EAC3B,OAGF,MAAM,UAAEnH,GAAY,EAAK,UAAE8G,EAAY,IAAOO,EAAM/K,GAC9CsL,EAAiBnJ,KAAK+B,IAAIsG,EAAW,GAE3C,OAAO9G,EACHpD,EAAYiL,SAASV,EAAkB,CAAEW,gBAAiBF,EAAgBtL,eAC1EM,EAAYkD,SAASqH,EAAiB,EAGtCY,GAAuBlB,EAAAA,EAAAA,cAAY,KACvC,IAAKM,IAAqBvH,EACxB,OAGF,MAAM,UAAEoI,GAAclL,EAAoB+C,YACpC,uBAAEoI,GAA2BD,EAAUjC,IAAIzJ,GACjD,IAAIwK,EAAY,GACZ9G,EAAYqH,EAAM/K,IAAa0D,YAAa,EAChDiI,EAAuBC,SAAQC,IAC7B,MAAMC,EAAahB,EAAkBiB,mBAAmBF,GAUxD,GARIC,EAAWE,YAGbxB,EAAYrI,KAAKC,MAAM,IAAO0J,EAAWE,WACzCtI,MAAgBwH,EAAUe,cAIxBH,EAAWI,gBAAiB,CAC9B,MAAM,kBAAEC,GAAsBL,EACxBhC,EAAgBqC,EAAkBC,WAAWzJ,OAC7CqH,EAAQmC,EAAkBpC,aAC1BF,EAAiBsC,EAAkBtC,gBAAkB,EAC3DH,EAAe,CACbE,SAAUkC,EAAWD,sBACrBhC,iBACAC,gBACAE,SAEJ,MACEN,EAAe,KACjB,IAGEhG,GACFpD,EAAYoK,iBAAiBhH,GAE/BpD,EAAYmD,QAAQ,CAAErC,GAAIpB,EAAY0D,YAAW8G,cACjDS,EAAqBT,EAAU,GAC9B,CAACM,EAAmB9K,EAAYQ,EAAqBuK,EAAOzH,EAAeuH,IA0D9E,IAxDA9J,EAAAA,EAAAA,YAAU,KACRqK,EAAatD,SAAU,EAEvB2D,IAEO,KACLL,EAAatD,SAAU,CAAK,IAE7B,CAACxE,EAAemI,KAEnB1K,EAAAA,EAAAA,YAAU,KACHuC,GAIL+H,GAAa,GACZ,CAAC/H,EAAe+H,EAAaR,KAKhC9J,EAAAA,EAAAA,YAAU,KACR,GAAK8J,EAWL,OAPAZ,EAAAA,YAAYrH,iBAAiBlB,EAAAA,MAAAA,OAAa2K,yBAA0BZ,GAEpEZ,EAAiBjI,iBACflB,EAAAA,MAAAA,OAAa4K,2BACbb,GAGK,KACLnL,EAAYmD,QAAQ,CAAErC,GAAIpB,EAAY0D,WAAW,IAEjDuG,EAAAA,YAAYnH,oBAAoBpB,EAAAA,MAAAA,OAAa2K,yBAA0BZ,GACvEZ,EAAiB/H,oBACfpB,EAAAA,MAAAA,OAAa4K,2BACbb,EACD,CACF,GACA,CAACZ,EAAkBY,EAAsBzL,KAE5Ce,EAAAA,EAAAA,YAAU,KACR,GAAKgK,GAAUA,EAAM/K,IAAgB6K,GAAqBO,EAAatD,QAMvE,OAFAuD,IAEO,KACL/K,EAAYkD,SAASqH,EAAkB,CAAE7K,cAAa,CACvD,GACA,CAAC+K,EAAO/K,EAAYM,EAAauK,EAAkBQ,KAEjD/H,EACH,OAAO,KAGT,MAAMiJ,EAAOxB,EAAM/K,GACb0D,EAAY6I,GAAM7I,YAAa,EAErC,OACET,EAAAA,cAACgG,EAAgB,CACfjJ,WAAYA,EACZM,YAAaA,EACb4I,kBAAmBA,EACnBxF,UAAWA,EACXyF,YAAaA,EACbE,qBAAsBA,GAG5B,E,eEhIA,QAdA,UAAmC,WAAErJ,IACnC,MAAOwM,IAA8BC,EAAAA,EAAAA,MAErC,OAAKD,EAA2BxM,GAK9BiD,EAAAA,cAACyJ,EAAAA,GAAqB,CACpBC,iBAAkBH,EAA2BxM,KALxC,IAQX,E,eCfO,SAAS4M,GAAS,UACvBC,EAAS,WACT7M,EAAU,YACV8M,EAAW,gBACXC,EAAe,gBACf1M,IAEA,MAAM,2BAAEE,GAA+BF,EAAgBM,UAEhDqM,EAAkBC,IAAuBnM,EAAAA,EAAAA,UAASgM,EAAY,KAE9DI,EAAaC,IAAkBrM,EAAAA,EAAAA,WAAS,IACxCsM,EAAoBC,IAAyBvM,EAAAA,EAAAA,UAAS,MAEvDwM,GAAiB5F,EAAAA,EAAAA,QAAOwF,GAC9BI,EAAexF,QAAUoF,EACzB,MAAMK,GAAwB7F,EAAAA,EAAAA,QAAO0F,GACrCG,EAAsBzF,QAAUsF,EAChC,MAAMI,GAAsB9F,EAAAA,EAAAA,QAAOsF,GACnCQ,EAAoB1F,QAAUkF,EAE9B,MAAMS,GAAgBlD,EAAAA,EAAAA,cACpBnC,IAEE,MACMsF,EACJZ,EAAYnK,OAAS,IAFK,CAAC,YAAa,SAEOgL,SAASvF,EAAMwF,SAASC,MAAQ,GAAM,EACvFd,EAAgBe,IAAI,CAClBC,YAAa,sBACbC,eAAgB,IACX5F,EACHsF,UACAO,WAAW,GAEbC,QAAS,eACT,GAEJ,CAACnB,IAsBGoB,GAAU3I,EAAAA,EAAAA,UAAQ,IACfsH,EAAYlG,KAAI,CAACkF,EAAYhF,KAAU,CAC5CsH,SAAUtC,EAAWuC,SACrBpH,IAAKH,EACLwH,MAAO,CACLC,SAAU,eAAezB,EAAYnK,UACrC6L,SAAU,SACVC,UAAW,SACXC,QAAS,OACTC,eAAgB,SAChBC,WAAY,eAGf,CAAC9B,IAMJ,OAJA/L,EAAAA,EAAAA,YAAU,KACRkM,EAAoBH,EAAYA,EAAYnK,OAAS,GAAG,GACvD,CAACmK,IAGF7J,EAAAA,cAAAA,EAAAA,SAAA,KACGkL,EAAQxL,OAAS,GAChBM,EAAAA,cAAA,OAAK8D,UAAU,mDACb9D,EAAAA,cAAC4L,EAAAA,GAAW,CACVC,oBAAqBhI,IACnBmG,EAAoBH,EAAYhG,IAChCuG,EAAsB,KAAK,EAE7B0B,YACEjC,EAAYvL,WACVyN,GAAMA,EAAGnD,wBAA0B2B,EAAoB1F,QAAQ+D,yBAC5D,EAEP9E,UAAU,uBAEToH,EAAQvH,KAAI,EAAGwH,WAAUnH,MAAKqH,WAC7BrL,EAAAA,cAAA,OACEgE,IAAKA,EACLqH,MAAOA,GAENF,OAMXnL,EAAAA,cAAA,OAAK8D,UAAU,mDACb9D,EAAAA,cAACgM,EAAAA,GAAY,CACXjF,MAAM,sBACNkF,QAAShC,EACT/J,SAAU+L,IACR/B,EAAe+B,EAAQ,KAI7BjM,EAAAA,cAACkM,EAAAA,GAAAA,GAAwB,MACzBlM,EAAAA,cAACkM,EAAAA,GAAAA,GAAsB,KACpBtC,EAAUjG,KAAI,CAACgH,EAAU9G,IACxB7D,EAAAA,cAACkM,EAAAA,GAAAA,GAAiB,CAChBlI,IAAKH,EACLkD,MAAO4D,EAASwB,YAChBC,QAASA,KACP5B,EAAc,CACZzN,aACA4N,WACA/B,sBAAuB2B,EAAoB1F,QAAQ+D,wBAErDwB,EAAsB,KAAK,EAE7BiC,aAAcA,KACRhC,EAAexF,UACjBuF,EA1FckC,EAACvP,EAAY8L,KACvC,MAAM,sBAAED,GAA0BC,EAC5B9K,EAAWT,EAA2BU,uBAAuBjB,GACnE,GAAIgB,aAAoBwO,EAAAA,cAAe,CACrC,MAAM,SAAE5B,GAAa5M,EAASyO,gBAC9B,OAAK7B,GACIf,EAAU6C,MAAKC,GAAgB,cAAXA,EAAEC,QAAyB/C,EAAU,EAGpE,CACA,MACMgD,EADe7O,EAAS8O,YACEJ,MAAKK,GAASA,EAAMC,IAAIrC,SAAS9B,MAC3D,SAAE+B,GAAa5M,EAASyO,cAAcI,EAAWG,KACvD,OAAKpC,GACIf,EAAU6C,MAAKC,GAAgB,cAAXA,EAAEC,QAAyB/C,EAAU,EAEnD,EA0EmB0C,CAAoBvP,EAAYwN,EAAoB1F,UAC1E2F,EAAc,CACZzN,aACA4N,WACA/B,sBAAuB2B,EAAoB1F,QAAQ+D,wBAEvD,EAEFoE,aAAcA,KACR3C,EAAexF,SAAWyF,EAAsBzF,SAClD2F,EAAc,CACZzN,aACA4N,SAAUL,EAAsBzF,QAChC+D,sBAAuB2B,EAAoB1F,QAAQ+D,uBAEvD,OAOd,CCvJO,SAASqE,EACdlQ,EACA8M,EACAC,EACA1M,EACA8P,GAEA,MAAM,2BAAE5P,GAA+BF,EAAgBM,SACjDK,EAAWT,EAA2BU,uBAAuBjB,GAG7DoQ,EADe7P,EAA2BoG,gBAAgB3G,GAC3BqQ,qBAAqBC,aAC1CF,GAAkBtO,EAAAA,UAAAA,QAAkBsO,EAAiB,CAAC,EAAG,EAAG,MAG1ED,EAAgBI,MAAQ,CACtBC,SAAU,OACVlC,MAAO,CACLmC,KAAM,aACNC,MAAO,UACPC,YAAa,EACbC,SAAU,EACVC,UAAW,EACXC,YAAa,KAKnB,MAAMnF,EAAyB,GAE3B3K,aAAoBwO,EAAAA,eACtB7D,EAAuBoF,KAAK/Q,GAG1BgB,aAAoBgQ,EAAAA,gBACtBlE,EAAYlB,SAAQoD,IAClBrD,EAAuBoF,KAAK/B,EAAGnD,sBAAsB,IAIzDkB,EAAgBe,IAAI,CAClBC,YAAa,yBACbC,eAAgB,CACdhO,aACAiR,QAASd,EACTxE,0BAEFuC,QAAS,eAEb,CAEO,SAASgD,GAAS,WACvBlR,EAAU,YACV8M,EAAW,gBACXC,EAAe,gBACf1M,EAAe,mBACf8Q,IAEA,MAAM,gBAAEC,GAAoB/Q,EAAgBM,UAE1C0Q,MAAOC,EAAa,qBACpBC,EAAoB,0BACpBC,EAAyB,UACzB3E,EAAS,wBACT4E,GACEN,GACGO,EAAcC,IAAmB7Q,EAAAA,EAAAA,UAASsQ,EAAgBQ,YAAY5R,IAEvE6R,GAAgBtH,EAAAA,EAAAA,cAAY,KAChC2F,EAAoBlQ,EAAY8M,EAAaC,EAAiB1M,EAAiB,CAC7EL,aACA6M,YACA0D,MAAO,CACLC,SAAUe,GAEZF,MAAOC,EACPd,SAAUgB,EACVM,mBAAoBL,GACpB,GACD,CAAC1E,IAiBJ,OAfAhM,EAAAA,EAAAA,YAAU,KACR,MAIM,YAAEuH,GAAgB8I,EAAgB7I,UACtC6I,EAAgB5I,OAAOuJ,eALGC,KAC1BL,EAAgBP,EAAgBQ,YAAY5R,GAAY,IAQ1D,MAAO,KACLsI,GAAa,CACd,GACA,CAACtI,IAGFiD,EAAAA,cAAA,OAAK8D,UAAU,mDACb9D,EAAAA,cAAA,OAAK8D,UAAU,kBACf9D,EAAAA,cAACgM,EAAAA,GAAY,CACXjF,MAAM,oBACNkF,QAASwC,EACTvO,SAAUA,KACR0O,GAAe,IAKzB,CCtGO,SAASI,GAAY,WAC1BjS,EAAU,gBACV+M,EAAe,QACfmF,IAEA,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,IAAe,yBAEvBC,GAAmB9H,EAAAA,EAAAA,cACvBnC,IACE2E,EAAgBe,IAAI,CAClBC,YAAa,yBACbC,eAAgB,IACX5F,EACHpI,cAEFkO,QAAS,eACT,GAEJ,CAACnB,EAAiB/M,IAGpB,OACEiD,EAAAA,cAACkM,EAAAA,GAAAA,GAAsB,KACpB+C,EAAQtL,KAAI,CAAC0L,EAAiBC,IAC7BtP,EAAAA,cAACA,EAAAA,SAAc,CAACgE,IAAKsL,GAClBC,OAAOC,QAAQH,GAAiB1L,KAAI,EAAE8L,EAAUC,KAC/C1P,EAAAA,cAACA,EAAAA,SAAc,CAACgE,IAAKyL,GACnBzP,EAAAA,cAACkM,EAAAA,GAAAA,GAAuB,KACrBgD,EAAE,mBAAoB,CAAEO,cAE1BC,EAAa/L,KAAI,CAACgM,EAAQ9L,IACzB7D,EAAAA,cAACkM,EAAAA,GAAAA,GAAiB,CAChBlI,IAAK,GAAGyL,KAAY5L,IACpBkD,MAAO4I,EAAOxD,YACdyD,eAAgB,GAAGD,EAAOE,YAAYF,EAAOG,QAC7C1D,QAASA,IAAMgD,EAAiBO,aASlD,CClDO,SAASI,GAA8B,QAC5Cd,EAAO,WACPlS,EAAU,gBACV+M,EAAe,QACftC,IAEA,MAAOwI,EAAiBC,IAAsBpS,EAAAA,EAAAA,UAASoR,IAChDiB,EAAaC,IAAkBtS,EAAAA,EAAAA,UAAS,KACxCuS,EAAgBC,IAAqBxS,EAAAA,EAAAA,UAAgC,MAEtEyS,GAAqBhJ,EAAAA,EAAAA,cACxBnG,IACCgP,EAAehP,GACf,MAAMoP,EAAWpP,EACb8N,EAAQuB,QAAOb,GAAUA,EAAO/E,KAAK6F,cAAc/F,SAASvJ,EAAMsP,iBAClExB,EACJgB,EAAmBM,EAAS,GAE9B,CAACtB,IAGGyB,GAAcpJ,EAAAA,EAAAA,cAClBnC,IACE2E,EAAgB6G,WAAW,oBAAqB,IAC3CxL,GACH,GAEJ,CAAC2E,IAOH,OACE9J,EAAAA,cAAA,OAAK8D,UAAU,mDACb9D,EAAAA,cAAA,OAAK8D,UAAU,0FACb9D,EAAAA,cAAA,OAAK8D,UAAU,mDACb9D,EAAAA,cAAA,OAAK8D,UAAU,sBACb9D,EAAAA,cAAC4Q,EAAAA,GAAe,CACdzP,MAAO+O,EACPW,iBAAkBP,EAClBQ,YAAa,iBAInB9Q,EAAAA,cAAA,OAAK8D,UAAU,4DACb9D,EAAAA,cAAA,OAAK8D,UAAU,oCACZkM,EAAgBrM,KAAI,CAACgM,EAAQ9L,KAC5B7D,SAAAA,cAAA,OACEgE,IAAKH,EACLC,UAAU,2CACVsI,QAASA,KACPiE,EAAkBV,GAClBe,EAAY,CAAEf,OAAQA,EAAO/E,KAAM7N,cAAa,GAGlDiD,EAAAA,cAAC+Q,EAAAA,GAAI,CACHnG,KAAM+E,EAAO/E,KACb9G,UACEsM,GAAgBxF,OAAS+E,EAAO/E,KAC5B,qEACA,0FAGR5K,EAAAA,cAAA,SAAO8D,UAAU,0CAnCViD,EAoCQ4I,EAAO/E,KApCAoG,EAoCM,GAnCjCjK,EAAMrH,OAASsR,EAAW,GAAGjK,EAAMkK,MAAM,EAAGD,QAAiBjK,KADlDmK,IAACnK,EAAeiK,CAuCzB,OAIPhR,EAAAA,cAAA,UAAQ8D,UAAU,iDAChB9D,EAAAA,cAAA,OAAK8D,UAAU,QACb9D,EAAAA,cAACmR,EAAAA,GAAM,CACLvG,KAAK,SACLwG,KAAMC,EAAAA,GAAAA,GAAiBC,OACvBC,KAAMF,EAAAA,GAAAA,GAAiBG,UACvBpF,QAAS5E,GAER,IAAI,SACE,OAMnB,CCzFO,SAASiK,GAAuB,WACrC1U,EAAU,gBACVK,EAAe,gBACf0M,EAAe,uBACf4H,IAEA,MAAM,eAAEC,GAAmBvU,EAAgBM,SAkB3C,OACEsC,EAAAA,cAACkM,EAAAA,GAAAA,GAAiB,CAChBnF,MAAM,oBACN6K,KAAM5R,EAAAA,cAAC+Q,EAAAA,GAAI,CAACnG,KAAK,oBACjBiH,UAAW7R,EAAAA,cAAC+Q,EAAAA,GAAI,CAACnG,KAAK,sBACtBwB,QArBmB0F,KACrBH,EAAeI,KAAK,CAClBC,QAASjC,EACTkC,MAAO,oBACPC,SAAS,EACTC,aAAc,CACZ3K,QAASmK,EAAeS,KACxBnD,QAASyC,EACT3U,aACA+M,mBAEFuI,oBAAqB,sBACrBC,kBAAmB,4CACnB,GAWN,CClCO,SAASC,GAAuB,4BACrCC,EAA2B,gBAC3B1I,EAAe,gBACf1M,EAAe,WACfL,IAEA,MAAM,2BAAEO,GAA+BF,EAAgBM,UACjD,IAAE+U,EAAG,IAAExR,EAAG,KAAEyR,GAASF,GACpBG,EAASC,IAAc/U,EAAAA,EAAAA,UAAS,MAEjCqC,GAAWoH,EAAAA,EAAAA,cACdnG,IACC2I,EAAgB6G,WAAW,4BAA6B,CACtD5T,aACA8V,cAAe1R,IAEjByR,EAAWzR,EAAM,GAEnB,CAAC2I,EAAiB/M,IAsBpB,OAdAe,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWT,EAA2BU,uBAAuBjB,IAC7D,MAAE+V,GAAU/U,EAAS8O,YAAY,GACjCkG,EAASD,EAAME,YAEfC,EADQF,EAAOG,eACCC,aAChBC,EAAiBL,EAAOM,oBACxBC,EAAiBL,EAAQM,QAAO,CAACC,EAAGC,IAAMD,EAAIC,IAAK,EAEvDb,EADEQ,IAAmBE,EACV,EAEApU,KAAKwU,KAAKJ,GAAmC,GAAjBF,IACzC,GACC,CAAC9V,EAA4BP,IAE9BiD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK8D,UAAU,uFACb9D,EAAAA,cAAA,SACE8D,UAAU,mBACV6P,QAAQ,UACT,WAGY,OAAZhB,GACC3S,EAAAA,cAAA,SACE8D,UAAU,6EACV3C,MAAOwR,EACPxU,GAAG,SACH8C,IAAKA,EACLwR,IAAKA,EACLlB,KAAK,QACLmB,KAAMA,EACNxS,SAAU0T,GAAK1T,EAAS2T,SAASD,EAAEE,OAAO3S,MAAO,KACjDkK,MAAO,CACLgC,WAvCgBlM,KAC1B,MAAM4S,GAAe5S,EAAQ,GAAK,EAAW,IAC7C,MAAO,iDAAiD4S,eAAwBA,mBAA4B,EAqCtFC,EAAqBrB,EAAUF,IAAQxR,EAAMwR,IACzD,sBAAuB,UACvB,sBAAuB,cAOrC,CCrEO,SAASwB,GAAY,WAC1BlX,EAAU,gBACV+M,EAAe,gBACf1M,IAEA,MAAM,2BAAEE,GAA+BF,EAAgBM,UAChDwW,EAAUC,IAAetW,EAAAA,EAAAA,UAAwB,OACjDuW,EAAUC,IAAexW,EAAAA,EAAAA,UAAwB,OACjDyW,EAAOC,IAAY1W,EAAAA,EAAAA,UACxBP,EAA2BU,uBAAuBjB,IAAayX,WAAa,IAEvE9B,EAAM+B,IAAW5W,EAAAA,EAAAA,UAAwB,OACzC6W,EAAYC,IAAiB9W,EAAAA,EAAAA,WAAS,GAEvC+W,GAAenQ,EAAAA,EAAAA,QAAe6P,GAE9BvW,EAAWT,EAA2BU,uBAAuBjB,IAC7D,MAAE+V,GAAU/U,EAAS8O,YAAY,GACjCgI,EAAO/B,EAAMgC,cAAcC,iBAAiB,IAElDjX,EAAAA,EAAAA,YAAU,KACR,GAAI4W,EACF,OAEF,MAAMM,EAAQH,EAAKI,WAEbC,EAAwBF,EAAM,GAAKA,EAAM,GAGzCZ,EAAWc,EAEjBf,GAHkBe,GAIlBb,EAAYD,GACZK,EAAQvV,KAAKiW,IAAI,GAAIjW,KAAK6B,MAAM7B,KAAKkW,MAAMF,EAAwB,OAAO,GACzE,CAAC5X,EAA4BP,EAAY+V,EAAO+B,EAAMH,IAEzD,MAAMW,GAAgB/N,EAAAA,EAAAA,cACpBgO,IACE,MAAMC,EAAkBD,EAAWV,EAAa/P,QAChD+P,EAAa/P,QAAUyQ,EACvBvX,EAASyW,UAAYc,EACrBxL,EAAgB6G,WAAW,2BAA4B,CACrD5T,aACAuX,MAAOiB,GACP,GAEJ,CAACzL,EAAiB/M,EAAYgB,IAQhC,OACEiC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK8D,UAAU,uFACb9D,EAAAA,cAAA,SACE8D,UAAU,oBACV6P,QAAQ,SACT,SAGS,OAATjB,GACC1S,EAAAA,cAAA,SACE8D,UAAU,6EACV3C,MAAOmT,EACPpU,SAAU0T,IACR,MAAM4B,EAAa3B,SAASD,EAAEE,OAAO3S,MAAO,IAC5CoT,EAASiB,GACTH,EAAcG,EAAW,EAE3BrX,GAAG,QACHsX,YAAaA,IAAMd,GAAc,GACjCe,UAAWA,IAAMf,GAAc,GAC/B1T,IAAKmT,EACL3B,IAAKyB,EACL3C,KAAK,QACLmB,KAAMA,EACNrH,MAAO,CACLgC,WA/BgBlM,KAC1B,MAAM4S,GAAe5S,EAAQ,GAAK,EAAW,IAC7C,MAAO,iDAAiD4S,eAAwBA,mBAA4B,EA6BtFC,EAAqBM,EAAQJ,IAAaE,EAAWF,IACjE,sBAAuB,UACvB,sBAAuB,cAOrC,CCzFO,SAASyB,GAAe,gBAC7BvY,EAAe,gBACf0M,EAAe,WACf/M,IAEA,MAAM,2BAAEO,GAA+BF,EAAgBM,UAChDkY,EAASC,IAAchY,EAAAA,EAAAA,UAAS,OAChCiY,EAASC,IAAclY,EAAAA,EAAAA,UAAS,OAChCmY,EAAUC,IAAepY,EAAAA,EAAAA,UAAS,MAEnCqY,GAAkB5O,EAAAA,EAAAA,cAAY,KAClCwC,EAAgB6G,WAAW,oBAAqB,CAAE5T,aAAYiR,QAAS,CAAE4H,YAAY,GACpF,CAACA,EAAS9L,EAAiB/M,IAExBoZ,GAAkB7O,EAAAA,EAAAA,cAAY,KAClCwC,EAAgB6G,WAAW,oBAAqB,CAAE5T,aAAYiR,QAAS,CAAE8H,YAAY,GACpF,CAACA,EAAShM,EAAiB/M,IAExBqZ,GAAmB9O,EAAAA,EAAAA,cAAY,KACnCwC,EAAgB6G,WAAW,oBAAqB,CAAE5T,aAAYiR,QAAS,CAAEgI,aAAa,GACrF,CAACA,EAAUlM,EAAiB/M,IAEzBiX,EAAsB7S,IAC1B,MAAM4S,GAAe5S,EAAQ,GAAK,EAAW,IAC7C,MAAO,iDAAiD4S,eAAwBA,mBAA4B,EAa9G,OAVAjW,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWT,EAA2BU,uBAAuBjB,IAC7D,MAAE+V,GAAU/U,EAAS8O,YAAY,GACjC+I,EAAU9C,EAAMgC,cAAcuB,aAC9BP,EAAUhD,EAAMgC,cAAcwB,aAC9BN,EAAWlD,EAAMgC,cAAcyB,cACrCV,EAAWD,GACXG,EAAWD,GACXG,EAAYD,EAAS,GACpB,CAACjZ,EAAYO,IAEd0C,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK8D,UAAU,uFACb9D,EAAAA,cAAA,SACE8D,UAAU,oBACV6P,QAAQ,WACT,WAGY,OAAZiC,GACC5V,EAAAA,cAAA,SACE8D,UAAU,6EACV3C,MAAOyU,EACP1V,SAAU0T,IACRiC,EAAWjC,EAAEE,OAAO3S,OACpB+U,GAAiB,EAEnB/X,GAAG,UACH8C,IAAK,EACLwR,IAAK,EACLlB,KAAK,QACLmB,KAAM,GACNrH,MAAO,CACLgC,WAAY2G,EAAoB4B,GAChC,sBAAuB,UACvB,sBAAuB,cAK/B5V,EAAAA,cAAA,OAAK8D,UAAU,uFACb9D,EAAAA,cAAA,SACE8D,UAAU,oBACV6P,QAAQ,WACT,WAGY,OAAZmC,GACC9V,EAAAA,cAAA,SACE8D,UAAU,6EACV3C,MAAO2U,EACP5V,SAAU0T,IACRmC,EAAWnC,EAAEE,OAAO3S,OACpBgV,GAAiB,EAEnBhY,GAAG,UACH8C,IAAK,EACLwR,IAAK,EACLlB,KAAK,QACLmB,KAAM,GACNrH,MAAO,CACLgC,WAAY2G,EAAoB8B,GAChC,sBAAuB,UACvB,sBAAuB,cAM/B9V,EAAAA,cAAA,OAAK8D,UAAU,uFACb9D,EAAAA,cAAA,SACE8D,UAAU,oBACV6P,QAAQ,YACT,YAGa,OAAbqC,GACChW,EAAAA,cAAA,SACE8D,UAAU,6EACV3C,MAAO6U,EACP9V,SAAU0T,IACRqC,EAAYrC,EAAEE,OAAO3S,OACrBiV,GAAkB,EAEpBjY,GAAG,WACH8C,IAAK,EACLwR,IAAK,EACLlB,KAAK,QACLmB,KAAM,GACNrH,MAAO,CACLgC,WAAY2G,EAAoBgC,GAChC,sBAAuB,UACvB,sBAAuB,cAOrC,CC7HO,SAASQ,GAAY,gBAC1B1M,EAAe,WACf/M,EAAU,gBACVK,IAEA,MAAM,2BAAEE,GAA+BF,EAAgBM,UAChD+Y,EAAOC,IAAY7Y,EAAAA,EAAAA,WAAS,IAC5BmG,EAAK2S,IAAU9Y,EAAAA,EAAAA,UAAS,GAEzB+Y,GAAgBtP,EAAAA,EAAAA,cACnB2E,IACCnC,EAAgB6G,WAAW,oBAAqB,CAAE5T,aAAYiR,QAAS,CAAEyI,MAAOxK,IAAY,GAE9F,CAACnC,EAAiB/M,IAUpB,OARAe,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWT,EAA2BU,uBAAuBjB,IAC7D,MAAE+V,GAAU/U,EAAS8O,YAAY,GACjC4J,EAAQ3D,EAAMgC,cAAc+B,WAClCH,EAASD,GACTE,EAAO3S,EAAM,EAAE,GACd,CAACjH,EAAYO,IAGd0C,EAAAA,cAACgM,EAAAA,GAAY,CACXhI,IAAKA,EACL+C,MAAM,QACNkF,QAASwK,EACTvW,SAAUA,KACRwW,GAAUD,GACVG,GAAeH,EAAM,GAI7B,CC/BO,SAASK,GAAuB,WACrC/Z,EAAU,gBACV+M,EAAe,4BACf0I,EAA2B,gBAC3BpV,IAEA,OACE4C,EAAAA,cAACkM,EAAAA,GAAAA,GAAsB,KACrBlM,EAAAA,cAACuS,EAAsB,CACrBxV,WAAYA,EACZ+M,gBAAiBA,EACjB1M,gBAAiBA,EACjBoV,4BAA6BA,IAG/BxS,EAAAA,cAACiU,EAAW,CACVlX,WAAYA,EACZ+M,gBAAiBA,EACjB1M,gBAAiBA,IAEnB4C,EAAAA,cAAA,OAAK8D,UAAU,iEACb9D,EAAAA,cAAA,OAAK8D,UAAU,8BAA6B,aAE9C9D,EAAAA,cAAA,OAAK8D,UAAU,6CACf9D,EAAAA,cAAA,OAAK8D,UAAU,mDACb9D,EAAAA,cAACwW,EAAW,CACV1M,gBAAiBA,EACjB1M,gBAAiBA,EACjBL,WAAYA,KAGhBiD,EAAAA,cAAC2V,EAAc,CACb5Y,WAAYA,EACZ+M,gBAAiBA,EACjB1M,gBAAiBA,IAIzB,CChBO,SAAS2Z,GAAsB,WACpCha,EAAU,QACVC,EAAO,QACPiS,EAAO,kBACP+H,EAAiB,oBACjBC,EAAmB,gBACnBnN,EAAe,gBACf1M,EAAe,mBACf8Q,EAAkB,YAClBrE,EAAW,uBACX6H,EAAsB,4BACtBc,IAEA,MAAM,UACJ5I,EAAS,0BACT2E,EAAyB,wBACzBC,EAAuB,qBACvBF,EACAF,MAAOC,GACLH,GACE,gBAAEC,EAAe,2BAAE7Q,GAA+BF,EAAgBM,SAClE+H,EAAenI,EAA2BoG,gBAAgB3G,GAC1DgB,EAAWT,EAA2BU,uBAAuBjB,GAC7DoQ,EAAkB1H,EAAa2H,qBAAqBC,WACpD6J,IAAU/J,GAAkBtO,EAAAA,UAAAA,QAAkBsO,EAAiB,CAAC,EAAG,EAAG,IAEtEgK,EAAqB,CAAC,KAAM,MAAO,KAAM,WAAY,SAAU,WAE/D,EAAEjI,IAAMC,EAAAA,EAAAA,IAAe,0BAEtBiI,IAAgBC,EAAAA,EAAAA,OACjB,iBAAEC,GAAqBF,GAEtBG,EAAUC,IAAe3Z,EAAAA,EAAAA,UAASb,GAASya,eAC3CC,EAASC,IAAc9Z,EAAAA,EAAAA,UAAS,IAChC+Z,EAAYC,IAAiBha,EAAAA,EAAAA,WAAS,GAEvC+Q,GAAgBtH,EAAAA,EAAAA,cAAY,KAChC2F,EAAoBlQ,EAAY8M,EAAaC,EAAiB1M,EAAiB,CAC7EwM,YACA0D,MAAO,CACLC,SAAUe,GAEZF,MAAOC,EACPd,SAAUgB,EACVM,mBAAoBL,GACpB,GACD,CAAC1E,IAsCJ,OApCAhM,EAAAA,EAAAA,YAAU,KACR,MAAMga,EAAc9a,GAASya,aACzBF,IAAaO,GACfN,EAAYM,EACd,GACC,CAAC9a,EAASua,KAEbzZ,EAAAA,EAAAA,YAAU,KACHqQ,EAAgBQ,YAAY5R,IAGjC8S,OAAO/K,YAAW,KAChBqJ,EAAgB4J,eAAehb,GAC/B6R,GAAe,GACd,EAAE,GACJ,CAAC7R,EAAY8M,EAAa9L,KAE7BD,EAAAA,EAAAA,YAAU,KACR6Z,EAAWD,EAAU,GACJpa,EAA2BU,uBAAuBjB,aAC3Cib,EAAAA,iBACtBH,GAAc,GAEdA,GAAc,EAChB,GACC,CACDhO,EACA9M,EACAkS,EACAuD,EACAd,EACAxD,EACAoJ,EACAF,IAIApX,EAAAA,cAACkM,EAAAA,GAAAA,GAAqB,CACpB0F,KAAK,wBACLoF,kBAAmBA,EACnBC,oBAAqBA,EACrBgB,cAAelU,IAEbuT,IAAqBva,EAAa,UAAY,gCAC9C,4EACAma,EAAU,2BAA6B,+BAEzCgB,UAAW,CAAEC,UAAWZ,EAAW,GAAIjM,SAAU,KACjD8M,mBAAoBA,KAClBZ,EAAYxa,EAAQya,aAAa,EAEnCC,QAASA,GAET1X,EAAAA,cAACkM,EAAAA,GAAAA,GAAsB,MACnB0L,GACA5X,EAAAA,cAACiO,EAAQ,CACPlR,WAAYA,EACZ8M,YAAaA,EAAY2G,QAAOzE,IAAOoL,EAAmBzM,SAASqB,EAAGX,YACtEtB,gBAAiBA,EACjB1M,gBAAiBA,EACjB8Q,mBAAoBA,IAIvBtE,IAAcgO,GACb5X,EAAAA,cAACkM,EAAAA,GAAAA,GAAoB,CACnBlI,IAAI,kBACJqU,UAAU,YACVC,SAAS,kBAETtY,EAAAA,cAAC2J,EAAQ,CACPC,UAAWA,EACX7M,WAAYA,EACZ8M,YAAaA,EAAY2G,QAAOzE,IAAOoL,EAAmBzM,SAASqB,EAAGX,YACtEtB,gBAAiBA,EACjB1M,gBAAiBA,KAKtB6R,GAAWA,EAAQvP,OAAS,IAAMkY,GACjC5X,EAAAA,cAACkM,EAAAA,GAAAA,GAAoB,CACnBlI,IAAI,qBACJqU,UAAWnJ,EAAE,2BACboJ,SAAS,yBAETtY,EAAAA,cAACgP,EAAW,CACVjS,WAAYA,EACZ+M,gBAAiBA,EACjBmF,QAASA,KAKdyC,GAA0BkG,GACzB5X,EAAAA,cAACyR,EAAsB,CACrBrU,gBAAiBA,EACjBL,WAAYA,EACZ+M,gBAAiBA,EACjB4H,uBAAwBA,IAI3Bc,GAA+BoF,GAC9B5X,EAAAA,cAACkM,EAAAA,GAAAA,GAAoB,CAACmM,UAAU,qBAC9BrY,EAAAA,cAAC8W,EAAsB,CACrB/Z,WAAYA,EACZ+M,gBAAiBA,EACjB0I,4BAA6BA,EAC7BpV,gBAAiBA,MAO/B,CC/JA,IAAImb,EAEJ,SAASC,EAASC,EAAWC,GAC3B,GAAIA,EAAUC,iBACZ,OAAO,EAGT,GAAIF,EAAU5O,YAAYnK,SAAWgZ,EAAU7O,YAAYnK,OACzD,OAAO,EAGT,GAAI+Y,EAAU/S,gBAAgBkT,cAAgBF,EAAUhT,gBAAgBkT,YACtE,OAAO,EAGT,GAAIH,EAAU/S,gBAAgBmT,cAAgBH,EAAUhT,gBAAgBmT,YACtE,OAAO,EAGT,GAAIJ,EAAU/S,gBAAgBlH,eAAiBka,EAAUhT,gBAAgBlH,aACvE,OAAO,EAGT,GAAIka,EAAUhT,gBAAgBiT,iBAC5B,OAAO,EAGT,MAAMG,EAAkBL,EAAU5O,YAC5BkP,EAAkBL,EAAU7O,YAElC,GAAIiP,EAAgBpZ,SAAWqZ,EAAgBrZ,OAC7C,OAAO,EAGT,IAAK,IAAIsZ,EAAI,EAAGA,EAAIF,EAAgBpZ,OAAQsZ,IAAK,CAC/C,MAAMC,EAAiBH,EAAgBE,GAEjCE,EAAkBH,EAAgBtM,MACtC0M,GACEA,EAAevQ,wBAA0BqQ,EAAerQ,wBAG5D,IAAKsQ,EACH,OAAO,EAIT,GAAIA,EAAgBE,QAAQ1Z,SAAWuZ,EAAeG,QAAQ1Z,OAC5D,OAAO,EAIT,GAAIwZ,EAAgBE,QAAQ1Z,OAC1B,IAAK,IAAI2Z,EAAI,EAAGA,EAAIH,EAAgBE,OAAO1Z,OAAQ2Z,IACjD,GAAIH,EAAgBE,OAAOC,GAAG3W,UAAYuW,EAAeG,OAAOC,GAAG3W,QACjE,OAAO,CAIf,CAEA,OAAO,CACT,CAIA,MAAM4W,EAA0BtZ,EAAAA,MAAYmF,IAC1C,MAAM,YACJ0E,EAAW,WACX0P,EAAU,gBACV7T,EAAe,kBACf8T,EAAiB,gBACjBpc,EAAe,iBACfqc,EAAgB,kBAEhBC,EAAiB,4BACjBC,GAA8B,EAAK,kBAKnCC,EAAiB,wBAQjBC,GACE1U,EAEEpI,EAAa2I,EAAgB3I,WAEnC,IAAKA,EACH,MAAM,IAAI+c,MAAM,2BAMlBpU,EAAgBlH,aAAeqL,EAAYkQ,MAAKhO,GAAMA,EAAG9C,iBAAmB8C,EAAGiO,oBAC3E,SACAtU,EAAgBlH,aAEpB,MAAOrB,EAAgB8c,IAAqBpc,EAAAA,EAAAA,UAAS,UAC9C+J,EAAkBsS,IAAuBrc,EAAAA,EAAAA,UAAS,MACnDsc,GAAa1V,EAAAA,EAAAA,WACZwD,IAAaC,EAAAA,EAAAA,MAEd,mBACJkS,EAAkB,kBAClBvS,EAAiB,eACjBwS,EAAc,iBACdC,EAAgB,iBAChBC,EAAgB,2BAChBjd,EAA0B,wBAC1Bkd,EAAuB,oBACvBjd,EAAmB,iBACnBkd,EAAgB,6BAChBC,GACEtd,EAAgBM,UAEbid,IAAuBC,EAAAA,EAAAA,MAExBC,GAAyBvT,EAAAA,EAAAA,cAAY,KACzC,MAAMnK,EAAoBgd,EAAWtV,QAAQiW,YAAc,GAApC,KACvBb,EAAkB9c,EAAe,GAChC,CAACgd,IAGEY,GAAWzT,EAAAA,EAAAA,cAAY,KACvB6S,EAAWtV,UACbvH,EAA2B0d,SAC3BH,IACF,GACC,CAACV,IAEEc,GAAkB3T,EAAAA,EAAAA,cACtB7B,IACE,MAAMyV,EAAoBzV,EAAa0V,uBACjCC,EAAa3V,EAAa4V,gBAEhCf,EAAiBgB,4BAA4Bve,EAAYme,GAEzDX,EAAiBgB,4BAA4Bxe,EAAYme,EAAmBE,GAE5EV,EAA6Bc,MAAMze,EAAW,GAEhD,CAACA,IAGG0e,GAAwBnU,EAAAA,EAAAA,cAC5BnH,IAEE,GAAIA,EAAIZ,OAAOvC,UAAYmd,EAAWtV,QACpC,OAGF,MAAM,WAAE9H,EAAU,QAAEC,GAAYmD,EAAIZ,OAC9BkG,EAAenI,EAA2BoG,gBAAgB3G,IAChE2e,EAAAA,EAAAA,IAAkB3e,EAAYC,GAC9Bkd,EAAoBld,GAEpB,MAAMke,EAAoBzV,EAAa0V,uBACjCtC,EAAcpT,EAAakW,iBAC3BP,EAAa3V,EAAa4V,gBAEhCf,EAAiBsB,uBAAuB7e,EAAYme,EAAmBrC,GAEvE0B,EAAiBsB,uBAAuB9e,EAAYme,EAAmBE,GAEvE,MAAMU,EAAqBrB,EAAiBna,WAAWwb,mBAEnDA,IAAqB/e,IAAa2C,SAAWma,GAwavD,SACEiC,EACA/e,EACAwd,GAEAuB,EAAmB/e,GAAY4L,SAAQoT,IACrC,IAAKA,EAAgB5d,GACnB,OAGF,MAAM,GAAEA,EAAE,gBAAE6d,EAAe,gBAAEC,GAAoBF,EAE3CG,EAAe3B,EAAiB4B,gBAAgBhe,GAEtD,IAAK+d,EACH,OAGF,MAAME,EAAqBJ,EAAgBvP,MACzC4P,GAAkBA,EAAetf,aAAeA,IAG5Cuf,EAAqBL,EAAgBxP,MACzC8P,GAAkBA,EAAexf,aAAeA,IAG5Cyf,EAAiCN,EACpCO,qBACAhQ,MAAK4P,GAAkBA,EAAetf,aAAeA,IAElD2f,EAAiCR,EACpCS,qBACAlQ,MAAK8P,GAAkBA,EAAexf,aAAeA,IAGpDqf,IAAuBI,GACzBN,EAAaU,UAAU,CACrB7f,WAAYqf,EAAmBrf,WAC/Bme,kBAAmBkB,EAAmBlB,oBAKtCoB,IAAuBI,GACzBR,EAAaW,UAAU,CACrB9f,WAAYuf,EAAmBvf,WAC/Bme,kBAAmBoB,EAAmBpB,mBAE1C,GAEJ,CAxdQ4B,CAAwBhB,EAAoB/e,EAAYwd,GAGtDd,GACFA,EAAiBtZ,EACnB,GAEF,CAACpD,EAAY0c,EAAkBa,KAIjCxc,EAAAA,EAAAA,YAAU,KACRR,EAA2Byf,eAAehgB,EAAYod,EAAWtV,SAEjEmC,EAAAA,YAAYrH,iBAAiBlB,EAAAA,MAAAA,OAAaue,gBAAiBvB,GAE3DZ,IAEO,KACL,MAAMpV,EAAenI,EAA2BoG,gBAAgB3G,GAE3D0I,IAILnI,EAA2B2f,kBAAkB,CAAElgB,eAI/Cke,EAAgBxV,GAEZiU,GACFA,EAAkBjU,GAGpBnI,EAA2B4f,eAAengB,GAE1CiK,EAAAA,YAAYnH,oBAAoBpB,EAAAA,MAAAA,OAAaue,gBAAiBvB,GAAsB,IAErF,KAUH3d,EAAAA,EAAAA,YAAU,KACR,MAAM,YAAEuH,GAAgBwC,EAAkBvC,UACxCuC,EAAkBtC,OAAO4X,yCACzBC,OACExU,sBAAuByU,EACvBC,qBAEA,IAAKA,EACH,OAGF,MAAM7X,EAAenI,EAA2BoG,gBAAgB3G,GAEhE,GAAI0I,EAAa8X,cAAcF,GAAmC,CAChE,MAAMvgB,EAAe2I,EAAa+X,kBAC5BC,QAAwBjD,EAAwBkD,uBACpD5gB,EACAugB,EACA9D,EACA1R,GAGI8V,GAAa,EACnBrgB,EAA2BsgB,eAAe7gB,EAAY0gB,EAAiBE,EACzE,KAGJ,MAAO,KACLtY,GAAa,CACd,GACA,CAACtI,KAEJe,EAAAA,EAAAA,YAAU,KAEH4H,EAAgBlH,eACnBkH,EAAgBlH,aA1QR,SA6Qe4e,WACvBnZ,QAAQC,IAAI,uBAAwB2F,EAAanE,EAAiB6T,EAAYK,GAC9E,MAAM9c,QAAqB0d,EAAwBqD,mBACjDhU,EACAnE,EACA6T,EACAK,GAMIkE,EAAQrD,EAAiBna,WACzByd,EAAuBD,EAAMC,qBAC7BC,EAA4BF,EAAME,2BAElC,gBAAEC,GAAoBvY,EACtBwY,EAAgB,CACpBC,qBAAsBH,EAA0BC,GAAiBG,wBACjEC,gBAAiBN,EAAqBE,GAAiBK,oBAEzD,IAAIC,EACAhG,GAA6Bxb,aAAeA,IAC9CwhB,EAAchG,EAA4BgG,YAE1CL,EAAcC,qBAAuB,KACrC5F,EAA8B,MAS5B7S,EAAgBiT,mBAClBjT,EAAgBiT,kBAAmB,GAGrCrb,EAA2B8H,gBACzBrI,EACAD,EACA4I,EACA8T,EACA0E,GAEEK,GACFC,EAAAA,WAAAA,UAAAA,sBAAqDD,EAAYxR,IACnE,EAGF0R,EAAkB,GACjB,CAAC/Y,EAAiBmE,EAAa0P,KAYlCzb,EAAAA,EAAAA,YAAU,KACR,GAAI6b,EACF,OAGF,MAAM+E,EAsGV,SACEtE,EACAvS,EACAsS,EACApd,EACA8M,EACAtM,EACAD,GAEA,MAAM,YAAE+H,GAAgB+U,EAAmB9U,UACzCqZ,EAAAA,mBAAmBpZ,OAAOqZ,8BAC1BzZ,IACEoT,EAA8BpT,EAC9B,MAAQpI,WAAY8hB,EAAM,YAAEN,EAAW,WAAEO,GAAe3Z,EACnDoZ,IAAeO,SAGoC1c,IAApDmW,EAA4BwG,sBAE9BxG,EAA4BwG,oBAC1BzhB,EAA2B0hB,oBACzBH,EACAN,EAAY3V,sBACZ,CACEqW,kBACEV,EAAYU,mBAAqBV,EAAYW,UAAUD,qBAI7D1G,EAA4BwG,sBAAwBhiB,GAGxDoiB,EACEZ,EACApE,EACApd,EACAqd,EACAvS,EACAtK,EACAD,GACD,IAIL,OAAO+H,CACT,CAnJmD+Z,CAC7ChF,EACAvS,EACAsS,EACApd,EACA8M,EACAtM,EACAD,GAaF,OAkIJ,SACE8c,EACAvS,EACAsS,EACApd,EACA8M,EACAtM,EACAD,GAEA,IAAKib,EACH,OAEF,GAAIA,EAA4BuG,WAE9B,YADAvG,EAA8B,MAGhC,MAAM8G,EAAexV,EAAYlG,KAAIkF,GAAcA,EAAWD,wBAC9D,IAAKyW,GAAc3f,OACjB,OAIF,MAAM,YAAE6e,GAAgBhG,EACpBgG,GAAepE,GACbkF,EAAa3U,SAAS6T,GAAa3V,wBACrCuW,EACEZ,EACApE,EACApd,EACAqd,EACAvS,EACAtK,EACAD,EAIR,CAhLIgiB,CACElF,EACAvS,EACAsS,EACApd,EACA8M,EACAtM,EACAD,GAGK,KACLohB,GAAwC,CACzC,GACA,CAAC7U,EAAasQ,EAAYpd,KAG7Be,EAAAA,EAAAA,YAAU,KAER,IAA2C,IAAvCmK,EAAUsX,yBACZ,OAKF,MAAMC,EC9YH,UAAkC,WACvCziB,EAAU,QACVC,EAAO,YACP6M,EAAW,gBACXzM,EAAe,gBACf0M,EAAe,kBACfkN,EAAiB,oBACjBC,IAEA,MAAM,qBAAE7Q,GAAyBhJ,EAAgBM,UAE3C,QAAEuR,GAAY7I,EAAqBI,IAAI,kCACvC0H,EAAqB9H,EAAqBI,IAAI,yBAC9C,uBAAEkL,EAAsB,4BAAEc,GAAgCpM,EAAqBI,IACnF,iCAGIiZ,EAAoB5V,EACvB2G,QAAO3H,GAAcoG,EAAQpG,EAAWuC,YACxCzH,KAAIkF,IACI,CAAE,CAACA,EAAWuC,UAAW6D,EAAQpG,EAAWuC,cAGvD,OACEpL,EAAAA,cAAC+W,EAAqB,CACpBha,WAAYA,EACZC,QAASA,EACTiS,QAASwQ,EACTzI,kBAAmBA,EACnBC,oBAAqBA,EACrBnN,gBAAiBA,EACjB1M,gBAAiBA,EACjB8Q,mBAAoBA,EACpBrE,YAAaA,EACb6H,uBAAwBA,EACxBc,4BAA6BA,GAGnC,CDwWyBkN,CAAyB,CAC5C3iB,aACAC,QAASmd,EAAWtV,QACpBgF,cACAzM,kBACA0M,gBACAkN,kBAAmB9K,EAAAA,GAAAA,GAA+ByT,YAClD1I,oBAAqB/K,EAAAA,GAAAA,GAAiC0T,cAGxDlF,EAA6BmF,aAAa,CACxC9iB,aACAoB,GAAI,wBACJkI,UAAWmZ,EACXM,SAAUpF,EAA6BqF,UAAUC,SACjDC,eAAgB,KAChB,GACD,CAACpW,EAAa9M,EAAY2d,EAA8Btd,EAAiB0M,kBAE5E,MAAQoW,IAAKC,IAAcC,EAAAA,EAAAA,GAAkB,CAC3CrF,aAEF,OACE/a,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAAA,OAAK8D,UAAU,oBACb9D,EAAAA,cAAA,OACE8D,UAAU,+BACVuH,MAAO,CAAEnK,OAAQ,OAAQkN,MAAO,QAChCiS,cAAezM,GAAKA,EAAE0M,iBACtB7K,YAAa7B,GAAKA,EAAE0M,iBACpBJ,IAAKK,IACHJ,EAAUtb,QAAU0b,EACpBpG,EAAWtV,QAAU0b,CAAE,IAG3BvgB,EAAAA,cAACwgB,EAAmB,CAClBzjB,WAAYA,EACZ0jB,eAAgBpG,EAChBrd,QAASmd,EAAWtV,QACpB1H,eAAgBA,EAChBC,gBAAiBA,IAEnB4C,EAAAA,cAACuG,EAAU,CACTqB,iBAAkBA,EAClB7K,WAAYA,EACZK,gBAAiBA,KAIrB4C,EAAAA,cAAA,OAAK8D,UAAU,8BACZ6W,EAAoB5d,aAAeA,GAClCiD,EAAAA,cAAC0gB,EAAAA,GAAY,CACXviB,GAAG,wBACHwiB,QAAShG,EAAoBgG,QAC7BpP,KAAMoJ,EAAoBpJ,KAC1BqP,QAASjG,EAAoBiG,QAC7BC,SAAUlG,EAAoBkG,SAC9BC,eAAgBnG,EAAoBmG,eACpCC,WAAYpG,EAAoBoG,cAKtC/gB,EAAAA,cAACghB,EAAyB,CAACjkB,WAAYA,IACxB,GAElByb,GAwFH,SAAS2G,EACPZ,EACA0C,EACAlkB,EACAqd,EACAvS,EACAtK,EACAD,GAEA,MAAM4jB,EAAgBD,EAAiBpc,SACjC,sBAAE+D,EAAqB,eAAEuY,EAAc,YAAEC,GAAgB7C,EAE/D,IAAK4C,EAEH,YADAld,QAAQod,KAAK,2DAIf,MAAMC,EAAuBzZ,EAAkBiB,mBAAmBF,GAMlErL,EAAoBgkB,oBAAoBxkB,GAExC,MAAMykB,GAAiB5e,EAAAA,EAAAA,mBAAkBse,GAEzC,GAAIM,EAAgB,CAElB,MAAMzjB,EAAWyjB,EAAezjB,SAEhC,IAAI0jB,EAAe,EACfC,GAA+B,EAEnC,GAAI3jB,aAAoBwO,EAAAA,cAAe,CAErCkV,EADiB1jB,EAAS4jB,cACFrjB,WAAUoE,IAChC,MAAQye,eAAgBS,EAAiBR,YAAaS,IACpDC,EAAAA,EAAAA,GAAyBpf,GAC3B,OAAOkf,IAAoBT,KAAoBC,GAAeA,IAAgBS,EAAa,GAE/F,KAAO,CAGL,MAAQ/e,gBAAiBif,GAAyBxD,EAAYW,SAC9DuC,EAAeH,EAAqBlI,OAAO9a,WACzC0a,GAAKA,EAAEmI,iBAAmBA,IAM5B,MAAQre,gBAAiBkf,GAAsBjkB,EAASgF,YAItDgf,IACCE,EAAAA,UAAAA,QAAgBF,EAAqBpe,IAAIzE,KAAKgjB,KAAMF,EAAkBre,IAAIzE,KAAKgjB,QAEhFR,GAA+B,EAEnC,CAEA,IAAKA,IAAkD,IAAlBD,EACnC,OAGFjD,EAAAA,UAAAA,YAAgC0C,EAAe,CAC7CpiB,WAAY2iB,IAGdjD,EAAAA,WAAAA,UAAAA,sBAAqDD,EAAYxR,KAEjEwL,GAA6B4J,YAC7B5J,EAA8B,IAChC,CACF,CAuDAe,EAAwB8I,YAAc,0BAEtC9I,EAAwBlY,UAAY,CAClCyI,YAAaxI,IAAAA,MAAgBC,WAC7BiY,WAAYlY,IAAAA,OAAiBC,WAC7BoE,gBAAiBrE,IAAAA,OACjBmY,kBAAmBnY,IAAAA,QAAkBA,IAAAA,KACrCjE,gBAAiBiE,IAAAA,OAAiBC,WAClCmY,iBAAkBpY,IAAAA,KAClBsY,4BAA6BtY,IAAAA,KAI7BghB,sBAAuBhhB,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,UAGhE,S","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colormap.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresetsContent.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresets.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingQuality.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShift.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeLighting.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShade.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingOptions.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/getWindowLevelActionMenu.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes, { number } from 'prop-types';\nimport { Enums, Types, utilities } from '@cornerstonejs/core';\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\nimport { ImageScrollbar } from '@ohif/ui';\n\nfunction CornerstoneImageScrollbar({\n  viewportData,\n  viewportId,\n  element,\n  imageSliceData,\n  setImageSliceData,\n  scrollbarWidth,\n  servicesManager,\n}: withAppTypes) {\n  const {\n    cineService,\n    cornerstoneViewportService,\n    viewportGridService,\n    panoramicService,\n    hangingProtocolService\n  } = servicesManager.services;\n\n  const [isDentascan, setIsDentascan] = useState(false);\n\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    const { isCineEnabled } = cineService.getState();\n\n    if (isCineEnabled) {\n      // on image scrollbar change, stop the CINE if it is playing\n      cineService.stopClip(element, { viewportId });\n      cineService.setCine({ id: viewportId, isPlaying: false });\n    }\n\n    csToolsUtils.jumpToSlice(viewport.element, { imageIndex, debounceLoading: true, });\n\n    if (hangingProtocolService.getActiveProtocol().protocol.id === 'panoramicViewport') {\n      // Hardcoded for scrollbar in panoramic\n      const viewportIds = cornerstoneViewportService.getViewportIds();\n      const viewportIndex = viewportIds.findIndex(vpId => vpId === viewportId);\n      const displaySetUID = viewportGridService.getDisplaySetsUIDsForViewport('default')[0];\n      if (viewportIndex >= 2) {\n        const middleDentascanViewportIndex = Math.floor(viewportIds.length / 2);\n        imageIndex += (viewportIndex - middleDentascanViewportIndex) * 2;\n        // Disable scrollbar display\n        setIsDentascan(true);\n      }\n      if (viewportIndex >= 1) {\n        // Panoramic or dentascan viewport\n        panoramicService.setDentascanIndex(displaySetUID, imageIndex);\n        setImageSliceData({ imageIndex: imageIndex, numberOfSlices: imageSliceData.numberOfSlices, });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!viewportData) {\n      return;\n    }\n\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    if (!viewport) {\n      return;\n    }\n\n    if (hangingProtocolService.getActiveProtocol().protocol.id === 'panoramicViewport') {\n      // Determine if viewport is dentascan based on viewport position\n      const viewportIndex = cornerstoneViewportService.getViewportIds().findIndex(vpId => vpId === viewportId);\n      setIsDentascan(viewportIndex >= 2);\n    }\n\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\n      const numberOfSlices = (viewport as Types.IStackViewport).getCornerstoneImage().columns;\n\n      setImageSliceData({\n        imageIndex: Math.round(numberOfSlices / 2),\n        numberOfSlices: numberOfSlices,\n      });\n\n      return;\n    }\n\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\n      const sliceData = utilities.getImageSliceDataForVolumeViewport(\n        viewport as Types.IVolumeViewport\n      );\n\n      if (!sliceData) {\n        return;\n      }\n\n      const { imageIndex, numberOfSlices } = sliceData;\n      setImageSliceData({ imageIndex, numberOfSlices });\n    }\n  }, [viewportId, viewportData]);\n\n  useEffect(() => {\n    if (viewportData?.viewportType !== Enums.ViewportType.STACK\n      && viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\n      return;\n    }\n\n    const updateStackIndex = event => {\n      const { newImageIdIndex } = event.detail;\n      // find the index of imageId in the imageIds\n      setImageSliceData({\n        imageIndex: newImageIdIndex,\n        numberOfSlices: viewportData.data[0].imageIds.length,\n      });\n    };\n\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\n    };\n  }, [viewportData, element]);\n\n  useEffect(() => {\n    if (viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\n      return;\n    }\n\n    const updateVolumeIndex = event => {\n      const { imageIndex, numberOfSlices } = event.detail;\n      // find the index of imageId in the imageIds\n      setImageSliceData({ imageIndex, numberOfSlices });\n    };\n\n    element.addEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\n\n    return () => {\n      element.removeEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\n    };\n  }, [viewportData, element]);\n\n  return (\n    !isDentascan && <ImageScrollbar\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\n      height={scrollbarWidth}\n      value={imageSliceData.imageIndex}\n    />\n  );\n}\n\nCornerstoneImageScrollbar.propTypes = {\n  viewportData: PropTypes.object,\n  viewportId: PropTypes.string.isRequired,\n  element: PropTypes.instanceOf(Element),\n  scrollbarWidth: PropTypes.string,\n  imageSliceData: PropTypes.object.isRequired,\n  setImageSliceData: PropTypes.func.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default CornerstoneImageScrollbar;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport classNames from 'classnames';\nimport {\n  metaData,\n  Enums,\n  Types,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\nimport PropTypes from 'prop-types';\nimport { vec3 } from 'gl-matrix';\n\nimport './ViewportOrientationMarkers.css';\n\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\n\nfunction ViewportOrientationMarkers({\n  element,\n  viewportData,\n  imageSliceData,\n  viewportId,\n  servicesManager,\n  orientationMarkers = ['top', 'left'],\n}: withAppTypes) {\n  // Rotation is in degrees\n  const [rotation, setRotation] = useState(0);\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\n  const [flipVertical, setFlipVertical] = useState(false);\n  const { cornerstoneViewportService } = servicesManager.services;\n\n  useEffect(() => {\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\n      const { rotation, previousCamera, camera } = evt.detail;\n\n      if (rotation !== undefined) {\n        setRotation(rotation);\n      }\n\n      if (\n        camera.flipHorizontal !== undefined &&\n        previousCamera.flipHorizontal !== camera.flipHorizontal\n      ) {\n        setFlipHorizontal(camera.flipHorizontal);\n      }\n\n      if (\n        camera.flipVertical !== undefined &&\n        previousCamera.flipVertical !== camera.flipVertical\n      ) {\n        setFlipVertical(camera.flipVertical);\n      }\n    };\n\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n\n    return () => {\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n    };\n  }, []);\n\n  const markers = useMemo(() => {\n    if (!viewportData) {\n      return '';\n    }\n\n    let rowCosines, columnCosines;\n    if (viewportData.viewportType === 'stack') {\n      const imageIndex = imageSliceData.imageIndex;\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\n\n      // Workaround for below TODO stub\n      if (!imageId) {\n        return false;\n      }\n\n      ({ rowCosines, columnCosines } = metaData.get('imagePlaneModule', imageId) || {});\n    } else {\n      if (!element || !getEnabledElement(element)) {\n        return '';\n      }\n\n      const { viewport } = getEnabledElement(element);\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n      const viewRight = vec3.create();\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\n      rowCosines = viewRight;\n    }\n\n    if (!rowCosines || !columnCosines || rotation === undefined) {\n      return '';\n    }\n\n    const markers = _getOrientationMarkers(\n      rowCosines,\n      columnCosines,\n      rotation,\n      flipVertical,\n      flipHorizontal\n    );\n\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (!ohifViewport) {\n      console.log('ViewportOrientationMarkers::No viewport');\n      return null;\n    }\n\n    return orientationMarkers.map((m, index) => (\n      <div\n        className={classNames(\n          'overlay-text',\n          `${m}-mid orientation-marker`,\n          'text-aqua-pale',\n          'text-[13px]',\n          'leading-5'\n        )}\n        key={`${m}-mid orientation-marker`}\n      >\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\n      </div>\n    ));\n  }, [\n    viewportData,\n    imageSliceData,\n    rotation,\n    flipVertical,\n    flipHorizontal,\n    orientationMarkers,\n    element,\n  ]);\n\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\n}\n\n/**\n *\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\n *\n * @param {*} rowCosines\n * @param {*} columnCosines\n * @param {*} rotation in degrees\n * @returns\n */\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\n  const rowString = getOrientationStringLPS(rowCosines);\n  const columnString = getOrientationStringLPS(columnCosines);\n  const oppositeRowString = invertOrientationStringLPS(rowString);\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\n\n  const markers = {\n    top: oppositeColumnString,\n    left: oppositeRowString,\n    right: rowString,\n    bottom: columnString,\n  };\n\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\n  // the rotation applications\n  if (flipVertical) {\n    markers.top = invertOrientationStringLPS(markers.top);\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\n  }\n\n  if (flipHorizontal) {\n    markers.left = invertOrientationStringLPS(markers.left);\n    markers.right = invertOrientationStringLPS(markers.right);\n  }\n\n  // Swap the labels accordingly if the viewport has been rotated\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\n  if (rotation === 90 || rotation === -270) {\n    return {\n      top: markers.left,\n      left: invertOrientationStringLPS(markers.top),\n      right: invertOrientationStringLPS(markers.bottom),\n      bottom: markers.right, // left\n    };\n  } else if (rotation === -90 || rotation === 270) {\n    return {\n      top: invertOrientationStringLPS(markers.left),\n      left: markers.top,\n      bottom: markers.left,\n      right: markers.bottom,\n    };\n  } else if (rotation === 180 || rotation === -180) {\n    return {\n      top: invertOrientationStringLPS(markers.top),\n      left: invertOrientationStringLPS(markers.left),\n      bottom: invertOrientationStringLPS(markers.bottom),\n      right: invertOrientationStringLPS(markers.right),\n    };\n  }\n\n  return markers;\n}\n\nexport default ViewportOrientationMarkers;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums } from '@cornerstonejs/core';\n\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const loadIndicatorRef = useRef(null);\n  const imageIdToBeLoaded = useRef(null);\n\n  const setLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    loadIndicatorRef.current = setTimeout(() => {\n      setLoading(true);\n    }, 50);\n  };\n\n  const setFinishLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    setLoading(false);\n  };\n\n  const setErrorState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\n      setError(evt.detail.error);\n      imageIdToBeLoaded.current = null;\n    }\n  };\n\n  useEffect(() => {\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    };\n  }, [element, viewportData]);\n\n  if (error) {\n    return (\n      <>\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\n            <p className=\"text-primary-light text-xl font-light\">\n              <h4>Error Loading Image</h4>\n              <p>An error has occurred.</p>\n              <p>{error}</p>\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (loading) {\n    return (\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nViewportImageSliceLoadingIndicator.propTypes = {\n  error: PropTypes.object,\n  element: PropTypes.object,\n};\n\nexport default ViewportImageSliceLoadingIndicator;\n","import React, { useEffect, useState } from 'react';\n\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\n\nfunction CornerstoneOverlays(props: withAppTypes) {\n  const { viewportId, element, scrollbarWidth, servicesManager } = props;\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [imageSliceData, setImageSliceData] = useState({\n    imageIndex: 0,\n    numberOfSlices: 0,\n  });\n  const [viewportData, setViewportData] = useState(null);\n\n  useEffect(() => {\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n      props => {\n        if (props.viewportId !== viewportId) {\n          return;\n        }\n\n        setViewportData(props.viewportData);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  if (!element) {\n    return null;\n  }\n\n  if (viewportData) {\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\n      return null;\n    }\n  }\n\n  return (\n    <div className=\"noselect\">\n      <ViewportImageScrollbar\n        viewportId={viewportId}\n        viewportData={viewportData}\n        element={element}\n        imageSliceData={imageSliceData}\n        setImageSliceData={setImageSliceData}\n        scrollbarWidth={scrollbarWidth}\n        servicesManager={servicesManager}\n      />\n\n      <CustomizableViewportOverlay\n        imageSliceData={imageSliceData}\n        viewportData={viewportData}\n        viewportId={viewportId}\n        servicesManager={servicesManager}\n        element={element}\n      />\n\n      <ViewportImageSliceLoadingIndicator\n        viewportData={viewportData}\n        element={element}\n      />\n\n      <ViewportOrientationMarkers\n        imageSliceData={imageSliceData}\n        element={element}\n        viewportData={viewportData}\n        servicesManager={servicesManager}\n        viewportId={viewportId}\n      />\n    </div>\n  );\n}\n\nexport default CornerstoneOverlays;\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\nimport { CinePlayer, useCine } from '@ohif/ui';\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\nimport { Enums as StreamingEnums } from '@cornerstonejs/streaming-image-volume-loader';\nimport { useAppConfig } from '@state';\n\nfunction WrappedCinePlayer({\n  enabledVPElement,\n  viewportId,\n  servicesManager,\n}: withAppTypes<{\n  enabledVPElement: HTMLElement;\n  viewportId: string;\n}>) {\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\n  const [{ isCineEnabled, cines }, cineService] = useCine();\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\n  const [dynamicInfo, setDynamicInfo] = useState(null);\n  const [appConfig] = useAppConfig();\n  const isMountedRef = useRef(null);\n\n  const cineHandler = () => {\n    if (!cines?.[viewportId] || !enabledVPElement) {\n      return;\n    }\n\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\n    const validFrameRate = Math.max(frameRate, 1);\n\n    return isPlaying\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\n      : cineService.stopClip(enabledVPElement);\n  };\n\n  const newDisplaySetHandler = useCallback(() => {\n    if (!enabledVPElement || !isCineEnabled) {\n      return;\n    }\n\n    const { viewports } = viewportGridService.getState();\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\n    let frameRate = 24;\n    let isPlaying = cines[viewportId]?.isPlaying || false;\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (displaySet.FrameRate) {\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\n        // So a bit of math to get the actual frame rate.\n        frameRate = Math.round(1000 / displaySet.FrameRate);\n        isPlaying ||= !!appConfig.autoPlayCine;\n      }\n\n      // check if the displaySet is dynamic and set the dynamic info\n      if (displaySet.isDynamicVolume) {\n        const { dynamicVolumeInfo } = displaySet;\n        const numTimePoints = dynamicVolumeInfo.timePoints.length;\n        const label = dynamicVolumeInfo.splittingTag;\n        const timePointIndex = dynamicVolumeInfo.timePointIndex || 0;\n        setDynamicInfo({\n          volumeId: displaySet.displaySetInstanceUID,\n          timePointIndex,\n          numTimePoints,\n          label,\n        });\n      } else {\n        setDynamicInfo(null);\n      }\n    });\n\n    if (isPlaying) {\n      cineService.setIsCineEnabled(isPlaying);\n    }\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\n    setNewStackFrameRate(frameRate);\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\n\n  useEffect(() => {\n    isMountedRef.current = true;\n\n    newDisplaySetHandler();\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, [isCineEnabled, newDisplaySetHandler]);\n\n  useEffect(() => {\n    if (!isCineEnabled) {\n      return;\n    }\n\n    cineHandler();\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\n\n  /**\n   * Use effect for handling new display set\n   */\n  useEffect(() => {\n    if (!enabledVPElement) {\n      return;\n    }\n\n    eventTarget.addEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\n    // this doesn't makes sense that we are listening to this event on viewport element\n    enabledVPElement.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      newDisplaySetHandler\n    );\n\n    return () => {\n      cineService.setCine({ id: viewportId, isPlaying: false });\n\n      eventTarget.removeEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\n      enabledVPElement.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        newDisplaySetHandler\n      );\n    };\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\n\n  useEffect(() => {\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\n      return;\n    }\n\n    cineHandler();\n\n    return () => {\n      cineService.stopClip(enabledVPElement, { viewportId });\n    };\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\n\n  if (!isCineEnabled) {\n    return null;\n  }\n\n  const cine = cines[viewportId];\n  const isPlaying = cine?.isPlaying || false;\n\n  return (\n    <RenderCinePlayer\n      viewportId={viewportId}\n      cineService={cineService}\n      newStackFrameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      dynamicInfo={dynamicInfo}\n      customizationService={customizationService}\n    />\n  );\n}\n\nfunction RenderCinePlayer({\n  viewportId,\n  cineService,\n  newStackFrameRate,\n  isPlaying,\n  dynamicInfo: dynamicInfoProp,\n  customizationService,\n}) {\n  const { component: CinePlayerComponent = CinePlayer } =\n    customizationService.get('cinePlayer') ?? {};\n\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\n\n  useEffect(() => {\n    setDynamicInfo(dynamicInfoProp);\n  }, [dynamicInfoProp]);\n\n  /**\n   * Use effect for handling 4D time index changed\n   */\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const handleTimePointIndexChange = evt => {\n      const { volumeId, timePointIndex, numTimePoints, splittingTag } = evt.detail;\n      setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\n    };\n\n    eventTarget.addEventListener(\n      StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n      handleTimePointIndexChange\n    );\n\n    return () => {\n      eventTarget.removeEventListener(\n        StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n        handleTimePointIndexChange\n      );\n    };\n  }, [dynamicInfo]);\n\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const { volumeId, timePointIndex, numTimePoints, splittingTag } = dynamicInfo || {};\n    const volume = cache.getVolume(volumeId);\n    volume.timePointIndex = timePointIndex;\n\n    setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\n  }, []);\n\n  const updateDynamicInfo = useCallback(props => {\n    const { volumeId, timePointIndex } = props;\n    const volume = cache.getVolume(volumeId);\n    volume.timePointIndex = timePointIndex;\n  }, []);\n\n  return (\n    <CinePlayerComponent\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\n      frameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      onClose={() => {\n        // also stop the clip\n        cineService.setCine({\n          id: viewportId,\n          isPlaying: false,\n        });\n        cineService.setIsCineEnabled(false);\n      }}\n      onPlayPauseChange={isPlaying => {\n        cineService.setCine({\n          id: viewportId,\n          isPlaying,\n        });\n      }}\n      onFrameRateChange={frameRate =>\n        cineService.setCine({\n          id: viewportId,\n          frameRate,\n        })\n      }\n      dynamicInfo={dynamicInfo}\n      updateDynamicInfo={updateDynamicInfo}\n    />\n  );\n}\n\nexport default WrappedCinePlayer;\n","import CinePlayer from './CinePlayer';\n\nexport default CinePlayer;\n","import React from 'react';\nimport { useViewportActionCornersContext } from '../contextProviders/ViewportActionCornersProvider';\nimport { ViewportActionCorners } from '@ohif/ui';\n\nexport type OHIFViewportActionCornersProps = {\n  viewportId: string;\n};\n\nfunction OHIFViewportActionCorners({ viewportId }: OHIFViewportActionCornersProps) {\n  const [viewportActionCornersState] = useViewportActionCornersContext();\n\n  if (!viewportActionCornersState[viewportId]) {\n    return null;\n  }\n\n  return (\n    <ViewportActionCorners\n      cornerComponents={viewportActionCornersState[viewportId]}\n    ></ViewportActionCorners>\n  );\n}\n\nexport default OHIFViewportActionCorners;\n","import React, { ReactElement, useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport { AllInOneMenu, ButtonGroup, SwitchButton } from '@ohif/ui';\nimport { StackViewport } from '@cornerstonejs/core';\nimport { ColormapProps } from '../../types/Colormap';\n\nexport function Colormap({\n  colormaps,\n  viewportId,\n  displaySets,\n  commandsManager,\n  servicesManager,\n}: ColormapProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n\n  const [activeDisplaySet, setActiveDisplaySet] = useState(displaySets[0]);\n\n  const [showPreview, setShowPreview] = useState(false);\n  const [prePreviewColormap, setPrePreviewColormap] = useState(null);\n\n  const showPreviewRef = useRef(showPreview);\n  showPreviewRef.current = showPreview;\n  const prePreviewColormapRef = useRef(prePreviewColormap);\n  prePreviewColormapRef.current = prePreviewColormap;\n  const activeDisplaySetRef = useRef(activeDisplaySet);\n  activeDisplaySetRef.current = activeDisplaySet;\n\n  const onSetColorLUT = useCallback(\n    props => {\n      // TODO: Better way to check if it's a fusion\n      const oneOpacityColormaps = ['Grayscale', 'X Ray'];\n      const opacity =\n        displaySets.length > 1 && !oneOpacityColormaps.includes(props.colormap.name) ? 0.5 : 1;\n      commandsManager.run({\n        commandName: 'setViewportColormap',\n        commandOptions: {\n          ...props,\n          opacity,\n          immediate: true,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager]\n  );\n\n  const getViewportColormap = (viewportId, displaySet) => {\n    const { displaySetInstanceUID } = displaySet;\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (viewport instanceof StackViewport) {\n      const { colormap } = viewport.getProperties();\n      if (!colormap) {\n        return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\n      }\n      return colormap;\n    }\n    const actorEntries = viewport.getActors();\n    const actorEntry = actorEntries.find(entry => entry.uid.includes(displaySetInstanceUID));\n    const { colormap } = viewport.getProperties(actorEntry.uid);\n    if (!colormap) {\n      return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\n    }\n    return colormap;\n  };\n\n  const buttons = useMemo(() => {\n    return displaySets.map((displaySet, index) => ({\n      children: displaySet.Modality,\n      key: index,\n      style: {\n        minWidth: `calc(100% / ${displaySets.length})`,\n        fontSize: '0.8rem',\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }));\n  }, [displaySets]);\n\n  useEffect(() => {\n    setActiveDisplaySet(displaySets[displaySets.length - 1]);\n  }, [displaySets]);\n\n  return (\n    <>\n      {buttons.length > 1 && (\n        <div className=\"all-in-one-menu-item flex w-full justify-center\">\n          <ButtonGroup\n            onActiveIndexChange={index => {\n              setActiveDisplaySet(displaySets[index]);\n              setPrePreviewColormap(null);\n            }}\n            activeIndex={\n              displaySets.findIndex(\n                ds => ds.displaySetInstanceUID === activeDisplaySetRef.current.displaySetInstanceUID\n              ) || 1\n            }\n            className=\"w-[70%] text-[10px]\"\n          >\n            {buttons.map(({ children, key, style }) => (\n              <div\n                key={key}\n                style={style}\n              >\n                {children}\n              </div>\n            ))}\n          </ButtonGroup>\n        </div>\n      )}\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\n        <SwitchButton\n          label=\"Preview in viewport\"\n          checked={showPreview}\n          onChange={checked => {\n            setShowPreview(checked);\n          }}\n        />\n      </div>\n      <AllInOneMenu.DividerItem />\n      <AllInOneMenu.ItemPanel>\n        {colormaps.map((colormap, index) => (\n          <AllInOneMenu.Item\n            key={index}\n            label={colormap.description}\n            onClick={() => {\n              onSetColorLUT({\n                viewportId,\n                colormap,\n                displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n              });\n              setPrePreviewColormap(null);\n            }}\n            onMouseEnter={() => {\n              if (showPreviewRef.current) {\n                setPrePreviewColormap(getViewportColormap(viewportId, activeDisplaySetRef.current));\n                onSetColorLUT({\n                  viewportId,\n                  colormap,\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n                });\n              }\n            }}\n            onMouseLeave={() => {\n              if (showPreviewRef.current && prePreviewColormapRef.current) {\n                onSetColorLUT({\n                  viewportId,\n                  colormap: prePreviewColormapRef.current,\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n                });\n              }\n            }}\n          ></AllInOneMenu.Item>\n        ))}\n      </AllInOneMenu.ItemPanel>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { SwitchButton } from '@ohif/ui';\nimport { StackViewport, VolumeViewport } from '@cornerstonejs/core';\nimport { ColorbarProps } from '../../types/Colorbar';\nimport { utilities } from '@cornerstonejs/core';\n\nexport function setViewportColorbar(\n  viewportId,\n  displaySets,\n  commandsManager,\n  servicesManager: AppTypes.ServicesManager,\n  colorbarOptions\n) {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const backgroundColor = viewportInfo.getViewportOptions().background;\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\n\n  if (isLight) {\n    colorbarOptions.ticks = {\n      position: 'left',\n      style: {\n        font: '12px Arial',\n        color: '#000000',\n        maxNumTicks: 8,\n        tickSize: 5,\n        tickWidth: 1,\n        labelMargin: 3,\n      },\n    };\n  }\n\n  const displaySetInstanceUIDs = [];\n\n  if (viewport instanceof StackViewport) {\n    displaySetInstanceUIDs.push(viewportId);\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    displaySets.forEach(ds => {\n      displaySetInstanceUIDs.push(ds.displaySetInstanceUID);\n    });\n  }\n\n  commandsManager.run({\n    commandName: 'toggleViewportColorbar',\n    commandOptions: {\n      viewportId,\n      options: colorbarOptions,\n      displaySetInstanceUIDs,\n    },\n    context: 'CORNERSTONE',\n  });\n}\n\nexport function Colorbar({\n  viewportId,\n  displaySets,\n  commandsManager,\n  servicesManager,\n  colorbarProperties,\n}: withAppTypes<ColorbarProps>): ReactElement {\n  const { colorbarService } = servicesManager.services;\n  const {\n    width: colorbarWidth,\n    colorbarTickPosition,\n    colorbarContainerPosition,\n    colormaps,\n    colorbarInitialColormap,\n  } = colorbarProperties;\n  const [showColorbar, setShowColorbar] = useState(colorbarService.hasColorbar(viewportId));\n\n  const onSetColorbar = useCallback(() => {\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\n      viewportId,\n      colormaps,\n      ticks: {\n        position: colorbarTickPosition,\n      },\n      width: colorbarWidth,\n      position: colorbarContainerPosition,\n      activeColormapName: colorbarInitialColormap,\n    });\n  }, [commandsManager]);\n\n  useEffect(() => {\n    const updateColorbarState = () => {\n      setShowColorbar(colorbarService.hasColorbar(viewportId));\n    };\n\n    const { unsubscribe } = colorbarService.subscribe(\n      colorbarService.EVENTS.STATE_CHANGED,\n      updateColorbarState\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  return (\n    <div className=\"all-in-one-menu-item flex w-full justify-center\">\n      <div className=\"mr-2 w-[28px]\"></div>\n      <SwitchButton\n        label=\"Display Color bar\"\n        checked={showColorbar}\n        onChange={() => {\n          onSetColorbar();\n        }}\n      />\n    </div>\n  );\n}\n","import React, { ReactElement, useCallback } from 'react';\nimport { AllInOneMenu } from '@ohif/ui';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\nimport { CommandsManager } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\n\nexport type WindowLevelProps = {\n  viewportId: string;\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\n  commandsManager: CommandsManager;\n};\n\nexport function WindowLevel({\n  viewportId,\n  commandsManager,\n  presets,\n}: WindowLevelProps): ReactElement {\n  const { t } = useTranslation('WindowLevelActionMenu');\n\n  const onSetWindowLevel = useCallback(\n    props => {\n      commandsManager.run({\n        commandName: 'setViewportWindowLevel',\n        commandOptions: {\n          ...props,\n          viewportId,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager, viewportId]\n  );\n\n  return (\n    <AllInOneMenu.ItemPanel>\n      {presets.map((modalityPresets, modalityIndex) => (\n        <React.Fragment key={modalityIndex}>\n          {Object.entries(modalityPresets).map(([modality, presetsArray]) => (\n            <React.Fragment key={modality}>\n              <AllInOneMenu.HeaderItem>\n                {t('Modality Presets', { modality })}\n              </AllInOneMenu.HeaderItem>\n              {presetsArray.map((preset, index) => (\n                <AllInOneMenu.Item\n                  key={`${modality}-${index}`}\n                  label={preset.description}\n                  secondaryLabel={`${preset.window} / ${preset.level}`}\n                  onClick={() => onSetWindowLevel(preset)}\n                />\n              ))}\n            </React.Fragment>\n          ))}\n        </React.Fragment>\n      ))}\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import { Icon } from '@ohif/ui';\nimport { ButtonEnums } from '@ohif/ui';\nimport React, { ReactElement, useState, useCallback } from 'react';\nimport { Button, InputFilterText } from '@ohif/ui';\nimport { ViewportPreset, VolumeRenderingPresetsContentProps } from '../../types/ViewportPresets';\n\nexport function VolumeRenderingPresetsContent({\n  presets,\n  viewportId,\n  commandsManager,\n  onClose,\n}: VolumeRenderingPresetsContentProps): ReactElement {\n  const [filteredPresets, setFilteredPresets] = useState(presets);\n  const [searchValue, setSearchValue] = useState('');\n  const [selectedPreset, setSelectedPreset] = useState<ViewportPreset | null>(null);\n\n  const handleSearchChange = useCallback(\n    (value: string) => {\n      setSearchValue(value);\n      const filtered = value\n        ? presets.filter(preset => preset.name.toLowerCase().includes(value.toLowerCase()))\n        : presets;\n      setFilteredPresets(filtered);\n    },\n    [presets]\n  );\n\n  const handleApply = useCallback(\n    props => {\n      commandsManager.runCommand('setViewportPreset', {\n        ...props,\n      });\n    },\n    [commandsManager]\n  );\n\n  const formatLabel = (label: string, maxChars: number) => {\n    return label.length > maxChars ? `${label.slice(0, maxChars)}...` : label;\n  };\n\n  return (\n    <div className=\"flex min-h-full w-full flex-col justify-between\">\n      <div className=\"border-secondary-light h-[433px] w-full overflow-hidden rounded border bg-black px-2.5\">\n        <div className=\"flex h-[46px] w-full items-center justify-start\">\n          <div className=\"h-[26px] w-[200px]\">\n            <InputFilterText\n              value={searchValue}\n              onDebounceChange={handleSearchChange}\n              placeholder={'Search all'}\n            />\n          </div>\n        </div>\n        <div className=\"ohif-scrollbar overflow h-[385px] w-full overflow-y-auto\">\n          <div className=\"grid grid-cols-4 gap-3 pt-2 pr-3\">\n            {filteredPresets.map((preset, index) => (\n              <div\n                key={index}\n                className=\"flex cursor-pointer flex-col items-start\"\n                onClick={() => {\n                  setSelectedPreset(preset);\n                  handleApply({ preset: preset.name, viewportId });\n                }}\n              >\n                <Icon\n                  name={preset.name}\n                  className={\n                    selectedPreset?.name === preset.name\n                      ? 'border-primary-light h-[75px] w-[95px] max-w-none rounded border-2'\n                      : 'hover:border-primary-light h-[75px] w-[95px] max-w-none rounded border-2 border-black'\n                  }\n                />\n                <label className=\"text-aqua-pale mt-2 text-left text-xs\">\n                  {formatLabel(preset.name, 11)}\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <footer className=\"flex h-[60px] w-full items-center justify-end\">\n        <div className=\"flex\">\n          <Button\n            name=\"Cancel\"\n            size={ButtonEnums.size.medium}\n            type={ButtonEnums.type.secondary}\n            onClick={onClose}\n          >\n            {' '}\n            Cancel{' '}\n          </Button>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","import { AllInOneMenu, Icon } from '@ohif/ui';\nimport React, { ReactElement } from 'react';\nimport { VolumeRenderingPresetsProps } from '../../types/ViewportPresets';\nimport { VolumeRenderingPresetsContent } from './VolumeRenderingPresetsContent';\n\nexport function VolumeRenderingPresets({\n  viewportId,\n  servicesManager,\n  commandsManager,\n  volumeRenderingPresets,\n}: VolumeRenderingPresetsProps): ReactElement {\n  const { uiModalService } = servicesManager.services;\n\n  const onClickPresets = () => {\n    uiModalService.show({\n      content: VolumeRenderingPresetsContent,\n      title: 'Rendering Presets',\n      movable: true,\n      contentProps: {\n        onClose: uiModalService.hide,\n        presets: volumeRenderingPresets,\n        viewportId,\n        commandsManager,\n      },\n      containerDimensions: 'h-[543px] w-[460px]',\n      contentDimensions: 'h-[493px] w-[460px]  pl-[12px] pr-[12px]',\n    });\n  };\n\n  return (\n    <AllInOneMenu.Item\n      label=\"Rendering Presets\"\n      icon={<Icon name=\"VolumeRendering\" />}\n      rightIcon={<Icon name=\"action-new-dialog\" />}\n      onClick={onClickPresets}\n    />\n  );\n}\n","import React, { ReactElement, useCallback, useState, useEffect } from 'react';\nimport { VolumeRenderingQualityProps } from '../../types/ViewportPresets';\n\nexport function VolumeRenderingQuality({\n  volumeRenderingQualityRange,\n  commandsManager,\n  servicesManager,\n  viewportId,\n}: VolumeRenderingQualityProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const { min, max, step } = volumeRenderingQualityRange;\n  const [quality, setQuality] = useState(null);\n\n  const onChange = useCallback(\n    (value: number) => {\n      commandsManager.runCommand('setVolumeRenderingQulaity', {\n        viewportId,\n        volumeQuality: value,\n      });\n      setQuality(value);\n    },\n    [commandsManager, viewportId]\n  );\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const mapper = actor.getMapper();\n    const image = mapper.getInputData();\n    const spacing = image.getSpacing();\n    const sampleDistance = mapper.getSampleDistance();\n    const averageSpacing = spacing.reduce((a, b) => a + b) / 3.0;\n    if (sampleDistance === averageSpacing) {\n      setQuality(1);\n    } else {\n      setQuality(Math.sqrt(averageSpacing / (sampleDistance * 0.5)));\n    }\n  }, [cornerstoneViewportService, viewportId]);\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block text-white\"\n          htmlFor=\"volume\"\n        >\n          Quality\n        </label>\n        {quality !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={quality}\n            id=\"volume\"\n            max={max}\n            min={min}\n            type=\"range\"\n            step={step}\n            onChange={e => onChange(parseInt(e.target.value, 10))}\n            style={{\n              background: calculateBackground((quality - min) / (max - min)),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState, useRef } from 'react';\nimport { VolumeShiftProps } from '../../types/ViewportPresets';\n\nexport function VolumeShift({\n  viewportId,\n  commandsManager,\n  servicesManager,\n}: VolumeShiftProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [minShift, setMinShift] = useState<number | null>(null);\n  const [maxShift, setMaxShift] = useState<number | null>(null);\n  const [shift, setShift] = useState<number | null>(\n    cornerstoneViewportService.getCornerstoneViewport(viewportId)?.shiftedBy || 0\n  );\n  const [step, setStep] = useState<number | null>(null);\n  const [isBlocking, setIsBlocking] = useState(false);\n\n  const prevShiftRef = useRef<number>(shift);\n\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const { actor } = viewport.getActors()[0];\n  const ofun = actor.getProperty().getScalarOpacity(0);\n\n  useEffect(() => {\n    if (isBlocking) {\n      return;\n    }\n    const range = ofun.getRange();\n\n    const transferFunctionWidth = range[1] - range[0];\n\n    const minShift = -transferFunctionWidth;\n    const maxShift = transferFunctionWidth;\n\n    setMinShift(minShift);\n    setMaxShift(maxShift);\n    setStep(Math.pow(10, Math.floor(Math.log10(transferFunctionWidth / 500))));\n  }, [cornerstoneViewportService, viewportId, actor, ofun, isBlocking]);\n\n  const onChangeRange = useCallback(\n    newShift => {\n      const shiftDifference = newShift - prevShiftRef.current;\n      prevShiftRef.current = newShift;\n      viewport.shiftedBy = newShift;\n      commandsManager.runCommand('shiftVolumeOpacityPoints', {\n        viewportId,\n        shift: shiftDifference,\n      });\n    },\n    [commandsManager, viewportId, viewport]\n  );\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"shift\"\n        >\n          Shift\n        </label>\n        {step !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={shift}\n            onChange={e => {\n              const shiftValue = parseInt(e.target.value, 10);\n              setShift(shiftValue);\n              onChangeRange(shiftValue);\n            }}\n            id=\"shift\"\n            onMouseDown={() => setIsBlocking(true)}\n            onMouseUp={() => setIsBlocking(false)}\n            max={maxShift}\n            min={minShift}\n            type=\"range\"\n            step={step}\n            style={{\n              background: calculateBackground((shift - minShift) / (maxShift - minShift)),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useState, useEffect, useCallback } from 'react';\nimport { VolumeLightingProps } from '../../types/ViewportPresets';\n\nexport function VolumeLighting({\n  servicesManager,\n  commandsManager,\n  viewportId,\n}: VolumeLightingProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [ambient, setAmbient] = useState(null);\n  const [diffuse, setDiffuse] = useState(null);\n  const [specular, setSpecular] = useState(null);\n\n  const onAmbientChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { ambient } });\n  }, [ambient, commandsManager, viewportId]);\n\n  const onDiffuseChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { diffuse } });\n  }, [diffuse, commandsManager, viewportId]);\n\n  const onSpecularChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { specular } });\n  }, [specular, commandsManager, viewportId]);\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const ambient = actor.getProperty().getAmbient();\n    const diffuse = actor.getProperty().getDiffuse();\n    const specular = actor.getProperty().getSpecular();\n    setAmbient(ambient);\n    setDiffuse(diffuse);\n    setSpecular(specular);\n  }, [viewportId, cornerstoneViewportService]);\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"ambient\"\n        >\n          Ambient\n        </label>\n        {ambient !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={ambient}\n            onChange={e => {\n              setAmbient(e.target.value);\n              onAmbientChange();\n            }}\n            id=\"ambient\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(ambient),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"diffuse\"\n        >\n          Diffuse\n        </label>\n        {diffuse !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={diffuse}\n            onChange={e => {\n              setDiffuse(e.target.value);\n              onDiffuseChange();\n            }}\n            id=\"diffuse\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(diffuse),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"specular\"\n        >\n          Specular\n        </label>\n        {specular !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={specular}\n            onChange={e => {\n              setSpecular(e.target.value);\n              onSpecularChange();\n            }}\n            id=\"specular\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(specular),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { SwitchButton } from '@ohif/ui';\nimport { VolumeShadeProps } from '../../types/ViewportPresets';\n\nexport function VolumeShade({\n  commandsManager,\n  viewportId,\n  servicesManager,\n}: VolumeShadeProps): ReactElement {\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [shade, setShade] = useState(true);\n  const [key, setKey] = useState(0);\n\n  const onShadeChange = useCallback(\n    (checked: boolean) => {\n      commandsManager.runCommand('setVolumeLighting', { viewportId, options: { shade: checked } });\n    },\n    [commandsManager, viewportId]\n  );\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const shade = actor.getProperty().getShade();\n    setShade(shade);\n    setKey(key + 1);\n  }, [viewportId, cornerstoneViewportService]);\n\n  return (\n    <SwitchButton\n      key={key}\n      label=\"Shade\"\n      checked={shade}\n      onChange={() => {\n        setShade(!shade);\n        onShadeChange(!shade);\n      }}\n    />\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { AllInOneMenu } from '@ohif/ui';\nimport { VolumeRenderingOptionsProps } from '../../types/ViewportPresets';\nimport { VolumeRenderingQuality } from './VolumeRenderingQuality';\nimport { VolumeShift } from './VolumeShift';\nimport { VolumeLighting } from './VolumeLighting';\nimport { VolumeShade } from './VolumeShade';\nexport function VolumeRenderingOptions({\n  viewportId,\n  commandsManager,\n  volumeRenderingQualityRange,\n  servicesManager,\n}: VolumeRenderingOptionsProps): ReactElement {\n  return (\n    <AllInOneMenu.ItemPanel>\n      <VolumeRenderingQuality\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        volumeRenderingQualityRange={volumeRenderingQualityRange}\n      />\n\n      <VolumeShift\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n      />\n      <div className=\"all-in-one-menu-item mt-2 flex !h-[20px] w-full justify-start\">\n        <div className=\"text-aqua-pale text-[13px]\">LIGHTING</div>\n      </div>\n      <div className=\"bg-primary-dark mt-1 mb-1 h-[2px] w-full\"></div>\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\n        <VolumeShade\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          viewportId={viewportId}\n        />\n      </div>\n      <VolumeLighting\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n      />\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { AllInOneMenu, useViewportGrid } from '@ohif/ui';\nimport { Colormap } from './Colormap';\nimport { Colorbar } from './Colorbar';\nimport { setViewportColorbar } from './Colorbar';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\nimport { ColorbarProperties } from '../../types/Colorbar';\nimport { VolumeRenderingQualityRange } from '../../types/ViewportPresets';\nimport { WindowLevel } from './WindowLevel';\nimport { VolumeRenderingPresets } from './VolumeRenderingPresets';\nimport { VolumeRenderingOptions } from './VolumeRenderingOptions';\nimport { ViewportPreset } from '../../types/ViewportPresets';\nimport { VolumeViewport3D } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\n\nexport type WindowLevelActionMenuProps = {\n  viewportId: string;\n  element: HTMLElement;\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\n  verticalDirection: AllInOneMenu.VerticalDirection;\n  horizontalDirection: AllInOneMenu.HorizontalDirection;\n  colorbarProperties: ColorbarProperties;\n  displaySets: Array<any>;\n  volumeRenderingPresets: Array<ViewportPreset>;\n  volumeRenderingQualityRange: VolumeRenderingQualityRange;\n};\n\nexport function WindowLevelActionMenu({\n  viewportId,\n  element,\n  presets,\n  verticalDirection,\n  horizontalDirection,\n  commandsManager,\n  servicesManager,\n  colorbarProperties,\n  displaySets,\n  volumeRenderingPresets,\n  volumeRenderingQualityRange,\n}: withAppTypes<WindowLevelActionMenuProps>): ReactElement {\n  const {\n    colormaps,\n    colorbarContainerPosition,\n    colorbarInitialColormap,\n    colorbarTickPosition,\n    width: colorbarWidth,\n  } = colorbarProperties;\n  const { colorbarService, cornerstoneViewportService } = servicesManager.services;\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const backgroundColor = viewportInfo.getViewportOptions().background;\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\n\n  const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\n  const { t } = useTranslation('WindowLevelActionMenu');\n\n  const [viewportGrid] = useViewportGrid();\n  const { activeViewportId } = viewportGrid;\n\n  const [vpHeight, setVpHeight] = useState(element?.clientHeight);\n  const [menuKey, setMenuKey] = useState(0);\n  const [is3DVolume, setIs3DVolume] = useState(false);\n\n  const onSetColorbar = useCallback(() => {\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\n      colormaps,\n      ticks: {\n        position: colorbarTickPosition,\n      },\n      width: colorbarWidth,\n      position: colorbarContainerPosition,\n      activeColormapName: colorbarInitialColormap,\n    });\n  }, [commandsManager]);\n\n  useEffect(() => {\n    const newVpHeight = element?.clientHeight;\n    if (vpHeight !== newVpHeight) {\n      setVpHeight(newVpHeight);\n    }\n  }, [element, vpHeight]);\n\n  useEffect(() => {\n    if (!colorbarService.hasColorbar(viewportId)) {\n      return;\n    }\n    window.setTimeout(() => {\n      colorbarService.removeColorbar(viewportId);\n      onSetColorbar();\n    }, 0);\n  }, [viewportId, displaySets, viewport]);\n\n  useEffect(() => {\n    setMenuKey(menuKey + 1);\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (viewport instanceof VolumeViewport3D) {\n      setIs3DVolume(true);\n    } else {\n      setIs3DVolume(false);\n    }\n  }, [\n    displaySets,\n    viewportId,\n    presets,\n    volumeRenderingQualityRange,\n    volumeRenderingPresets,\n    colorbarProperties,\n    activeViewportId,\n    viewportGrid,\n  ]);\n\n  return (\n    <AllInOneMenu.IconMenu\n      icon=\"viewport-window-level\"\n      verticalDirection={verticalDirection}\n      horizontalDirection={horizontalDirection}\n      iconClassName={classNames(\n        // Visible on hover and for the active viewport\n        activeViewportId === viewportId ? 'visible' : 'invisible group-hover:visible',\n        'flex shrink-0 cursor-pointer rounded active:text-white text-primary-light',\n        isLight ? ' hover:bg-secondary-dark' : 'hover:bg-secondary-light/60'\n      )}\n      menuStyle={{ maxHeight: vpHeight - 32, minWidth: 218 }}\n      onVisibilityChange={() => {\n        setVpHeight(element.clientHeight);\n      }}\n      menuKey={menuKey}\n    >\n      <AllInOneMenu.ItemPanel>\n        {!is3DVolume && (\n          <Colorbar\n            viewportId={viewportId}\n            displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\n            commandsManager={commandsManager}\n            servicesManager={servicesManager}\n            colorbarProperties={colorbarProperties}\n          />\n        )}\n\n        {colormaps && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"colorLUTPresets\"\n            itemLabel=\"Color LUT\"\n            itemIcon=\"icon-color-lut\"\n          >\n            <Colormap\n              colormaps={colormaps}\n              viewportId={viewportId}\n              displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\n              commandsManager={commandsManager}\n              servicesManager={servicesManager}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {presets && presets.length > 0 && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"windowLevelPresets\"\n            itemLabel={t('Modality Window Presets')}\n            itemIcon=\"viewport-window-level\"\n          >\n            <WindowLevel\n              viewportId={viewportId}\n              commandsManager={commandsManager}\n              presets={presets}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {volumeRenderingPresets && is3DVolume && (\n          <VolumeRenderingPresets\n            servicesManager={servicesManager}\n            viewportId={viewportId}\n            commandsManager={commandsManager}\n            volumeRenderingPresets={volumeRenderingPresets}\n          />\n        )}\n\n        {volumeRenderingQualityRange && is3DVolume && (\n          <AllInOneMenu.SubMenu itemLabel=\"Rendering Options\">\n            <VolumeRenderingOptions\n              viewportId={viewportId}\n              commandsManager={commandsManager}\n              volumeRenderingQualityRange={volumeRenderingQualityRange}\n              servicesManager={servicesManager}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n      </AllInOneMenu.ItemPanel>\n    </AllInOneMenu.IconMenu>\n  );\n}\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { useResizeDetector } from 'react-resize-detector';\nimport PropTypes from 'prop-types';\nimport * as cs3DTools from '@cornerstonejs/tools';\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  StackViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { MeasurementService } from '@ohif/core';\nimport { Notification, useViewportDialog, AllInOneMenu } from '@ohif/ui';\nimport { IStackViewport, IVolumeViewport } from '@cornerstonejs/core/dist/esm/types';\n\nimport { setEnabledElement } from '../state';\n\nimport './OHIFCornerstoneViewport.css';\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\nimport getSOPInstanceAttributes from '../utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\nimport CinePlayer from '../components/CinePlayer';\nimport { Types } from '@ohif/core';\n\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\nimport { getWindowLevelActionMenu } from '../components/WindowLevelActionMenu/getWindowLevelActionMenu';\nimport { useAppConfig } from '@state';\n\nimport { LutPresentation, PositionPresentation } from '../types/Presentation';\n\nconst STACK = 'stack';\n\n/**\n * Caches the jump to measurement operation, so that if display set is shown,\n * it can jump to the measurement.\n */\nlet cacheJumpToMeasurementEvent;\n\nfunction areEqual(prevProps, nextProps) {\n  if (nextProps.needsRerendering) {\n    return false;\n  }\n\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType) {\n    return false;\n  }\n\n  if (nextProps.viewportOptions.needsRerendering) {\n    return false;\n  }\n\n  const prevDisplaySets = prevProps.displaySets;\n  const nextDisplaySets = nextProps.displaySets;\n\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < prevDisplaySets.length; i++) {\n    const prevDisplaySet = prevDisplaySets[i];\n\n    const foundDisplaySet = nextDisplaySets.find(\n      nextDisplaySet =>\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\n    );\n\n    if (!foundDisplaySet) {\n      return false;\n    }\n\n    // check they contain the same image\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\n      return false;\n    }\n\n    // check if their imageIds are the same\n    if (foundDisplaySet.images?.length) {\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\n// Then we don't need to worry about the re-renders if the props change.\nconst OHIFCornerstoneViewport = React.memo((props: withAppTypes) => {\n  const {\n    displaySets,\n    dataSource,\n    viewportOptions,\n    displaySetOptions,\n    servicesManager,\n    onElementEnabled,\n    // eslint-disable-next-line react/prop-types\n    onElementDisabled,\n    isJumpToMeasurementDisabled = false,\n    // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n    // of the imageData in the OHIFCornerstoneViewport. This prop is used\n    // to set the initial state of the viewport's first image to render\n    // eslint-disable-next-line react/prop-types\n    initialImageIndex,\n    // if the viewport is part of a hanging protocol layout\n    // we should not really rely on the old synchronizers and\n    // you see below we only rehydrate the synchronizers if the viewport\n    // is not part of the hanging protocol layout. HPs should\n    // define their own synchronizers. Since the synchronizers are\n    // viewportId dependent and\n    // eslint-disable-next-line react/prop-types\n    isHangingProtocolLayout,\n  } = props;\n\n  const viewportId = viewportOptions.viewportId;\n\n  if (!viewportId) {\n    throw new Error('Viewport ID is required');\n  }\n\n  // Since we only have support for dynamic data in volume viewports, we should\n  // handle this case here and set the viewportType to volume if any of the\n  // displaySets are dynamic volumes\n  viewportOptions.viewportType = displaySets.some(ds => ds.isDynamicVolume && ds.isReconstructable)\n    ? 'volume'\n    : viewportOptions.viewportType;\n\n  const [scrollbarWidth, setscrollbarWidth] = useState('100px');\n  const [enabledVPElement, setEnabledVPElement] = useState(null);\n  const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\n  const [appConfig] = useAppConfig();\n\n  const {\n    measurementService,\n    displaySetService,\n    toolbarService,\n    toolGroupService,\n    syncGroupService,\n    cornerstoneViewportService,\n    cornerstoneCacheService,\n    viewportGridService,\n    stateSyncService,\n    viewportActionCornersService,\n  } = servicesManager.services;\n\n  const [viewportDialogState] = useViewportDialog();\n  // useCallback for scroll bar height calculation\n  const setImagescrollbarWidth = useCallback(() => {\n    const scrollbarWidth = `${elementRef.current.clientWidth - 40}px`;\n    setscrollbarWidth(scrollbarWidth);\n  }, [elementRef]);\n\n  // useCallback for onResize\n  const onResize = useCallback(() => {\n    if (elementRef.current) {\n      cornerstoneViewportService.resize();\n      setImagescrollbarWidth();\n    }\n  }, [elementRef]);\n\n  const cleanUpServices = useCallback(\n    viewportInfo => {\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\n      const syncGroups = viewportInfo.getSyncGroups();\n\n      toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\n\n      syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n      viewportActionCornersService.clear(viewportId);\n    },\n    [viewportId]\n  );\n\n  const elementEnabledHandler = useCallback(\n    evt => {\n      // check this is this element reference and return early if doesn't match\n      if (evt.detail.element !== elementRef.current) {\n        return;\n      }\n\n      const { viewportId, element } = evt.detail;\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n      setEnabledElement(viewportId, element);\n      setEnabledVPElement(element);\n\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\n      const toolGroupId = viewportInfo.getToolGroupId();\n      const syncGroups = viewportInfo.getSyncGroups();\n\n      toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\n\n      syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n      const synchronizersStore = stateSyncService.getState().synchronizersStore;\n\n      if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\n        // If the viewport used to have a synchronizer, re apply it again\n        _rehydrateSynchronizers(synchronizersStore, viewportId, syncGroupService);\n      }\n\n      if (onElementEnabled) {\n        onElementEnabled(evt);\n      }\n    },\n    [viewportId, onElementEnabled, toolGroupService]\n  );\n\n  // disable the element upon unmounting\n  useEffect(() => {\n    cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\n\n    eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n\n    setImagescrollbarWidth();\n\n    return () => {\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n      if (!viewportInfo) {\n        return;\n      }\n\n      cornerstoneViewportService.storePresentation({ viewportId });\n\n      // This should be done after the store presentation since synchronizers\n      // will get cleaned up and they need the viewportInfo to be present\n      cleanUpServices(viewportInfo);\n\n      if (onElementDisabled) {\n        onElementDisabled(viewportInfo);\n      }\n\n      cornerstoneViewportService.disableElement(viewportId);\n\n      eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n    };\n  }, []);\n\n  // subscribe to displaySet metadata invalidation (updates)\n  // Currently, if the metadata changes we need to re-render the display set\n  // for it to take effect in the viewport. As we deal with scaling in the loading,\n  // we need to remove the old volume from the cache, and let the\n  // viewport to re-add it which will use the new metadata. Otherwise, the\n  // viewport will use the cached volume and the new metadata will not be used.\n  // Note: this approach does not actually end of sending network requests\n  // and it uses the network cache\n  useEffect(() => {\n    const { unsubscribe } = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      async ({\n        displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\n        invalidateData,\n      }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\n        if (!invalidateData) {\n          return;\n        }\n\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n        if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\n          const viewportData = viewportInfo.getViewportData();\n          const newViewportData = await cornerstoneCacheService.invalidateViewportData(\n            viewportData,\n            invalidatedDisplaySetInstanceUID,\n            dataSource,\n            displaySetService\n          );\n\n          const keepCamera = true;\n          cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\n        }\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  useEffect(() => {\n    // handle the default viewportType to be stack\n    if (!viewportOptions.viewportType) {\n      viewportOptions.viewportType = STACK;\n    }\n\n    const loadViewportData = async () => {\n      console.log('CREATE VIEWPORT DATA', displaySets, viewportOptions, dataSource, initialImageIndex);\n      const viewportData = await cornerstoneCacheService.createViewportData(\n        displaySets,\n        viewportOptions,\n        dataSource,\n        initialImageIndex\n      );\n\n      // The presentation state will have been stored previously by closing\n      // a viewport.  Otherwise, this viewport will be unchanged and the\n      // presentation information will be directly carried over.\n      const state = stateSyncService.getState();\n      const lutPresentationStore = state.lutPresentationStore as LutPresentation;\n      const positionPresentationStore = state.positionPresentationStore as PositionPresentation;\n\n      const { presentationIds } = viewportOptions;\n      const presentations = {\n        positionPresentation: positionPresentationStore[presentationIds?.positionPresentationId],\n        lutPresentation: lutPresentationStore[presentationIds?.lutPresentationId],\n      };\n      let measurement;\n      if (cacheJumpToMeasurementEvent?.viewportId === viewportId) {\n        measurement = cacheJumpToMeasurementEvent.measurement;\n        // Delete the position presentation so that viewport navigates direct\n        presentations.positionPresentation = null;\n        cacheJumpToMeasurementEvent = null;\n      }\n\n      // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\n      // Used for segmentation hydration right now, since the logic to decide whether\n      // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\n      // so we need to re-render (force update via change of the needsRerendering) so that React\n      // does the diffing and decides we should render this again (although the id and element has not changed)\n      // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\n      if (viewportOptions.needsRerendering) {\n        viewportOptions.needsRerendering = false;\n      }\n\n      cornerstoneViewportService.setViewportData(\n        viewportId,\n        viewportData,\n        viewportOptions,\n        displaySetOptions,\n        presentations\n      );\n      if (measurement) {\n        cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n      }\n    };\n\n    loadViewportData();\n  }, [viewportOptions, displaySets, dataSource]);\n\n  /**\n   * There are two scenarios for jump to click\n   * 1. Current viewports contain the displaySet that the annotation was drawn on\n   * 2. Current viewports don't contain the displaySet that the annotation was drawn on\n   * and we need to change the viewports displaySet for jumping.\n   * Since measurement_jump happens via events and listeners, the former case is handled\n   * by the measurement_jump direct callback, but the latter case is handled first by\n   * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\n   * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\n   */\n  useEffect(() => {\n    if (isJumpToMeasurementDisabled) {\n      return;\n    }\n\n    const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\n      measurementService,\n      displaySetService,\n      elementRef,\n      viewportId,\n      displaySets,\n      viewportGridService,\n      cornerstoneViewportService\n    );\n\n    _checkForCachedJumpToMeasurementEvents(\n      measurementService,\n      displaySetService,\n      elementRef,\n      viewportId,\n      displaySets,\n      viewportGridService,\n      cornerstoneViewportService\n    );\n\n    return () => {\n      unsubscribeFromJumpToMeasurementEvents();\n    };\n  }, [displaySets, elementRef, viewportId]);\n\n  // Set up the window level action menu in the viewport action corners.\n  useEffect(() => {\n    // Doing an === check here because the default config value when not set is true\n    if (appConfig.addWindowLevelActionMenu === false) {\n      return;\n    }\n\n    // TODO: In the future we should consider using the customization service\n    // to determine if and in which corner various action components should go.\n    const wlActionMenu = getWindowLevelActionMenu({\n      viewportId,\n      element: elementRef.current,\n      displaySets,\n      servicesManager,\n      commandsManager,\n      verticalDirection: AllInOneMenu.VerticalDirection.TopToBottom,\n      horizontalDirection: AllInOneMenu.HorizontalDirection.RightToLeft,\n    });\n\n    viewportActionCornersService.setComponent({\n      viewportId,\n      id: 'windowLevelActionMenu',\n      component: wlActionMenu,\n      location: viewportActionCornersService.LOCATIONS.topRight,\n      indexPriority: -100,\n    });\n  }, [displaySets, viewportId, viewportActionCornersService, servicesManager, commandsManager]);\n\n  const { ref: resizeRef } = useResizeDetector({\n    onResize,\n  });\n  return (\n    <React.Fragment>\n      <div className=\"viewport-wrapper\">\n        <div\n          className=\"cornerstone-viewport-element\"\n          style={{ height: '100%', width: '100%' }}\n          onContextMenu={e => e.preventDefault()}\n          onMouseDown={e => e.preventDefault()}\n          ref={el => {\n            resizeRef.current = el;\n            elementRef.current = el;\n          }}\n        ></div>\n        <CornerstoneOverlays\n          viewportId={viewportId}\n          toolBarService={toolbarService}\n          element={elementRef.current}\n          scrollbarWidth={scrollbarWidth}\n          servicesManager={servicesManager}\n        />\n        <CinePlayer\n          enabledVPElement={enabledVPElement}\n          viewportId={viewportId}\n          servicesManager={servicesManager}\n        />\n      </div>\n      {/* top offset of 24px to account for ViewportActionCorners. */}\n      <div className=\"absolute top-[24px] w-full\">\n        {viewportDialogState.viewportId === viewportId && (\n          <Notification\n            id=\"viewport-notification\"\n            message={viewportDialogState.message}\n            type={viewportDialogState.type}\n            actions={viewportDialogState.actions}\n            onSubmit={viewportDialogState.onSubmit}\n            onOutsideClick={viewportDialogState.onOutsideClick}\n            onKeyPress={viewportDialogState.onKeyPress}\n          />\n        )}\n      </div>\n      {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\n      <OHIFViewportActionCorners viewportId={viewportId} />\n    </React.Fragment>\n  );\n}, areEqual);\n\nfunction _subscribeToJumpToMeasurementEvents(\n  measurementService,\n  displaySetService,\n  elementRef,\n  viewportId,\n  displaySets,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  const { unsubscribe } = measurementService.subscribe(\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\n    props => {\n      cacheJumpToMeasurementEvent = props;\n      const { viewportId: jumpId, measurement, isConsumed } = props;\n      if (!measurement || isConsumed) {\n        return;\n      }\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\n        // Decide on which viewport should handle this\n        cacheJumpToMeasurementEvent.cornerstoneViewport =\n          cornerstoneViewportService.getViewportIdToJump(\n            jumpId,\n            measurement.displaySetInstanceUID,\n            {\n              referencedImageId:\n                measurement.referencedImageId || measurement.metadata?.referencedImageId,\n            }\n          );\n      }\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportId) {\n        return;\n      }\n      _jumpToMeasurement(\n        measurement,\n        elementRef,\n        viewportId,\n        measurementService,\n        displaySetService,\n        viewportGridService,\n        cornerstoneViewportService\n      );\n    }\n  );\n\n  return unsubscribe;\n}\n\n// Check if there is a queued jumpToMeasurement event\nfunction _checkForCachedJumpToMeasurementEvents(\n  measurementService,\n  displaySetService,\n  elementRef,\n  viewportId,\n  displaySets,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  if (!cacheJumpToMeasurementEvent) {\n    return;\n  }\n  if (cacheJumpToMeasurementEvent.isConsumed) {\n    cacheJumpToMeasurementEvent = null;\n    return;\n  }\n  const displaysUIDs = displaySets.map(displaySet => displaySet.displaySetInstanceUID);\n  if (!displaysUIDs?.length) {\n    return;\n  }\n\n  // Jump to measurement if the measurement exists\n  const { measurement } = cacheJumpToMeasurementEvent;\n  if (measurement && elementRef) {\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\n      _jumpToMeasurement(\n        measurement,\n        elementRef,\n        viewportId,\n        measurementService,\n        displaySetService,\n        viewportGridService,\n        cornerstoneViewportService\n      );\n    }\n  }\n}\n\nfunction _jumpToMeasurement(\n  measurement,\n  targetElementRef,\n  viewportId,\n  measurementService,\n  displaySetService,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  const targetElement = targetElementRef.current;\n  const { displaySetInstanceUID, SOPInstanceUID, frameNumber } = measurement;\n\n  if (!SOPInstanceUID) {\n    console.warn('cannot jump in a non-acquisition plane measurements yet');\n    return;\n  }\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\n  //  to set it properly\n  // setCornerstoneMeasurementActive(measurement);\n\n  viewportGridService.setActiveViewportId(viewportId);\n\n  const enabledElement = getEnabledElement(targetElement);\n\n  if (enabledElement) {\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\n    const viewport = enabledElement.viewport as IStackViewport | IVolumeViewport;\n\n    let imageIdIndex = 0;\n    let viewportCameraDirectionMatch = true;\n\n    if (viewport instanceof StackViewport) {\n      const imageIds = viewport.getImageIds();\n      imageIdIndex = imageIds.findIndex(imageId => {\n        const { SOPInstanceUID: aSOPInstanceUID, frameNumber: aFrameNumber } =\n          getSOPInstanceAttributes(imageId);\n        return aSOPInstanceUID === SOPInstanceUID && (!frameNumber || frameNumber === aFrameNumber);\n      });\n    } else {\n      // for volume viewport we can't rely on the imageIdIndex since it can be\n      // a reconstructed view that doesn't match the original slice numbers etc.\n      const { viewPlaneNormal: measurementViewPlane } = measurement.metadata;\n      imageIdIndex = referencedDisplaySet.images.findIndex(\n        i => i.SOPInstanceUID === SOPInstanceUID\n      );\n\n      // the index is reversed in the volume viewport\n      // imageIdIndex = referencedDisplaySet.images.length - 1 - imageIdIndex;\n\n      const { viewPlaneNormal: viewportViewPlane } = viewport.getCamera();\n\n      // should compare abs for both planes since the direction can be flipped\n      if (\n        measurementViewPlane &&\n        !csUtils.isEqual(measurementViewPlane.map(Math.abs), viewportViewPlane.map(Math.abs))\n      ) {\n        viewportCameraDirectionMatch = false;\n      }\n    }\n\n    if (!viewportCameraDirectionMatch || imageIdIndex === -1) {\n      return;\n    }\n\n    cs3DTools.utilities.jumpToSlice(targetElement, {\n      imageIndex: imageIdIndex,\n    });\n\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n    // Jump to measurement consumed, remove.\n    cacheJumpToMeasurementEvent?.consume?.();\n    cacheJumpToMeasurementEvent = null;\n  }\n}\n\nfunction _rehydrateSynchronizers(\n  synchronizersStore: { [key: string]: unknown },\n  viewportId: string,\n  syncGroupService: any\n) {\n  synchronizersStore[viewportId].forEach(synchronizerObj => {\n    if (!synchronizerObj.id) {\n      return;\n    }\n\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\n\n    const synchronizer = syncGroupService.getSynchronizer(id);\n\n    if (!synchronizer) {\n      return;\n    }\n\n    const sourceViewportInfo = sourceViewports.find(\n      sourceViewport => sourceViewport.viewportId === viewportId\n    );\n\n    const targetViewportInfo = targetViewports.find(\n      targetViewport => targetViewport.viewportId === viewportId\n    );\n\n    const isSourceViewportInSynchronizer = synchronizer\n      .getSourceViewports()\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\n\n    const isTargetViewportInSynchronizer = synchronizer\n      .getTargetViewports()\n      .find(targetViewport => targetViewport.viewportId === viewportId);\n\n    // if the viewport was previously a source viewport, add it again\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\n      synchronizer.addSource({\n        viewportId: sourceViewportInfo.viewportId,\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\n      });\n    }\n\n    // if the viewport was previously a target viewport, add it again\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\n      synchronizer.addTarget({\n        viewportId: targetViewportInfo.viewportId,\n        renderingEngineId: targetViewportInfo.renderingEngineId,\n      });\n    }\n  });\n}\n\n// Component displayName\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\n\nOHIFCornerstoneViewport.propTypes = {\n  displaySets: PropTypes.array.isRequired,\n  dataSource: PropTypes.object.isRequired,\n  viewportOptions: PropTypes.object,\n  displaySetOptions: PropTypes.arrayOf(PropTypes.any),\n  servicesManager: PropTypes.object.isRequired,\n  onElementEnabled: PropTypes.func,\n  isJumpToMeasurementDisabled: PropTypes.bool,\n  // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n  // of the imageData in the OHIFCornerstoneViewport. This prop is used\n  // to set the initial state of the viewport's first image to render\n  initialImageIdOrIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default OHIFCornerstoneViewport;\n","import React, { ReactNode } from 'react';\nimport { WindowLevelActionMenu } from './WindowLevelActionMenu';\n\nexport function getWindowLevelActionMenu({\n  viewportId,\n  element,\n  displaySets,\n  servicesManager,\n  commandsManager,\n  verticalDirection,\n  horizontalDirection,\n}: withAppTypes): ReactNode {\n  const { customizationService } = servicesManager.services;\n\n  const { presets } = customizationService.get('cornerstone.windowLevelPresets');\n  const colorbarProperties = customizationService.get('cornerstone.colorbar');\n  const { volumeRenderingPresets, volumeRenderingQualityRange } = customizationService.get(\n    'cornerstone.3dVolumeRendering'\n  );\n\n  const displaySetPresets = displaySets\n    .filter(displaySet => presets[displaySet.Modality])\n    .map(displaySet => {\n      return { [displaySet.Modality]: presets[displaySet.Modality] };\n    });\n\n  return (\n    <WindowLevelActionMenu\n      viewportId={viewportId}\n      element={element}\n      presets={displaySetPresets}\n      verticalDirection={verticalDirection}\n      horizontalDirection={horizontalDirection}\n      commandsManager={commandsManager}\n      servicesManager={servicesManager}\n      colorbarProperties={colorbarProperties}\n      displaySets={displaySets}\n      volumeRenderingPresets={volumeRenderingPresets}\n      volumeRenderingQualityRange={volumeRenderingQualityRange}\n    />\n  );\n}\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarWidth","servicesManager","cineService","cornerstoneViewportService","viewportGridService","panoramicService","hangingProtocolService","services","isDentascan","setIsDentascan","useState","useEffect","viewport","getCornerstoneViewport","getActiveProtocol","protocol","id","viewportIndex","getViewportIds","findIndex","vpId","viewportType","Enums","STACK","ORTHOGRAPHIC","sliceData","utilities","imageIndex","numberOfSlices","getCornerstoneImage","columns","Math","round","updateStackIndex","event","newImageIdIndex","detail","data","imageIds","length","addEventListener","STACK_VIEWPORT_SCROLL","removeEventListener","updateVolumeIndex","VOLUME_NEW_IMAGE","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","isPlaying","csToolsUtils","debounceLoading","viewportIds","displaySetUID","getDisplaySetsUIDsForViewport","floor","setDentascanIndex","max","height","value","propTypes","PropTypes","isRequired","Element","getOrientationStringLPS","invertOrientationStringLPS","orientationMarkers","rotation","setRotation","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","previousCamera","camera","undefined","CAMERA_MODIFIED","markers","useMemo","rowCosines","columnCosines","imageId","metaData","getEnabledElement","viewUp","viewPlaneNormal","getCamera","viewRight","vec3","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","getViewportInfo","map","m","index","className","classNames","key","console","log","ViewportImageSliceLoadingIndicator","loading","setLoading","error","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","CustomizableViewportOverlay","ViewportOrientationMarkers","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","customizationService","component","CinePlayerComponent","CinePlayer","get","setDynamicInfo","handleTimePointIndexChange","volumeId","timePointIndex","numTimePoints","splittingTag","label","eventTarget","StreamingEnums","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","cache","getVolume","updateDynamicInfo","useCallback","frameRate","onClose","setIsCineEnabled","onPlayPauseChange","onFrameRateChange","enabledVPElement","displaySetService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","forEach","displaySetInstanceUID","displaySet","getDisplaySetByUID","FrameRate","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","STACK_VIEWPORT_NEW_STACK","VOLUME_VIEWPORT_NEW_VOLUME","cine","viewportActionCornersState","useViewportActionCornersContext","ViewportActionCorners","cornerComponents","Colormap","colormaps","displaySets","commandsManager","activeDisplaySet","setActiveDisplaySet","showPreview","setShowPreview","prePreviewColormap","setPrePreviewColormap","showPreviewRef","prePreviewColormapRef","activeDisplaySetRef","onSetColorLUT","opacity","includes","colormap","name","run","commandName","commandOptions","immediate","context","buttons","children","Modality","style","minWidth","fontSize","textAlign","display","justifyContent","alignItems","ButtonGroup","onActiveIndexChange","activeIndex","ds","SwitchButton","checked","AllInOneMenu","description","onClick","onMouseEnter","getViewportColormap","StackViewport","getProperties","find","c","Name","actorEntry","getActors","entry","uid","onMouseLeave","setViewportColorbar","colorbarOptions","backgroundColor","getViewportOptions","background","ticks","position","font","color","maxNumTicks","tickSize","tickWidth","labelMargin","push","VolumeViewport","options","Colorbar","colorbarProperties","colorbarService","width","colorbarWidth","colorbarTickPosition","colorbarContainerPosition","colorbarInitialColormap","showColorbar","setShowColorbar","hasColorbar","onSetColorbar","activeColormapName","STATE_CHANGED","updateColorbarState","WindowLevel","presets","t","useTranslation","onSetWindowLevel","modalityPresets","modalityIndex","Object","entries","modality","presetsArray","preset","secondaryLabel","window","level","VolumeRenderingPresetsContent","filteredPresets","setFilteredPresets","searchValue","setSearchValue","selectedPreset","setSelectedPreset","handleSearchChange","filtered","filter","toLowerCase","handleApply","runCommand","InputFilterText","onDebounceChange","placeholder","Icon","maxChars","slice","formatLabel","Button","size","ButtonEnums","medium","type","secondary","VolumeRenderingPresets","volumeRenderingPresets","uiModalService","icon","rightIcon","onClickPresets","show","content","title","movable","contentProps","hide","containerDimensions","contentDimensions","VolumeRenderingQuality","volumeRenderingQualityRange","min","step","quality","setQuality","volumeQuality","actor","mapper","getMapper","spacing","getInputData","getSpacing","sampleDistance","getSampleDistance","averageSpacing","reduce","a","b","sqrt","htmlFor","e","parseInt","target","percentage","calculateBackground","VolumeShift","minShift","setMinShift","maxShift","setMaxShift","shift","setShift","shiftedBy","setStep","isBlocking","setIsBlocking","prevShiftRef","ofun","getProperty","getScalarOpacity","range","getRange","transferFunctionWidth","pow","log10","onChangeRange","newShift","shiftDifference","shiftValue","onMouseDown","onMouseUp","VolumeLighting","ambient","setAmbient","diffuse","setDiffuse","specular","setSpecular","onAmbientChange","onDiffuseChange","onSpecularChange","getAmbient","getDiffuse","getSpecular","VolumeShade","shade","setShade","setKey","onShadeChange","getShade","VolumeRenderingOptions","WindowLevelActionMenu","verticalDirection","horizontalDirection","isLight","nonImageModalities","viewportGrid","useViewportGrid","activeViewportId","vpHeight","setVpHeight","clientHeight","menuKey","setMenuKey","is3DVolume","setIs3DVolume","newVpHeight","removeColorbar","VolumeViewport3D","iconClassName","menuStyle","maxHeight","onVisibilityChange","itemLabel","itemIcon","cacheJumpToMeasurementEvent","areEqual","prevProps","nextProps","needsRerendering","orientation","toolGroupId","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","some","isReconstructable","setscrollbarWidth","setEnabledVPElement","elementRef","measurementService","toolbarService","toolGroupService","syncGroupService","cornerstoneCacheService","stateSyncService","viewportActionCornersService","viewportDialogState","useViewportDialog","setImagescrollbarWidth","clientWidth","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clear","elementEnabledHandler","setEnabledElement","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","state","lutPresentationStore","positionPresentationStore","presentationIds","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","measurement","cs3DTools","loadViewportData","unsubscribeFromJumpToMeasurementEvents","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpId","isConsumed","cornerstoneViewport","getViewportIdToJump","referencedImageId","metadata","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","_checkForCachedJumpToMeasurementEvents","addWindowLevelActionMenu","wlActionMenu","displaySetPresets","getWindowLevelActionMenu","TopToBottom","RightToLeft","setComponent","location","LOCATIONS","topRight","indexPriority","ref","resizeRef","useResizeDetector","onContextMenu","preventDefault","el","CornerstoneOverlays","toolBarService","Notification","message","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","targetElementRef","targetElement","SOPInstanceUID","frameNumber","warn","referencedDisplaySet","setActiveViewportId","enabledElement","imageIdIndex","viewportCameraDirectionMatch","getImageIds","aSOPInstanceUID","aFrameNumber","getSOPInstanceAttributes","measurementViewPlane","viewportViewPlane","csUtils","abs","consume","displayName","initialImageIdOrIndex"],"sourceRoot":""}