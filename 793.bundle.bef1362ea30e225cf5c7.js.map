{"version":3,"file":"793.bundle.bef1362ea30e225cf5c7.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/getVolumeInfo.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/splitImageIdsBy4DTags.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/getDynamicVolumeInfo.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/autoLoad.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/helpers/scaleArray.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/BaseStreamingImageVolume.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/StreamingImageVolume.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/cornerstoneStreamingImageVolumeLoader.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/enums/Events.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/StreamingDynamicImageVolume.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/cornerstoneStreamingDynamicImageVolumeLoader.ts","webpack:///../../../node_modules/@cornerstonejs/streaming-image-volume-loader/src/index.ts"],"sourcesContent":["import { vec3 } from 'gl-matrix';\r\nimport { cache, utilities, Enums } from '@cornerstonejs/core';\r\nimport type { Types } from '@cornerstonejs/core';\r\n\r\nconst { createUint8SharedArray, createFloat32SharedArray } = utilities;\r\n\r\nfunction getVolumeInfo(imageIds: string[]) {\r\n  const volumeMetadata = utilities.makeVolumeMetadata(imageIds);\r\n\r\n  const {\r\n    BitsAllocated,\r\n    PixelRepresentation,\r\n    PhotometricInterpretation,\r\n    ImageOrientationPatient,\r\n    PixelSpacing,\r\n    Columns,\r\n    Rows,\r\n  } = volumeMetadata;\r\n\r\n  const rowCosineVec = vec3.fromValues(\r\n    ImageOrientationPatient[0],\r\n    ImageOrientationPatient[1],\r\n    ImageOrientationPatient[2]\r\n  );\r\n\r\n  const colCosineVec = vec3.fromValues(\r\n    ImageOrientationPatient[3],\r\n    ImageOrientationPatient[4],\r\n    ImageOrientationPatient[5]\r\n  );\r\n\r\n  const scanAxisNormal = vec3.create();\r\n\r\n  vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\r\n\r\n  const { zSpacing, origin, sortedImageIds } =\r\n    utilities.sortImageIdsAndGetSpacing(imageIds, scanAxisNormal);\r\n\r\n  const numFrames = imageIds.length;\r\n\r\n  // Spacing goes [1] then [0], as [1] is column spacing (x) and [0] is row spacing (y)\r\n  const spacing = <Types.Point3>[PixelSpacing[1], PixelSpacing[0], zSpacing];\r\n  const dimensions = <Types.Point3>[Columns, Rows, numFrames];\r\n  const direction = [\r\n    ...rowCosineVec,\r\n    ...colCosineVec,\r\n    ...scanAxisNormal,\r\n  ] as Types.Mat3;\r\n  const signed = PixelRepresentation === 1;\r\n\r\n  // Check if it fits in the cache before we allocate data\r\n  // TODO Improve this when we have support for more types\r\n  // NOTE: We use 4 bytes per voxel as we are using Float32.\r\n  const bytesPerVoxel = BitsAllocated === 16 ? 4 : 1;\r\n  const sizeInBytesPerComponent =\r\n    bytesPerVoxel * dimensions[0] * dimensions[1] * dimensions[2];\r\n\r\n  let numComponents = 1;\r\n  if (PhotometricInterpretation === 'RGB') {\r\n    numComponents = 3;\r\n  }\r\n\r\n  const sizeInBytes = sizeInBytesPerComponent * numComponents;\r\n\r\n  // check if there is enough space in unallocated + image Cache\r\n  const isCacheable = cache.isCacheable(sizeInBytes);\r\n  if (!isCacheable) {\r\n    throw new Error(Enums.Events.CACHE_SIZE_EXCEEDED);\r\n  }\r\n\r\n  cache.decacheIfNecessaryUntilBytesAvailable(sizeInBytes);\r\n\r\n  let scalarData;\r\n\r\n  switch (BitsAllocated) {\r\n    case 8:\r\n      if (signed) {\r\n        throw new Error(\r\n          '8 Bit signed images are not yet supported by this plugin.'\r\n        );\r\n      } else {\r\n        scalarData = createUint8SharedArray(\r\n          dimensions[0] * dimensions[1] * dimensions[2]\r\n        );\r\n      }\r\n\r\n      break;\r\n\r\n    case 16:\r\n      scalarData = createFloat32SharedArray(\r\n        dimensions[0] * dimensions[1] * dimensions[2]\r\n      );\r\n\r\n      break;\r\n\r\n    case 24:\r\n      // hacky because we don't support alpha channel in dicom\r\n      scalarData = createUint8SharedArray(\r\n        dimensions[0] * dimensions[1] * dimensions[2] * numComponents\r\n      );\r\n\r\n      break;\r\n  }\r\n\r\n  return {\r\n    metadata: volumeMetadata,\r\n    sortedImageIds,\r\n    dimensions,\r\n    spacing,\r\n    origin,\r\n    direction,\r\n    scalarData,\r\n    sizeInBytes,\r\n  };\r\n}\r\n\r\nexport { getVolumeInfo, getVolumeInfo as default };\r\n","import { metaData } from '@cornerstonejs/core';\r\n\r\n// TODO: Test remaining implemented tags\r\n// Supported 4D Tags\r\n//   (0018,1060) Trigger Time                   [Implemented, not tested]\r\n//   (0018,0081) Echo Time                      [Implemented, not tested]\r\n//   (0018,0086) Echo Number                    [Implemented, not tested]\r\n//   (0020,0100) Temporal Position Identifier   [OK]\r\n//   (0054,1300) FrameReferenceTime             [OK]\r\n//   (0018,9087) Diffusion B Value              [OK]\r\n//   (2001,1003) Philips Diffusion B-factor     [OK]\r\n//   (0019,100c) Siemens Diffusion B Value      [Implemented, not tested]\r\n//   (0043,1039) GE Diffusion B Value           [OK]\r\n\r\ninterface MappedIPP {\r\n  imageId: string;\r\n  imagePositionPatient;\r\n}\r\n\r\nconst groupBy = (array, key) => {\r\n  return array.reduce((rv, x) => {\r\n    (rv[x[key]] = rv[x[key]] || []).push(x);\r\n    return rv;\r\n  }, {});\r\n};\r\n\r\nfunction getIPPGroups(imageIds: string[]): { [id: string]: Array<MappedIPP> } {\r\n  const ippMetadata: Array<MappedIPP> = imageIds.map((imageId) => {\r\n    const { imagePositionPatient } =\r\n      metaData.get('imagePlaneModule', imageId) || {};\r\n    return { imageId, imagePositionPatient };\r\n  });\r\n\r\n  if (!ippMetadata.every((item) => item.imagePositionPatient)) {\r\n    // Fail if any instances don't provide a position\r\n    return null;\r\n  }\r\n\r\n  const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\r\n  const positions = Object.keys(positionGroups);\r\n  const frame_count = positionGroups[positions[0]].length;\r\n  if (frame_count === 1) {\r\n    // Single frame indicates 3D volume\r\n    return null;\r\n  }\r\n  const frame_count_equal = positions.every(\r\n    (k) => positionGroups[k].length === frame_count\r\n  );\r\n  if (!frame_count_equal) {\r\n    // Differences in number of frames per position group --> not a valid MV\r\n    return null;\r\n  }\r\n  return positionGroups;\r\n}\r\n\r\nfunction test4DTag(\r\n  IPPGroups: { [id: string]: Array<MappedIPP> },\r\n  value_getter: (imageId: string) => number\r\n) {\r\n  const frame_groups = {};\r\n  let first_frame_value_set: number[] = [];\r\n\r\n  const positions = Object.keys(IPPGroups);\r\n  for (let i = 0; i < positions.length; i++) {\r\n    const frame_value_set: Set<number> = new Set<number>();\r\n    const frames = IPPGroups[positions[i]];\r\n\r\n    for (let j = 0; j < frames.length; j++) {\r\n      const frame_value = value_getter(frames[j].imageId) || 0;\r\n\r\n      frame_groups[frame_value] = frame_groups[frame_value] || [];\r\n      frame_groups[frame_value].push({ imageId: frames[j].imageId });\r\n\r\n      frame_value_set.add(frame_value);\r\n      if (frame_value_set.size - 1 < j) {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    if (i == 0) {\r\n      first_frame_value_set = Array.from(frame_value_set);\r\n    } else if (!setEquals(first_frame_value_set, frame_value_set)) {\r\n      return undefined;\r\n    }\r\n  }\r\n  return frame_groups;\r\n}\r\n\r\nfunction getTagValue(imageId: string, tag: string): number {\r\n  const value = metaData.get(tag, imageId);\r\n  try {\r\n    return parseFloat(value);\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction getPhilipsPrivateBValue(imageId: string) {\r\n  // Philips Private Diffusion B-factor tag (2001, 1003)\r\n  // Private creator: Philips Imaging DD 001, VR=FL, VM=1\r\n  const value = metaData.get('20011003', imageId);\r\n  try {\r\n    const { InlineBinary } = value;\r\n    if (InlineBinary) {\r\n      const value_bytes = atob(InlineBinary);\r\n      const ary_buf = new ArrayBuffer(value_bytes.length);\r\n      const dv = new DataView(ary_buf);\r\n      for (let i = 0; i < value_bytes.length; i++) {\r\n        dv.setUint8(i, value_bytes.charCodeAt(i));\r\n      }\r\n      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n      // For WebGL Buffers, can skip Float32Array,\r\n      // just return ArrayBuffer is all that's needed.\r\n      return new Float32Array(ary_buf)[0];\r\n    }\r\n\r\n    return parseFloat(value);\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction getSiemensPrivateBValue(imageId: string) {\r\n  // Siemens Private Diffusion B-factor tag (0019, 100c)\r\n  // Private creator: SIEMENS MR HEADER, VR=IS, VM=1\r\n  let value =\r\n    metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\r\n\r\n  try {\r\n    const { InlineBinary } = value;\r\n    if (InlineBinary) {\r\n      value = atob(InlineBinary);\r\n    }\r\n    return parseFloat(value);\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction getGEPrivateBValue(imageId: string) {\r\n  // GE Private Diffusion B-factor tag (0043, 1039)\r\n  // Private creator: GEMS_PARM_01, VR=IS, VM=4\r\n  let value = metaData.get('00431039', imageId);\r\n\r\n  try {\r\n    const { InlineBinary } = value;\r\n    if (InlineBinary) {\r\n      value = atob(InlineBinary).split('//');\r\n    }\r\n    return parseFloat(value[0]) % 100000;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nfunction setEquals(set_a: number[], set_b: Set<number>): boolean {\r\n  if (set_a.length != set_b.size) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < set_a.length; i++) {\r\n    if (!set_b.has(set_a[i])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction getPetFrameReferenceTime(imageId) {\r\n  const moduleInfo = metaData.get('petImageModule', imageId);\r\n  return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\r\n}\r\n\r\n/**\r\n * Split the imageIds array by 4D tags into groups. Each group must have the\r\n * same number of imageIds or the same imageIds array passed in is returned.\r\n * @param imageIds - array of imageIds\r\n * @returns imageIds grouped by 4D tags\r\n */\r\nfunction splitImageIdsBy4DTags(imageIds: string[]): {\r\n  imageIdsGroups: string[][];\r\n  splittingTag: string | null;\r\n} {\r\n  const positionGroups = getIPPGroups(imageIds);\r\n  if (!positionGroups) {\r\n    // When no position groups are found, return the original array wrapped and indicate no tag was used\r\n    return { imageIdsGroups: [imageIds], splittingTag: null };\r\n  }\r\n\r\n  const tags = [\r\n    'TemporalPositionIdentifier',\r\n    'DiffusionBValue',\r\n    'TriggerTime',\r\n    'EchoTime',\r\n    'EchoNumber',\r\n    'PhilipsPrivateBValue',\r\n    'SiemensPrivateBValue',\r\n    'GEPrivateBValue',\r\n    'PetFrameReferenceTime',\r\n  ];\r\n\r\n  const fncList2 = [\r\n    (imageId) => getTagValue(imageId, tags[0]),\r\n    (imageId) => getTagValue(imageId, tags[1]),\r\n    (imageId) => getTagValue(imageId, tags[2]),\r\n    (imageId) => getTagValue(imageId, tags[3]),\r\n    (imageId) => getTagValue(imageId, tags[4]),\r\n    getPhilipsPrivateBValue,\r\n    getSiemensPrivateBValue,\r\n    getGEPrivateBValue,\r\n    getPetFrameReferenceTime,\r\n  ];\r\n\r\n  for (let i = 0; i < fncList2.length; i++) {\r\n    const frame_groups = test4DTag(positionGroups, fncList2[i]);\r\n    if (frame_groups) {\r\n      const sortedKeys = Object.keys(frame_groups)\r\n        .map(Number.parseFloat)\r\n        .sort((a, b) => a - b);\r\n\r\n      const imageIdsGroups = sortedKeys.map((key) =>\r\n        frame_groups[key].map((item) => item.imageId)\r\n      );\r\n      return { imageIdsGroups, splittingTag: tags[i] };\r\n    }\r\n  }\r\n\r\n  // Return the same imagesIds for non-4D volumes and indicate no tag was used\r\n  return { imageIdsGroups: [imageIds], splittingTag: null };\r\n}\r\n\r\nexport default splitImageIdsBy4DTags;\r\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\r\n\r\n/**\r\n * Get some info about 4D image sets. Time points (groups of imageIds) are\r\n * returned when the imageIds represents a 4D volume.\r\n * @param imageIds - Array of Cornerstone Image Object's imageIds\r\n * @returns 4D series infos\r\n */\r\nfunction getDynamicVolumeInfo(imageIds) {\r\n  const { imageIdsGroups: timePoints, splittingTag } =\r\n    splitImageIdsBy4DTags(imageIds);\r\n  const isDynamicVolume = timePoints.length > 1;\r\n\r\n  return { isDynamicVolume, timePoints, splittingTag };\r\n}\r\n\r\nexport default getDynamicVolumeInfo;\r\n","import { getRenderingEngines, utilities } from '@cornerstonejs/core';\r\nimport type { Types } from '@cornerstonejs/core';\r\n\r\n//import type { Types } from '@cornerstonejs/core'\r\n\r\ntype RenderingEngineAndViewportIds = {\r\n  renderingEngine: Types.IRenderingEngine | undefined; //Types.IRenderingEngine | undefined\r\n  viewportIds: Array<string>;\r\n};\r\n\r\n/**\r\n * Given a volumeId, it finds the viewports and renderingEngines that\r\n * include that volume, and triggers a render if renderingEngine is available.\r\n *\r\n * @param volumeId - The Id of the volume\r\n */\r\nconst autoLoad = (volumeId: string): void => {\r\n  const renderingEngineAndViewportIds =\r\n    getRenderingEngineAndViewportsContainingVolume(volumeId);\r\n\r\n  if (!renderingEngineAndViewportIds || !renderingEngineAndViewportIds.length) {\r\n    return;\r\n  }\r\n\r\n  renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\r\n    if (!renderingEngine.hasBeenDestroyed) {\r\n      renderingEngine.renderViewports(viewportIds);\r\n    }\r\n  });\r\n};\r\n\r\nfunction getRenderingEngineAndViewportsContainingVolume(\r\n  volumeId: string\r\n): Array<RenderingEngineAndViewportIds> {\r\n  const renderingEnginesArray = getRenderingEngines();\r\n\r\n  const renderingEngineAndViewportIds = [];\r\n\r\n  for (let i = 0; i < renderingEnginesArray.length; i++) {\r\n    const renderingEngine = renderingEnginesArray[i];\r\n    const viewports = utilities.getViewportsWithVolumeId(\r\n      volumeId,\r\n      renderingEngine.id\r\n    );\r\n\r\n    if (viewports.length) {\r\n      renderingEngineAndViewportIds.push({\r\n        renderingEngine,\r\n        viewportIds: viewports.map((viewport) => viewport.id),\r\n      });\r\n    }\r\n  }\r\n\r\n  return renderingEngineAndViewportIds;\r\n}\r\n\r\nexport default autoLoad;\r\n","import type { Types } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Given a pixel array, rescale the pixel values using the rescale slope and\r\n * intercept and if modality is PT it uses the suv values to scale the array\r\n * @param array - The array to be scaled.\r\n * @param scalingParameters - The scaling parameters\r\n * @returns The array is being scaled\r\n */\r\nexport default function scaleArray(\r\n  array: Float32Array | Uint8Array | Uint16Array | Int16Array,\r\n  scalingParameters: Types.ScalingParameters\r\n): Float32Array | Uint8Array | Uint16Array | Int16Array {\r\n  const arrayLength = array.length;\r\n  const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\r\n\r\n  if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\r\n    for (let i = 0; i < arrayLength; i++) {\r\n      array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < arrayLength; i++) {\r\n      array[i] = array[i] * rescaleSlope + rescaleIntercept;\r\n    }\r\n  }\r\n\r\n  return array;\r\n}\r\n","import {\r\n  Enums,\r\n  eventTarget,\r\n  metaData,\r\n  imageLoadPoolManager,\r\n  triggerEvent,\r\n  ImageVolume,\r\n  cache,\r\n  imageLoader,\r\n  utilities as csUtils,\r\n  ProgressiveRetrieveImages,\r\n  canRenderFloatTextures,\r\n} from '@cornerstonejs/core';\r\nimport type {\r\n  Types,\r\n  IImagesLoader,\r\n  ImageLoadListener,\r\n} from '@cornerstonejs/core';\r\n\r\nimport { scaleArray, autoLoad } from './helpers';\r\n\r\nconst requestTypeDefault = Enums.RequestType.Prefetch;\r\nconst {\r\n  ProgressiveIterator,\r\n  imageRetrieveMetadataProvider,\r\n  hasFloatScalingParameters,\r\n} = csUtils;\r\nconst { ImageQualityStatus } = Enums;\r\n\r\n/**\r\n * Streaming Image Volume Class that extends ImageVolume base class.\r\n * It implements load method to load the imageIds and insert them into the volume.\r\n *\r\n */\r\nexport default class BaseStreamingImageVolume\r\n  extends ImageVolume\r\n  implements IImagesLoader\r\n{\r\n  private framesLoaded = 0;\r\n  private framesProcessed = 0;\r\n  private framesUpdated = 0;\r\n  protected autoRenderOnLoad = true;\r\n  protected cachedFrames = [];\r\n  protected reRenderTarget = 0;\r\n  protected reRenderFraction = 2;\r\n\r\n  loadStatus: {\r\n    loaded: boolean;\r\n    loading: boolean;\r\n    cancelled: boolean;\r\n    callbacks: Array<(...args: unknown[]) => void>;\r\n  };\r\n  imagesLoader: IImagesLoader = this;\r\n\r\n  constructor(\r\n    imageVolumeProperties: Types.ImageVolumeProps,\r\n    streamingProperties: Types.IStreamingVolumeProperties\r\n  ) {\r\n    super(imageVolumeProperties);\r\n    this.loadStatus = streamingProperties.loadStatus;\r\n  }\r\n\r\n  protected invalidateVolume(immediate: boolean): void {\r\n    const { imageData, vtkOpenGLTexture } = this;\r\n    const { numFrames } = this;\r\n\r\n    for (let i = 0; i < numFrames; i++) {\r\n      vtkOpenGLTexture.setUpdatedFrame(i);\r\n    }\r\n\r\n    imageData.modified();\r\n\r\n    if (immediate) {\r\n      autoLoad(this.volumeId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * It cancels loading the images of the volume. It sets the loading status to false\r\n   * and filters any imageLoad request in the requestPoolManager that has the same\r\n   * volumeId\r\n   */\r\n  public cancelLoading = (): void => {\r\n    const { loadStatus } = this;\r\n\r\n    if (!loadStatus || !loadStatus.loading) {\r\n      return;\r\n    }\r\n\r\n    // Set to not loading.\r\n    loadStatus.loading = false;\r\n    loadStatus.cancelled = true;\r\n\r\n    // Remove all the callback listeners\r\n    this.clearLoadCallbacks();\r\n\r\n    // Create a filter function which only keeps requests\r\n    // which do not match this volume's Id\r\n    const filterFunction = ({ additionalDetails }) => {\r\n      return additionalDetails.volumeId !== this.volumeId;\r\n    };\r\n\r\n    // Instruct the request pool manager to filter queued\r\n    // requests to ensure requests we no longer need are\r\n    // no longer sent.\r\n    imageLoadPoolManager.filterRequests(filterFunction);\r\n  };\r\n\r\n  /**\r\n   * Clear the load callbacks\r\n   */\r\n  public clearLoadCallbacks(): void {\r\n    this.loadStatus.callbacks = [];\r\n  }\r\n\r\n  protected callLoadStatusCallback(evt) {\r\n    const { framesUpdated, framesProcessed, totalNumFrames } = evt;\r\n    const { volumeId, reRenderFraction, loadStatus, metadata } = this;\r\n    const { FrameOfReferenceUID } = metadata;\r\n\r\n    // TODO: probably don't want this here\r\n    if (this.autoRenderOnLoad) {\r\n      if (\r\n        framesUpdated > this.reRenderTarget ||\r\n        framesProcessed === totalNumFrames\r\n      ) {\r\n        this.reRenderTarget += reRenderFraction;\r\n        autoLoad(volumeId);\r\n      }\r\n    }\r\n    if (framesProcessed === totalNumFrames) {\r\n      loadStatus.callbacks.forEach((callback) => callback(evt));\r\n\r\n      const eventDetail = {\r\n        FrameOfReferenceUID,\r\n        volumeId: volumeId,\r\n      };\r\n\r\n      triggerEvent(\r\n        eventTarget,\r\n        Enums.Events.IMAGE_VOLUME_LOADING_COMPLETED,\r\n        eventDetail\r\n      );\r\n    }\r\n  }\r\n\r\n  protected updateTextureAndTriggerEvents(\r\n    imageIdIndex,\r\n    imageId,\r\n    imageQualityStatus = ImageQualityStatus.FULL_RESOLUTION\r\n  ) {\r\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\r\n    const { cachedFrames, numFrames, totalNumFrames } = this;\r\n    const { FrameOfReferenceUID } = this.metadata;\r\n    const currentStatus = cachedFrames[frameIndex];\r\n    if (currentStatus > imageQualityStatus) {\r\n      // This is common for initial versus decimated images.\r\n      return;\r\n    }\r\n\r\n    if (cachedFrames[frameIndex] === ImageQualityStatus.FULL_RESOLUTION) {\r\n      // Sometimes the frame can be delivered multiple times, so just return\r\n      // here if that happens\r\n      return;\r\n    }\r\n    const complete = imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\r\n    cachedFrames[imageIdIndex] = imageQualityStatus;\r\n    this.framesUpdated++;\r\n    if (complete) {\r\n      this.framesLoaded++;\r\n      this.framesProcessed++;\r\n    }\r\n\r\n    this.vtkOpenGLTexture.setUpdatedFrame(frameIndex);\r\n    this.imageData.modified();\r\n\r\n    const eventDetail: Types.EventTypes.ImageVolumeModifiedEventDetail = {\r\n      FrameOfReferenceUID,\r\n      imageVolume: this,\r\n      numberOfFrames: numFrames,\r\n      framesProcessed: this.framesProcessed,\r\n    };\r\n\r\n    triggerEvent(eventTarget, Enums.Events.IMAGE_VOLUME_MODIFIED, eventDetail);\r\n\r\n    if (complete && this.framesProcessed === this.totalNumFrames) {\r\n      this.loadStatus.loaded = true;\r\n      this.loadStatus.loading = false;\r\n    }\r\n\r\n    this.callLoadStatusCallback({\r\n      success: true,\r\n      imageIdIndex,\r\n      imageId,\r\n      framesLoaded: this.framesLoaded,\r\n      framesProcessed: this.framesProcessed,\r\n      framesUpdated: this.framesUpdated,\r\n      numFrames,\r\n      totalNumFrames,\r\n      complete,\r\n      imageQualityStatus,\r\n    });\r\n    if (this.loadStatus.loaded) {\r\n      this.loadStatus.callbacks = [];\r\n    }\r\n  }\r\n\r\n  public successCallback(imageId: string, image) {\r\n    const imageIdIndex = this.getImageIdIndex(imageId);\r\n    const options = this.getLoaderImageOptions(imageId);\r\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\r\n\r\n    handleArrayBufferLoad(scalarData, image, options);\r\n\r\n    const { scalingParameters } = image.preScale || {};\r\n    const { imageQualityStatus } = image;\r\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\r\n\r\n    // Check if there is a cached image for the same imageURI (different\r\n    // data loader scheme)\r\n    const cachedImage = cache.getCachedImageBasedOnImageURI(imageId);\r\n\r\n    // Check if the image was already loaded by another volume and we are here\r\n    // since we got the imageLoadObject from the cache from the other already loaded\r\n    // volume\r\n    const cachedVolume = cache.getVolumeContainingImageId(imageId);\r\n\r\n    // check if the load was cancelled while we were waiting for the image\r\n    // if so we don't want to do anything\r\n    if (this.loadStatus.cancelled) {\r\n      console.warn(\r\n        'volume load cancelled, returning for imageIdIndex: ',\r\n        imageIdIndex\r\n      );\r\n      return;\r\n    }\r\n\r\n    // if it is not a cached image or volume\r\n    if (!cachedImage && !(cachedVolume && cachedVolume.volume !== this)) {\r\n      return this.updateTextureAndTriggerEvents(\r\n        imageIdIndex,\r\n        imageId,\r\n        imageQualityStatus\r\n      );\r\n    }\r\n\r\n    // it is either cachedImage or cachedVolume\r\n    const isFromImageCache = !!cachedImage;\r\n\r\n    if (isFromImageCache && options.targetBuffer) {\r\n      // put it in the imageCacheOffsetMap, since we are going to use it\r\n      // for cache optimization later\r\n      this.imageCacheOffsetMap.set(imageId, {\r\n        imageIdIndex,\r\n        frameIndex,\r\n        offset: options.targetBuffer?.offset || 0,\r\n        length: options.targetBuffer?.length,\r\n      });\r\n    }\r\n\r\n    const cachedImageOrVolume = cachedImage || cachedVolume.volume;\r\n\r\n    this.handleImageComingFromCache(\r\n      cachedImageOrVolume,\r\n      isFromImageCache,\r\n      scalingParameters,\r\n      scalarData,\r\n      frameIndex,\r\n      scalarData.buffer,\r\n      imageIdIndex,\r\n      imageId\r\n    );\r\n  }\r\n\r\n  public errorCallback(imageId, permanent, error) {\r\n    if (!permanent) {\r\n      return;\r\n    }\r\n    const { totalNumFrames, numFrames } = this;\r\n    const imageIdIndex = this.getImageIdIndex(imageId);\r\n    this.framesProcessed++;\r\n\r\n    if (this.framesProcessed === totalNumFrames) {\r\n      this.loadStatus.loaded = true;\r\n      this.loadStatus.loading = false;\r\n    }\r\n\r\n    this.callLoadStatusCallback({\r\n      success: false,\r\n      imageId,\r\n      imageIdIndex,\r\n      error,\r\n      framesLoaded: this.framesLoaded,\r\n      framesProcessed: this.framesProcessed,\r\n      framesUpdated: this.framesUpdated,\r\n      numFrames,\r\n      totalNumFrames,\r\n    });\r\n\r\n    if (this.loadStatus.loaded) {\r\n      this.loadStatus.callbacks = [];\r\n    }\r\n\r\n    const eventDetail = {\r\n      error,\r\n      imageIdIndex,\r\n      imageId,\r\n    };\r\n\r\n    triggerEvent(eventTarget, Enums.Events.IMAGE_LOAD_ERROR, eventDetail);\r\n  }\r\n\r\n  /**\r\n   * It triggers a prefetch for images in the volume.\r\n   * @param callback - A callback function to be called when the volume is fully loaded\r\n   * @param priority - The priority for loading the volume images, lower number is higher priority\r\n   * @returns\r\n   */\r\n  public load = (callback: (...args: unknown[]) => void): void => {\r\n    const { imageIds, loadStatus, numFrames } = this;\r\n    const { transferSyntaxUID } =\r\n      metaData.get('transferSyntax', imageIds[0]) || {};\r\n    const imageRetrieveConfiguration = metaData.get(\r\n      imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION,\r\n      this.volumeId,\r\n      transferSyntaxUID,\r\n      'volume'\r\n    );\r\n\r\n    this.imagesLoader = imageRetrieveConfiguration\r\n      ? (\r\n          imageRetrieveConfiguration.create ||\r\n          ProgressiveRetrieveImages.createProgressive\r\n        )(imageRetrieveConfiguration)\r\n      : this;\r\n    if (loadStatus.loading === true) {\r\n      return; // Already loading, will get callbacks from main load.\r\n    }\r\n\r\n    const { loaded } = this.loadStatus;\r\n    const totalNumFrames = imageIds.length;\r\n\r\n    if (loaded) {\r\n      if (callback) {\r\n        callback({\r\n          success: true,\r\n          framesLoaded: totalNumFrames,\r\n          framesProcessed: totalNumFrames,\r\n          numFrames,\r\n          totalNumFrames,\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (callback) {\r\n      this.loadStatus.callbacks.push(callback);\r\n    }\r\n\r\n    this._prefetchImageIds();\r\n  };\r\n\r\n  public getLoaderImageOptions(imageId: string) {\r\n    const { transferSyntaxUID: transferSyntaxUID } =\r\n      metaData.get('transferSyntax', imageId) || {};\r\n\r\n    const imagePlaneModule = metaData.get('imagePlaneModule', imageId) || {};\r\n    const { rows, columns } = imagePlaneModule;\r\n    const imageIdIndex = this.getImageIdIndex(imageId);\r\n    const scalarData = this.getScalarDataByImageIdIndex(imageIdIndex);\r\n    if (!scalarData) {\r\n      return null;\r\n    }\r\n    const arrayBuffer = scalarData.buffer;\r\n    // Length of one frame in voxels: length\r\n    // Length of one frame in bytes: lengthInBytes\r\n    const { type, length, lengthInBytes } = getScalarDataType(\r\n      scalarData,\r\n      this.numFrames\r\n    );\r\n\r\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\r\n\r\n    const generalSeriesModule =\r\n      metaData.get('generalSeriesModule', imageId) || {};\r\n\r\n    const scalingParameters: Types.ScalingParameters = {\r\n      rescaleSlope: modalityLutModule.rescaleSlope,\r\n      rescaleIntercept: modalityLutModule.rescaleIntercept,\r\n      modality: generalSeriesModule.modality,\r\n    };\r\n\r\n    if (scalingParameters.modality === 'PT') {\r\n      const suvFactor = metaData.get('scalingModule', imageId);\r\n\r\n      if (suvFactor) {\r\n        this._addScalingToVolume(suvFactor);\r\n        scalingParameters.suvbw = suvFactor.suvbw;\r\n      }\r\n    }\r\n\r\n    const floatAfterScale = hasFloatScalingParameters(scalingParameters);\r\n    const allowFloatRendering = canRenderFloatTextures();\r\n    /**\r\n     * So this is has limitation right now, but we need to somehow indicate\r\n     * whether the volume has been scaled with the scaling parameters or not.\r\n     * However, each slice can have different scaling parameters but it is rare\r\n     * that rescale slope and intercept be unknown for one slice and known for\r\n     * another. So we can just check the first slice and assume that the rest\r\n     * of the slices have the same scaling parameters. Basically it is important\r\n     * that these two are numbers and that means the volume has been scaled (\r\n     * we do that automatically in the loader). For the suvbw, we need to\r\n     * somehow indicate whether the PT image has been corrected with suvbw or\r\n     * not, which we store it in the this.scaling.PT.suvbw.\r\n     */\r\n    this.isPreScaled = true;\r\n\r\n    if (\r\n      scalingParameters &&\r\n      scalingParameters.rescaleSlope !== undefined &&\r\n      scalingParameters.rescaleIntercept !== undefined\r\n    ) {\r\n      const { rescaleSlope, rescaleIntercept } = scalingParameters;\r\n      this.isPreScaled =\r\n        typeof rescaleSlope === 'number' &&\r\n        typeof rescaleIntercept === 'number';\r\n    }\r\n\r\n    // in case where the hardware/os does not support float rendering but the\r\n    // requested scaling params are not integers, we need to disable pre-scaling\r\n    if (!allowFloatRendering && floatAfterScale) {\r\n      this.isPreScaled = false;\r\n    }\r\n\r\n    const frameIndex = this.imageIdIndexToFrameIndex(imageIdIndex);\r\n\r\n    return {\r\n      // WADO Image Loader\r\n      targetBuffer: {\r\n        // keeping this in the options means a large empty volume array buffer\r\n        // will be transferred to the worker. This is undesirable for streaming\r\n        // volume without shared array buffer because the target is now an empty\r\n        // 300-500MB volume array buffer. Instead the volume should be progressively\r\n        // set in the main thread.\r\n        arrayBuffer:\r\n          arrayBuffer instanceof ArrayBuffer ? undefined : arrayBuffer,\r\n        offset: frameIndex * lengthInBytes,\r\n        length,\r\n        type,\r\n        rows,\r\n        columns,\r\n      },\r\n      skipCreateImage: true,\r\n      allowFloatRendering,\r\n      preScale: {\r\n        enabled: this.isPreScaled,\r\n        // we need to pass in the scalingParameters here, since the streaming\r\n        // volume loader doesn't go through the createImage phase in the loader,\r\n        // and therefore doesn't have the scalingParameters\r\n        scalingParameters,\r\n      },\r\n      transferPixelData: true,\r\n      transferSyntaxUID,\r\n      // The loader is used to load the image into the cache\r\n      loader: imageLoader.loadImage,\r\n      additionalDetails: {\r\n        imageId,\r\n        imageIdIndex,\r\n        volumeId: this.volumeId,\r\n      },\r\n    };\r\n  }\r\n\r\n  // Use loadImage because we are skipping the Cornerstone Image cache\r\n  // when we load directly into the Volume cache\r\n  callLoadImage(imageId, imageIdIndex, options) {\r\n    const { cachedFrames } = this;\r\n\r\n    if (cachedFrames[imageIdIndex] === ImageQualityStatus.FULL_RESOLUTION) {\r\n      // The request framework handles non-promise returns, so just return here\r\n      return;\r\n    }\r\n\r\n    const uncompressedIterator = ProgressiveIterator.as(\r\n      imageLoader.loadImage(imageId, options)\r\n    );\r\n    return uncompressedIterator.forEach((image) => {\r\n      // scalarData is the volume container we are progressively loading into\r\n      // image is the pixelData decoded from workers in cornerstoneDICOMImageLoader\r\n      this.successCallback(imageId, image);\r\n    }, this.errorCallback.bind(this, imageIdIndex, imageId));\r\n  }\r\n\r\n  protected getImageIdsRequests(imageIds: string[], priorityDefault: number) {\r\n    // SharedArrayBuffer\r\n    this.totalNumFrames = this.imageIds.length;\r\n    const autoRenderPercentage = 2;\r\n\r\n    if (this.autoRenderOnLoad) {\r\n      this.reRenderFraction =\r\n        this.totalNumFrames * (autoRenderPercentage / 100);\r\n      this.reRenderTarget = this.reRenderFraction;\r\n    }\r\n\r\n    // 4D datasets load one time point at a time and the frameIndex is\r\n    // the position of the imageId in the current time point while the\r\n    // imageIdIndex is its absolute position in the array that contains\r\n    // all other imageIds. In a 4D dataset the frameIndex can also be\r\n    // calculated as `imageIdIndex % numFrames` where numFrames is the\r\n    // number of frames per time point. The frameIndex and imageIdIndex\r\n    // will be the same when working with 3D datasets.\r\n    const requests = imageIds.map((imageId) => {\r\n      const imageIdIndex = this.getImageIdIndex(imageId);\r\n\r\n      const requestType = requestTypeDefault;\r\n      const priority = priorityDefault;\r\n      const options = this.getLoaderImageOptions(imageId);\r\n\r\n      return {\r\n        callLoadImage: this.callLoadImage.bind(this),\r\n        imageId,\r\n        imageIdIndex,\r\n        options,\r\n        priority,\r\n        requestType,\r\n        additionalDetails: {\r\n          volumeId: this.volumeId,\r\n        },\r\n      };\r\n    });\r\n\r\n    return requests;\r\n  }\r\n\r\n  private handleImageComingFromCache(\r\n    cachedImageOrVolume,\r\n    isFromImageCache: boolean,\r\n    scalingParameters,\r\n    scalarData: Types.PixelDataTypedArray,\r\n    frameIndex: number,\r\n    arrayBuffer: ArrayBufferLike,\r\n    imageIdIndex: number,\r\n    imageId: string\r\n  ) {\r\n    const imageLoadObject = isFromImageCache\r\n      ? cachedImageOrVolume.imageLoadObject\r\n      : cachedImageOrVolume.convertToCornerstoneImage(imageId, imageIdIndex);\r\n\r\n    imageLoadObject.promise\r\n      .then((cachedImage) => {\r\n        const imageScalarData = this._scaleIfNecessary(\r\n          cachedImage,\r\n          scalingParameters\r\n        );\r\n        // todo add scaling and slope\r\n        const { pixelsPerImage, bytesPerImage } = this.cornerstoneImageMetaData;\r\n        const TypedArray = scalarData.constructor;\r\n        let byteOffset = bytesPerImage * frameIndex;\r\n\r\n        // create a view on the volume arraybuffer\r\n        const bytePerPixel = bytesPerImage / pixelsPerImage;\r\n\r\n        if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\r\n          byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\r\n        }\r\n\r\n        // @ts-ignore\r\n        const volumeBufferView = new TypedArray(\r\n          arrayBuffer,\r\n          byteOffset,\r\n          pixelsPerImage\r\n        );\r\n        volumeBufferView.set(imageScalarData);\r\n        this.updateTextureAndTriggerEvents(\r\n          imageIdIndex,\r\n          imageId,\r\n          cachedImage.imageQualityStatus\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        this.errorCallback(imageId, true, err);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * It returns the imageLoad requests for the streaming image volume instance.\r\n   * It involves getting all the imageIds of the volume and creating a success callback\r\n   * which would update the texture (when the image has loaded) and the failure callback.\r\n   * Note that this method does not executes the requests but only returns the requests.\r\n   * It can be used for sorting requests outside of the volume loader itself\r\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\r\n   * moving to the next slice.\r\n   *\r\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\r\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\r\n   */\r\n  public getImageLoadRequests(_priority: number): any[] {\r\n    throw new Error('Abstract method');\r\n  }\r\n\r\n  public getImageIdsToLoad(): string[] {\r\n    throw new Error('Abstract method');\r\n  }\r\n\r\n  /**\r\n   * Retrieves images using the older getImageLoadRequests method\r\n   * to setup all the requests.  Ensures compatibility with the custom image\r\n   * loaders.\r\n   */\r\n  public loadImages(imageIds: string[], listener: ImageLoadListener) {\r\n    this.loadStatus.loading = true;\r\n\r\n    const requests = this.getImageLoadRequests(5);\r\n\r\n    requests.reverse().forEach((request) => {\r\n      if (!request) {\r\n        // there is a cached image for the imageId and no requests will fire\r\n        return;\r\n      }\r\n\r\n      const {\r\n        callLoadImage,\r\n        imageId,\r\n        imageIdIndex,\r\n        options,\r\n        priority,\r\n        requestType,\r\n        additionalDetails,\r\n      } = request;\r\n\r\n      imageLoadPoolManager.addRequest(\r\n        callLoadImage.bind(this, imageId, imageIdIndex, options),\r\n        requestType,\r\n        additionalDetails,\r\n        priority\r\n      );\r\n    });\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  private _prefetchImageIds() {\r\n    // Note: here is the correct location to set the loading flag\r\n    // since getImageIdsRequest is just grabbing and building requests\r\n    // and not actually executing them\r\n    this.loadStatus.loading = true;\r\n\r\n    const imageIds = [...this.getImageIdsToLoad()];\r\n    imageIds.reverse();\r\n\r\n    this.totalNumFrames = this.imageIds.length;\r\n    const autoRenderPercentage = 2;\r\n\r\n    if (this.autoRenderOnLoad) {\r\n      this.reRenderFraction =\r\n        this.totalNumFrames * (autoRenderPercentage / 100);\r\n      this.reRenderTarget = this.reRenderFraction;\r\n    }\r\n\r\n    return this.imagesLoader.loadImages(imageIds, this).catch((e) => {\r\n      console.debug('progressive loading failed to complete', e);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function decides whether or not to scale the image based on the\r\n   * scalingParameters. If the image is already scaled, we should take that\r\n   * into account when scaling the image again, so if the rescaleSlope and/or\r\n   * rescaleIntercept are different from the ones that were used to scale the\r\n   * image, we should scale the image again according to the new parameters.\r\n   */\r\n  private _scaleIfNecessary(\r\n    image,\r\n    scalingParametersToUse: Types.ScalingParameters\r\n  ) {\r\n    if (!image.preScale?.enabled) {\r\n      return image.getPixelData().slice(0);\r\n    }\r\n\r\n    const imageIsAlreadyScaled = image.preScale?.scaled;\r\n    const noScalingParametersToUse =\r\n      !scalingParametersToUse ||\r\n      !scalingParametersToUse.rescaleIntercept ||\r\n      !scalingParametersToUse.rescaleSlope;\r\n\r\n    if (!imageIsAlreadyScaled && noScalingParametersToUse) {\r\n      // no need to scale the image\r\n      return image.getPixelData().slice(0);\r\n    }\r\n\r\n    if (\r\n      !imageIsAlreadyScaled &&\r\n      scalingParametersToUse &&\r\n      scalingParametersToUse.rescaleIntercept !== undefined &&\r\n      scalingParametersToUse.rescaleSlope !== undefined\r\n    ) {\r\n      // if not already scaled, just scale the image.\r\n      // copy so that it doesn't get modified\r\n      const pixelDataCopy = image.getPixelData().slice(0);\r\n      const scaledArray = scaleArray(pixelDataCopy, scalingParametersToUse);\r\n      return scaledArray;\r\n    }\r\n\r\n    // if the image is already scaled,\r\n    const {\r\n      rescaleSlope: rescaleSlopeToUse,\r\n      rescaleIntercept: rescaleInterceptToUse,\r\n      suvbw: suvbwToUse,\r\n    } = scalingParametersToUse;\r\n\r\n    const {\r\n      rescaleSlope: rescaleSlopeUsed,\r\n      rescaleIntercept: rescaleInterceptUsed,\r\n      suvbw: suvbwUsed,\r\n    } = image.preScale.scalingParameters;\r\n\r\n    const rescaleSlopeIsSame = rescaleSlopeToUse === rescaleSlopeUsed;\r\n    const rescaleInterceptIsSame =\r\n      rescaleInterceptToUse === rescaleInterceptUsed;\r\n    const suvbwIsSame = suvbwToUse === suvbwUsed;\r\n\r\n    if (rescaleSlopeIsSame && rescaleInterceptIsSame && suvbwIsSame) {\r\n      // if the scaling parameters are the same, we don't need to scale the image again\r\n      return image.getPixelData();\r\n    }\r\n\r\n    const pixelDataCopy = image.getPixelData().slice(0);\r\n    // the general formula for scaling is  scaledPixelValue = suvbw * (pixelValue * rescaleSlope) + rescaleIntercept\r\n    const newSuvbw = suvbwToUse / suvbwUsed;\r\n    const newRescaleSlope = rescaleSlopeToUse / rescaleSlopeUsed;\r\n    const newRescaleIntercept =\r\n      rescaleInterceptToUse - rescaleInterceptUsed * newRescaleSlope;\r\n\r\n    const newScalingParameters = {\r\n      ...scalingParametersToUse,\r\n      rescaleSlope: newRescaleSlope,\r\n      rescaleIntercept: newRescaleIntercept,\r\n      suvbw: newSuvbw,\r\n    };\r\n\r\n    const scaledArray = scaleArray(pixelDataCopy, newScalingParameters);\r\n    return scaledArray;\r\n  }\r\n\r\n  private _addScalingToVolume(suvFactor) {\r\n    // Todo: handle case where suvFactors are not the same for all frames\r\n    if (this.scaling) {\r\n      return;\r\n    }\r\n\r\n    const { suvbw, suvlbm, suvbsa } = suvFactor;\r\n\r\n    const petScaling = <Types.PTScaling>{};\r\n\r\n    if (suvlbm) {\r\n      petScaling.suvbwToSuvlbm = suvlbm / suvbw;\r\n    }\r\n\r\n    if (suvbsa) {\r\n      petScaling.suvbwToSuvbsa = suvbsa / suvbw;\r\n    }\r\n\r\n    if (suvbw) {\r\n      petScaling.suvbw = suvbw;\r\n    }\r\n\r\n    this.scaling = { PT: petScaling };\r\n  }\r\n}\r\n\r\nfunction getScalarDataType(scalarData, numFrames) {\r\n  let type, byteSize;\r\n  if (scalarData instanceof Uint8Array) {\r\n    type = 'Uint8Array';\r\n    byteSize = 1;\r\n  } else if (scalarData instanceof Float32Array) {\r\n    type = 'Float32Array';\r\n    byteSize = 4;\r\n  } else if (scalarData instanceof Uint16Array) {\r\n    type = 'Uint16Array';\r\n    byteSize = 2;\r\n  } else if (scalarData instanceof Int16Array) {\r\n    type = 'Int16Array';\r\n    byteSize = 2;\r\n  } else {\r\n    throw new Error('Unsupported array type');\r\n  }\r\n  const length = scalarData.length / numFrames;\r\n  const lengthInBytes = length * byteSize;\r\n  return { type, byteSize, length, lengthInBytes };\r\n}\r\n\r\n/**\r\n * Sets the scalar data at the appropriate offset to the\r\n * byte data from the image.\r\n */\r\nfunction handleArrayBufferLoad(scalarData, image, options) {\r\n  if (!(scalarData.buffer instanceof ArrayBuffer)) {\r\n    return;\r\n  }\r\n  const offset = options.targetBuffer.offset; // in bytes\r\n  const length = options.targetBuffer.length; // in frames\r\n  const pixelData = image.pixelData ? image.pixelData : image.getPixelData();\r\n\r\n  try {\r\n    if (scalarData instanceof Float32Array) {\r\n      const bytesInFloat = 4;\r\n      const floatView = new Float32Array(pixelData);\r\n      if (floatView.length !== length) {\r\n        throw 'Error pixelData length does not match frame length';\r\n      }\r\n      // since set is based on the underlying type,\r\n      // we need to divide the offset bytes by the byte type\r\n      scalarData.set(floatView, offset / bytesInFloat);\r\n    }\r\n    if (scalarData instanceof Int16Array) {\r\n      const bytesInInt16 = 2;\r\n      const intView = new Int16Array(pixelData);\r\n      if (intView.length !== length) {\r\n        throw 'Error pixelData length does not match frame length';\r\n      }\r\n      scalarData.set(intView, offset / bytesInInt16);\r\n    }\r\n    if (scalarData instanceof Uint16Array) {\r\n      const bytesInUint16 = 2;\r\n      const intView = new Uint16Array(pixelData);\r\n      if (intView.length !== length) {\r\n        throw 'Error pixelData length does not match frame length';\r\n      }\r\n      scalarData.set(intView, offset / bytesInUint16);\r\n    }\r\n    if (scalarData instanceof Uint8Array) {\r\n      const bytesInUint8 = 1;\r\n      const intView = new Uint8Array(pixelData);\r\n      if (intView.length !== length) {\r\n        throw 'Error pixelData length does not match frame length';\r\n      }\r\n      scalarData.set(intView, offset / bytesInUint8);\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n","import { Types } from '@cornerstonejs/core';\r\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\r\nimport ImageLoadRequests from './types/ImageLoadRequests';\r\n\r\n/**\r\n * Streaming Image Volume Class that extends ImageVolume base class.\r\n * It implements load method to load the imageIds and insert them into the volume.\r\n */\r\nexport default class StreamingImageVolume extends BaseStreamingImageVolume {\r\n  constructor(\r\n    imageVolumeProperties: Types.ImageVolumeProps,\r\n    streamingProperties: Types.IStreamingVolumeProperties\r\n  ) {\r\n    // Just for fallback to the old API\r\n    if (!imageVolumeProperties.imageIds) {\r\n      imageVolumeProperties.imageIds = streamingProperties.imageIds;\r\n    }\r\n    super(imageVolumeProperties, streamingProperties);\r\n  }\r\n\r\n  /**\r\n   * Return the scalar data (buffer)\r\n   * @returns volume scalar data\r\n   */\r\n  public getScalarData(): Types.PixelDataTypedArray {\r\n    return <Types.PixelDataTypedArray>this.scalarData;\r\n  }\r\n\r\n  /**\r\n   * It returns the imageLoad requests for the streaming image volume instance.\r\n   * It involves getting all the imageIds of the volume and creating a success callback\r\n   * which would update the texture (when the image has loaded) and the failure callback.\r\n   * Note that this method does not executes the requests but only returns the requests.\r\n   * It can be used for sorting requests outside of the volume loader itself\r\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\r\n   * moving to the next slice.\r\n   *\r\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\r\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\r\n   */\r\n  public getImageLoadRequests(priority: number): ImageLoadRequests[] {\r\n    const { imageIds } = this;\r\n\r\n    return this.getImageIdsRequests(imageIds, priority);\r\n  }\r\n\r\n  public getImageIdsToLoad = () => {\r\n    const { imageIds } = this;\r\n    this.numFrames = imageIds.length;\r\n    return imageIds;\r\n  };\r\n}\r\n","import {\r\n  Enums,\r\n  imageLoader,\r\n  imageLoadPoolManager,\r\n  utilities as csUtils,\r\n} from '@cornerstonejs/core';\r\nimport type { Types } from '@cornerstonejs/core';\r\nimport StreamingImageVolume from './StreamingImageVolume';\r\n\r\ninterface IVolumeLoader {\r\n  promise: Promise<StreamingImageVolume>;\r\n  cancel: () => void;\r\n  decache: () => void;\r\n}\r\n\r\n/**\r\n * It handles loading of a image by streaming in its imageIds. It will be the\r\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\r\n * This function returns a promise that resolves to the StreamingImageVolume instance.\r\n *\r\n * In order to use the cornerstoneStreamingImageVolumeLoader you should use\r\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\r\n *\r\n * @param volumeId - The ID of the volume\r\n * @param options - options for loading, imageIds\r\n * @returns a promise that resolves to a StreamingImageVolume\r\n */\r\nfunction cornerstoneStreamingImageVolumeLoader(\r\n  volumeId: string,\r\n  options: {\r\n    imageIds: string[];\r\n    progressiveRendering?: boolean | Types.IRetrieveConfiguration;\r\n  }\r\n): IVolumeLoader {\r\n  if (!options || !options.imageIds || !options.imageIds.length) {\r\n    throw new Error(\r\n      'ImageIds must be provided to create a streaming image volume'\r\n    );\r\n  }\r\n\r\n  async function getStreamingImageVolume() {\r\n    /**\r\n     * Check if we are using the `wadouri:` scheme, and if so, preload first,\r\n     * middle, and last image metadata as these are the images the current\r\n     * streaming image loader may explicitly request metadata from. The last image\r\n     * metadata would only be specifically requested if the imageId array order is\r\n     * reversed in the `sortImageIdsAndGetSpacing.ts` file.\r\n     */\r\n    if (options.imageIds[0].split(':')[0] === 'wadouri') {\r\n      const [middleImageIndex, lastImageIndex] = [\r\n        Math.floor(options.imageIds.length / 2),\r\n        options.imageIds.length - 1,\r\n      ];\r\n      const indexesToPrefetch = [0, middleImageIndex, lastImageIndex];\r\n      await Promise.all(\r\n        indexesToPrefetch.map((index) => {\r\n          return new Promise((resolve, reject) => {\r\n            const imageId = options.imageIds[index];\r\n            imageLoadPoolManager.addRequest(\r\n              async () => {\r\n                imageLoader\r\n                  .loadImage(imageId)\r\n                  .then(() => {\r\n                    console.log(`Prefetched imageId: ${imageId}`);\r\n                    resolve(true);\r\n                  })\r\n                  .catch((err) => {\r\n                    reject(err);\r\n                  });\r\n              },\r\n              Enums.RequestType.Prefetch,\r\n              { volumeId },\r\n              1 // priority\r\n            );\r\n          });\r\n        })\r\n      ).catch(console.error);\r\n    }\r\n\r\n    const {\r\n      dimensions,\r\n      spacing,\r\n      origin,\r\n      scalarData,\r\n      direction,\r\n      sizeInBytes,\r\n      metadata,\r\n      imageIds,\r\n    } = csUtils.generateVolumePropsFromImageIds(options.imageIds, volumeId);\r\n\r\n    const streamingImageVolume = new StreamingImageVolume(\r\n      // ImageVolume properties\r\n      {\r\n        volumeId,\r\n        metadata,\r\n        dimensions,\r\n        spacing,\r\n        origin,\r\n        direction,\r\n        scalarData,\r\n        sizeInBytes,\r\n        imageIds,\r\n      },\r\n      // Streaming properties\r\n      {\r\n        imageIds,\r\n        loadStatus: {\r\n          // todo: loading and loaded should be on ImageVolume\r\n          loaded: false,\r\n          loading: false,\r\n          cancelled: false,\r\n          cachedFrames: [],\r\n          callbacks: [],\r\n        },\r\n      }\r\n    );\r\n\r\n    return streamingImageVolume;\r\n  }\r\n\r\n  const streamingImageVolumePromise = getStreamingImageVolume();\r\n\r\n  return {\r\n    promise: streamingImageVolumePromise,\r\n    decache: () => {\r\n      streamingImageVolumePromise.then((streamingImageVolume) => {\r\n        streamingImageVolume.destroy();\r\n        streamingImageVolume = null;\r\n      });\r\n    },\r\n    cancel: () => {\r\n      streamingImageVolumePromise.then((streamingImageVolume) => {\r\n        streamingImageVolume.cancelLoading();\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nexport default cornerstoneStreamingImageVolumeLoader;\r\n","/**\r\n *  The events for cornerstone streaming image volume\r\n *\r\n */\r\nenum Events {\r\n  ///////////////////////////////////////\r\n  //            Loading Events\r\n  ///////////////////////////////////////\r\n\r\n  /**\r\n   * Dynamic image volume time point index changed\r\n   */\r\n  DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED = 'DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED',\r\n}\r\n\r\nexport default Events;\r\n","import { eventTarget, triggerEvent, type Types } from '@cornerstonejs/core';\r\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\r\nimport { Events as StreamingEvents } from './enums';\r\n\r\ntype TimePoint = {\r\n  /** imageIds of each timepoint  */\r\n  imageIds: Array<string>;\r\n  /** volume scalar data  */\r\n  scalarData: Types.PixelDataTypedArray;\r\n};\r\n\r\n/**\r\n * Streaming Image Volume Class that extends StreamingImageVolume base class.\r\n * It implements load method to load the imageIds and insert them into the volume.\r\n */\r\nexport default class StreamingDynamicImageVolume\r\n  extends BaseStreamingImageVolume\r\n  implements Types.IDynamicImageVolume\r\n{\r\n  private _numTimePoints: number;\r\n  private _timePoints: TimePoint[];\r\n  private _timePointIndex = 0;\r\n  private _splittingTag: string;\r\n\r\n  constructor(\r\n    imageVolumeProperties: Types.ImageVolumeProps & { splittingTag: string },\r\n    streamingProperties: Types.IStreamingVolumeProperties\r\n  ) {\r\n    StreamingDynamicImageVolume._ensureValidData(\r\n      imageVolumeProperties,\r\n      streamingProperties\r\n    );\r\n\r\n    super(imageVolumeProperties, streamingProperties);\r\n    this._numTimePoints = (<Types.PixelDataTypedArray[]>this.scalarData).length;\r\n    this._timePoints = this._getTimePointsData();\r\n    this._splittingTag = imageVolumeProperties.splittingTag;\r\n  }\r\n\r\n  private static _ensureValidData(\r\n    imageVolumeProperties: Types.ImageVolumeProps,\r\n    streamingProperties: Types.IStreamingVolumeProperties\r\n  ): void {\r\n    const imageIds = streamingProperties.imageIds;\r\n    const scalarDataArrays = <Types.PixelDataTypedArray[]>(\r\n      imageVolumeProperties.scalarData\r\n    );\r\n\r\n    if (imageIds.length % scalarDataArrays.length !== 0) {\r\n      throw new Error(\r\n        `Number of imageIds is not a multiple of ${scalarDataArrays.length}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use the image ids and scalar data array to create TimePoint objects\r\n   * and make it a bit easier to work with when loading requests\r\n   */\r\n  private _getTimePointsData(): TimePoint[] {\r\n    const { imageIds } = this;\r\n    const scalarData = <Types.PixelDataTypedArray[]>this.scalarData;\r\n\r\n    const { numFrames } = this;\r\n    const numTimePoints = scalarData.length;\r\n    const timePoints: TimePoint[] = [];\r\n\r\n    for (let i = 0; i < numTimePoints; i++) {\r\n      const start = i * numFrames;\r\n      const end = start + numFrames;\r\n\r\n      timePoints.push({\r\n        imageIds: imageIds.slice(start, end),\r\n        scalarData: scalarData[i],\r\n      });\r\n    }\r\n\r\n    return timePoints;\r\n  }\r\n\r\n  private _getTimePointsToLoad() {\r\n    const timePoints = this._timePoints;\r\n    const initialTimePointIndex = this._timePointIndex;\r\n    const timePointsToLoad = [timePoints[initialTimePointIndex]];\r\n\r\n    let leftIndex = initialTimePointIndex - 1;\r\n    let rightIndex = initialTimePointIndex + 1;\r\n\r\n    while (leftIndex >= 0 || rightIndex < timePoints.length) {\r\n      if (leftIndex >= 0) {\r\n        timePointsToLoad.push(timePoints[leftIndex--]);\r\n      }\r\n\r\n      if (rightIndex < timePoints.length) {\r\n        timePointsToLoad.push(timePoints[rightIndex++]);\r\n      }\r\n    }\r\n\r\n    return timePointsToLoad;\r\n  }\r\n\r\n  private _getTimePointRequests = (timePoint, priority: number) => {\r\n    const { imageIds } = timePoint;\r\n\r\n    return this.getImageIdsRequests(imageIds, priority);\r\n  };\r\n\r\n  private _getTimePointsRequests = (priority: number) => {\r\n    const timePoints = this._getTimePointsToLoad();\r\n    let timePointsRequests = [];\r\n\r\n    timePoints.forEach((timePoint) => {\r\n      const timePointRequests = this._getTimePointRequests(timePoint, priority);\r\n      timePointsRequests = timePointsRequests.concat(timePointRequests);\r\n    });\r\n\r\n    return timePointsRequests;\r\n  };\r\n\r\n  public getImageIdsToLoad(): string[] {\r\n    const timePoints = this._getTimePointsToLoad();\r\n    let imageIds = [];\r\n\r\n    timePoints.forEach((timePoint) => {\r\n      const { imageIds: timePointIds } = timePoint;\r\n      imageIds = imageIds.concat(timePointIds);\r\n    });\r\n\r\n    return imageIds;\r\n  }\r\n\r\n  /** return true if it is a 4D volume or false if it is 3D volume */\r\n  public isDynamicVolume(): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns the active time point index\r\n   * @returns active time point index\r\n   */\r\n  public get timePointIndex(): number {\r\n    return this._timePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Set the active time point index which also updates the active scalar data\r\n   * @returns current time point index\r\n   */\r\n  public set timePointIndex(newTimePointIndex: number) {\r\n    if (newTimePointIndex < 0 || newTimePointIndex >= this.numTimePoints) {\r\n      throw new Error(`Invalid timePointIndex (${newTimePointIndex})`);\r\n    }\r\n\r\n    // Nothing to do when time point index does not change\r\n    if (this._timePointIndex === newTimePointIndex) {\r\n      return;\r\n    }\r\n\r\n    const { imageData } = this;\r\n\r\n    this._timePointIndex = newTimePointIndex;\r\n    imageData.getPointData().setActiveScalars(`timePoint-${newTimePointIndex}`);\r\n    this.invalidateVolume(true);\r\n\r\n    triggerEvent(\r\n      eventTarget,\r\n      StreamingEvents.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\r\n      {\r\n        volumeId: this.volumeId,\r\n        timePointIndex: newTimePointIndex,\r\n        numTimePoints: this.numTimePoints,\r\n        splittingTag: this.splittingTag,\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the splitting tag used to split the imageIds in 4D volume\r\n   */\r\n  public get splittingTag(): string {\r\n    return this._splittingTag;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of time points\r\n   * @returns number of time points\r\n   */\r\n  public get numTimePoints(): number {\r\n    return this._numTimePoints;\r\n  }\r\n\r\n  /**\r\n   * Return the active scalar data (buffer)\r\n   * @returns volume scalar data\r\n   */\r\n  public getScalarData(): Types.PixelDataTypedArray {\r\n    return (<Types.PixelDataTypedArray[]>this.scalarData)[this._timePointIndex];\r\n  }\r\n\r\n  /**\r\n   * It returns the imageLoad requests for the streaming image volume instance.\r\n   * It involves getting all the imageIds of the volume and creating a success callback\r\n   * which would update the texture (when the image has loaded) and the failure callback.\r\n   * Note that this method does not execute the requests but only returns the requests.\r\n   * It can be used for sorting requests outside of the volume loader itself\r\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\r\n   * moving to the next slice.\r\n   *\r\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\r\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\r\n   */\r\n  public getImageLoadRequests = (priority: number) => {\r\n    return this._getTimePointsRequests(priority);\r\n  };\r\n}\r\n","import { getVolumeInfo, splitImageIdsBy4DTags } from './helpers';\r\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\r\n\r\ninterface IVolumeLoader {\r\n  promise: Promise<StreamingDynamicImageVolume>;\r\n  cancel: () => void;\r\n  decache: () => void;\r\n}\r\n\r\nfunction get4DVolumeInfo(imageIds: string[]) {\r\n  const { imageIdsGroups, splittingTag } = splitImageIdsBy4DTags(imageIds);\r\n  return {\r\n    volumesInfo: imageIdsGroups.map((imageIds) => getVolumeInfo(imageIds)),\r\n    splittingTag,\r\n  };\r\n}\r\n\r\n/**\r\n * It handles loading of a image by streaming in its imageIds. It will be the\r\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\r\n * This function returns a promise that resolves to the StreamingDynamicImageVolume instance.\r\n *\r\n * In order to use the cornerstoneStreamingDynamicImageVolumeLoader you should use\r\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\r\n *\r\n * @param volumeId - The ID of the volume\r\n * @param options - options for loading, imageIds\r\n * @returns a promise that resolves to a StreamingDynamicImageVolume\r\n */\r\nfunction cornerstoneStreamingDynamicImageVolumeLoader(\r\n  volumeId: string,\r\n  options: {\r\n    imageIds: string[];\r\n  }\r\n): IVolumeLoader {\r\n  if (!options || !options.imageIds || !options.imageIds.length) {\r\n    throw new Error(\r\n      'ImageIds must be provided to create a 4D streaming image volume'\r\n    );\r\n  }\r\n\r\n  const { imageIds } = options;\r\n  const { volumesInfo, splittingTag } = get4DVolumeInfo(imageIds);\r\n\r\n  const {\r\n    metadata: volumeMetadata,\r\n    dimensions,\r\n    spacing,\r\n    origin,\r\n    direction,\r\n    sizeInBytes,\r\n  } = volumesInfo[0];\r\n\r\n  const sortedImageIdsArrays = [];\r\n  const scalarDataArrays = [];\r\n\r\n  volumesInfo.forEach((volumeInfo) => {\r\n    sortedImageIdsArrays.push(volumeInfo.sortedImageIds);\r\n    scalarDataArrays.push(volumeInfo.scalarData);\r\n  });\r\n\r\n  const sortedImageIds = sortedImageIdsArrays.flat();\r\n  let streamingImageVolume = new StreamingDynamicImageVolume(\r\n    // ImageVolume properties\r\n    {\r\n      volumeId,\r\n      metadata: volumeMetadata,\r\n      dimensions,\r\n      spacing,\r\n      origin,\r\n      direction,\r\n      scalarData: scalarDataArrays,\r\n      sizeInBytes,\r\n      imageIds: sortedImageIds,\r\n      splittingTag,\r\n    },\r\n    // Streaming properties\r\n    {\r\n      imageIds: sortedImageIds,\r\n      loadStatus: {\r\n        // todo: loading and loaded should be on ImageVolume\r\n        loaded: false,\r\n        loading: false,\r\n        cancelled: false,\r\n        cachedFrames: [],\r\n        callbacks: [],\r\n      },\r\n    }\r\n  );\r\n\r\n  return {\r\n    promise: Promise.resolve(streamingImageVolume),\r\n    decache: () => {\r\n      streamingImageVolume.destroy();\r\n      streamingImageVolume = null;\r\n    },\r\n    cancel: () => {\r\n      streamingImageVolume.cancelLoading();\r\n    },\r\n  };\r\n}\r\n\r\nexport default cornerstoneStreamingDynamicImageVolumeLoader;\r\n","import cornerstoneStreamingImageVolumeLoader from './cornerstoneStreamingImageVolumeLoader';\r\nimport cornerstoneStreamingDynamicImageVolumeLoader from './cornerstoneStreamingDynamicImageVolumeLoader';\r\nimport StreamingImageVolume from './StreamingImageVolume';\r\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\r\nimport getDynamicVolumeInfo from './helpers/getDynamicVolumeInfo';\r\nimport * as Enums from './enums';\r\n\r\nconst helpers = {\r\n  getDynamicVolumeInfo,\r\n};\r\n\r\nexport {\r\n  cornerstoneStreamingImageVolumeLoader,\r\n  cornerstoneStreamingDynamicImageVolumeLoader,\r\n  StreamingImageVolume,\r\n  StreamingDynamicImageVolume,\r\n  helpers,\r\n  Enums,\r\n};\r\n"],"names":["createUint8SharedArray","createFloat32SharedArray","utilities","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","Object","keys","i","length","frame_value_set","Set","frames","j","frame_value","imageId","push","add","size","Array","from","setEquals","getTagValue","tag","value","metaData","parseFloat","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","ArrayBuffer","dv","DataView","setUint8","charCodeAt","Float32Array","getSiemensPrivateBValue","getGEPrivateBValue","split","set_a","set_b","has","getPetFrameReferenceTime","moduleInfo","imageIds","positionGroups","ippMetadata","map","imagePositionPatient","every","item","key","reduce","rv","x","frame_count","k","getIPPGroups","imageIdsGroups","splittingTag","tags","fncList2","Number","sort","a","b","timePoints","isDynamicVolume","volumeId","renderingEngineAndViewportIds","renderingEnginesArray","getRenderingEngines","renderingEngine","viewports","id","viewportIds","viewport","getRenderingEngineAndViewportsContainingVolume","forEach","hasBeenDestroyed","renderViewports","scaleArray","array","scalingParameters","arrayLength","rescaleSlope","rescaleIntercept","suvbw","modality","requestTypeDefault","Enums","Prefetch","ProgressiveIterator","imageRetrieveMetadataProvider","hasFloatScalingParameters","ImageQualityStatus","BaseStreamingImageVolume","ImageVolume","constructor","imageVolumeProperties","streamingProperties","super","framesLoaded","framesProcessed","framesUpdated","autoRenderOnLoad","cachedFrames","reRenderTarget","reRenderFraction","imagesLoader","this","cancelLoading","loadStatus","loading","cancelled","clearLoadCallbacks","imageLoadPoolManager","filterRequests","additionalDetails","load","callback","numFrames","transferSyntaxUID","imageRetrieveConfiguration","IMAGE_RETRIEVE_CONFIGURATION","create","ProgressiveRetrieveImages","createProgressive","loaded","totalNumFrames","success","callbacks","_prefetchImageIds","invalidateVolume","immediate","imageData","vtkOpenGLTexture","setUpdatedFrame","modified","callLoadStatusCallback","evt","metadata","FrameOfReferenceUID","eventDetail","triggerEvent","eventTarget","IMAGE_VOLUME_LOADING_COMPLETED","updateTextureAndTriggerEvents","imageIdIndex","imageQualityStatus","FULL_RESOLUTION","frameIndex","imageIdIndexToFrameIndex","complete","imageVolume","numberOfFrames","IMAGE_VOLUME_MODIFIED","successCallback","image","getImageIdIndex","options","getLoaderImageOptions","scalarData","getScalarDataByImageIdIndex","buffer","offset","targetBuffer","pixelData","getPixelData","bytesInFloat","floatView","set","Int16Array","bytesInInt16","intView","Uint16Array","bytesInUint16","Uint8Array","bytesInUint8","e","console","error","handleArrayBufferLoad","preScale","cachedImage","cache","getCachedImageBasedOnImageURI","cachedVolume","getVolumeContainingImageId","warn","volume","isFromImageCache","imageCacheOffsetMap","cachedImageOrVolume","handleImageComingFromCache","errorCallback","permanent","IMAGE_LOAD_ERROR","imagePlaneModule","rows","columns","arrayBuffer","type","lengthInBytes","byteSize","Error","getScalarDataType","modalityLutModule","generalSeriesModule","suvFactor","_addScalingToVolume","floatAfterScale","allowFloatRendering","canRenderFloatTextures","isPreScaled","undefined","skipCreateImage","enabled","transferPixelData","loader","imageLoader","callLoadImage","as","bind","getImageIdsRequests","priorityDefault","requestType","priority","imageLoadObject","convertToCornerstoneImage","promise","then","imageScalarData","_scaleIfNecessary","pixelsPerImage","bytesPerImage","cornerstoneImageMetaData","TypedArray","byteOffset","bytePerPixel","BYTES_PER_ELEMENT","catch","err","getImageLoadRequests","_priority","getImageIdsToLoad","loadImages","listener","reverse","request","addRequest","Promise","resolve","debug","scalingParametersToUse","slice","imageIsAlreadyScaled","scaled","noScalingParametersToUse","rescaleSlopeToUse","rescaleInterceptToUse","suvbwToUse","rescaleSlopeUsed","rescaleInterceptUsed","suvbwUsed","newSuvbw","newRescaleSlope","newRescaleIntercept","scaling","suvlbm","suvbsa","petScaling","suvbwToSuvlbm","suvbwToSuvbsa","PT","StreamingImageVolume","getScalarData","streamingImageVolumePromise","async","middleImageIndex","lastImageIndex","Math","floor","indexesToPrefetch","all","index","reject","log","dimensions","spacing","origin","direction","sizeInBytes","getStreamingImageVolume","decache","streamingImageVolume","destroy","cancel","Events","StreamingDynamicImageVolume","_ensureValidData","_timePointIndex","_getTimePointRequests","timePoint","_getTimePointsRequests","_getTimePointsToLoad","timePointsRequests","timePointRequests","concat","_numTimePoints","_timePoints","_getTimePointsData","_splittingTag","scalarDataArrays","numTimePoints","start","end","initialTimePointIndex","timePointsToLoad","leftIndex","rightIndex","timePointIds","timePointIndex","newTimePointIndex","getPointData","setActiveScalars","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","get4DVolumeInfo","volumesInfo","volumeMetadata","BitsAllocated","PixelRepresentation","PhotometricInterpretation","ImageOrientationPatient","PixelSpacing","Columns","Rows","rowCosineVec","colCosineVec","scanAxisNormal","zSpacing","sortedImageIds","signed","numComponents","isCacheable","CACHE_SIZE_EXCEEDED","decacheIfNecessaryUntilBytesAvailable","getVolumeInfo","sortedImageIdsArrays","volumeInfo","flat","helpers","getDynamicVolumeInfo"],"sourceRoot":""}