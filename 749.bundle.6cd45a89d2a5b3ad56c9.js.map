{"version":3,"file":"749.bundle.6cd45a89d2a5b3ad56c9.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/id.js","webpack:///../../../extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","webpack:///../../../extensions/dicom-microscopy/src/utils/styles.js","webpack:///../../../extensions/dicom-microscopy/src/tools/viewerManager.js","webpack:///../../../extensions/dicom-microscopy/src/utils/RoiAnnotation.js","webpack:///../../../extensions/dicom-microscopy/src/utils/areaOfPolygon.js","webpack:///../../../extensions/dicom-microscopy/src/services/MicroscopyService.ts","webpack:///../../../extensions/dicom-microscopy/src/utils/callInputDialog.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/dcmCodeValues.js","webpack:///../../../extensions/dicom-microscopy/src/utils/toArray.js","webpack:///../../../extensions/dicom-microscopy/src/utils/loadSR.js","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","webpack:///../../../extensions/dicom-microscopy/src/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/getPanelModule.tsx","webpack:///../../../extensions/dicom-microscopy/src/getCommandsModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { inv, multiply } from 'mathjs';\n\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\n// We should likely just expose this there.\n\nexport default function coordinateFormatScoord3d2Geometry(\n  coordinates,\n  pyramid\n) {\n  let transform = false;\n  if (!Array.isArray(coordinates[0])) {\n    coordinates = [coordinates];\n    transform = true;\n  }\n  const metadata = pyramid[pyramid.length - 1];\n  const orientation = metadata.ImageOrientationSlide;\n  const spacing = _getPixelSpacing(metadata);\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\n  const offset = [\n    Number(origin.XOffsetInSlideCoordinateSystem),\n    Number(origin.YOffsetInSlideCoordinateSystem),\n  ];\n\n  coordinates = coordinates.map(c => {\n    const slideCoord = [c[0], c[1]];\n    const pixelCoord = mapSlideCoord2PixelCoord({\n      offset,\n      orientation,\n      spacing,\n      point: slideCoord,\n    });\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\n  });\n  if (transform) {\n    return coordinates[0];\n  }\n  return coordinates;\n}\n\nfunction _getPixelSpacing(metadata) {\n  if (metadata.PixelSpacing) return metadata.PixelSpacing;\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\n  return pixelMeasures.PixelSpacing;\n}\n\nfunction mapSlideCoord2PixelCoord(options) {\n  // X and Y Offset in Slide Coordinate System\n  if (!('offset' in options)) {\n    throw new Error('Option \"offset\" is required.');\n  }\n  if (!Array.isArray(options.offset)) {\n    throw new Error('Option \"offset\" must be an array.');\n  }\n  if (options.offset.length !== 2) {\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\n  }\n  const offset = options.offset;\n\n  // Image Orientation Slide with direction cosines for Row and Column direction\n  if (!('orientation' in options)) {\n    throw new Error('Option \"orientation\" is required.');\n  }\n  if (!Array.isArray(options.orientation)) {\n    throw new Error('Option \"orientation\" must be an array.');\n  }\n  if (options.orientation.length !== 6) {\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\n  }\n  const orientation = options.orientation;\n\n  // Pixel Spacing along the Row and Column direction\n  if (!('spacing' in options)) {\n    throw new Error('Option \"spacing\" is required.');\n  }\n  if (!Array.isArray(options.spacing)) {\n    throw new Error('Option \"spacing\" must be an array.');\n  }\n  if (options.spacing.length !== 2) {\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\n  }\n  const spacing = options.spacing;\n\n  // X and Y coordinate in the Slide Coordinate System\n  if (!('point' in options)) {\n    throw new Error('Option \"point\" is required.');\n  }\n  if (!Array.isArray(options.point)) {\n    throw new Error('Option \"point\" must be an array.');\n  }\n  if (options.point.length !== 2) {\n    throw new Error('Option \"point\" must be an array with 2 elements.');\n  }\n  const point = options.point;\n\n  const m = [\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\n    [0, 0, 1],\n  ];\n  const mInverted = inv(m);\n\n  const vSlide = [[point[0]], [point[1]], [1]];\n\n  const vImage = multiply(mInverted, vSlide);\n\n  const row = Number(vImage[1][0].toFixed(4));\n  const col = Number(vImage[0][0].toFixed(4));\n  return [col, row];\n}\n","const defaultFill = {\n  color: 'rgba(255,255,255,0.4)',\n};\n\nconst emptyFill = {\n  color: 'rgba(255,255,255,0.0)',\n};\n\nconst defaultStroke = {\n  color: 'rgb(0,255,0)',\n  width: 1.5,\n};\n\nconst activeStroke = {\n  color: 'rgb(255,255,0)',\n  width: 1.5,\n};\n\nconst defaultStyle = {\n  image: {\n    circle: {\n      fill: defaultFill,\n      stroke: activeStroke,\n      radius: 5,\n    },\n  },\n  fill: defaultFill,\n  stroke: activeStroke,\n};\n\nconst emptyStyle = {\n  image: {\n    circle: {\n      fill: emptyFill,\n      stroke: defaultStroke,\n      radius: 5,\n    },\n  },\n  fill: emptyFill,\n  stroke: defaultStroke,\n};\n\nconst styles = {\n  active: defaultStyle,\n  default: emptyStyle,\n};\n\nexport default styles;\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\nimport styles from '../utils/styles';\n\nimport { PubSubService } from '@ohif/core';\n\n// Events from the third-party viewer\nconst ApiEvents = {\n  /** Triggered when a ROI was added. */\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\n  /** Triggered when a ROI was modified. */\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\n  /** Triggered when a ROI was removed. */\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\n  /** Triggered when a ROI was drawn. */\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\n  /** Triggered when a ROI was selected. */\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\n  /** Triggered when a viewport move has started. */\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\n  /** Triggered when a viewport move has ended. */\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\n  /** Triggered when a loading of data has started. */\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\n  /** Triggered when a loading of data has ended. */\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\n  /** Triggered when an error occurs during loading of data. */\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\n  /* Triggered when the loading of an image tile has started. */\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\n  /* Triggered when the loading of an image tile has ended. */\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\n  /* Triggered when the error occurs during loading of an image tile. */\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\n};\n\nconst EVENTS = {\n  ADDED: 'added',\n  MODIFIED: 'modified',\n  REMOVED: 'removed',\n  UPDATED: 'updated',\n  SELECTED: 'selected',\n};\n\n/**\n * ViewerManager encapsulates the complexity of the third-party viewer and\n * expose only the features/behaviors that are relevant to the application\n */\nclass ViewerManager extends PubSubService {\n  constructor(\n    viewer,\n    viewportIndex,\n    container,\n    studyInstanceUID,\n    seriesInstanceUID\n  ) {\n    super(EVENTS);\n    this.viewer = viewer;\n    this.viewportIndex = viewportIndex;\n    this.container = container;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\n    this.contextMenuCallback = () => {};\n\n    // init symbols\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\n    this._map = symbols.find(p => p.description === 'map');\n    this._affine = symbols.find(p => p.description === 'affine');\n\n    this.registerEvents();\n    this.activateDefaultInteractions();\n  }\n\n  addContextMenuCallback(callback) {\n    this.contextMenuCallback = callback;\n  }\n\n  /**\n   * Destroys this managed viewer instance, clearing all the event handlers\n   */\n  destroy() {\n    this.unregisterEvents();\n  }\n\n  /**\n   * This is to overrides the _broadcastEvent method of PubSubService and always\n   * send the ROI graphic object and this managed viewer instance.\n   * Due to the way that PubSubService is written, the same name override of the\n   * function doesn't work.\n   *\n   * @param {String} key key Subscription key\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\n   */\n  publish(key, roiGraphic) {\n    this._broadcastEvent(key, {\n      roiGraphic,\n      managedViewer: this,\n    });\n  }\n\n  /**\n   * Registers all the relevant event handlers for the third-party API\n   */\n  registerEvents() {\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\n  }\n\n  /**\n   * Cleares all the relevant event handlers for the third-party API\n   */\n  unregisterEvents() {\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.removeEventListener(\n      ApiEvents.ROI_MODIFIED,\n      this.onRoiModified\n    );\n    this.container.removeEventListener(\n      ApiEvents.ROI_REMOVED,\n      this.onRoiRemoved\n    );\n    this.container.removeEventListener(\n      ApiEvents.ROI_SELECTED,\n      this.onRoiSelected\n    );\n  }\n\n  /**\n   * Handles the ROI_ADDED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiAddedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.ADDED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_MODIFIED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiModifiedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.MODIFIED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_REMOVED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiRemovedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.REMOVED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_SELECTED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiSelectedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.SELECTED, roiGraphic);\n  }\n\n  /**\n   * Run the given callback operation without triggering any events for this\n   * instance, so subscribers will not be affected\n   *\n   * @param {Function} callback Callback that will run sinlently\n   */\n  runSilently(callback) {\n    this.unregisterEvents();\n    callback();\n    this.registerEvents();\n  }\n\n  /**\n   * Removes all the ROI graphics from the third-party API\n   */\n  clearRoiGraphics() {\n    this.runSilently(() => this.viewer.removeAllROIs());\n  }\n\n  showROIs() {\n    this.viewer.showROIs();\n  }\n\n  hideROIs() {\n    this.viewer.hideROIs();\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added\n   */\n  addRoiGraphic(roiGraphic) {\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API, and also add a label.\n   * Used for importing from SR.\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added.\n   * @param {String} label The label of the annotation.\n   */\n  addRoiGraphicWithLabel(roiGraphic, label) {\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evalutations\n    // to hide all other geometries, we are not going to use its label.\n    // if (label) {\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\n    //   roiGraphic.properties.label = label;\n    // }\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n\n    this._broadcastEvent(EVENTS.ADDED, {\n      roiGraphic,\n      managedViewer: this,\n      label,\n    });\n  }\n\n  /**\n   * Sets ROI style\n   *\n   * @param {String} uid ROI graphic UID to be styled\n   * @param {object} styleOptions - Style options\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.viewer.setROIStyle(uid, styleOptions);\n  }\n\n  /**\n   * Removes the ROI graphic with the given UID from the third-party API\n   *\n   * @param {String} uid ROI graphic UID to be removed\n   */\n  removeRoiGraphic(uid) {\n    this.viewer.removeROI(uid);\n  }\n\n  /**\n   * Update properties of regions of interest.\n   *\n   * @param {object} roi - ROI to be updated\n   * @param {string} roi.uid - Unique identifier of the region of interest\n   * @param {object} roi.properties - ROI properties\n   * @returns {void}\n   */\n  updateROIProperties({ uid, properties }) {\n    this.viewer.updateROI({ uid, properties });\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @returns {void}\n   */\n  toggleOverviewMap() {\n    this.viewer.toggleOverviewMap();\n  }\n\n  /**\n   * Activates the viewer default interactions\n   * @returns {void}\n   */\n  activateDefaultInteractions() {\n    /** Disable browser's native context menu inside the canvas */\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\n      'contextmenu',\n      event => {\n        event.preventDefault();\n        // comment out when context menu for microscopy is enabled\n        // if (typeof this.contextMenuCallback === 'function') {\n        //   this.contextMenuCallback(event);\n        // }\n      },\n      false\n    );\n    const defaultInteractions = [\n      [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ],\n      [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ],\n      ['modify', {}],\n    ];\n    this.activateInteractions(defaultInteractions);\n  }\n\n  /**\n   * Activates interactions\n   * @param {Array} interactions Interactions to be activated\n   * @returns {void}\n   */\n  activateInteractions(interactions) {\n    const interactionsMap = {\n      draw: activate =>\n        activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction',\n      modify: activate =>\n        activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction',\n      translate: activate =>\n        activate\n          ? 'activateTranslateInteraction'\n          : 'deactivateTranslateInteraction',\n      snap: activate =>\n        activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction',\n      dragPan: activate =>\n        activate\n          ? 'activateDragPanInteraction'\n          : 'deactivateDragPanInteraction',\n      dragZoom: activate =>\n        activate\n          ? 'activateDragZoomInteraction'\n          : 'deactivateDragZoomInteraction',\n      select: activate =>\n        activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction',\n    };\n\n    const availableInteractionsName = Object.keys(interactionsMap);\n    availableInteractionsName.forEach(availableInteractionName => {\n      const interaction = interactions.find(\n        interaction => interaction[0] === availableInteractionName\n      );\n      if (!interaction) {\n        const deactivateInteractionMethod = interactionsMap[\n          availableInteractionName\n        ](false);\n        this.viewer[deactivateInteractionMethod]();\n      } else {\n        const [name, config] = interaction;\n        const activateInteractionMethod = interactionsMap[name](true);\n        this.viewer[activateInteractionMethod](config);\n      }\n    });\n  }\n\n  /**\n   * Accesses the internals of third-party API and returns the OpenLayers Map\n   *\n   * @returns {Object} OpenLayers Map component instance\n   */\n  _getMapView() {\n    const map = this._getMap();\n    return map.getView();\n  }\n\n  _getMap() {\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\n    window['map'] = this.viewer[_map];\n    return this.viewer[_map];\n  }\n\n  /**\n   * Returns the current state for the OpenLayers View\n   *\n   * @returns {Object} Current view state\n   */\n  getViewState() {\n    const view = this._getMapView();\n    return {\n      center: view.getCenter(),\n      resolution: view.getResolution(),\n      zoom: view.getZoom(),\n    };\n  }\n\n  /**\n   * Sets the current state for the OpenLayers View\n   *\n   * @param {Object} viewState View state to be applied\n   */\n  setViewState(viewState) {\n    const view = this._getMapView();\n\n    view.setZoom(viewState.zoom);\n    view.setResolution(viewState.resolution);\n    view.setCenter(viewState.center);\n  }\n\n  setViewStateByExtent(roiAnnotation) {\n    const coordinates = roiAnnotation.getCoordinates();\n\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\n      this._jumpToPolyline(coordinates);\n    } else if (Array.isArray(coordinates[0])) {\n      this._jumpToPolygonOrEllipse(coordinates);\n    } else {\n      this._jumpToPoint(coordinates);\n    }\n  }\n\n  _jumpToPoint(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    view.setCenter(mappedCoord);\n  }\n\n  _jumpToPolyline(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    const x = mappedCoord[0];\n    const y = mappedCoord[1];\n\n    const xab = (x[0] + y[0]) / 2;\n    const yab = (x[1] + y[1]) / 2;\n    const midpoint = [xab, yab];\n\n    view.setCenter(midpoint);\n  }\n\n  _jumpToPolygonOrEllipse(coordinates) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    coordinates.forEach(coord => {\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n\n      const [x, y] = mappedCoord;\n      if (x < minX) {\n        minX = x;\n      } else if (x > maxX) {\n        maxX = x;\n      }\n\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n    });\n\n    const width = maxX - minX;\n    const height = maxY - minY;\n\n    minX -= 0.5 * width;\n    maxX += 0.5 * width;\n    minY -= 0.5 * height;\n    maxY += 0.5 * height;\n\n    const map = this._getMap();\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\n  }\n}\n\nexport { EVENTS };\n\nexport default ViewerManager;\n","import areaOfPolygon from './areaOfPolygon';\n\nimport { PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  LABEL_UPDATED: 'labelUpdated',\n  GRAPHIC_UPDATED: 'graphicUpdated',\n  VIEW_UPDATED: 'viewUpdated',\n  REMOVED: 'removed',\n};\n\n/**\n * Represents a single annotation for the Microscopy Viewer\n */\nclass RoiAnnotation extends PubSubService {\n  constructor(\n    roiGraphic,\n    studyInstanceUID,\n    seriesInstanceUID,\n    label = '',\n    viewState = null\n  ) {\n    super(EVENTS);\n    this.uid = roiGraphic.uid;\n    this.roiGraphic = roiGraphic;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n    this.label = label;\n    this.viewState = viewState;\n    this.setMeasurements(roiGraphic);\n  }\n\n  getScoord3d() {\n    const roiGraphic = this.roiGraphic;\n\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\n    const _scoord3d = roiGraphicSymbols.find(\n      s => String(s) === 'Symbol(scoord3d)'\n    );\n\n    return roiGraphic[_scoord3d];\n  }\n\n  getCoordinates() {\n    const scoord3d = this.getScoord3d();\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\n\n    const _coordinates = scoord3dSymbols.find(\n      s => String(s) === 'Symbol(coordinates)'\n    );\n\n    const coordinates = scoord3d[_coordinates];\n    return coordinates;\n  }\n\n  /**\n   * When called will trigger the REMOVED event\n   */\n  destroy() {\n    this._broadcastEvent(EVENTS.REMOVED, this);\n  }\n\n  /**\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\n   * event\n   *\n   * @param {Object} roiGraphic\n   */\n  setRoiGraphic(roiGraphic) {\n    this.roiGraphic = roiGraphic;\n    this.setMeasurements();\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\n  }\n\n  /**\n   * Update ROI measurement values based on its scoord3d coordinates.\n   *\n   * @returns {void}\n   */\n  setMeasurements() {\n    const type = this.roiGraphic.scoord3d.graphicType;\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\n\n    switch (type) {\n      case 'ELLIPSE':\n        // This is a circle so only need one side\n        const point1 = coordinates[0];\n        const point2 = coordinates[1];\n\n        let xLength2 = point2[0] - point1[0];\n        let yLength2 = point2[1] - point1[1];\n\n        xLength2 *= xLength2;\n        yLength2 *= yLength2;\n\n        const length = Math.sqrt(xLength2 + yLength2);\n        const radius = length / 2;\n\n        const areaEllipse = Math.PI * radius * radius;\n        this._area = areaEllipse;\n        this._length = undefined;\n        break;\n\n      case 'POLYGON':\n        const areaPolygon = areaOfPolygon(coordinates);\n        this._area = areaPolygon;\n        this._length = undefined;\n        break;\n\n      case 'POINT':\n        this._area = undefined;\n        this._length = undefined;\n        break;\n\n      case 'POLYLINE':\n        let len = 0;\n        for (let i = 1; i < coordinates.length; i++) {\n          const p1 = coordinates[i - 1];\n          const p2 = coordinates[i];\n\n          let xLen = p2[0] - p1[0];\n          let yLen = p2[1] - p1[1];\n\n          xLen *= xLen;\n          yLen *= yLen;\n          len += Math.sqrt(xLen + yLen);\n        }\n\n        this._area = undefined;\n        this._length = len;\n        break;\n    }\n  }\n\n  /**\n   * Update the OpenLayer Map's view state for the annotation and triggers the\n   * VIEW_UPDATED event\n   *\n   * @param {Object} viewState The new view state for the annotation\n   */\n  setViewState(viewState) {\n    this.viewState = viewState;\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\n  }\n\n  /**\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\n   *\n   * @param {String} label New label for the annotation\n   */\n  setLabel(label, finding) {\n    this.label = label || (finding && finding.CodeMeaning);\n    this.finding = finding || {\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\n      CodeValue: label,\n      CodeMeaning: label,\n    };\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation.\n   * Difference with getDetailedLabel() is that this will return empty string for empy\n   * label.\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getLabel() {\n    const label = this.label ? `${this.label}` : '';\n    return label;\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getDetailedLabel() {\n    const label = this.label ? `${this.label}` : '(empty)';\n    return label;\n  }\n\n  getLength() {\n    return this._length;\n  }\n\n  getArea() {\n    return this._area;\n  }\n}\n\nexport { EVENTS };\n\nexport default RoiAnnotation;\n","export default function areaOfPolygon(coordinates) {\n  // Shoelace algorithm.\n  const n = coordinates.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area +=\n      (coordinates[j][0] + coordinates[i][0]) *\n      (coordinates[j][1] - coordinates[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum\n  // (The value is halved as we are summing up triangles, not rectangles).\n  return Math.abs(area / 2.0);\n}\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\nimport RoiAnnotation, {\n  EVENTS as AnnotationEvents,\n} from '../utils/RoiAnnotation';\nimport styles from '../utils/styles';\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  ANNOTATION_UPDATED: 'annotationUpdated',\n  ANNOTATION_SELECTED: 'annotationSelected',\n  ANNOTATION_REMOVED: 'annotationRemoved',\n  RELABEL: 'relabel',\n  DELETE: 'delete',\n};\n\n/**\n * MicroscopyService is responsible to manage multiple third-party API's\n * microscopy viewers expose methods to manage the interaction with these\n * viewers and handle their ROI graphics to create, remove and modify the\n * ROI annotations relevant to the application\n */\nexport default class MicroscopyService extends PubSubService {\n  public static REGISTRATION = serviceManager => {\n    return {\n      name: 'microscopyService',\n      altName: 'MicroscopyService',\n      create: ({ configuration = {} }) => {\n        return new MicroscopyService(serviceManager);\n      },\n    };\n  };\n\n  serviceManager: any;\n\n  managedViewers = new Set();\n  roiUids = new Set();\n  annotations = {};\n  selectedAnnotation = null;\n  pendingFocus = false;\n\n  constructor(serviceManager) {\n    super(EVENTS);\n    this.serviceManager = serviceManager;\n    this._onRoiAdded = this._onRoiAdded.bind(this);\n    this._onRoiModified = this._onRoiModified.bind(this);\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\n    this._onRoiSelected = this._onRoiSelected.bind(this);\n    this.isROIsVisible = true;\n  }\n\n  /**\n   * Cleares all the annotations and managed viewers, setting the manager state\n   * to its initial state\n   */\n  clear() {\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\n    this.managedViewers.clear();\n    for (var key in this.annotations) {\n      delete this.annotations[key];\n    }\n\n    this.roiUids.clear();\n    this.selectedAnnotation = null;\n    this.pendingFocus = false;\n  }\n\n  clearAnnotations() {\n    Object.keys(this.annotations).forEach(uid => {\n      this.removeAnnotation(this.annotations[uid]);\n    });\n  }\n\n  /**\n   * Observes when a ROI graphic is added, creating the correspondent annotation\n   * with the current graphic and view state.\n   * Creates a subscription for label updating for the created annotation and\n   * publishes an ANNOTATION_UPDATED event when it happens.\n   * Also triggers the relabel process after the graphic is placed.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiAdded(data) {\n    const { roiGraphic, managedViewer, label } = data;\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const viewState = managedViewer.getViewState();\n\n    const roiAnnotation = new RoiAnnotation(\n      roiGraphic,\n      studyInstanceUID,\n      seriesInstanceUID,\n      '',\n      viewState\n    );\n\n    this.roiUids.add(roiGraphic.uid);\n    this.annotations[roiGraphic.uid] = roiAnnotation;\n\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\n    });\n\n    if (label !== undefined) {\n      roiAnnotation.setLabel(label);\n    } else {\n      const onRelabel = item =>\n        managedViewer.updateROIProperties({\n          uid: roiGraphic.uid,\n          properties: { label: item.label, finding: item.finding },\n        });\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\n    }\n  }\n\n  /**\n   * Observes when a ROI graphic is modified, updating the correspondent\n   * annotation with the current graphic and view state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The modified ROI graphic object\n   */\n  _onRoiModified(data) {\n    const { roiGraphic, managedViewer } = data;\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (!roiAnnotation) return;\n    roiAnnotation.setRoiGraphic(roiGraphic);\n    roiAnnotation.setViewState(managedViewer.getViewState());\n  }\n\n  /**\n   * Observes when a ROI graphic is removed, reflecting the removal in the\n   * annotations' state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The removed ROI graphic object\n   */\n  _onRoiRemoved(data) {\n    const { roiGraphic } = data;\n    this.roiUids.delete(roiGraphic.uid);\n    this.annotations[roiGraphic.uid].destroy();\n    delete this.annotations[roiGraphic.uid];\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\n  }\n\n  /**\n   * Observes any changes on ROI graphics and synchronize all the managed\n   * viewers to reflect those changes.\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiUpdated(data) {\n    const { roiGraphic, managedViewer } = data;\n    this.synchronizeViewers(managedViewer);\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\n  }\n\n  /**\n   * Observes when an ROI is selected.\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiSelected(data) {\n    const { roiGraphic } = data;\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\n      if (this.selectedAnnotation) this.clearSelection();\n      this.selectedAnnotation = selectedAnnotation;\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\n    }\n  }\n\n  /**\n   * Creates the subscriptions for the managed viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _addManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(ViewerEvents.ADDED, this._onRoiAdded);\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(ViewerEvents.MODIFIED, this._onRoiModified);\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(ViewerEvents.REMOVED, this._onRoiRemoved);\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(ViewerEvents.UPDATED, this._onRoiUpdated);\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(ViewerEvents.UPDATED, this._onRoiSelected);\n  }\n\n  /**\n   * Removes the subscriptions for the managed viewer being removed\n   *\n   * @param {ViewerManager} managedViewer The viewer being removed\n   */\n  _removeManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\n\n    managedViewer._roiAddedSubscription = null;\n    managedViewer._roiModifiedSubscription = null;\n    managedViewer._roiRemovedSubscription = null;\n    managedViewer._roiUpdatedSubscription = null;\n    managedViewer._roiSelectedSubscription = null;\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study and series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  getManagedViewersForStudy(studyInstanceUID) {\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Restores the created annotations for the viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _restoreAnnotations(managedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const annotations = this.getAnnotationsForSeries(\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n    annotations.forEach(roiAnnotation => {\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n    });\n  }\n\n  /**\n   * Creates a managed viewer instance for the given thrid-party API's viewer.\n   * Restores existing annotations for the given study/series.\n   * Adds event subscriptions for the viewer being added.\n   * Focuses the selected annotation when the viewer is being loaded into the\n   * active viewport.\n   *\n   * @param {Object} viewer Third-party viewer API's object to be managed\n   * @param {Number} viewportIndex The index of the viewport to load the viewer\n   * @param {HTMLElement} container The DOM element where it will be renderd\n   * @param {String} studyInstanceUID The study UID of the loaded image\n   * @param {String} seriesInstanceUID The series UID of the loaded image\n   * @param {Array} displaySets All displaySets related to the same StudyInstanceUID\n   *\n   * @returns {ViewerManager} managed viewer\n   */\n  addViewer(\n    viewer,\n    viewportIndex,\n    container,\n    studyInstanceUID,\n    seriesInstanceUID\n  ) {\n    const managedViewer = new ViewerManager(\n      viewer,\n      viewportIndex,\n      container,\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n\n    this._restoreAnnotations(managedViewer);\n    viewer._manager = managedViewer;\n    this.managedViewers.add(managedViewer);\n\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\n    this._addManagedViewerSubscriptions(managedViewer);\n\n    if (this.pendingFocus) {\n      this.pendingFocus = false;\n      this.focusAnnotation(this.selectedAnnotation, viewportIndex);\n    }\n\n    return managedViewer;\n  }\n\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\n\n    if (!studyMetadata) {\n      return;\n    }\n\n    let derivedDisplaySets = FrameOfReferenceUID\n      ? displaySets.filter(\n          ds =>\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\n            // sometimes each depth instance has the different FrameOfReferenceID\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\n        )\n      : [];\n\n    if (!derivedDisplaySets.length) {\n      return;\n    }\n\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\n\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\n      // Don't auto load\n      return;\n    }\n\n    // find most recent and load it.\n    let recentDateTime = 0;\n    let recentDisplaySet = derivedDisplaySets[0];\n\n    derivedDisplaySets.forEach(ds => {\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\n      if (dateTime > recentDateTime) {\n        recentDateTime = dateTime;\n        recentDisplaySet = ds;\n      }\n    });\n\n    recentDisplaySet.isLoading = true;\n\n    recentDisplaySet.load(smDisplaySet);\n  }\n\n  /**\n   * Removes the given third-party viewer API's object from the managed viewers\n   * and cleares all its event subscriptions\n   *\n   * @param {Object} viewer Third-party viewer API's object to be removed\n   */\n  removeViewer(viewer) {\n    const managedViewer = viewer._manager;\n\n    this._removeManagedViewerSubscriptions(managedViewer);\n    managedViewer.destroy();\n    this.managedViewers.delete(managedViewer);\n  }\n\n  /**\n   * Toggle ROIs visibility\n   */\n  toggleROIsVisibility() {\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\n    this.isROIsVisible = !this.isROIsVisible;\n  }\n\n  /**\n   * Hide all ROIs\n   */\n  hideROIs() {\n    this.managedViewers.forEach(mv => mv.hideROIs());\n  }\n\n  /** Show all ROIs */\n  showROIs() {\n    this.managedViewers.forEach(mv => mv.showROIs());\n  }\n\n  /**\n   * Returns a RoiAnnotation instance for the given ROI UID\n   *\n   * @param {String} uid UID of the annotation\n   *\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\n   */\n  getAnnotation(uid) {\n    return this.annotations[uid];\n  }\n\n  /**\n   * Returns all the RoiAnnotation instances being managed\n   *\n   * @returns {Array} All RoiAnnotation instances\n   */\n  getAnnotations() {\n    const annotations = [];\n    Object.keys(this.annotations).forEach(uid => {\n      annotations.push(this.getAnnotation(uid));\n    });\n    return annotations;\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   */\n  getAnnotationsForStudy(studyInstanceUID) {\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study and\n   * series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   */\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = annotation =>\n      annotation.studyInstanceUID === studyInstanceUID &&\n      annotation.seriesInstanceUID === seriesInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the selected RoiAnnotation instance or null if none is selected\n   *\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\n   */\n  getSelectedAnnotation() {\n    return this.selectedAnnotation;\n  }\n\n  /**\n   * Clear current RoiAnnotation selection\n   */\n  clearSelection() {\n    if (this.selectedAnnotation) {\n      this.setROIStyle(this.selectedAnnotation.uid, {\n        stroke: {\n          color: '#00ff00',\n        },\n      });\n    }\n    this.selectedAnnotation = null;\n  }\n\n  /**\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\n   * event to notify all the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\n   */\n  selectAnnotation(roiAnnotation) {\n    if (this.selectedAnnotation) this.clearSelection();\n\n    this.selectedAnnotation = roiAnnotation;\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\n    this.setROIStyle(roiAnnotation.uid, styles.active);\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @param viewportIndex The active viewport index\n   * @returns {void}\n   */\n  toggleOverviewMap(viewportIndex) {\n    const managedViewers = Array.from(this.managedViewers);\n    const managedViewer = managedViewers.find(\n      mv => mv.viewportIndex === viewportIndex\n    );\n    if (managedViewer) {\n      managedViewer.toggleOverviewMap();\n    }\n  }\n\n  /**\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\n   * its removal on all third-party viewers being managed\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\n   */\n  removeAnnotation(roiAnnotation) {\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\n\n    managedViewers.forEach(managedViewer =>\n      managedViewer.removeRoiGraphic(uid)\n    );\n\n    if (this.annotations[uid]) {\n      this.roiUids.delete(uid);\n      this.annotations[uid].destroy();\n      delete this.annotations[uid];\n\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\n    }\n  }\n\n  /**\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\n   * state of the managed viewer with the given viewport index.\n   * If the image for the given annotation is not yet loaded into the viewport,\n   * it will set a pendingFocus flag to true in order to perform the focus when\n   * the managed viewer instance is created.\n   *\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\n   * @param {Number} viewportIndex Index of the viewport to focus\n   */\n  focusAnnotation(roiAnnotation, viewportIndex) {\n    const filter = mv => mv.viewportIndex === viewportIndex;\n    const managedViewer = Array.from(this.managedViewers).find(filter);\n    if (managedViewer) {\n      managedViewer.setViewStateByExtent(roiAnnotation);\n    } else {\n      this.pendingFocus = true;\n    }\n  }\n\n  /**\n   * Synchronize the ROI graphics for all the managed viewers that has the same\n   * series UID of the given managed viewer\n   *\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\n   */\n  synchronizeViewers(baseManagedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\n    const managedViewers = this._getManagedViewersForSeries(\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n\n    // Prevent infinite loops arrising from updates.\n    managedViewers.forEach(managedViewer =>\n      this._removeManagedViewerSubscriptions(managedViewer)\n    );\n\n    managedViewers.forEach(managedViewer => {\n      if (managedViewer === baseManagedViewer) {\n        return;\n      }\n\n      const annotations = this.getAnnotationsForSeries(\n        studyInstanceUID,\n        seriesInstanceUID\n      );\n      managedViewer.clearRoiGraphics();\n      annotations.forEach(roiAnnotation => {\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n      });\n    });\n\n    managedViewers.forEach(managedViewer =>\n      this._addManagedViewerSubscriptions(managedViewer)\n    );\n  }\n\n  /**\n   * Activates interactions across all the viewers being managed\n   *\n   * @param {Array} interactions interactions\n   */\n  activateInteractions(interactions) {\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\n    this.activeInteractions = interactions;\n  }\n\n  /**\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\n   * publishing the RELABEL event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\n   */\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\n    if (!onRelabel) {\n      onRelabel = ({ label }) =>\n        this.managedViewers.forEach(mv =>\n          mv.updateROIProperties({\n            uid: roiAnnotation.uid,\n            properties: { label },\n          })\n        );\n    }\n\n    this._broadcastEvent(EVENTS.RELABEL, {\n      roiAnnotation,\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\n      successCallback: onRelabel,\n      newAnnotation,\n    });\n  }\n\n  /**\n   * Triggers the deletion process for the given RoiAnnotation instance, by\n   * publishing the DELETE event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\n   */\n  triggerDelete(roiAnnotation) {\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\n  }\n\n  /**\n   * Set ROI style for all managed viewers\n   *\n   * @param {string} uid The ROI uid that will be styled\n   * @param {object} styleOptions - Style options\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object*} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object*} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\n  }\n}\n\nexport { EVENTS };\n","import React from 'react';\nimport { Input, Dialog } from '@ohif/ui';\n\n/**\n *\n * @param {*} data\n * @param {*} data.text\n * @param {*} data.label\n * @param {*} event\n * @param {func} callback\n * @param {*} isArrowAnnotateInputDialog\n */\nexport default function callInputDialog({\n  uiDialogService,\n  title = 'Annotation',\n  defaultValue = '',\n  callback = (value: string, action: string) => {}\n}) {\n  const dialogId = 'microscopy-input-dialog';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.value, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: title,\n        value: { value: defaultValue },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter your annotation\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"bg-black border-primary-main\"\n              type=\"text\"\n              value={value.defaultValue}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, value: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ServicesManager,\n  ExtensionManager,\n  CommandsManager,\n  DicomMetadataStore,\n} from '@ohif/core';\nimport { MeasurementTable, Icon, ButtonGroup, Button } from '@ohif/ui';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\nimport dcmjs from 'dcmjs';\nimport styles from '../../utils/styles';\nimport callInputDialog from '../../utils/callInputDialog';\nimport constructSR from '../../utils/constructSR';\nimport { saveByteArray } from '../../utils/saveByteArray';\n\nlet saving = false;\nconst { datasetToBuffer } = dcmjs.data;\n\nconst formatArea = area => {\n  let mult = 1;\n  let unit = 'mm';\n  if (area > 1000000) {\n    unit = 'm';\n    mult = 1 / 1000000;\n  } else if (area < 1) {\n    unit = 'μm';\n    mult = 1000000;\n  }\n  return `${(area * mult).toFixed(2)} ${unit}²`;\n};\n\nconst formatLength = (length, unit) => {\n  let mult = 1;\n  if (unit == 'km' || (!unit && length > 1000000)) {\n    unit = 'km';\n    mult = 1 / 1000000;\n  } else if (unit == 'm' || (!unit && length > 1000)) {\n    unit = 'm';\n    mult = 1 / 1000;\n  } else if (unit == 'μm' || (!unit && length < 1)) {\n    unit = 'μm';\n    mult = 1000;\n  } else if (unit && unit != 'mm') {\n    throw new Error(`Unknown length unit ${unit}`);\n  } else {\n    unit = 'mm';\n  }\n  return `${(length * mult).toFixed(2)} ${unit}`;\n};\n\ninterface IMicroscopyPanelProps extends WithTranslation {\n  viewports: PropTypes.array;\n  activeViewportIndex: PropTypes.number;\n\n  //\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\n\n  //\n  servicesManager: ServicesManager;\n  extensionManager: ExtensionManager;\n  commandsManager: CommandsManager;\n}\n\n/**\n * Microscopy Measurements Panel Component\n *\n * @param props\n * @returns\n */\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\n  const { microscopyService } = props.servicesManager.services;\n\n  const [studyInstanceUID, setStudyInstanceUID] = useState(\n    null as string | null\n  );\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\n  const { servicesManager, extensionManager } = props;\n\n  const { uiDialogService, displaySetService } = servicesManager.services;\n\n  useEffect(() => {\n    const viewport = props.viewports[props.activeViewportIndex];\n    if (viewport.displaySetInstanceUIDs[0]) {\n      const displaySet = displaySetService.getDisplaySetByUID(\n        viewport.displaySetInstanceUIDs[0]\n      );\n      if (displaySet) {\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\n      }\n    }\n  }, [props.viewports, props.activeViewportIndex]);\n\n  useEffect(() => {\n    const onAnnotationUpdated = () => {\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(\n        studyInstanceUID\n      );\n      setRoiAnnotations(roiAnnotations);\n    };\n\n    const onAnnotationSelected = () => {\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\n      setSelectedAnnotation(selectedAnnotation);\n    };\n\n    const onAnnotationRemoved = () => {\n      onAnnotationUpdated();\n    };\n\n    const {\n      unsubscribe: unsubscribeAnnotationUpdated,\n    } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_UPDATED,\n      onAnnotationUpdated\n    );\n    const {\n      unsubscribe: unsubscribeAnnotationSelected,\n    } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_SELECTED,\n      onAnnotationSelected\n    );\n    const {\n      unsubscribe: unsubscribeAnnotationRemoved,\n    } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_REMOVED,\n      onAnnotationRemoved\n    );\n    onAnnotationUpdated();\n    onAnnotationSelected();\n\n    // on unload unsubscribe from events\n    return () => {\n      unsubscribeAnnotationUpdated();\n      unsubscribeAnnotationSelected();\n      unsubscribeAnnotationRemoved();\n    };\n  }, [studyInstanceUID]);\n\n  /**\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\n   * new series' description, and continue to save.\n   *\n   * @returns\n   */\n  const promptSave = () => {\n    const annotations = microscopyService.getAnnotationsForStudy(\n      studyInstanceUID\n    );\n\n    if (!annotations || saving) {\n      return;\n    }\n\n    callInputDialog({\n      uiDialogService,\n      title: 'Enter description of the Series',\n      defaultValue: '',\n      callback: (value: string, action: string) => {\n        switch (action) {\n          case 'save': {\n            saveFunction(value);\n          }\n        }\n      },\n    });\n  };\n\n  const getAllDisplaySets = (studyMetadata: any) => {\n    let allDisplaySets = [] as any[];\n    studyMetadata.series.forEach((series: any) => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(\n        series.SeriesInstanceUID\n      );\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return allDisplaySets;\n  };\n\n  /**\n   * Save annotations as a series\n   *\n   * @param SeriesDescription - series description\n   * @returns\n   */\n  const saveFunction = async (SeriesDescription: string) => {\n    const dataSource = extensionManager.getActiveDataSource()[0];\n    const { onSaveComplete } = props;\n    const annotations = microscopyService.getAnnotationsForStudy(\n      studyInstanceUID\n    );\n\n    saving = true;\n\n    // There is only one viewer possible for one study,\n    // Since once study contains multiple resolution levels (series) of one whole\n    // Slide image.\n\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\n    const displaySets = getAllDisplaySets(studyMetadata);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    // Get the next available series number after 4700.\n\n    const dsWithMetadata = displaySets.filter(\n      ds =>\n        ds.metadata &&\n        ds.metadata.SeriesNumber &&\n        typeof ds.metadata.SeriesNumber === 'number'\n    );\n\n    // Generate next series number\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\n    const SeriesNumber = maxSeriesNumber + 1;\n\n    const { instance: metadata } = smDisplaySet;\n\n    // construct SR dataset\n    const dataset = constructSR(\n      metadata,\n      { SeriesDescription, SeriesNumber },\n      annotations\n    );\n\n    // Save in DICOM format\n    try {\n      if (dataSource) {\n        if (dataSource.wadoRoot == 'saveDicom') {\n          // download as DICOM file\n          const part10Buffer = datasetToBuffer(dataset);\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\n        } else {\n          // Save into Web Data source\n          const { StudyInstanceUID } = dataset;\n          await dataSource.store.dicom(dataset);\n          if (StudyInstanceUID) {\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\n          }\n        }\n        onSaveComplete({\n          title: 'SR Saved',\n          meassage: 'Measurements downloaded successfully',\n          type: 'success',\n        });\n      } else {\n        console.error('Server unspecified');\n      }\n    } catch (error) {\n      onSaveComplete({\n        title: 'SR Save Failed',\n        message: error.message || error.toString(),\n        type: 'error',\n      });\n    } finally {\n      saving = false;\n    }\n  };\n\n  /**\n   * On clicking \"Reject annotations\" button\n   */\n  const onDeleteCurrentSRHandler = async () => {\n    try {\n      const activeViewport = props.viewports[props.activeViewportIndex];\n      const { StudyInstanceUID } = activeViewport;\n\n      // TODO: studies?\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort(\n        (ds1: any, ds2: any) => {\n          const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\n          const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\n          return dateTime1 > dateTime2;\n        }\n      )[study.derivedDisplaySets.length - 1];\n\n      // TODO: use dataSource.reject.dicom()\n      // await DICOMSR.rejectMeasurements(\n      //   study.wadoRoot,\n      //   lastDerivedDisplaySet.StudyInstanceUID,\n      //   lastDerivedDisplaySet.SeriesInstanceUID\n      // );\n      props.onRejectComplete({\n        title: 'Report rejected',\n        message: 'Latest report rejected successfully',\n        type: 'success',\n      });\n    } catch (error) {\n      props.onRejectComplete({\n        title: 'Failed to reject report',\n        message: error.message,\n        type: 'error',\n      });\n    }\n  };\n\n  /**\n   * Handler for clicking event of an annotation item.\n   *\n   * @param param0\n   */\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\n    const roiAnnotation = microscopyService.getAnnotation(uid);\n    microscopyService.selectAnnotation(roiAnnotation);\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportIndex);\n  };\n\n  /**\n   * Handler for \"Edit\" action of an annotation item\n   * @param param0\n   */\n  const onMeasurementItemEditHandler = ({\n    uid,\n    isActive,\n  }: {\n    uid: string;\n    isActive: boolean;\n  }) => {\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\n  };\n\n  // Convert ROI annotations managed by microscopyService into our\n  // own format for display\n  const data = roiAnnotations.map((roiAnnotation, index) => {\n    const label = roiAnnotation.getDetailedLabel();\n    const area = roiAnnotation.getArea();\n    const length = roiAnnotation.getLength();\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\n\n    // other events\n    const { uid } = roiAnnotation;\n\n    // display text\n    const displayText = [];\n\n    if (area !== undefined) {\n      displayText.push(formatArea(area));\n    } else if (length !== undefined) {\n      displayText.push(\n        shortAxisLength\n          ? `${formatLength(length, 'μm')} x ${formatLength(\n              shortAxisLength,\n              'μm'\n            )}`\n          : `${formatLength(length, 'μm')}`\n      );\n    }\n\n    // convert to measurementItem format compatible with <MeasurementTable /> component\n    return {\n      uid,\n      index,\n      label,\n      isActive: isSelected,\n      displayText,\n      roiAnnotation,\n    };\n  });\n\n  const disabled = data.length === 0;\n\n  return (\n    <>\n      <div\n        className=\"overflow-x-hidden overflow-y-auto ohif-scrollbar\"\n        data-cy={'measurements-panel'}\n      >\n        <MeasurementTable\n          title=\"Measurements\"\n          servicesManager={props.servicesManager}\n          data={data}\n          onClick={onMeasurementItemClickHandler}\n          onEdit={onMeasurementItemEditHandler}\n        />\n      </div>\n      <div className=\"flex justify-center p-4\">\n        <ButtonGroup color=\"black\" size=\"inherit\">\n          {/* Let's hide the save button for now, as export SR for SM is a proof of concept */}\n          {/*{promptSave && (\n            <Button\n              className=\"px-2 py-2 text-base\"\n              size=\"initial\"\n              variant={disabled ? 'disabled' : 'outlined'}\n              color=\"black\"\n              border=\"primaryActive\"\n              onClick={promptSave}\n            >\n              {props.t('Create Report')}\n            </Button>\n          )} */}\n          {/* <Button\n            className=\"px-2 py-2 text-base\"\n            onClick={onDeleteCurrentSRHandler}\n          >\n            {props.t('Reject latest report')}\n          </Button> */}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n}\n\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(\n  MicroscopyPanel\n);\n\nexport default connectedMicroscopyPanel;\n","import OHIF from '@ohif/core';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler';\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager,\n  extensionManager\n) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const instance = instances[0];\n\n  let singleFrameInstance = instance;\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\n  for (const instanceI of instances) {\n    const framesI = +instanceI.NumberOfFrames || 1;\n    if (framesI < currentFrames) {\n      singleFrameInstance = instanceI;\n      currentFrames = framesI;\n    }\n  }\n  let imageIdForThumbnail = null;\n  if (singleFrameInstance) {\n    if (currentFrames == 1) {\n      // Not all DICOM server implementations support thumbnail service,\n      // So if we have a single-frame image, we will prefer it.\n      imageIdForThumbnail = singleFrameInstance.imageId;\n    }\n    if (!imageIdForThumbnail) {\n      // use the thumbnail service provided by DICOM server\n      const dataSource = extensionManager.getActiveDataSource()[0];\n      imageIdForThumbnail = dataSource.getImageIdsForInstance({\n        instance: singleFrameInstance,\n        thumbnail: true,\n      });\n    }\n  }\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  instances = instances.map(inst => {\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\n    // When the Microscopy file was built by certain tool from multiple image files,\n    // each instance's FrameOfReferenceUID is sometimes different.\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\n    // the case is so often, so let's override this value manually here.\n    //\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\n\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\n\n    return inst;\n  });\n\n  const othersFrameOfReferenceUID = instances\n    .filter(v => v)\n    .map(inst => inst.FrameOfReferenceUID)\n    .filter((value, index, array) => array.indexOf(value) === index);\n  if (othersFrameOfReferenceUID.length > 1) {\n    console.warn(\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n      othersFrameOfReferenceUID\n    );\n  }\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SM',\n    altImageText: 'Microscopy',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    FrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\n    // Map ContentDate/Time to SeriesTime for series list sorting.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\n    instance,\n    numImageFrames: 0,\n    numInstances: 1,\n    imageIdForThumbnail, // thumbnail image\n    others: instances, // all other level instances in the image Pyramid\n    othersFrameOfReferenceUID,\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySopClassHandler({\n  servicesManager,\n  extensionManager,\n}) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return {\n    name: 'DicomMicroscopySopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\n    getDisplaySetsFromSeries,\n  };\n}\n","const DCM_CODE_VALUES = {\n  IMAGING_MEASUREMENTS: '126010',\n  MEASUREMENT_GROUP: '125007',\n  IMAGE_REGION: '111030',\n  FINDING: '121071',\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\n  LENGTH: '410668003',\n  AREA: '42798000',\n  SHORT_AXIS: 'G-A186',\n  LONG_AXIS: 'G-A185',\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\n};\n\nexport default DCM_CODE_VALUES;\n","export default function toArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n","import dcmjs from 'dcmjs';\n\nimport DCM_CODE_VALUES from './dcmCodeValues';\nimport toArray from './toArray';\n\nconst MeasurementReport =\n  dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\n\n// Define as async so that it returns a promise, expected by the ViewportGrid\nexport default async function loadSR(\n  microscopyService,\n  microscopySRDisplaySet,\n  referencedDisplaySet\n) {\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\n\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\n\n  const managedViewers = microscopyService.getManagedViewersForStudy(\n    StudyInstanceUID\n  );\n\n  if (!managedViewers || !managedViewers.length) {\n    return;\n  }\n\n  microscopySRDisplaySet.isLoaded = true;\n\n  const { rois, labels } = await _getROIsFromToolState(\n    naturalizedDataset,\n    FrameOfReferenceUID\n  );\n\n  const managedViewer = managedViewers[0];\n\n  for (let i = 0; i < rois.length; i++) {\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\n    // evaluation.\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evalutations\n    // to hide all other geometries, we are going to manually remove that\n    // evaluation item.\n    const roi = rois[i];\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\n    const _properties = roiSymbols.find(s => s.description === 'properties');\n    const properties = roi[_properties];\n    properties['evaluations'] = [];\n\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\n  }\n}\n\nasync function _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID) {\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\n  const tools = Object.getOwnPropertyNames(toolState);\n\n  const DICOMMicroscopyViewer = await import(\n    /* webpackChunkName: \"dicom-microscopy-viewer\" */ 'dicom-microscopy-viewer'\n  );\n\n  const measurementGroupContentItems = _getMeasurementGroups(\n    naturalizedDataset\n  );\n\n  const rois = [];\n  const labels = [];\n\n  tools.forEach(t => {\n    const toolSpecificToolState = toolState[t];\n    let scoord3d;\n\n    const capsToolType = t.toUpperCase();\n\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(\n      mg => {\n        const imageRegionContentItem = toArray(mg.ContentSequence).find(\n          ci =>\n            ci.ConceptNameCodeSequence.CodeValue ===\n            DCM_CODE_VALUES.IMAGE_REGION\n        );\n\n        return imageRegionContentItem.GraphicType === capsToolType;\n      }\n    );\n\n    toolSpecificToolState.forEach((coordinates, index) => {\n      const properties = {};\n\n      const options = {\n        coordinates,\n        frameOfReferenceUID: FrameOfReferenceUID,\n      };\n\n      if (t === 'Polygon') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\n      } else if (t === 'Polyline') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\n      } else if (t === 'Point') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\n      } else if (t === 'Ellipse') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\n      } else {\n        throw new Error('Unsupported tool type');\n      }\n\n      const measurementGroup = measurementGroupContentItemsForTool[index];\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\n      );\n\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci =>\n          ci.ConceptNameCodeSequence.CodeValue ===\n          DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\n      );\n\n      /**\n       * Extract presentation state from tracking identifier.\n       * Currently is stored in SR but should be stored in its tags.\n       */\n      if (trackingGroup) {\n        const regExp = /\\(([^)]+)\\)/;\n        const matches = regExp.exec(trackingGroup.TextValue);\n        if (matches && matches[1]) {\n          properties.presentationState = JSON.parse(matches[1]);\n          properties.marker = properties.presentationState.marker;\n        }\n      }\n\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [\n          DCM_CODE_VALUES.LENGTH,\n          DCM_CODE_VALUES.AREA,\n          DCM_CODE_VALUES.SHORT_AXIS,\n          DCM_CODE_VALUES.LONG_AXIS,\n          DCM_CODE_VALUES.ELLIPSE_AREA,\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\n      );\n\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(\n          ci.ConceptNameCodeSequence.CodeValue\n        )\n      );\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      evaluations = evaluations.map(evaluation => {\n        const e = { ...evaluation };\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\n        return e;\n      });\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      measurements = measurements.map(measurement => {\n        const m = { ...measurement };\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\n        return m;\n      });\n\n      if (measurements && measurements.length) {\n        properties.measurements = measurements;\n        console.debug('[SR] retrieving measurements...', measurements);\n      }\n\n      if (evaluations && evaluations.length) {\n        properties.evaluations = evaluations;\n        console.debug('[SR] retrieving evaluations...', evaluations);\n      }\n\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\n      rois.push(roi);\n\n      if (findingGroup) {\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\n      } else {\n        labels.push('');\n      }\n    });\n  });\n\n  return { rois, labels };\n}\n\nfunction _getMeasurementGroups(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue ===\n      DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const measurementGroupContentItems = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).filter(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP\n  );\n\n  return measurementGroupContentItems;\n}\n","import OHIF, { DicomMetadataStore } from '@ohif/core';\nimport loadSR from './utils/loadSR';\nimport toArray from './utils/toArray';\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\n\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue ===\n      DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const firstMeasurementGroupContentItem = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).find(\n    ci =>\n      ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP\n  );\n\n  const imageRegionContentItem = toArray(\n    firstMeasurementGroupContentItem.ContentSequence\n  ).find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\n  );\n\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\n}\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager,\n  extensionManager\n) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const { displaySetService, microscopyService } = servicesManager.services;\n\n  const instance = instances[0];\n\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\n  // TOOD -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\n  const naturalizedDataset = DicomMetadataStore.getSeries(\n    instance.StudyInstanceUID,\n    instance.SeriesInstanceUID\n  ).instances[0];\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(\n    naturalizedDataset\n  );\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SR',\n    altImageText: 'Microscopy SR',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    ReferencedFrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription,\n    // Map the content date/time to the series date/time, these are only used for filtering.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    instance,\n    metadata: naturalizedDataset,\n    isDerived: true,\n    isLoading: false,\n    isLoaded: false,\n    loadError: false,\n  };\n\n  displaySet.load = function(referencedDisplaySet) {\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(\n      error => {\n        displaySet.isLoaded = false;\n        displaySet.loadError = true;\n        throw new Error(error);\n      }\n    );\n  };\n\n  displaySet.getSourceDisplaySet = function() {\n    let allDisplaySets = [];\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    studyMetadata.series.forEach(series => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(\n        series.SeriesInstanceUID\n      );\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return getSourceDisplaySet(allDisplaySets, displaySet);\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySRSopClassHandler({\n  servicesManager,\n  extensionManager,\n}) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return {\n    name: 'DicomMicroscopySRSopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\n    getDisplaySetsFromSeries,\n  };\n}\n","/**\n * Get referenced SM displaySet from SR displaySet\n *\n * @param {*} allDisplaySets\n * @param {*} microscopySRDisplaySet\n * @returns\n */\nexport default function getSourceDisplaySet(\n  allDisplaySets,\n  microscopySRDisplaySet\n) {\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\n\n  const otherDisplaySets = allDisplaySets.filter(\n    ds =>\n      ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\n  );\n  const referencedDisplaySet = otherDisplaySets.find(\n    displaySet =>\n      displaySet.Modality === 'SM' &&\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\n        // sometimes each depth instance has the different FrameOfReferenceID\n        displaySet.othersFrameOfReferenceUID.includes(\n          ReferencedFrameOfReferenceUID\n        ))\n  );\n\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\n    console.warn(\n      'No display set with FrameOfReferenceUID',\n      ReferencedFrameOfReferenceUID,\n      'single series, assuming data error, defaulting to only series.'\n    );\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\n  }\n\n  return referencedDisplaySet;\n}\n","import { id } from './id';\nimport React, { Suspense } from 'react';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './getCommandsModule';\n\nimport { useViewportGrid } from '@ohif/ui';\nimport getDicomMicroscopySopClassHandler from './DicomMicroscopySopClassHandler';\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\nimport MicroscopyService from './services/MicroscopyService';\n\nconst Component = React.lazy(() => {\n  return import('./DicomMicroscopyViewport');\n});\n\nconst MicroscopyViewport = props => {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nexport default {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  async preRegistration({\n    servicesManager,\n    commandsManager,\n    configuration = {},\n    appConfig,\n  }) {\n    servicesManager.registerService(\n      MicroscopyService.REGISTRATION(servicesManager)\n    );\n  },\n\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    /**\n     *\n     * @param props {*}\n     * @param props.displaySets\n     * @param props.viewportIndex\n     * @param props.viewportLabel\n     * @param props.dataSource\n     * @param props.viewportOptions\n     * @param props.displaySetOptions\n     * @returns\n     */\n    const ExtendedMicroscopyViewport = props => {\n      const { viewportOptions } = props;\n\n      const [viewportGrid, viewportGridService] = useViewportGrid();\n      const { viewports, activeViewportIndex } = viewportGrid;\n\n      return (\n        <MicroscopyViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          activeViewportIndex={activeViewportIndex}\n          setViewportActive={(viewportIndex: number) => {\n            viewportGridService.setActiveViewportIndex(viewportIndex);\n          }}\n          viewportData={viewportOptions}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'microscopy-dicom',\n        component: ExtendedMicroscopyViewport,\n      },\n    ];\n  },\n\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule({\n    servicesManager,\n    commandsManager,\n    extensionManager,\n  }) {\n    return [\n      getDicomMicroscopySopClassHandler({\n        servicesManager,\n        extensionManager,\n      }),\n      getDicomMicroscopySRSopClassHandler({\n        servicesManager,\n        extensionManager,\n      }),\n    ];\n  },\n\n  getPanelModule,\n\n  getCommandsModule,\n};\n","import React from 'react';\nimport { ServicesManager, CommandsManager, ExtensionManager } from '@ohif/core';\nimport { useViewportGrid } from '@ohif/ui';\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nexport default function getPanelModule({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}: {\n  servicesManager: ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const wrappedMeasurementPanel = () => {\n    const [\n      { activeViewportIndex, viewports },\n      viewportGridService,\n    ] = useViewportGrid();\n\n    return (\n      <MicroscopyPanel\n        viewports={viewports}\n        activeViewportIndex={activeViewportIndex}\n        onSaveComplete={() => {}}\n        onRejectComplete={() => {}}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'measure',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      secondaryLabel: 'Measurements',\n      component: wrappedMeasurementPanel,\n    },\n  ];\n}\n","import { ServicesManager, CommandsManager, ExtensionManager } from '@ohif/core';\nimport styles from './utils/styles';\nimport callInputDialog from './utils/callInputDialog';\n\nexport default function getCommandsModule({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}: {\n  servicesManager: ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const {\n    viewportGridService,\n    uiDialogService,\n    microscopyService,\n  } = servicesManager.services;\n\n  const actions = {\n    // Measurement tool commands:\n    deleteMeasurement: ({ uid }) => {\n      if (uid) {\n        const roiAnnotation = microscopyService.getAnnotation(uid);\n        if (roiAnnotation) microscopyService.removeAnnotation(roiAnnotation);\n      }\n    },\n\n    setLabel: ({ uid }) => {\n      const roiAnnotation = microscopyService.getAnnotation(uid);\n\n      callInputDialog({\n        uiDialogService,\n        defaultValue: '',\n        callback: (value: string, action: string) => {\n          switch (action) {\n            case 'save': {\n              roiAnnotation.setLabel(value);\n              microscopyService.triggerRelabel(roiAnnotation);\n            }\n          }\n        },\n      });\n    },\n\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\n      const dragPanOnMiddle = [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ];\n      const dragZoomOnRight = [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ];\n      if (\n        [\n          'line',\n          'box',\n          'circle',\n          'point',\n          'polygon',\n          'freehandpolygon',\n          'freehandline',\n        ].indexOf(toolName) >= 0\n      ) {\n        // TODO: read from configuration\n        let options = {\n          geometryType: toolName,\n          vertexEnabled: true,\n          styleOptions: styles.default,\n          bindings: {\n            mouseButtons: ['left'],\n          },\n        } as any;\n        if ('line' === toolName) {\n          options.minPoints = 2;\n          options.maxPoints = 2;\n        } else if ('point' === toolName) {\n          delete options.styleOptions;\n          delete options.vertexEnabled;\n        }\n\n        microscopyService.activateInteractions([\n          ['draw', options],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      } else if (toolName == 'dragPan') {\n        microscopyService.activateInteractions([\n          [\n            'dragPan',\n            {\n              bindings: {\n                mouseButtons: ['left', 'middle'],\n              },\n            },\n          ],\n          dragZoomOnRight,\n        ]);\n      } else {\n        microscopyService.activateInteractions([\n          [\n            toolName,\n            {\n              bindings: {\n                mouseButtons: ['left'],\n              },\n            },\n          ],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      }\n    },\n\n    incrementActiveViewport: () => {\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      const nextViewportIndex = (activeViewportIndex + 1) % viewports.length;\n      viewportGridService.setActiveViewportIndex(nextViewportIndex);\n    },\n    decrementActiveViewport: () => {\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      const nextViewportIndex =\n        (activeViewportIndex - 1 + viewports.length) % viewports.length;\n      viewportGridService.setActiveViewportIndex(nextViewportIndex);\n    },\n\n    toggleOverlays: () => {\n      // overlay\n      const overlays = document.getElementsByClassName(\n        'microscopy-viewport-overlay'\n      );\n      let onoff = false; // true if this will toggle on\n      for (let i = 0; i < overlays.length; i++) {\n        if (i === 0) onoff = overlays.item(0).classList.contains('hidden');\n        overlays.item(i).classList.toggle('hidden');\n      }\n\n      // overview\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      microscopyService.toggleOverviewMap(activeViewportIndex);\n    },\n    toggleAnnotations: () => {\n      microscopyService.toggleROIsVisibility();\n    },\n  };\n\n  const definitions = {\n    deleteMeasurement: {\n      commandFn: actions.deleteMeasurement,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    setLabel: {\n      commandFn: actions.setLabel,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    setToolActive: {\n      commandFn: actions.setToolActive,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    incrementActiveViewport: {\n      commandFn: actions.incrementActiveViewport,\n      storeContexts: [] as any[],\n    },\n    decrementActiveViewport: {\n      commandFn: actions.decrementActiveViewport,\n      storeContexts: [] as any[],\n    },\n    toggleOverlays: {\n      commandFn: actions.toggleOverlays,\n      storeContexts: [] as any[],\n      options: {},\n    },\n    toggleAnnotations: {\n      commandFn: actions.toggleAnnotations,\n      storeContexts: [] as any[],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'MICROSCOPY',\n  };\n}\n"],"names":["id","packageJson","coordinateFormatScoord3d2Geometry","coordinates","pyramid","transform","Array","isArray","metadata","length","orientation","ImageOrientationSlide","spacing","PixelSpacing","functionalGroup","SharedFunctionalGroupsSequence","PixelMeasuresSequence","_getPixelSpacing","origin","TotalPixelMatrixOriginSequence","offset","Number","XOffsetInSlideCoordinateSystem","YOffsetInSlideCoordinateSystem","map","c","slideCoord","pixelCoord","options","Error","point","m","mInverted","inv","vSlide","vImage","multiply","row","toFixed","mapSlideCoord2PixelCoord","defaultFill","color","emptyFill","defaultStroke","width","activeStroke","active","image","circle","fill","stroke","radius","default","ApiEvents","ROI_ADDED","ROI_MODIFIED","ROI_REMOVED","ROI_DRAWN","ROI_SELECTED","MOVE_STARTED","MOVE_ENDED","LOADING_STARTED","LOADING_ENDED","LOADING_ERROR","FRAME_LOADING_STARTED","FRAME_LOADING_ENDED","FRAME_LOADING_ERROR","EVENTS","ADDED","MODIFIED","REMOVED","UPDATED","SELECTED","ViewerManager","PubSubService","constructor","viewer","viewportIndex","container","studyInstanceUID","seriesInstanceUID","super","this","onRoiAdded","roiAddedHandler","bind","onRoiModified","roiModifiedHandler","onRoiRemoved","roiRemovedHandler","onRoiSelected","roiSelectedHandler","contextMenuCallback","symbols","Object","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","registerEvents","activateDefaultInteractions","addContextMenuCallback","callback","destroy","unregisterEvents","publish","key","roiGraphic","_broadcastEvent","managedViewer","addEventListener","removeEventListener","event","detail","payload","runSilently","clearRoiGraphics","removeAllROIs","showROIs","hideROIs","addRoiGraphic","addROI","styles","addRoiGraphicWithLabel","label","setROIStyle","uid","styleOptions","removeRoiGraphic","removeROI","updateROIProperties","properties","updateROI","toggleOverviewMap","document","querySelector","preventDefault","activateInteractions","bindings","mouseButtons","interactions","interactionsMap","draw","activate","modify","translate","snap","dragPan","dragZoom","select","keys","forEach","availableInteractionName","interaction","name","config","activateInteractionMethod","deactivateInteractionMethod","_getMapView","_getMap","getView","s","String","window","getViewState","view","center","getCenter","resolution","getResolution","zoom","getZoom","setViewState","viewState","setZoom","setResolution","setCenter","setViewStateByExtent","roiAnnotation","getCoordinates","_jumpToPolyline","_jumpToPolygonOrEllipse","_jumpToPoint","coord","mappedCoord","x","y","midpoint","minX","Infinity","maxX","minY","maxY","height","fit","getSize","LABEL_UPDATED","GRAPHIC_UPDATED","VIEW_UPDATED","RoiAnnotation","setMeasurements","getScoord3d","scoord3d","setRoiGraphic","type","graphicType","graphicData","point1","point2","xLength2","yLength2","Math","sqrt","areaEllipse","PI","_area","_length","undefined","areaPolygon","n","area","j","i","abs","areaOfPolygon","len","p1","p2","xLen","yLen","setLabel","finding","CodeMeaning","CodingSchemeDesignator","CodeValue","getLabel","getDetailedLabel","getLength","getArea","ANNOTATION_UPDATED","ANNOTATION_SELECTED","ANNOTATION_REMOVED","RELABEL","DELETE","MicroscopyService","serviceManager","managedViewers","Set","roiUids","annotations","selectedAnnotation","pendingFocus","_onRoiAdded","_onRoiModified","_onRoiRemoved","_onRoiUpdated","_onRoiSelected","isROIsVisible","clear","clearAnnotations","removeAnnotation","data","add","subscribe","AnnotationEvents","onRelabel","item","triggerRelabel","getAnnotation","delete","synchronizeViewers","getSelectedAnnotation","clearSelection","_addManagedViewerSubscriptions","_roiAddedSubscription","ViewerEvents","_roiModifiedSubscription","_roiRemovedSubscription","_roiUpdatedSubscription","_roiSelectedSubscription","_removeManagedViewerSubscriptions","unsubscribe","_getManagedViewersForSeries","from","filter","getManagedViewersForStudy","_restoreAnnotations","getAnnotationsForSeries","addViewer","_manager","focusAnnotation","_potentiallyLoadSR","StudyInstanceUID","displaySets","studyMetadata","DicomMetadataStore","getStudy","smDisplaySet","ds","Modality","FrameOfReferenceUID","othersFrameOfReferenceUID","derivedDisplaySets","ReferencedFrameOfReferenceUID","includes","some","isLoaded","recentDateTime","recentDisplaySet","dateTime","SeriesDate","SeriesTime","isLoading","load","removeViewer","toggleROIsVisibility","mv","getAnnotations","push","getAnnotationsForStudy","a","annotation","selectAnnotation","baseManagedViewer","activeInteractions","newAnnotation","deleteCallback","successCallback","triggerDelete","_MicroscopyService","REGISTRATION","altName","create","configuration","callInputDialog","uiDialogService","title","defaultValue","value","action","dialogId","onSubmitHandler","dismiss","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","persist","target","onKeyPress","datasetToBuffer","dcmjs","formatLength","unit","mult","connectedMicroscopyPanel","withTranslation","props","microscopyService","servicesManager","services","setStudyInstanceUID","useState","roiAnnotations","setRoiAnnotations","setSelectedAnnotation","extensionManager","displaySetService","useEffect","viewport","viewports","activeViewportIndex","displaySetInstanceUIDs","displaySet","getDisplaySetByUID","onAnnotationUpdated","onAnnotationSelected","unsubscribeAnnotationUpdated","MicroscopyEvents","unsubscribeAnnotationSelected","unsubscribeAnnotationRemoved","onAnnotationRemoved","index","shortAxisLength","isSelected","displayText","formatArea","isActive","MeasurementTable","onClick","onMeasurementItemClickHandler","onEdit","onMeasurementItemEditHandler","commandsManager","runCommand","ButtonGroup","size","utils","OHIF","SOP_CLASS_UIDS","SOPClassHandlerId","getDicomMicroscopySopClassHandler","sopClassUids","getDisplaySetsFromSeries","instances","instance","singleFrameInstance","currentFrames","NumberOfFrames","instanceI","framesI","imageIdForThumbnail","imageId","getActiveDataSource","getImageIdsForInstance","thumbnail","SeriesDescription","ContentDate","ContentTime","SeriesNumber","SeriesInstanceUID","SOPInstanceUID","SOPClassUID","inst","v","array","indexOf","console","warn","plugin","altImageText","displaySetInstanceUID","guid","firstInstance","numImageFrames","numInstances","others","_getDisplaySetsFromSeries","IMAGING_MEASUREMENTS","MEASUREMENT_GROUP","IMAGE_REGION","FINDING","TRACKING_UNIQUE_IDENTIFIER","LENGTH","AREA","SHORT_AXIS","LONG_AXIS","ELLIPSE_AREA","toArray","MeasurementReport","DICOMMicroscopyViewer","async","loadSR","microscopySRDisplaySet","referencedDisplaySet","naturalizedDataset","rois","labels","toolState","generateToolState","tools","getOwnPropertyNames","measurementGroupContentItems","ContentSequence","ci","ConceptNameCodeSequence","DCM_CODE_VALUES","_getMeasurementGroups","t","toolSpecificToolState","capsToolType","toUpperCase","measurementGroupContentItemsForTool","mg","GraphicType","frameOfReferenceUID","Polygon","Polyline","Point","Ellipse","measurementGroup","findingGroup","trackingGroup","matches","exec","TextValue","presentationState","JSON","parse","marker","measurements","evaluations","evaluation","e","measurement","debug","roi","ROI","ConceptCodeSequence","_getROIsFromToolState","getSeries","firstMeasurementGroupContentItem","_getReferencedFrameOfReferenceUID","isDerived","loadError","catch","error","getSourceDisplaySet","allDisplaySets","series","getDisplaySetsForSeries","concat","otherDisplaySets","getDicomMicroscopySRSopClassHandler","Component","MicroscopyViewport","Suspense","fallback","preRegistration","appConfig","registerService","getViewportModule","component","viewportOptions","viewportGrid","viewportGridService","useViewportGrid","_extends","setViewportActive","setActiveViewportIndex","viewportData","getSopClassHandlerModule","getPanelModule","iconName","iconLabel","secondaryLabel","wrappedMeasurementPanel","MicroscopyPanel","onSaveComplete","onRejectComplete","getCommandsModule","deleteMeasurement","setToolActive","toolName","toolGroupId","dragPanOnMiddle","dragZoomOnRight","geometryType","vertexEnabled","minPoints","maxPoints","incrementActiveViewport","getState","nextViewportIndex","decrementActiveViewport","toggleOverlays","overlays","getElementsByClassName","onoff","classList","contains","toggle","toggleAnnotations","definitions","commandFn","storeContexts","defaultContext"],"sourceRoot":""}