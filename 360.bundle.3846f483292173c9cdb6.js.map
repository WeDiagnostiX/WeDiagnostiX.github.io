{"version":3,"file":"360.bundle.3846f483292173c9cdb6.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/id.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/constants/scoordTypes.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/DICOMSRDisplayTool.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/toolNames.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/addDICOMSRDisplayAnnotation.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/isRehydratable.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getFilteredCornerstoneToolState.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/addToolInstance.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-sr/src/onModeEnter.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/init.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/createReferencedImageDisplaySet.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/hydrateStructuredReport.ts","webpack:///../../../extensions/cornerstone-dicom-sr/src/utils/getLabelFromDCMJSImportedToolData.js","webpack:///../../../extensions/cornerstone-dicom-sr/src/tools/modules/dicomSRModule.js"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nconst SOPClassHandlerName = 'dicom-sr';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { SOPClassHandlerName, SOPClassHandlerId, id };\n","export default {\n  POINT: 'POINT',\n  MULTIPOINT: 'MULTIPOINT',\n  POLYLINE: 'POLYLINE',\n  CIRCLE: 'CIRCLE',\n  ELLIPSE: 'ELLIPSE',\n};\n","import { Types, metaData, utilities as csUtils } from '@cornerstonejs/core';\nimport {\n  AnnotationTool,\n  annotation,\n  drawing,\n  utilities,\n  Types as cs3DToolsTypes,\n} from '@cornerstonejs/tools';\nimport { getTrackingUniqueIdentifiersForElement } from './modules/dicomSRModule';\nimport SCOORD_TYPES from '../constants/scoordTypes';\n\nexport default class DICOMSRDisplayTool extends AnnotationTool {\n  static toolName = 'DICOMSRDisplay';\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getTextBoxLinesFromLabels(labels) {\n    // TODO -> max 5 for now (label + shortAxis + longAxis), need a generic solution for this!\n\n    const labelLength = Math.min(labels.length, 5);\n    const lines = [];\n\n    for (let i = 0; i < labelLength; i++) {\n      const labelEntry = labels[i];\n      lines.push(`${_labelToShorthand(labelEntry.label)}: ${labelEntry.value}`);\n    }\n\n    return lines;\n  }\n\n  // This tool should not inherit from AnnotationTool and we should not need\n  // to add the following lines.\n  isPointNearTool = () => null;\n  getHandleNearImagePoint = () => null;\n\n  renderAnnotation = (enabledElement: Types.IEnabledElement, svgDrawingHelper: any): void => {\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = annotation.state.getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const trackingUniqueIdentifiersForElement = getTrackingUniqueIdentifiersForElement(element);\n\n    const { activeIndex, trackingUniqueIdentifiers } = trackingUniqueIdentifiersForElement;\n\n    const activeTrackingUniqueIdentifier = trackingUniqueIdentifiers[activeIndex];\n\n    // Filter toolData to only render the data for the active SR.\n    const filteredAnnotations = annotations.filter(annotation =>\n      trackingUniqueIdentifiers.includes(annotation.data?.TrackingUniqueIdentifier)\n    );\n\n    if (!viewport._actors?.size) {\n      return;\n    }\n\n    const styleSpecifier: cs3DToolsTypes.AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n    const { style: annotationStyle } = annotation.config;\n\n    for (let i = 0; i < filteredAnnotations.length; i++) {\n      const annotation = filteredAnnotations[i];\n      const annotationUID = annotation.annotationUID;\n      const { renderableData, TrackingUniqueIdentifier } = annotation.data;\n      const { referencedImageId } = annotation.metadata;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const groupStyle = annotationStyle.getToolGroupToolStyles(this.toolGroupId)[\n        this.getToolName()\n      ];\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color =\n        TrackingUniqueIdentifier === activeTrackingUniqueIdentifier\n          ? 'rgb(0, 255, 0)'\n          : this.getStyle('color', styleSpecifier, annotation);\n\n      const options = {\n        color,\n        lineDash,\n        lineWidth,\n        ...groupStyle,\n      };\n\n      Object.keys(renderableData).forEach(GraphicType => {\n        const renderableDataForGraphicType = renderableData[GraphicType];\n\n        let renderMethod;\n        let canvasCoordinatesAdapter;\n\n        switch (GraphicType) {\n          case SCOORD_TYPES.POINT:\n            renderMethod = this.renderPoint;\n            break;\n          case SCOORD_TYPES.MULTIPOINT:\n            renderMethod = this.renderMultipoint;\n            break;\n          case SCOORD_TYPES.POLYLINE:\n            renderMethod = this.renderPolyLine;\n            break;\n          case SCOORD_TYPES.CIRCLE:\n            renderMethod = this.renderEllipse;\n            break;\n          case SCOORD_TYPES.ELLIPSE:\n            renderMethod = this.renderEllipse;\n            canvasCoordinatesAdapter = utilities.math.ellipse.getCanvasEllipseCorners;\n            break;\n          default:\n            throw new Error(`Unsupported GraphicType: ${GraphicType}`);\n        }\n\n        const canvasCoordinates = renderMethod(\n          svgDrawingHelper,\n          viewport,\n          renderableDataForGraphicType,\n          annotationUID,\n          referencedImageId,\n          options\n        );\n\n        this.renderTextBox(\n          svgDrawingHelper,\n          viewport,\n          canvasCoordinates,\n          canvasCoordinatesAdapter,\n          annotation,\n          styleSpecifier,\n          options\n        );\n      });\n    }\n  };\n\n  renderPolyLine(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    const drawingOptions = {\n      color: options.color,\n      width: options.lineWidth,\n      lineDash: options.lineDash,\n    };\n    let allCanvasCoordinates = [];\n    renderableData.map((data, index) => {\n      const canvasCoordinates = data.map(p => viewport.worldToCanvas(p));\n      const lineUID = `${index}`;\n\n      if (canvasCoordinates.length === 2) {\n        drawing.drawLine(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          drawingOptions\n        );\n      } else {\n        drawing.drawPolyline(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          canvasCoordinates,\n          drawingOptions\n        );\n      }\n\n      allCanvasCoordinates = allCanvasCoordinates.concat(canvasCoordinates);\n    });\n\n    return allCanvasCoordinates; // used for drawing textBox\n  }\n\n  renderMultipoint(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    let canvasCoordinates;\n    renderableData.map((data, index) => {\n      canvasCoordinates = data.map(p => viewport.worldToCanvas(p));\n      const handleGroupUID = '0';\n      drawing.drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n        color: options.color,\n      });\n    });\n  }\n\n  renderPoint(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    const canvasCoordinates = [];\n    renderableData.map((data, index) => {\n      const point = data[0];\n      // This gives us one point for arrow\n      canvasCoordinates.push(viewport.worldToCanvas(point));\n\n      // We get the other point for the arrow by using the image size\n      const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n\n      let xOffset = 10;\n      let yOffset = 10;\n\n      if (imagePixelModule) {\n        const { columns, rows } = imagePixelModule;\n        xOffset = columns / 10;\n        yOffset = rows / 10;\n      }\n\n      const imagePoint = csUtils.worldToImageCoords(referencedImageId, point);\n      const arrowEnd = csUtils.imageToWorldCoords(referencedImageId, [\n        imagePoint[0] + xOffset,\n        imagePoint[1] + yOffset,\n      ]);\n\n      canvasCoordinates.push(viewport.worldToCanvas(arrowEnd));\n\n      const arrowUID = `${index}`;\n\n      // Todo: handle drawing probe as probe, currently we are drawing it as an arrow\n      drawing.drawArrow(\n        svgDrawingHelper,\n        annotationUID,\n        arrowUID,\n        canvasCoordinates[1],\n        canvasCoordinates[0],\n        {\n          color: options.color,\n          width: options.lineWidth,\n        }\n      );\n    });\n\n    return canvasCoordinates; // used for drawing textBox\n  }\n\n  renderEllipse(\n    svgDrawingHelper,\n    viewport,\n    renderableData,\n    annotationUID,\n    referencedImageId,\n    options\n  ) {\n    let canvasCoordinates;\n    renderableData.map((data, index) => {\n      if (data.length === 0) {\n        // since oblique ellipse is not supported for hydration right now\n        // we just return\n        return;\n      }\n\n      const ellipsePointsWorld = data;\n\n      const rotation = viewport.getRotation();\n\n      canvasCoordinates = ellipsePointsWorld.map(p => viewport.worldToCanvas(p));\n      let canvasCorners;\n      if (rotation == 90 || rotation == 270) {\n        canvasCorners = utilities.math.ellipse.getCanvasEllipseCorners([\n          canvasCoordinates[2],\n          canvasCoordinates[3],\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n        ]) as Array<Types.Point2>;\n      } else {\n        canvasCorners = utilities.math.ellipse.getCanvasEllipseCorners(\n          canvasCoordinates\n        ) as Array<Types.Point2>;\n      }\n\n      const lineUID = `${index}`;\n      drawing.drawEllipse(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCorners[0],\n        canvasCorners[1],\n        {\n          color: options.color,\n          width: options.lineWidth,\n          lineDash: options.lineDash,\n        }\n      );\n    });\n\n    return canvasCoordinates;\n  }\n\n  renderTextBox(\n    svgDrawingHelper,\n    viewport,\n    canvasCoordinates,\n    canvasCoordinatesAdapter,\n    annotation,\n    styleSpecifier,\n    options = {}\n  ) {\n    if (!canvasCoordinates || !annotation) {\n      return;\n    }\n\n    const { annotationUID, data = {} } = annotation;\n    const { label } = data;\n    const { color } = options;\n\n    let adaptedCanvasCoordinates = canvasCoordinates;\n    // adapt coordinates if there is an adapter\n    if (typeof canvasCoordinatesAdapter === 'function') {\n      adaptedCanvasCoordinates = canvasCoordinatesAdapter(canvasCoordinates);\n    }\n    const textLines = this._getTextBoxLinesFromLabels(label);\n    const canvasTextBoxCoords = utilities.drawing.getTextBoxCoordsCanvas(adaptedCanvasCoordinates);\n\n    if (!annotation.data?.handles?.textBox?.worldPosition) {\n      annotation.data.handles.textBox.worldPosition = viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(annotation.data.handles.textBox.worldPosition);\n\n    const textBoxUID = '1';\n    const textBoxOptions = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n\n    const boundingBox = drawing.drawLinkedTextBox(\n      svgDrawingHelper,\n      annotationUID,\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      {\n        ...textBoxOptions,\n        color,\n      }\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    annotation.data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  }\n}\n\nconst SHORT_HAND_MAP = {\n  'Short Axis': 'W: ',\n  'Long Axis': 'L: ',\n  AREA: 'Area: ',\n  Length: '',\n  CORNERSTONEFREETEXT: '',\n};\n\nfunction _labelToShorthand(label) {\n  const shortHand = SHORT_HAND_MAP[label];\n\n  if (shortHand !== undefined) {\n    return shortHand;\n  }\n\n  return label;\n}\n","import DICOMSRDisplayTool from './DICOMSRDisplayTool';\n\nconst toolNames = {\n  DICOMSRDisplay: DICOMSRDisplayTool.toolName,\n  SRLength: 'SRLength',\n  SRBidirectional: 'SRBidirectional',\n  SREllipticalROI: 'SREllipticalROI',\n  SRCircleROI: 'SRCircleROI',\n  SRArrowAnnotate: 'SRArrowAnnotate',\n  SRAngle: 'SRAngle',\n  SRCobbAngle: 'SRCobbAngle',\n  SRRectangleROI: 'SRRectangleROI',\n  SRPlanarFreehandROI: 'SRPlanarFreehandROI',\n};\n\nexport default toolNames;\n","import { vec3 } from 'gl-matrix';\nimport { Types, annotation } from '@cornerstonejs/tools';\nimport { metaData, utilities, Types as csTypes } from '@cornerstonejs/core';\n\nimport toolNames from '../tools/toolNames';\nimport SCOORD_TYPES from '../constants/scoordTypes';\n\nconst EPSILON = 1e-4;\n\nexport default function addDICOMSRDisplayAnnotation(measurement, imageId, frameNumber) {\n  const toolName = toolNames.DICOMSRDisplay;\n\n  const measurementData = {\n    TrackingUniqueIdentifier: measurement.TrackingUniqueIdentifier,\n    renderableData: {},\n    labels: measurement.labels,\n    imageId,\n  };\n\n  measurement.coords.forEach(coord => {\n    const { GraphicType, GraphicData } = coord;\n\n    if (measurementData.renderableData[GraphicType] === undefined) {\n      measurementData.renderableData[GraphicType] = [];\n    }\n\n    measurementData.renderableData[GraphicType].push(\n      _getRenderableData(GraphicType, GraphicData, imageId)\n    );\n  });\n\n  const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n\n  /**\n   * This annotation (DICOMSRDisplay) is only used by the SR viewport.\n   * This is used before the annotation is hydrated. If hydrated the measurement will be added\n   * to the measurement service and will be available for the other viewports.\n   */\n  const SRAnnotation: Types.Annotation = {\n    annotationUID: measurement.TrackingUniqueIdentifier,\n    highlighted: false,\n    isLocked: false,\n    invalidated: false,\n    metadata: {\n      toolName: toolName,\n      FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n      referencedImageId: imageId,\n    },\n    data: {\n      label: measurement.labels,\n      handles: {\n        textBox: measurement.textBox ?? {},\n      },\n      cachedStats: {},\n      TrackingUniqueIdentifier: measurementData.TrackingUniqueIdentifier,\n      renderableData: measurementData.renderableData,\n      frameNumber,\n    },\n  };\n  const annotationManager = annotation.state.getAnnotationManager();\n  annotationManager.addAnnotation(SRAnnotation);\n}\n\nfunction _getRenderableData(GraphicType, GraphicData, imageId) {\n  let renderableData: csTypes.Point3[];\n\n  switch (GraphicType) {\n    case SCOORD_TYPES.POINT:\n    case SCOORD_TYPES.MULTIPOINT:\n    case SCOORD_TYPES.POLYLINE:\n      renderableData = [];\n\n      for (let i = 0; i < GraphicData.length; i += 2) {\n        const worldPos = utilities.imageToWorldCoords(imageId, [\n          GraphicData[i],\n          GraphicData[i + 1],\n        ]);\n\n        renderableData.push(worldPos);\n      }\n\n      break;\n    case SCOORD_TYPES.CIRCLE: {\n      const pointsWorld = [];\n      for (let i = 0; i < GraphicData.length; i += 2) {\n        const worldPos = utilities.imageToWorldCoords(imageId, [\n          GraphicData[i],\n          GraphicData[i + 1],\n        ]);\n\n        pointsWorld.push(worldPos);\n      }\n\n      // We do not have an explicit draw circle svg helper in Cornerstone3D at\n      // this time, but we can use the ellipse svg helper to draw a circle, so\n      // here we reshape the data for that purpose.\n      const center = pointsWorld[0];\n      const onPerimeter = pointsWorld[1];\n\n      const radius = vec3.distance(center, onPerimeter);\n\n      const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n\n      if (!imagePlaneModule) {\n        throw new Error('No imagePlaneModule found');\n      }\n\n      const {\n        columnCosines,\n        rowCosines,\n      }: {\n        columnCosines: csTypes.Point3;\n        rowCosines: csTypes.Point3;\n      } = imagePlaneModule;\n\n      // we need to get major/minor axis (which are both the same size major = minor)\n\n      // first axisStart\n      const firstAxisStart = vec3.create();\n      vec3.scaleAndAdd(firstAxisStart, center, columnCosines, radius);\n\n      const firstAxisEnd = vec3.create();\n      vec3.scaleAndAdd(firstAxisEnd, center, columnCosines, -radius);\n\n      // second axisStart\n      const secondAxisStart = vec3.create();\n      vec3.scaleAndAdd(secondAxisStart, center, rowCosines, radius);\n\n      const secondAxisEnd = vec3.create();\n      vec3.scaleAndAdd(secondAxisEnd, center, rowCosines, -radius);\n\n      renderableData = [\n        firstAxisStart as csTypes.Point3,\n        firstAxisEnd as csTypes.Point3,\n        secondAxisStart as csTypes.Point3,\n        secondAxisEnd as csTypes.Point3,\n      ];\n\n      break;\n    }\n    case SCOORD_TYPES.ELLIPSE: {\n      // GraphicData is ordered as [majorAxisStartX, majorAxisStartY, majorAxisEndX, majorAxisEndY, minorAxisStartX, minorAxisStartY, minorAxisEndX, minorAxisEndY]\n      // But Cornerstone3D points are ordered as top, bottom, left, right for the\n      // ellipse so we need to identify if the majorAxis is horizontal or vertical\n      // and then choose the correct points to use for the ellipse.\n\n      const pointsWorld: csTypes.Point3[] = [];\n      for (let i = 0; i < GraphicData.length; i += 2) {\n        const worldPos = utilities.imageToWorldCoords(imageId, [\n          GraphicData[i],\n          GraphicData[i + 1],\n        ]);\n\n        pointsWorld.push(worldPos);\n      }\n\n      const majorAxisStart = vec3.fromValues(...pointsWorld[0]);\n      const majorAxisEnd = vec3.fromValues(...pointsWorld[1]);\n      const minorAxisStart = vec3.fromValues(...pointsWorld[2]);\n      const minorAxisEnd = vec3.fromValues(...pointsWorld[3]);\n\n      const majorAxisVec = vec3.create();\n      vec3.sub(majorAxisVec, majorAxisEnd, majorAxisStart);\n\n      // normalize majorAxisVec to avoid scaling issues\n      vec3.normalize(majorAxisVec, majorAxisVec);\n\n      const minorAxisVec = vec3.create();\n      vec3.sub(minorAxisVec, minorAxisEnd, minorAxisStart);\n      vec3.normalize(minorAxisVec, minorAxisVec);\n\n      const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n\n      if (!imagePlaneModule) {\n        throw new Error('imageId does not have imagePlaneModule metadata');\n      }\n\n      const { columnCosines }: { columnCosines: csTypes.Point3 } = imagePlaneModule;\n\n      // find which axis is parallel to the columnCosines\n      const columnCosinesVec = vec3.fromValues(...columnCosines);\n\n      const projectedMajorAxisOnColVec = Math.abs(vec3.dot(columnCosinesVec, majorAxisVec));\n      const projectedMinorAxisOnColVec = Math.abs(vec3.dot(columnCosinesVec, minorAxisVec));\n\n      const absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);\n      const absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);\n\n      renderableData = [];\n      if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON) {\n        renderableData = [pointsWorld[0], pointsWorld[1], pointsWorld[2], pointsWorld[3]];\n      } else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON) {\n        renderableData = [pointsWorld[2], pointsWorld[3], pointsWorld[0], pointsWorld[1]];\n      } else {\n        console.warn('OBLIQUE ELLIPSE NOT YET SUPPORTED');\n      }\n      break;\n    }\n    default:\n      console.warn('Unsupported GraphicType:', GraphicType);\n  }\n\n  return renderableData;\n}\n","import { adaptersSR } from '@cornerstonejs/adapters';\n\nconst cornerstoneAdapters =\n  adaptersSR.Cornerstone3D.MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n\nconst supportedLegacyCornerstoneTags = ['cornerstoneTools@^4.0.0'];\nconst CORNERSTONE_3D_TAG = cornerstoneAdapters.CORNERSTONE_3D_TAG;\n\n/**\n * Checks if the given `displaySet`can be rehydrated into the `measurementService`.\n *\n * @param {object} displaySet The SR `displaySet` to check.\n * @param {object[]} mappings The CornerstoneTools 4 mappings to the `measurementService`.\n * @returns {boolean} True if the SR can be rehydrated into the `measurementService`.\n */\nexport default function isRehydratable(displaySet, mappings) {\n  if (!mappings || !mappings.length) {\n    return false;\n  }\n\n  const mappingDefinitions = mappings.map(m => m.annotationType);\n  const { measurements } = displaySet;\n\n  const adapterKeys = Object.keys(cornerstoneAdapters).filter(\n    adapterKey =>\n      typeof cornerstoneAdapters[adapterKey].isValidCornerstoneTrackingIdentifier === 'function'\n  );\n\n  const adapters = [];\n\n  adapterKeys.forEach(key => {\n    if (mappingDefinitions.includes(key)) {\n      // Must have both a dcmjs adapter and a measurementService\n      // Definition in order to be a candidate for import.\n      adapters.push(cornerstoneAdapters[key]);\n    }\n  });\n\n  for (let i = 0; i < measurements.length; i++) {\n    const { TrackingIdentifier } = measurements[i] || {};\n    const hydratable = adapters.some(adapter => {\n      let [cornerstoneTag, toolName] = TrackingIdentifier.split(':');\n      if (supportedLegacyCornerstoneTags.includes(cornerstoneTag)) {\n        cornerstoneTag = CORNERSTONE_3D_TAG;\n      }\n\n      const mappedTrackingIdentifier = `${cornerstoneTag}:${toolName}`;\n\n      return adapter.isValidCornerstoneTrackingIdentifier(mappedTrackingIdentifier);\n    });\n\n    if (hydratable) {\n      return true;\n    }\n    console.log('Measurement is not rehydratable', TrackingIdentifier, measurements[i]);\n  }\n\n  console.log('No measurements found which were rehydratable');\n  return false;\n}\n","import { SOPClassHandlerName, SOPClassHandlerId } from './id';\nimport { utils, classes, DisplaySetService, Types } from '@ohif/core';\nimport addDICOMSRDisplayAnnotation from './utils/addDICOMSRDisplayAnnotation';\nimport isRehydratable from './utils/isRehydratable';\nimport { adaptersSR } from '@cornerstonejs/adapters';\n\ntype InstanceMetadata = Types.InstanceMetadata;\n\nconst { CodeScheme: Cornerstone3DCodeScheme } = adaptersSR.Cornerstone3D;\n\nconst { ImageSet, MetadataProvider: metadataProvider } = classes;\n\n// TODO ->\n// Add SR thumbnail\n// Make viewport\n// Get stacks from referenced displayInstanceUID and load into wrapped CornerStone viewport.\n\nconst sopClassUids = [\n  '1.2.840.10008.5.1.4.1.1.88.11', //BASIC_TEXT_SR:\n  '1.2.840.10008.5.1.4.1.1.88.22', //ENHANCED_SR:\n  '1.2.840.10008.5.1.4.1.1.88.33', //COMPREHENSIVE_SR:\n  '1.2.840.10008.5.1.4.1.1.88.34', //COMPREHENSIVE_3D_SR:\n];\n\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n\nconst validateSameStudyUID = (uid: string, instances): void => {\n  instances.forEach(it => {\n    if (it.StudyInstanceUID !== uid) {\n      console.warn('Not all instances have the same UID', uid, it);\n      throw new Error(`Instances ${it.SOPInstanceUID} does not belong to ${uid}`);\n    }\n  });\n};\n\nconst CodeNameCodeSequenceValues = {\n  ImagingMeasurementReport: '126000',\n  ImageLibrary: '111028',\n  ImagingMeasurements: '126010',\n  MeasurementGroup: '125007',\n  ImageLibraryGroup: '126200',\n  TrackingUniqueIdentifier: '112040',\n  TrackingIdentifier: '112039',\n  Finding: '121071',\n  FindingSite: 'G-C0E3', // SRT\n  CornerstoneFreeText: Cornerstone3DCodeScheme.codeValues.CORNERSTONEFREETEXT, //\n};\n\nconst CodingSchemeDesignators = {\n  SRT: 'SRT',\n  CornerstoneCodeSchemes: [Cornerstone3DCodeScheme.CodingSchemeDesignator, 'CST4'],\n};\n\nconst RELATIONSHIP_TYPE = {\n  INFERRED_FROM: 'INFERRED FROM',\n  CONTAINS: 'CONTAINS',\n};\n\nconst CORNERSTONE_FREETEXT_CODE_VALUE = 'CORNERSTONEFREETEXT';\n\n/**\n * Adds instances to the DICOM SR series, rather than creating a new\n * series, so that as SR's are saved, they append to the series, and the\n * key image display set gets updated as well, containing just the new series.\n * @param instances is a list of instances from THIS series that are not\n *     in this DICOM SR Display Set already.\n */\nfunction addInstances(instances: InstanceMetadata[], displaySetService: DisplaySetService) {\n  this.instances.push(...instances);\n  utils.sortStudyInstances(this.instances);\n  // The last instance is the newest one, so is the one most interesting.\n  // Eventually, the SR viewer should have the ability to choose which SR\n  // gets loaded, and to navigate among them.\n  this.instance = this.instances[this.instances.length - 1];\n  this.isLoaded = false;\n  return this;\n}\n\n/**\n * DICOM SR SOP Class Handler\n * For all referenced images in the TID 1500/300 sections, add an image to the\n * display.\n * @param instances is a set of instances all from the same series\n * @param servicesManager is the services that can be used for creating\n * @returns The list of display sets created for the given instances object\n */\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  utils.sortStudyInstances(instances);\n  // The last instance is the newest one, so is the one most interesting.\n  // Eventually, the SR viewer should have the ability to choose which SR\n  // gets loaded, and to navigate among them.\n  const instance = instances[instances.length - 1];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    ConceptNameCodeSequence,\n    SOPClassUID,\n  } = instance;\n  validateSameStudyUID(instance.StudyInstanceUID, instances);\n\n  if (\n    !ConceptNameCodeSequence ||\n    ConceptNameCodeSequence.CodeValue !== CodeNameCodeSequenceValues.ImagingMeasurementReport\n  ) {\n    servicesManager.services.uiNotificationService.show({\n      title: 'DICOM SR',\n      message:\n        'OHIF only supports TID1500 Imaging Measurement Report Structured Reports. The SR you’re trying to view is not supported.',\n      type: 'warning',\n      duration: 6000,\n    });\n    return [];\n  }\n\n  const displaySet = {\n    //plugin: id,\n    Modality: 'SR',\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    instances,\n    referencedImages: null,\n    measurements: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    sopClassUids,\n    instance,\n    addInstances,\n  };\n\n  displaySet.load = () => _load(displaySet, servicesManager, extensionManager);\n\n  return [displaySet];\n}\n\nasync function _load(displaySet, servicesManager: AppTypes.ServicesManager, extensionManager) {\n  const { displaySetService, measurementService } = servicesManager.services;\n  const dataSources = extensionManager.getDataSources();\n  const dataSource = dataSources[0];\n\n  const { ContentSequence } = displaySet.instance;\n\n  async function retrieveBulkData(obj, parentObj = null, key = null) {\n    for (const prop in obj) {\n      if (typeof obj[prop] === 'object' && obj[prop] !== null) {\n        await retrieveBulkData(obj[prop], obj, prop);\n      } else if (Array.isArray(obj[prop])) {\n        await Promise.all(obj[prop].map(item => retrieveBulkData(item, obj, prop)));\n      } else if (prop === 'BulkDataURI') {\n        const value = await dataSource.retrieve.bulkDataURI({\n          BulkDataURI: obj[prop],\n          StudyInstanceUID: displaySet.instance.StudyInstanceUID,\n          SeriesInstanceUID: displaySet.instance.SeriesInstanceUID,\n          SOPInstanceUID: displaySet.instance.SOPInstanceUID,\n        });\n        if (parentObj && key) {\n          parentObj[key] = new Float32Array(value);\n        }\n      }\n    }\n  }\n\n  if (displaySet.isLoaded !== true) {\n    await retrieveBulkData(ContentSequence);\n  }\n\n  displaySet.referencedImages = _getReferencedImagesList(ContentSequence);\n  displaySet.measurements = _getMeasurements(ContentSequence);\n\n  const mappings = measurementService.getSourceMappings(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  displaySet.isHydrated = false;\n  displaySet.isRehydratable = isRehydratable(displaySet, mappings);\n  displaySet.isLoaded = true;\n\n  // Check currently added displaySets and add measurements if the sources exist.\n  displaySetService.activeDisplaySets.forEach(activeDisplaySet => {\n    _checkIfCanAddMeasurementsToDisplaySet(\n      displaySet,\n      activeDisplaySet,\n      dataSource,\n      servicesManager\n    );\n  });\n\n  // Subscribe to new displaySets as the source may come in after.\n  displaySetService.subscribe(displaySetService.EVENTS.DISPLAY_SETS_ADDED, data => {\n    const { displaySetsAdded } = data;\n    // If there are still some measurements that have not yet been loaded into cornerstone,\n    // See if we can load them onto any of the new displaySets.\n    displaySetsAdded.forEach(newDisplaySet => {\n      _checkIfCanAddMeasurementsToDisplaySet(\n        displaySet,\n        newDisplaySet,\n        dataSource,\n        servicesManager\n      );\n    });\n  });\n}\n\nfunction _checkIfCanAddMeasurementsToDisplaySet(\n  srDisplaySet,\n  newDisplaySet,\n  dataSource,\n  servicesManager: AppTypes.ServicesManager\n) {\n  const { customizationService } = servicesManager.services;\n  let unloadedMeasurements = srDisplaySet.measurements.filter(\n    measurement => measurement.loaded === false\n  );\n\n  if (unloadedMeasurements.length === 0) {\n    // All already loaded!\n    return;\n  }\n\n  if ((!newDisplaySet) instanceof ImageSet) {\n    // This also filters out _this_ displaySet, as it is not an ImageSet.\n    return;\n  }\n\n  if (newDisplaySet.unsupported) {\n    return;\n  }\n\n  const { sopClassUids } = newDisplaySet;\n\n  // Check if any have the newDisplaySet is the correct SOPClass.\n  unloadedMeasurements = unloadedMeasurements.filter(measurement =>\n    measurement.coords.some(coord =>\n      sopClassUids.includes(coord.ReferencedSOPSequence.ReferencedSOPClassUID)\n    )\n  );\n\n  if (unloadedMeasurements.length === 0) {\n    // New displaySet isn't the correct SOPClass, so can't contain the referenced images.\n    return;\n  }\n\n  const SOPInstanceUIDs = [];\n\n  unloadedMeasurements.forEach(measurement => {\n    const { coords } = measurement;\n\n    coords.forEach(coord => {\n      const SOPInstanceUID = coord.ReferencedSOPSequence.ReferencedSOPInstanceUID;\n\n      if (!SOPInstanceUIDs.includes(SOPInstanceUID)) {\n        SOPInstanceUIDs.push(SOPInstanceUID);\n      }\n    });\n  });\n\n  const imageIdsForDisplaySet = dataSource.getImageIdsForDisplaySet(newDisplaySet);\n\n  for (const imageId of imageIdsForDisplaySet) {\n    if (!unloadedMeasurements.length) {\n      // All measurements loaded.\n      return;\n    }\n\n    const { SOPInstanceUID, frameNumber } = metadataProvider.getUIDsFromImageID(imageId);\n\n    if (SOPInstanceUIDs.includes(SOPInstanceUID)) {\n      for (let j = unloadedMeasurements.length - 1; j >= 0; j--) {\n        let measurement = unloadedMeasurements[j];\n\n        const onBeforeSRAddMeasurement = customizationService.getModeCustomization(\n          'onBeforeSRAddMeasurement'\n        )?.value;\n\n        if (typeof onBeforeSRAddMeasurement === 'function') {\n          measurement = onBeforeSRAddMeasurement({\n            measurement,\n            StudyInstanceUID: srDisplaySet.StudyInstanceUID,\n            SeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n          });\n        }\n\n        if (_measurementReferencesSOPInstanceUID(measurement, SOPInstanceUID, frameNumber)) {\n          const frame =\n            (measurement.coords[0].ReferencedSOPSequence &&\n              measurement.coords[0].ReferencedSOPSequence?.ReferencedFrameNumber) ||\n            1;\n\n          /** Add DICOMSRDisplay annotation for the SR viewport (only) */\n          addDICOMSRDisplayAnnotation(measurement, imageId, frame);\n\n          /** Update measurement properties */\n          measurement.loaded = true;\n          measurement.imageId = imageId;\n          measurement.displaySetInstanceUID = newDisplaySet.displaySetInstanceUID;\n          measurement.ReferencedSOPInstanceUID =\n            measurement.coords[0].ReferencedSOPSequence.ReferencedSOPInstanceUID;\n          measurement.frameNumber = frame;\n          delete measurement.coords;\n\n          unloadedMeasurements.splice(j, 1);\n        }\n      }\n    }\n  }\n}\n\nfunction _measurementReferencesSOPInstanceUID(measurement, SOPInstanceUID, frameNumber) {\n  const { coords } = measurement;\n\n  // NOTE: The ReferencedFrameNumber can be multiple values according to the DICOM\n  //  Standard. But for now, we will support only one ReferenceFrameNumber.\n  const ReferencedFrameNumber =\n    (measurement.coords[0].ReferencedSOPSequence &&\n      measurement.coords[0].ReferencedSOPSequence?.ReferencedFrameNumber) ||\n    1;\n\n  if (frameNumber && Number(frameNumber) !== Number(ReferencedFrameNumber)) {\n    return false;\n  }\n\n  for (let j = 0; j < coords.length; j++) {\n    const coord = coords[j];\n    const { ReferencedSOPInstanceUID } = coord.ReferencedSOPSequence;\n\n    if (ReferencedSOPInstanceUID === SOPInstanceUID) {\n      return true;\n    }\n  }\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: SOPClassHandlerName,\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nfunction _getMeasurements(ImagingMeasurementReportContentSequence) {\n  const ImagingMeasurements = ImagingMeasurementReportContentSequence.find(\n    item =>\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImagingMeasurements\n  );\n\n  const MeasurementGroups = _getSequenceAsArray(ImagingMeasurements.ContentSequence).filter(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.MeasurementGroup\n  );\n\n  const mergedContentSequencesByTrackingUniqueIdentifiers =\n    _getMergedContentSequencesByTrackingUniqueIdentifiers(MeasurementGroups);\n\n  const measurements = [];\n\n  Object.keys(mergedContentSequencesByTrackingUniqueIdentifiers).forEach(\n    trackingUniqueIdentifier => {\n      const mergedContentSequence =\n        mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier];\n\n      const measurement = _processMeasurement(mergedContentSequence);\n\n      if (measurement) {\n        measurements.push(measurement);\n      }\n    }\n  );\n\n  return measurements;\n}\n\nfunction _getMergedContentSequencesByTrackingUniqueIdentifiers(MeasurementGroups) {\n  const mergedContentSequencesByTrackingUniqueIdentifiers = {};\n\n  MeasurementGroups.forEach(MeasurementGroup => {\n    const ContentSequence = _getSequenceAsArray(MeasurementGroup.ContentSequence);\n\n    const TrackingUniqueIdentifierItem = ContentSequence.find(\n      item =>\n        item.ConceptNameCodeSequence.CodeValue ===\n        CodeNameCodeSequenceValues.TrackingUniqueIdentifier\n    );\n\n    if (!TrackingUniqueIdentifierItem) {\n      console.warn('No Tracking Unique Identifier, skipping ambiguous measurement.');\n    }\n\n    const trackingUniqueIdentifier = TrackingUniqueIdentifierItem.UID;\n\n    if (mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier] === undefined) {\n      // Add the full ContentSequence\n      mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier] = [\n        ...ContentSequence,\n      ];\n    } else {\n      // Add the ContentSequence minus the tracking identifier, as we have this\n      // Information in the merged ContentSequence anyway.\n      ContentSequence.forEach(item => {\n        if (\n          item.ConceptNameCodeSequence.CodeValue !==\n          CodeNameCodeSequenceValues.TrackingUniqueIdentifier\n        ) {\n          mergedContentSequencesByTrackingUniqueIdentifiers[trackingUniqueIdentifier].push(item);\n        }\n      });\n    }\n  });\n\n  return mergedContentSequencesByTrackingUniqueIdentifiers;\n}\n\nfunction _processMeasurement(mergedContentSequence) {\n  if (\n    mergedContentSequence.some(\n      group => group.ValueType === 'SCOORD' || group.ValueType === 'SCOORD3D'\n    )\n  ) {\n    return _processTID1410Measurement(mergedContentSequence);\n  }\n\n  return _processNonGeometricallyDefinedMeasurement(mergedContentSequence);\n}\n\nfunction _processTID1410Measurement(mergedContentSequence) {\n  // Need to deal with TID 1410 style measurements, which will have a SCOORD or SCOORD3D at the top level,\n  // And non-geometric representations where each NUM has \"INFERRED FROM\" SCOORD/SCOORD3D\n\n  const graphicItem = mergedContentSequence.find(group => group.ValueType === 'SCOORD');\n\n  const UIDREFContentItem = mergedContentSequence.find(group => group.ValueType === 'UIDREF');\n\n  const TrackingIdentifierContentItem = mergedContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.TrackingIdentifier\n  );\n\n  if (!graphicItem) {\n    console.warn(\n      `graphic ValueType ${graphicItem.ValueType} not currently supported, skipping annotation.`\n    );\n    return;\n  }\n\n  const NUMContentItems = mergedContentSequence.filter(group => group.ValueType === 'NUM');\n\n  const measurement = {\n    loaded: false,\n    labels: [],\n    coords: [_getCoordsFromSCOORDOrSCOORD3D(graphicItem)],\n    TrackingUniqueIdentifier: UIDREFContentItem.UID,\n    TrackingIdentifier: TrackingIdentifierContentItem.TextValue,\n  };\n\n  NUMContentItems.forEach(item => {\n    const { ConceptNameCodeSequence, MeasuredValueSequence } = item;\n\n    if (MeasuredValueSequence) {\n      measurement.labels.push(\n        _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence)\n      );\n    }\n  });\n\n  return measurement;\n}\n\nfunction _processNonGeometricallyDefinedMeasurement(mergedContentSequence) {\n  const NUMContentItems = mergedContentSequence.filter(group => group.ValueType === 'NUM');\n\n  const UIDREFContentItem = mergedContentSequence.find(group => group.ValueType === 'UIDREF');\n\n  const TrackingIdentifierContentItem = mergedContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.TrackingIdentifier\n  );\n\n  const finding = mergedContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.Finding\n  );\n\n  const findingSites = mergedContentSequence.filter(\n    item =>\n      item.ConceptNameCodeSequence.CodingSchemeDesignator === CodingSchemeDesignators.SRT &&\n      item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.FindingSite\n  );\n\n  const measurement = {\n    loaded: false,\n    labels: [],\n    coords: [],\n    TrackingUniqueIdentifier: UIDREFContentItem.UID,\n    TrackingIdentifier: TrackingIdentifierContentItem.TextValue,\n  };\n\n  if (\n    finding &&\n    CodingSchemeDesignators.CornerstoneCodeSchemes.includes(\n      finding.ConceptCodeSequence.CodingSchemeDesignator\n    ) &&\n    finding.ConceptCodeSequence.CodeValue === CodeNameCodeSequenceValues.CornerstoneFreeText\n  ) {\n    measurement.labels.push({\n      label: CORNERSTONE_FREETEXT_CODE_VALUE,\n      value: finding.ConceptCodeSequence.CodeMeaning,\n    });\n  }\n\n  // TODO -> Eventually hopefully support SNOMED or some proper code library, just free text for now.\n  if (findingSites.length) {\n    const cornerstoneFreeTextFindingSite = findingSites.find(\n      FindingSite =>\n        CodingSchemeDesignators.CornerstoneCodeSchemes.includes(\n          FindingSite.ConceptCodeSequence.CodingSchemeDesignator\n        ) &&\n        FindingSite.ConceptCodeSequence.CodeValue === CodeNameCodeSequenceValues.CornerstoneFreeText\n    );\n\n    if (cornerstoneFreeTextFindingSite) {\n      measurement.labels.push({\n        label: CORNERSTONE_FREETEXT_CODE_VALUE,\n        value: cornerstoneFreeTextFindingSite.ConceptCodeSequence.CodeMeaning,\n      });\n    }\n  }\n\n  NUMContentItems.forEach(item => {\n    const { ConceptNameCodeSequence, ContentSequence, MeasuredValueSequence } = item;\n\n    const { ValueType } = ContentSequence;\n\n    if (!ValueType === 'SCOORD') {\n      console.warn(`Graphic ${ValueType} not currently supported, skipping annotation.`);\n\n      return;\n    }\n\n    const coords = _getCoordsFromSCOORDOrSCOORD3D(ContentSequence);\n\n    if (coords) {\n      measurement.coords.push(coords);\n    }\n\n    if (MeasuredValueSequence) {\n      measurement.labels.push(\n        _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence)\n      );\n    }\n  });\n\n  return measurement;\n}\n\nfunction _getCoordsFromSCOORDOrSCOORD3D(item) {\n  const { ValueType, RelationshipType, GraphicType, GraphicData } = item;\n\n  if (\n    !(\n      RelationshipType == RELATIONSHIP_TYPE.INFERRED_FROM ||\n      RelationshipType == RELATIONSHIP_TYPE.CONTAINS\n    )\n  ) {\n    console.warn(\n      `Relationshiptype === ${RelationshipType}. Cannot deal with NON TID-1400 SCOORD group with RelationshipType !== \"INFERRED FROM\" or \"CONTAINS\"`\n    );\n\n    return;\n  }\n\n  const coords = { ValueType, GraphicType, GraphicData };\n\n  // ContentSequence has length of 1 as RelationshipType === 'INFERRED FROM'\n  if (ValueType === 'SCOORD') {\n    const { ReferencedSOPSequence } = item.ContentSequence;\n\n    coords.ReferencedSOPSequence = ReferencedSOPSequence;\n  } else if (ValueType === 'SCOORD3D') {\n    const { ReferencedFrameOfReferenceSequence } = item.ContentSequence;\n\n    coords.ReferencedFrameOfReferenceSequence = ReferencedFrameOfReferenceSequence;\n  }\n\n  return coords;\n}\n\nfunction _getLabelFromMeasuredValueSequence(ConceptNameCodeSequence, MeasuredValueSequence) {\n  const { CodeMeaning } = ConceptNameCodeSequence;\n  const { NumericValue, MeasurementUnitsCodeSequence } = MeasuredValueSequence;\n  const { CodeValue } = MeasurementUnitsCodeSequence;\n\n  const formatedNumericValue = NumericValue ? Number(NumericValue).toFixed(2) : '';\n\n  return {\n    label: CodeMeaning,\n    value: `${formatedNumericValue} ${CodeValue}`,\n  }; // E.g. Long Axis: 31.0 mm\n}\n\nfunction _getReferencedImagesList(ImagingMeasurementReportContentSequence) {\n  const ImageLibrary = ImagingMeasurementReportContentSequence.find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImageLibrary\n  );\n\n  const ImageLibraryGroup = _getSequenceAsArray(ImageLibrary.ContentSequence).find(\n    item => item.ConceptNameCodeSequence.CodeValue === CodeNameCodeSequenceValues.ImageLibraryGroup\n  );\n\n  const referencedImages = [];\n\n  _getSequenceAsArray(ImageLibraryGroup.ContentSequence).forEach(item => {\n    const { ReferencedSOPSequence } = item;\n    if (!ReferencedSOPSequence) {\n      return;\n    }\n    for (const ref of _getSequenceAsArray(ReferencedSOPSequence)) {\n      if (ref.ReferencedSOPClassUID) {\n        const { ReferencedSOPClassUID, ReferencedSOPInstanceUID } = ref;\n\n        referencedImages.push({\n          ReferencedSOPClassUID,\n          ReferencedSOPInstanceUID,\n        });\n      }\n    }\n  });\n\n  return referencedImages;\n}\n\nfunction _getSequenceAsArray(sequence) {\n  if (!sequence) {\n    return [];\n  }\n  return Array.isArray(sequence) ? sequence : [sequence];\n}\n\nexport default getSopClassHandlerModule;\n","import { Types } from '@ohif/core';\n\nconst srProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/sr',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'SR Key Images',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'srDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    srDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SR',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'SR Key Images',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'srDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: srProtocol.id,\n      protocol: srProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { srProtocol };\n","import OHIF from '@ohif/core';\nimport { annotation } from '@cornerstonejs/tools';\nconst { log } = OHIF;\n\nfunction getFilteredCornerstoneToolState(measurementData, additionalFindingTypes) {\n  const filteredToolState = {};\n\n  function addToFilteredToolState(annotation, toolType) {\n    if (!annotation.metadata?.referencedImageId) {\n      log.warn(`[DICOMSR] No referencedImageId found for ${toolType} ${annotation.id}`);\n      return;\n    }\n\n    const imageId = annotation.metadata.referencedImageId;\n\n    if (!filteredToolState[imageId]) {\n      filteredToolState[imageId] = {};\n    }\n\n    const imageIdSpecificToolState = filteredToolState[imageId];\n\n    if (!imageIdSpecificToolState[toolType]) {\n      imageIdSpecificToolState[toolType] = {\n        data: [],\n      };\n    }\n\n    const measurementDataI = measurementData.find(md => md.uid === annotation.annotationUID);\n    const toolData = imageIdSpecificToolState[toolType].data;\n\n    let { finding } = measurementDataI;\n    const findingSites = [];\n\n    // NOTE -> We use the CORNERSTONEJS coding schemeDesignator which we have\n    // defined in the @cornerstonejs/adapters\n    if (measurementDataI.label) {\n      if (additionalFindingTypes.includes(toolType)) {\n        finding = {\n          CodeValue: 'CORNERSTONEFREETEXT',\n          CodingSchemeDesignator: 'CORNERSTONEJS',\n          CodeMeaning: measurementDataI.label,\n        };\n      } else {\n        findingSites.push({\n          CodeValue: 'CORNERSTONEFREETEXT',\n          CodingSchemeDesignator: 'CORNERSTONEJS',\n          CodeMeaning: measurementDataI.label,\n        });\n      }\n    }\n\n    if (measurementDataI.findingSites) {\n      findingSites.push(...measurementDataI.findingSites);\n    }\n\n    const measurement = Object.assign({}, annotation, {\n      finding,\n      findingSites,\n    });\n\n    toolData.push(measurement);\n  }\n\n  const uidFilter = measurementData.map(md => md.uid);\n  const uids = uidFilter.slice();\n\n  const annotationManager = annotation.state.getAnnotationManager();\n  const framesOfReference = annotationManager.getFramesOfReference();\n\n  for (let i = 0; i < framesOfReference.length; i++) {\n    const frameOfReference = framesOfReference[i];\n\n    const frameOfReferenceAnnotations = annotationManager.getAnnotations(frameOfReference);\n\n    const toolTypes = Object.keys(frameOfReferenceAnnotations);\n\n    for (let j = 0; j < toolTypes.length; j++) {\n      const toolType = toolTypes[j];\n\n      const annotations = frameOfReferenceAnnotations[toolType];\n\n      if (annotations) {\n        for (let k = 0; k < annotations.length; k++) {\n          const annotation = annotations[k];\n          const uidIndex = uids.findIndex(uid => uid === annotation.annotationUID);\n\n          if (uidIndex !== -1) {\n            addToFilteredToolState(annotation, toolType);\n            uids.splice(uidIndex, 1);\n\n            if (!uids.length) {\n              return filteredToolState;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return filteredToolState;\n}\n\nexport default getFilteredCornerstoneToolState;\n","import { metaData, utilities } from '@cornerstonejs/core';\n\nimport OHIF, { DicomMetadataStore } from '@ohif/core';\nimport dcmjs from 'dcmjs';\nimport { adaptersSR } from '@cornerstonejs/adapters';\n\nimport getFilteredCornerstoneToolState from './utils/getFilteredCornerstoneToolState';\n\nconst { MeasurementReport } = adaptersSR.Cornerstone3D;\nconst { log } = OHIF;\n\n/**\n *\n * @param measurementData An array of measurements from the measurements service\n * that you wish to serialize.\n * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\n * @param options Naturalized DICOM JSON headers to merge into the displaySet.\n *\n */\nconst _generateReport = (measurementData, additionalFindingTypes, options = {}) => {\n  const filteredToolState = getFilteredCornerstoneToolState(\n    measurementData,\n    additionalFindingTypes\n  );\n\n  const report = MeasurementReport.generateReport(\n    filteredToolState,\n    metaData,\n    utilities.worldToImageCoords,\n    options\n  );\n\n  const { dataset } = report;\n\n  // Set the default character set as UTF-8\n  // https://dicom.innolitics.com/ciods/nm-image/sop-common/00080005\n  if (typeof dataset.SpecificCharacterSet === 'undefined') {\n    dataset.SpecificCharacterSet = 'ISO_IR 192';\n  }\n  return dataset;\n};\n\nconst commandsModule = (props: withAppTypes) => {\n  const { servicesManager } = props;\n  const { customizationService } = servicesManager.services;\n  const actions = {\n    /**\n     *\n     * @param measurementData An array of measurements from the measurements service\n     * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\n     * @param options Naturalized DICOM JSON headers to merge into the displaySet.\n     * as opposed to Finding Sites.\n     * that you wish to serialize.\n     */\n    downloadReport: ({ measurementData, additionalFindingTypes, options = {} }) => {\n      const srDataset = actions.generateReport(measurementData, additionalFindingTypes, options);\n      const reportBlob = dcmjs.data.datasetToBlob(srDataset);\n\n      //Create a URL for the binary.\n      const objectUrl = URL.createObjectURL(reportBlob);\n      window.location.assign(objectUrl);\n    },\n\n    /**\n     *\n     * @param measurementData An array of measurements from the measurements service\n     * that you wish to serialize.\n     * @param dataSource The dataSource that you wish to use to persist the data.\n     * @param additionalFindingTypes toolTypes that should be stored with labels as Findings\n     * @param options Naturalized DICOM JSON headers to merge into the displaySet.\n     * @return The naturalized report\n     */\n    storeMeasurements: async ({\n      measurementData,\n      dataSource,\n      additionalFindingTypes,\n      options = {},\n    }) => {\n      // Use the @cornerstonejs adapter for converting to/from DICOM\n      // But it is good enough for now whilst we only have cornerstone as a datasource.\n      log.info('[DICOMSR] storeMeasurements');\n\n      if (!dataSource || !dataSource.store || !dataSource.store.dicom) {\n        log.error('[DICOMSR] datasource has no dataSource.store.dicom endpoint!');\n        return Promise.reject({});\n      }\n\n      try {\n        const naturalizedReport = _generateReport(measurementData, additionalFindingTypes, options);\n\n        const { StudyInstanceUID, ContentSequence } = naturalizedReport;\n        // The content sequence has 5 or more elements, of which\n        // the `[4]` element contains the annotation data, so this is\n        // checking that there is some annotation data present.\n        if (!ContentSequence?.[4].ContentSequence?.length) {\n          console.log('naturalizedReport missing imaging content', naturalizedReport);\n          throw new Error('Invalid report, no content');\n        }\n\n        const onBeforeDicomStore =\n          customizationService.getModeCustomization('onBeforeDicomStore')?.value;\n\n        let dicomDict;\n        if (typeof onBeforeDicomStore === 'function') {\n          dicomDict = onBeforeDicomStore({ measurementData, naturalizedReport });\n        }\n\n        await dataSource.store.dicom(naturalizedReport, null, dicomDict);\n\n        if (StudyInstanceUID) {\n          dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\n        }\n\n        // The \"Mode\" route listens for DicomMetadataStore changes\n        // When a new instance is added, it listens and\n        // automatically calls makeDisplaySets\n        DicomMetadataStore.addInstances([naturalizedReport], true);\n\n        return naturalizedReport;\n      } catch (error) {\n        console.warn(error);\n        log.error(`[DICOMSR] Error while saving the measurements: ${error.message}`);\n        throw new Error(error.message || 'Error while saving the measurements.');\n      }\n    },\n  };\n\n  const definitions = {\n    downloadReport: {\n      commandFn: actions.downloadReport,\n    },\n    storeMeasurements: {\n      commandFn: actions.storeMeasurements,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'CORNERSTONE_STRUCTURED_REPORT',\n  };\n};\n\nexport default commandsModule;\n","import { addTool } from '@cornerstonejs/tools';\n\nexport default function addToolInstance(name: string, toolClass, configuration?): void {\n  class InstanceClass extends toolClass {\n    static toolName = name;\n  }\n  addTool(InstanceClass);\n}\n","import React from 'react';\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport { srProtocol } from './getHangingProtocolModule';\nimport onModeEnter from './onModeEnter';\nimport getCommandsModule from './commandsModule';\nimport preRegistration from './init';\nimport { id } from './id.js';\nimport toolNames from './tools/toolNames';\nimport hydrateStructuredReport from './utils/hydrateStructuredReport';\nimport createReferencedImageDisplaySet from './utils/createReferencedImageDisplaySet';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSRViewport');\n});\n\nconst OHIFCornerstoneSRViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst dicomSRExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  onModeEnter,\n\n  preRegistration,\n\n  /**\n   *\n   *\n   * @param {object} [configuration={}]\n   * @param {object|array} [configuration.csToolsConfig] - Passed directly to `initCornerstoneTools`\n   */\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneSRViewport = props => {\n      return (\n        <OHIFCornerstoneSRViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-sr', component: ExtendedOHIFCornerstoneSRViewport }];\n  },\n  getCommandsModule,\n  getSopClassHandlerModule,\n  // Include dynamically computed values such as toolNames not known till instantiation\n  getUtilityModule({ servicesManager }) {\n    return [\n      {\n        name: 'tools',\n        exports: {\n          toolNames,\n        },\n      },\n    ];\n  },\n};\n\nexport default dicomSRExtension;\n\n// Put static exports here so they can be type checked\nexport { hydrateStructuredReport, createReferencedImageDisplaySet, srProtocol };\n","import { SOPClassHandlerId } from './id';\n\nexport default function onModeEnter({ servicesManager }) {\n  const { displaySetService } = servicesManager.services;\n  const displaySetCache = displaySetService.getDisplaySetCache();\n\n  const srDisplaySets = [...displaySetCache.values()].filter(\n    ds => ds.SOPClassHandlerId === SOPClassHandlerId\n  );\n\n  srDisplaySets.forEach(ds => {\n    // New mode route, allow SRs to be hydrated again\n    ds.isHydrated = false;\n  });\n}\n","import {\n  AngleTool,\n  annotation,\n  ArrowAnnotateTool,\n  BidirectionalTool,\n  CobbAngleTool,\n  EllipticalROITool,\n  CircleROITool,\n  LengthTool,\n  PlanarFreehandROITool,\n  RectangleROITool,\n} from '@cornerstonejs/tools';\nimport DICOMSRDisplayTool from './tools/DICOMSRDisplayTool';\nimport addToolInstance from './utils/addToolInstance';\nimport { Types } from '@ohif/core';\nimport toolNames from './tools/toolNames';\n\n/**\n * @param {object} configuration\n */\nexport default function init({ configuration = {} }: Types.Extensions.ExtensionParams): void {\n  addToolInstance(toolNames.DICOMSRDisplay, DICOMSRDisplayTool);\n  addToolInstance(toolNames.SRLength, LengthTool);\n  addToolInstance(toolNames.SRBidirectional, BidirectionalTool);\n  addToolInstance(toolNames.SREllipticalROI, EllipticalROITool);\n  addToolInstance(toolNames.SRCircleROI, CircleROITool);\n  addToolInstance(toolNames.SRArrowAnnotate, ArrowAnnotateTool);\n  addToolInstance(toolNames.SRAngle, AngleTool);\n  addToolInstance(toolNames.SRPlanarFreehandROI, PlanarFreehandROITool);\n  addToolInstance(toolNames.SRRectangleROI, RectangleROITool);\n\n  // TODO - fix the SR display of Cobb Angle, as it joins the two lines\n  addToolInstance(toolNames.SRCobbAngle, CobbAngleTool);\n\n  // Modify annotation tools to use dashed lines on SR\n  const dashedLine = {\n    lineDash: '4,4',\n  };\n  annotation.config.style.setToolGroupToolStyles('SRToolGroup', {\n    [toolNames.DICOMSRDisplay]: dashedLine,\n    SRLength: dashedLine,\n    SRBidirectional: dashedLine,\n    SREllipticalROI: dashedLine,\n    SRCircleROI: dashedLine,\n    SRArrowAnnotate: dashedLine,\n    SRCobbAngle: dashedLine,\n    SRAngle: dashedLine,\n    SRPlanarFreehandROI: dashedLine,\n    SRRectangleROI: dashedLine,\n    global: {},\n  });\n}\n","import { DisplaySetService, classes } from '@ohif/core';\n\nconst ImageSet = classes.ImageSet;\n\nconst findInstance = (measurement, displaySetService: DisplaySetService) => {\n  const { displaySetInstanceUID, ReferencedSOPInstanceUID: sopUid } = measurement;\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n  if (!referencedDisplaySet.images) {\n    return;\n  }\n  return referencedDisplaySet.images.find(it => it.SOPInstanceUID === sopUid);\n};\n\n/** Finds references to display sets inside the measurements\n * contained within the provided display set.\n * @return an array of instances referenced.\n */\nconst findReferencedInstances = (displaySetService: DisplaySetService, displaySet) => {\n  const instances = [];\n  const instanceById = {};\n  for (const measurement of displaySet.measurements) {\n    const { imageId } = measurement;\n    if (!imageId) {\n      continue;\n    }\n    if (instanceById[imageId]) {\n      continue;\n    }\n\n    const instance = findInstance(measurement, displaySetService);\n    if (!instance) {\n      console.log('Measurement', measurement, 'had no instances found');\n      continue;\n    }\n\n    instanceById[imageId] = instance;\n    instances.push(instance);\n  }\n  return instances;\n};\n\n/**\n * Creates a new display set containing a single image instance for each\n * referenced image.\n *\n * @param displaySetService\n * @param displaySet - containing measurements referencing images.\n * @returns A new (registered/active) display set containing the referenced images\n */\nconst createReferencedImageDisplaySet = (displaySetService, displaySet) => {\n  const instances = findReferencedInstances(displaySetService, displaySet);\n  // This will be a  member function of the created image set\n  const updateInstances = function () {\n    this.images.splice(\n      0,\n      this.images.length,\n      ...findReferencedInstances(displaySetService, displaySet)\n    );\n    this.numImageFrames = this.images.length;\n  };\n\n  const imageSet = new ImageSet(instances);\n  const instance = instances[0];\n  imageSet.setAttributes({\n    displaySetInstanceUID: imageSet.uid, // create a local alias for the imageSet UID\n    SeriesDate: instance.SeriesDate,\n    SeriesTime: instance.SeriesTime,\n    SeriesInstanceUID: imageSet.uid,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    SeriesNumber: instance.SeriesNumber || 0,\n    SOPClassUID: instance.SOPClassUID,\n    SeriesDescription: `${displaySet.SeriesDescription} KO ${displaySet.instance.SeriesNumber}`,\n    Modality: 'KO',\n    isMultiFrame: false,\n    numImageFrames: instances.length,\n    SOPClassHandlerId: `@ohif/extension-default.sopClassHandlerModule.stack`,\n    isReconstructable: false,\n    // This object is made of multiple instances from other series\n    isCompositeStack: true,\n    madeInClient: true,\n    excludeFromThumbnailBrowser: true,\n    updateInstances,\n  });\n\n  displaySetService.addDisplaySets(imageSet);\n\n  return imageSet;\n};\n\nexport default createReferencedImageDisplaySet;\n","import { utilities, metaData } from '@cornerstonejs/core';\nimport OHIF, { DicomMetadataStore } from '@ohif/core';\nimport getLabelFromDCMJSImportedToolData from './getLabelFromDCMJSImportedToolData';\nimport { adaptersSR } from '@cornerstonejs/adapters';\nimport { annotation as CsAnnotation } from '@cornerstonejs/tools';\nconst { locking } = CsAnnotation;\n\nconst { guid } = OHIF.utils;\nconst { MeasurementReport, CORNERSTONE_3D_TAG } = adaptersSR.Cornerstone3D;\n\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n\nconst supportedLegacyCornerstoneTags = ['cornerstoneTools@^4.0.0'];\n\nconst convertCode = (codingValues, code) => {\n  if (!code || code.CodingSchemeDesignator === 'CORNERSTONEJS') {\n    return;\n  }\n  const ref = `${code.CodingSchemeDesignator}:${code.CodeValue}`;\n  const ret = { ...codingValues[ref], ref, ...code, text: code.CodeMeaning };\n  return ret;\n};\n\nconst convertSites = (codingValues, sites) => {\n  if (!sites || !sites.length) {\n    return;\n  }\n  const ret = [];\n  // Do as a loop to convert away from Proxy instances\n  for (let i = 0; i < sites.length; i++) {\n    // Deal with irregular conversion from dcmjs\n    const site = convertCode(codingValues, sites[i][0] || sites[i]);\n    if (site) {\n      ret.push(site);\n    }\n  }\n  return (ret.length && ret) || undefined;\n};\n\n/**\n * Hydrates a structured report, for default viewports.\n *\n */\nexport default function hydrateStructuredReport(\n  { servicesManager, extensionManager, appConfig }: withAppTypes,\n  displaySetInstanceUID\n) {\n  const annotationManager = CsAnnotation.state.getAnnotationManager();\n  const disableEditing = appConfig?.disableEditing;\n  const dataSource = extensionManager.getActiveDataSource()[0];\n  const { measurementService, displaySetService, customizationService } = servicesManager.services;\n\n  const codingValues = customizationService.getCustomization('codingValues', {});\n  const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  // TODO -> We should define a strict versioning somewhere.\n  const mappings = measurementService.getSourceMappings(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  if (!mappings || !mappings.length) {\n    throw new Error(\n      `Attempting to hydrate measurements service when no mappings present. This shouldn't be reached.`\n    );\n  }\n\n  const instance = DicomMetadataStore.getInstance(\n    displaySet.StudyInstanceUID,\n    displaySet.SeriesInstanceUID,\n    displaySet.SOPInstanceUID\n  );\n\n  const sopInstanceUIDToImageId = {};\n  const imageIdsForToolState = {};\n\n  displaySet.measurements.forEach(measurement => {\n    const { ReferencedSOPInstanceUID, imageId, frameNumber } = measurement;\n\n    if (!sopInstanceUIDToImageId[ReferencedSOPInstanceUID]) {\n      sopInstanceUIDToImageId[ReferencedSOPInstanceUID] = imageId;\n      imageIdsForToolState[ReferencedSOPInstanceUID] = [];\n    }\n    if (!imageIdsForToolState[ReferencedSOPInstanceUID][frameNumber]) {\n      imageIdsForToolState[ReferencedSOPInstanceUID][frameNumber] = imageId;\n    }\n  });\n\n  const datasetToUse = _mapLegacyDataSet(instance);\n\n  // Use dcmjs to generate toolState.\n  let storedMeasurementByAnnotationType = MeasurementReport.generateToolState(\n    datasetToUse,\n    // NOTE: we need to pass in the imageIds to dcmjs since the we use them\n    // for the imageToWorld transformation. The following assumes that the order\n    // that measurements were added to the display set are the same order as\n    // the measurementGroups in the instance.\n    sopInstanceUIDToImageId,\n    utilities.imageToWorldCoords,\n    metaData\n  );\n\n  const onBeforeSRHydration =\n    customizationService.getModeCustomization('onBeforeSRHydration')?.value;\n\n  if (typeof onBeforeSRHydration === 'function') {\n    storedMeasurementByAnnotationType = onBeforeSRHydration({\n      storedMeasurementByAnnotationType,\n      displaySet,\n    });\n  }\n\n  // Filter what is found by DICOM SR to measurements we support.\n  const mappingDefinitions = mappings.map(m => m.annotationType);\n  const hydratableMeasurementsInSR = {};\n\n  Object.keys(storedMeasurementByAnnotationType).forEach(key => {\n    if (mappingDefinitions.includes(key)) {\n      hydratableMeasurementsInSR[key] = storedMeasurementByAnnotationType[key];\n    }\n  });\n\n  // Set the series touched as tracked.\n  const imageIds = [];\n\n  // TODO: notification if no hydratable?\n  Object.keys(hydratableMeasurementsInSR).forEach(annotationType => {\n    const toolDataForAnnotationType = hydratableMeasurementsInSR[annotationType];\n\n    toolDataForAnnotationType.forEach(toolData => {\n      // Add the measurement to toolState\n      // dcmjs and Cornerstone3D has structural defect in supporting multi-frame\n      // files, and looking up the imageId from sopInstanceUIDToImageId results\n      // in the wrong value.\n      const frameNumber = (toolData.annotation.data && toolData.annotation.data.frameNumber) || 1;\n      const imageId =\n        imageIdsForToolState[toolData.sopInstanceUid][frameNumber] ||\n        sopInstanceUIDToImageId[toolData.sopInstanceUid];\n\n      if (!imageIds.includes(imageId)) {\n        imageIds.push(imageId);\n      }\n    });\n  });\n\n  let targetStudyInstanceUID;\n  const SeriesInstanceUIDs = [];\n\n  for (let i = 0; i < imageIds.length; i++) {\n    const imageId = imageIds[i];\n    const { SeriesInstanceUID, StudyInstanceUID } = metaData.get('instance', imageId);\n\n    if (!SeriesInstanceUIDs.includes(SeriesInstanceUID)) {\n      SeriesInstanceUIDs.push(SeriesInstanceUID);\n    }\n\n    if (!targetStudyInstanceUID) {\n      targetStudyInstanceUID = StudyInstanceUID;\n    } else if (targetStudyInstanceUID !== StudyInstanceUID) {\n      console.warn('NO SUPPORT FOR SRs THAT HAVE MEASUREMENTS FROM MULTIPLE STUDIES.');\n    }\n  }\n\n  Object.keys(hydratableMeasurementsInSR).forEach(annotationType => {\n    const toolDataForAnnotationType = hydratableMeasurementsInSR[annotationType];\n\n    toolDataForAnnotationType.forEach(toolData => {\n      // Add the measurement to toolState\n      // dcmjs and Cornerstone3D has structural defect in supporting multi-frame\n      // files, and looking up the imageId from sopInstanceUIDToImageId results\n      // in the wrong value.\n      const frameNumber = (toolData.annotation.data && toolData.annotation.data.frameNumber) || 1;\n      const imageId =\n        imageIdsForToolState[toolData.sopInstanceUid][frameNumber] ||\n        sopInstanceUIDToImageId[toolData.sopInstanceUid];\n\n      toolData.uid = guid();\n\n      const instance = metaData.get('instance', imageId);\n      const {\n        FrameOfReferenceUID,\n        // SOPInstanceUID,\n        // SeriesInstanceUID,\n        // StudyInstanceUID,\n      } = instance;\n\n      const annotation = {\n        annotationUID: toolData.annotation.annotationUID,\n        data: toolData.annotation.data,\n        metadata: {\n          toolName: annotationType,\n          referencedImageId: imageId,\n          FrameOfReferenceUID,\n        },\n      };\n\n      const source = measurementService.getSource(\n        CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n        CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n      );\n      annotation.data.label = getLabelFromDCMJSImportedToolData(toolData);\n      annotation.data.finding = convertCode(codingValues, toolData.finding?.[0]);\n      annotation.data.findingSites = convertSites(codingValues, toolData.findingSites);\n      annotation.data.site = annotation.data.findingSites?.[0];\n\n      const matchingMapping = mappings.find(m => m.annotationType === annotationType);\n\n      const newAnnotationUID = measurementService.addRawMeasurement(\n        source,\n        annotationType,\n        { annotation },\n        matchingMapping.toMeasurementSchema,\n        dataSource\n      );\n\n      if (disableEditing) {\n        const addedAnnotation = annotationManager.getAnnotation(newAnnotationUID);\n        locking.setAnnotationLocked(addedAnnotation, true);\n      }\n\n      if (!imageIds.includes(imageId)) {\n        imageIds.push(imageId);\n      }\n    });\n  });\n\n  displaySet.isHydrated = true;\n\n  return {\n    StudyInstanceUID: targetStudyInstanceUID,\n    SeriesInstanceUIDs,\n  };\n}\n\nfunction _mapLegacyDataSet(dataset) {\n  const REPORT = 'Imaging Measurements';\n  const GROUP = 'Measurement Group';\n  const TRACKING_IDENTIFIER = 'Tracking Identifier';\n\n  // Identify the Imaging Measurements\n  const imagingMeasurementContent = toArray(dataset.ContentSequence).find(\n    codeMeaningEquals(REPORT)\n  );\n\n  // Retrieve the Measurements themselves\n  const measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(\n    codeMeaningEquals(GROUP)\n  );\n\n  // For each of the supported measurement types, compute the measurement data\n  const measurementData = {};\n\n  const cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n\n  const registeredToolClasses = [];\n\n  Object.keys(cornerstoneToolClasses).forEach(key => {\n    registeredToolClasses.push(cornerstoneToolClasses[key]);\n    measurementData[key] = [];\n  });\n\n  measurementGroups.forEach((measurementGroup, index) => {\n    const measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);\n\n    const TrackingIdentifierGroup = measurementGroupContentSequence.find(\n      contentItem => contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER\n    );\n\n    const TrackingIdentifier = TrackingIdentifierGroup.TextValue;\n\n    let [cornerstoneTag, toolName] = TrackingIdentifier.split(':');\n    if (supportedLegacyCornerstoneTags.includes(cornerstoneTag)) {\n      cornerstoneTag = CORNERSTONE_3D_TAG;\n    }\n\n    const mappedTrackingIdentifier = `${cornerstoneTag}:${toolName}`;\n\n    TrackingIdentifierGroup.TextValue = mappedTrackingIdentifier;\n  });\n\n  return dataset;\n}\n\nconst toArray = function (x) {\n  return Array.isArray(x) ? x : [x];\n};\n\nconst codeMeaningEquals = codeMeaningName => {\n  return contentItem => {\n    return contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName;\n  };\n};\n","/**\n * Extracts the label from the toolData imported from dcmjs. We need to do this\n * as dcmjs does not depeend on OHIF/the measurementService, it just produces data for cornestoneTools.\n * This optional data is available for the consumer to process if they wish to.\n * @param {object} toolData The tooldata relating to the\n *\n * @returns {string} The extracted label.\n */\nexport default function getLabelFromDCMJSImportedToolData(toolData) {\n  const { findingSites = [], finding } = toolData;\n\n  let freeTextLabel = findingSites.find(fs => fs.CodeValue === 'CORNERSTONEFREETEXT');\n\n  if (freeTextLabel) {\n    return freeTextLabel.CodeMeaning;\n  }\n\n  if (finding && finding.CodeValue === 'CORNERSTONEFREETEXT') {\n    return finding.CodeMeaning;\n  }\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\n\nconst state = {\n  TrackingUniqueIdentifier: null,\n  trackingIdentifiersByViewportId: {},\n};\n\n/**\n * This file is being used to store the per-viewport state of the SR tools,\n * Since, all the toolStates are added to the cornerstoneTools, when displaying the SRTools,\n * if there are two viewports rendering the same imageId, we don't want to show\n * the same SR annotation twice on irrelevant viewport, hence, we are storing the state\n * of the SR tools in state here, so that we can filter them later.\n */\n\nfunction setTrackingUniqueIdentifiersForElement(\n  element,\n  trackingUniqueIdentifiers,\n  activeIndex = 0\n) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  state.trackingIdentifiersByViewportId[viewport.id] = {\n    trackingUniqueIdentifiers,\n    activeIndex,\n  };\n}\n\nfunction setActiveTrackingUniqueIdentifierForElement(element, TrackingUniqueIdentifier) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const trackingIdentifiersForElement = state.trackingIdentifiersByViewportId[viewport.id];\n\n  if (trackingIdentifiersForElement) {\n    const activeIndex = trackingIdentifiersForElement.trackingUniqueIdentifiers.findIndex(\n      tuid => tuid === TrackingUniqueIdentifier\n    );\n\n    trackingIdentifiersForElement.activeIndex = activeIndex;\n  }\n}\n\nfunction getTrackingUniqueIdentifiersForElement(element) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  if (state.trackingIdentifiersByViewportId[viewport.id]) {\n    return state.trackingIdentifiersByViewportId[viewport.id];\n  }\n\n  return { trackingUniqueIdentifiers: [] };\n}\n\nexport {\n  setTrackingUniqueIdentifiersForElement,\n  setActiveTrackingUniqueIdentifierForElement,\n  getTrackingUniqueIdentifiersForElement,\n};\n"],"names":["id","packageJson","SOPClassHandlerName","SOPClassHandlerId","DICOMSRDisplayTool","AnnotationTool","constructor","toolProps","defaultToolProps","configuration","super","isPointNearTool","getHandleNearImagePoint","renderAnnotation","enabledElement","svgDrawingHelper","viewport","element","annotations","annotation","this","getToolName","length","filterInteractableAnnotationsForElement","trackingUniqueIdentifiersForElement","getTrackingUniqueIdentifiersForElement","activeIndex","trackingUniqueIdentifiers","activeTrackingUniqueIdentifier","filteredAnnotations","filter","includes","data","TrackingUniqueIdentifier","_actors","size","styleSpecifier","toolGroupId","toolName","viewportId","style","annotationStyle","i","annotationUID","renderableData","referencedImageId","metadata","groupStyle","getToolGroupToolStyles","lineWidth","getStyle","lineDash","options","color","Object","keys","forEach","GraphicType","renderableDataForGraphicType","renderMethod","canvasCoordinatesAdapter","SCOORD_TYPES","renderPoint","renderMultipoint","renderPolyLine","renderEllipse","utilities","Error","canvasCoordinates","renderTextBox","_getTextBoxLinesFromLabels","labels","labelLength","Math","min","lines","labelEntry","push","_labelToShorthand","label","value","drawingOptions","width","allCanvasCoordinates","map","index","p","worldToCanvas","lineUID","drawing","concat","point","imagePixelModule","metaData","xOffset","yOffset","columns","rows","imagePoint","csUtils","arrowEnd","arrowUID","ellipsePointsWorld","rotation","getRotation","canvasCorners","adaptedCanvasCoordinates","textLines","canvasTextBoxCoords","handles","textBox","worldPosition","canvasToWorld","textBoxPosition","textBoxOptions","getLinkedTextBoxStyle","boundingBox","x","left","y","top","height","worldBoundingBox","topLeft","topRight","bottomLeft","bottomRight","SHORT_HAND_MAP","AREA","Length","CORNERSTONEFREETEXT","shortHand","undefined","DICOMSRDisplay","SRLength","SRBidirectional","SREllipticalROI","SRCircleROI","SRArrowAnnotate","SRAngle","SRCobbAngle","SRRectangleROI","SRPlanarFreehandROI","EPSILON","addDICOMSRDisplayAnnotation","measurement","imageId","frameNumber","toolNames","measurementData","coords","coord","GraphicData","worldPos","pointsWorld","center","onPerimeter","radius","vec3","imagePlaneModule","columnCosines","rowCosines","firstAxisStart","firstAxisEnd","secondAxisStart","secondAxisEnd","majorAxisStart","majorAxisEnd","minorAxisStart","minorAxisEnd","majorAxisVec","minorAxisVec","columnCosinesVec","projectedMajorAxisOnColVec","abs","projectedMinorAxisOnColVec","absoluteOfMajorDotProduct","absoluteOfMinorDotProduct","console","warn","_getRenderableData","SRAnnotation","highlighted","isLocked","invalidated","FrameOfReferenceUID","frameOfReferenceUID","cachedStats","addAnnotation","cornerstoneAdapters","adaptersSR","Cornerstone3D","MeasurementReport","CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE","supportedLegacyCornerstoneTags","CORNERSTONE_3D_TAG","CodeScheme","Cornerstone3DCodeScheme","ImageSet","MetadataProvider","metadataProvider","classes","sopClassUids","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CodeNameCodeSequenceValues","codeValues","CodingSchemeDesignators","SRT","CornerstoneCodeSchemes","CodingSchemeDesignator","RELATIONSHIP_TYPE","CORNERSTONE_FREETEXT_CODE_VALUE","addInstances","instances","displaySetService","utils","sortStudyInstances","instance","isLoaded","_getDisplaySetsFromSeries","servicesManager","extensionManager","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","ConceptNameCodeSequence","SOPClassUID","validateSameStudyUID","uid","it","CodeValue","services","uiNotificationService","show","title","message","type","duration","displaySet","Modality","displaySetInstanceUID","guid","referencedImages","measurements","isDerivedDisplaySet","load","async","measurementService","dataSources","getDataSources","dataSource","ContentSequence","retrieveBulkData","obj","parentObj","key","prop","Array","isArray","Promise","all","item","retrieve","bulkDataURI","BulkDataURI","Float32Array","ImagingMeasurementReportContentSequence","ImageLibraryGroup","_getSequenceAsArray","find","ReferencedSOPSequence","ref","ReferencedSOPClassUID","ReferencedSOPInstanceUID","_getReferencedImagesList","ImagingMeasurements","mergedContentSequencesByTrackingUniqueIdentifiers","MeasurementGroups","MeasurementGroup","TrackingUniqueIdentifierItem","trackingUniqueIdentifier","UID","_getMergedContentSequencesByTrackingUniqueIdentifiers","mergedContentSequence","some","group","ValueType","graphicItem","UIDREFContentItem","TrackingIdentifierContentItem","NUMContentItems","loaded","_getCoordsFromSCOORDOrSCOORD3D","TrackingIdentifier","TextValue","MeasuredValueSequence","_getLabelFromMeasuredValueSequence","_processTID1410Measurement","finding","findingSites","ConceptCodeSequence","CodeMeaning","cornerstoneFreeTextFindingSite","FindingSite","_processNonGeometricallyDefinedMeasurement","_processMeasurement","_getMeasurements","mappings","getSourceMappings","isHydrated","isRehydratable","mappingDefinitions","m","annotationType","adapterKeys","adapterKey","isValidCornerstoneTrackingIdentifier","adapters","adapter","cornerstoneTag","split","mappedTrackingIdentifier","log","activeDisplaySets","activeDisplaySet","_checkIfCanAddMeasurementsToDisplaySet","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","newDisplaySet","_load","srDisplaySet","customizationService","unloadedMeasurements","unsupported","SOPInstanceUIDs","imageIdsForDisplaySet","getImageIdsForDisplaySet","getUIDsFromImageID","j","onBeforeSRAddMeasurement","getModeCustomization","_measurementReferencesSOPInstanceUID","frame","ReferencedFrameNumber","splice","Number","RelationshipType","ReferencedFrameOfReferenceSequence","NumericValue","MeasurementUnitsCodeSequence","toFixed","sequence","name","getDisplaySetsFromSeries","srProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","srDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","viewports","OHIF","additionalFindingTypes","filteredToolState","addToFilteredToolState","toolType","imageIdSpecificToolState","measurementDataI","md","toolData","assign","uids","slice","annotationManager","framesOfReference","getFramesOfReference","frameOfReference","frameOfReferenceAnnotations","getAnnotations","toolTypes","k","uidIndex","findIndex","props","actions","downloadReport","srDataset","generateReport","reportBlob","dcmjs","datasetToBlob","objectUrl","URL","createObjectURL","window","location","storeMeasurements","info","store","dicom","error","reject","naturalizedReport","_generateReport","getFilteredCornerstoneToolState","report","dataset","SpecificCharacterSet","onBeforeDicomStore","dicomDict","deleteStudyMetadataPromise","DicomMetadataStore","definitions","commandFn","defaultContext","addToolInstance","toolClass","InstanceClass","addTool","Component","React","OHIFCornerstoneSRViewport","fallback","onModeEnter","getDisplaySetCache","values","ds","preRegistration","LengthTool","BidirectionalTool","EllipticalROITool","CircleROITool","ArrowAnnotateTool","AngleTool","PlanarFreehandROITool","RectangleROITool","CobbAngleTool","dashedLine","setToolGroupToolStyles","global","getViewportModule","component","_extends","getCommandsModule","getSopClassHandlerModule","getUtilityModule","exports","findInstance","sopUid","referencedDisplaySet","getDisplaySetByUID","images","findReferencedInstances","instanceById","createReferencedImageDisplaySet","imageSet","setAttributes","SeriesTime","isMultiFrame","numImageFrames","isReconstructable","isCompositeStack","madeInClient","excludeFromThumbnailBrowser","updateInstances","addDisplaySets","locking","CsAnnotation","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","convertCode","codingValues","code","text","convertSites","sites","ret","site","hydrateStructuredReport","appConfig","disableEditing","getActiveDataSource","getCustomization","getInstance","sopInstanceUIDToImageId","imageIdsForToolState","datasetToUse","REPORT","GROUP","TRACKING_IDENTIFIER","imagingMeasurementContent","toArray","codeMeaningEquals","measurementGroups","cornerstoneToolClasses","registeredToolClasses","measurementGroup","TrackingIdentifierGroup","contentItem","_mapLegacyDataSet","storedMeasurementByAnnotationType","generateToolState","onBeforeSRHydration","hydratableMeasurementsInSR","imageIds","targetStudyInstanceUID","sopInstanceUid","SeriesInstanceUIDs","source","getSource","freeTextLabel","fs","getLabelFromDCMJSImportedToolData","matchingMapping","newAnnotationUID","addRawMeasurement","toMeasurementSchema","addedAnnotation","getAnnotation","setAnnotationLocked","codeMeaningName","state","trackingIdentifiersByViewportId","setTrackingUniqueIdentifiersForElement","getEnabledElement"],"sourceRoot":""}