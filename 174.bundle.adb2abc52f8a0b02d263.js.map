{"version":3,"file":"174.bundle.adb2abc52f8a0b02d263.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.js","webpack:///../../../extensions/measurement-tracking/src/_shared/createReportAsync.tsx","webpack:///../../../extensions/measurement-tracking/src/_shared/PROMPT_RESPONSES.js","webpack:///../../../extensions/measurement-tracking/src/_shared/getNextSRSeriesNumber.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptSaveReport.js","webpack:///../../../extensions/measurement-tracking/src/_shared/createReportDialogPrompt.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/ActionButtons.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: 'promptBeginTracking',\r\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: [\r\n              'clearAllMeasurements',\r\n              'showStructuredReportDisplaySetInActiveViewport',\r\n            ],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n            ],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToFirstMeasurementInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToFirstMeasurementInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn(\r\n        'showStructuredReportDisplaySetInActiveViewport: not implemented'\r\n      );\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID =\r\n        evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs =\r\n        evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries\r\n        .slice()\r\n        .filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries\r\n        .slice()\r\n        .filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined ||\r\n        ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    shouldKillMachine: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 ||\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration };\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const { viewportIndex, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(\r\n      uiViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message = 'Track measurements for this series?';\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: 'cancel',\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: 'secondary',\r\n        text: 'No, do not ask again',\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  const { viewportIndex, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    let promptResult = await _askShouldAddMeasurements(\r\n      UIViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'Do you want to add this measurement to the existing report?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  const { viewportIndex, StudyInstanceUID, SeriesInstanceUID } = evt;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(\r\n      UIViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message = 'Track measurements for this series?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'No', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, do not ask again for this series',\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","import React from 'react';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\n\r\n/**\r\n *\r\n * @param {*} servicesManager\r\n * @param {*} dataSource\r\n * @param {*} measurements\r\n * @param {*} options\r\n * @returns {string[]} displaySetInstanceUIDs\r\n */\r\nasync function createReportAsync(\r\n  servicesManager,\r\n  commandsManager,\r\n  dataSource,\r\n  measurements,\r\n  options\r\n) {\r\n  const {\r\n    displaySetService,\r\n    uiNotificationService,\r\n    uiDialogService,\r\n  } = servicesManager.services;\r\n  const loadingDialogId = uiDialogService.create({\r\n    showOverlay: true,\r\n    isDraggable: false,\r\n    centralize: true,\r\n    // TODO: Create a loading indicator component + zeplin design?\r\n    content: Loading,\r\n  });\r\n\r\n  try {\r\n    const naturalizedReport = await commandsManager.runCommand(\r\n      'storeMeasurements',\r\n      {\r\n        measurementData: measurements,\r\n        dataSource,\r\n        additionalFindingTypes: ['ArrowAnnotate'],\r\n        options,\r\n      },\r\n      'CORNERSTONE_STRUCTURED_REPORT'\r\n    );\r\n\r\n    // The \"Mode\" route listens for DicomMetadataStore changes\r\n    // When a new instance is added, it listens and\r\n    // automatically calls makeDisplaySets\r\n    DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n    const displaySetInstanceUID = displaySetService.getMostRecentDisplaySet();\r\n\r\n    uiNotificationService.show({\r\n      title: 'Create Report',\r\n      message: 'Measurements saved successfully',\r\n      type: 'success',\r\n    });\r\n\r\n    return [displaySetInstanceUID];\r\n  } catch (error) {\r\n    uiNotificationService.show({\r\n      title: 'Create Report',\r\n      message: error.message || 'Failed to store measurements',\r\n      type: 'error',\r\n    });\r\n  } finally {\r\n    uiDialogService.dismiss({ id: loadingDialogId });\r\n  }\r\n}\r\n\r\nfunction Loading() {\r\n  return <div className=\"text-primary-active\">Loading...</div>;\r\n}\r\n\r\nexport default createReportAsync;\r\n","const RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nexport default RESPONSE;\r\n","const MIN_SR_SERIES_NUMBER = 4700;\r\n\r\nexport default function getNextSRSeriesNumber(displaySetService) {\r\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\r\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\r\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\r\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\r\n\r\n  return maxSeriesNumber + 1;\r\n}\r\n","import createReportAsync from './../../_shared/createReportAsync';\r\nimport createReportDialogPrompt from '../../_shared/createReportDialogPrompt';\r\nimport getNextSRSeriesNumber from '../../_shared/getNextSRSeriesNumber';\r\nimport RESPONSE from '../../_shared/PROMPT_RESPONSES';\r\n\r\nfunction promptSaveReport(\r\n  { servicesManager, commandsManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) {\r\n  const {\r\n    uiDialogService,\r\n    measurementService,\r\n    displaySetService,\r\n  } = servicesManager.services;\r\n  const viewportIndex =\r\n    evt.viewportIndex === undefined\r\n      ? evt.data.viewportIndex\r\n      : evt.viewportIndex;\r\n  const isBackupSave =\r\n    evt.isBackupSave === undefined ? evt.data.isBackupSave : evt.isBackupSave;\r\n  const StudyInstanceUID = evt?.data?.StudyInstanceUID;\r\n  const SeriesInstanceUID = evt?.data?.SeriesInstanceUID;\r\n\r\n  const { trackedStudy, trackedSeries } = ctx;\r\n  let displaySetInstanceUIDs;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    // TODO: Fallback if (uiDialogService) {\r\n    const promptResult = await createReportDialogPrompt(uiDialogService);\r\n\r\n    if (promptResult.action === RESPONSE.CREATE_REPORT) {\r\n      const dataSources = extensionManager.getDataSources();\r\n      const dataSource = dataSources[0];\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m =>\r\n          trackedStudy === m.referenceStudyUID &&\r\n          trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      const SeriesDescription =\r\n        // isUndefinedOrEmpty\r\n        promptResult.value === undefined || promptResult.value === ''\r\n          ? 'Research Derived Series' // default\r\n          : promptResult.value; // provided value\r\n\r\n      const SeriesNumber = getNextSRSeriesNumber(displaySetService);\r\n\r\n      displaySetInstanceUIDs = await createReportAsync(\r\n        servicesManager,\r\n        commandsManager,\r\n        dataSource,\r\n        trackedMeasurements,\r\n        {\r\n          SeriesDescription,\r\n          SeriesNumber,\r\n        }\r\n      );\r\n    } else if (promptResult.action === RESPONSE.CANCEL) {\r\n      // Do nothing\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult.action,\r\n      createdDisplaySetInstanceUIDs: displaySetInstanceUIDs,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportIndex,\r\n      isBackupSave,\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptSaveReport;\r\n","/* eslint-disable react/display-name */\r\nimport React from 'react';\r\nimport { Dialog, Input } from '@ohif/ui';\r\nimport RESPONSE from './PROMPT_RESPONSES';\r\n\r\nexport default function createReportDialogPrompt(uiDialogService) {\r\n  return new Promise(function(resolve, reject) {\r\n    let dialogId = undefined;\r\n\r\n    const _handleClose = () => {\r\n      // Dismiss dialog\r\n      uiDialogService.dismiss({ id: dialogId });\r\n      // Notify of cancel action\r\n      resolve({ action: RESPONSE.CANCEL, value: undefined });\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {string} param0.action - value of action performed\r\n     * @param {string} param0.value - value from input field\r\n     */\r\n    const _handleFormSubmit = ({ action, value }) => {\r\n      uiDialogService.dismiss({ id: dialogId });\r\n      switch (action.id) {\r\n        case 'save':\r\n          resolve({ action: RESPONSE.CREATE_REPORT, value: value.label });\r\n          break;\r\n        case 'cancel':\r\n          resolve({ action: RESPONSE.CANCEL, value: undefined });\r\n          break;\r\n      }\r\n    };\r\n\r\n    dialogId = uiDialogService.create({\r\n      centralize: true,\r\n      isDraggable: false,\r\n      content: Dialog,\r\n      useLastPosition: false,\r\n      showOverlay: true,\r\n      contentProps: {\r\n        title: 'Create Report',\r\n        value: { label: '' },\r\n        noCloseButton: true,\r\n        onClose: _handleClose,\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\r\n          { id: 'save', text: 'Save', type: 'secondary' },\r\n        ],\r\n        // TODO: Should be on button press...\r\n        onSubmit: _handleFormSubmit,\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              uiDialogService.dismiss({ id: dialogId });\r\n              resolve({ action: RESPONSE.CREATE_REPORT, value: value.label });\r\n            }\r\n          };\r\n          return (\r\n            <div className=\"\">\r\n              <Input\r\n                label=\"Enter the report name\"\r\n                labelClassName=\"text-white grow leading-[1.2] text-[14px]\"\r\n                autoFocus\r\n                className=\"bg-black border-primary-main grow\"\r\n                type=\"text\"\r\n                value={value.label}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    });\r\n  });\r\n}\r\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nfunction promptHydrateStructuredReport(\r\n  { servicesManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) {\r\n  const {\r\n    uiViewportDialogService,\r\n    displaySetService,\r\n  } = servicesManager.services;\r\n  const { viewportIndex, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    const promptResult = await _askTrackMeasurements(\r\n      uiViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    // Need to do action here... So we can set state...\r\n    let StudyInstanceUID, SeriesInstanceUIDs;\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\r\n      console.warn('!! HYDRATING STRUCTURED REPORT');\r\n      const hydrationResult = hydrateStructuredReport(\r\n        { servicesManager, extensionManager },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportIndex,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message =\r\n      'Do you want to continue tracking measurements for this study?';\r\n    const actions = [\r\n      {\r\n        type: 'secondary',\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager },\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportIndex, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportIndex,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport {\r\n  machineConfiguration,\r\n  defaultOptions,\r\n} from './measurementTrackingMachine';\r\nimport promptBeginTracking from './promptBeginTracking';\r\nimport promptTrackNewSeries from './promptTrackNewSeries';\r\nimport promptTrackNewStudy from './promptTrackNewStudy';\r\nimport promptSaveReport from './promptSaveReport';\r\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID =\r\n  '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportIndex, viewports } = viewportGrid;\r\n  const { measurementService, displaySetService } = servicesManager.services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m =>\r\n          trackedStudy === m.referenceStudyUID &&\r\n          trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        viewportGrid.activeViewportIndex,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID =\r\n        trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n        referencedDisplaySetUID\r\n      );\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith(\r\n        'volumeId'\r\n      );\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn(\r\n            'Could not find image index for tracked measurement, using 0'\r\n          );\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportIndex: viewportGrid.activeViewportIndex,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID =\r\n          evt.data.createdDisplaySetInstanceUIDs[0].displaySetInstanceUID;\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportIndex: evt.data.viewportIndex,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTracking.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    promptSaveReport: promptSaveReport.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = Machine(\r\n    machineConfiguration,\r\n    machineOptions\r\n  );\r\n\r\n  const [\r\n    trackedMeasurements,\r\n    sendTrackedMeasurementsEvent,\r\n    trackedMeasurementsService,\r\n  ] = useMachine(measurementTrackingMachine);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    if (viewports.length > 0) {\r\n      const activeViewport = viewports[activeViewportIndex];\r\n\r\n      if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n        return;\r\n      }\r\n\r\n      // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n      // tracking fusion viewports yet. This should change when we do.\r\n      const { displaySetService } = servicesManager.services;\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        activeViewport.displaySetInstanceUIDs[0]\r\n      );\r\n\r\n      if (!displaySet) {\r\n        return;\r\n      }\r\n\r\n      // If this is an SR produced by our SR SOPClassHandler,\r\n      // and it hasn't been loaded yet, do that now so we\r\n      // can check if it can be rehydrated or not.\r\n      //\r\n      // Note: This happens:\r\n      // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n      // - If the displaySet has never been hung\r\n      //\r\n      // Otherwise, the displaySet will be loaded by the useEffect handler\r\n      // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n      // The issue here is that this handler in TrackedMeasurementsContext\r\n      // ends up occurring before the Viewport is created, so the displaySet\r\n      // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n      if (\r\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n        !displaySet.isLoaded &&\r\n        displaySet.load\r\n      ) {\r\n        displaySet.load();\r\n      }\r\n\r\n      // Magic string\r\n      // load function added by our sopClassHandler module\r\n      if (\r\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n        displaySet.isRehydratable === true\r\n      ) {\r\n        console.log('sending event...', trackedMeasurements);\r\n        sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\r\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n          viewportIndex: activeViewportIndex,\r\n        });\r\n      }\r\n    }\r\n  }, [\r\n    activeViewportIndex,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n  ]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n};\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({\r\n  servicesManager,\r\n  extensionManager,\r\n  commandsManager,\r\n}) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(\r\n    null,\r\n    { servicesManager, extensionManager, commandsManager }\r\n  );\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { utils } from '@ohif/core';\r\nimport {\r\n  StudyBrowser,\r\n  useImageViewer,\r\n  useViewportGrid,\r\n  Dialog,\r\n} from '@ohif/ui';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\n\r\nconst { formatDate } = utils;\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction PanelStudyBrowserTracking({\r\n  servicesManager,\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n}) {\r\n  const {\r\n    measurementService,\r\n    displaySetService,\r\n    uiDialogService,\r\n    hangingProtocolService,\r\n    uiNotificationService,\r\n  } = servicesManager.services;\r\n\r\n  // Normally you nest the components so the tree isn't so deep, and the data\r\n  // doesn't have to have such an intense shape. This works well enough for now.\r\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\r\n  const { StudyInstanceUIDs } = useImageViewer();\r\n  const [\r\n    { activeViewportIndex, viewports, numCols, numRows },\r\n    viewportGridService,\r\n  ] = useViewportGrid();\r\n  const [\r\n    trackedMeasurements,\r\n    sendTrackedMeasurementsEvent,\r\n  ] = useTrackedMeasurements();\r\n  const [activeTabName, setActiveTabName] = useState('primary');\r\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\r\n    ...StudyInstanceUIDs,\r\n  ]);\r\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\r\n  const [displaySets, setDisplaySets] = useState([]);\r\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\r\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\r\n\r\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\r\n    let updatedViewports = [];\r\n    const viewportIndex = activeViewportIndex;\r\n    try {\r\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportIndex,\r\n        displaySetInstanceUID\r\n      );\r\n    } catch (error) {\r\n      console.warn(error);\r\n      uiNotificationService.show({\r\n        title: 'Thumbnail Double Click',\r\n        message:\r\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\r\n        type: 'info',\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  };\r\n\r\n  const activeViewportDisplaySetInstanceUIDs =\r\n    viewports[activeViewportIndex]?.displaySetInstanceUIDs;\r\n\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, ({ source, measurement }) => {\r\n          const {\r\n            referenceSeriesUID: SeriesInstanceUID,\r\n            referenceStudyUID: StudyInstanceUID,\r\n          } = measurement;\r\n\r\n          sendTrackedMeasurementsEvent('SET_DIRTY', { SeriesInstanceUID });\r\n          sendTrackedMeasurementsEvent('TRACK_SERIES', {\r\n            viewportIndex: activeViewportIndex,\r\n            StudyInstanceUID,\r\n            SeriesInstanceUID,\r\n          });\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, activeViewportIndex, sendTrackedMeasurementsEvent]);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // ~~ studyDisplayList\r\n  useEffect(() => {\r\n    // Fetch all studies for the patient in each primary study\r\n    async function fetchStudiesForPatient(StudyInstanceUID) {\r\n      // current study qido\r\n      const qidoForStudyUID = await dataSource.query.studies.search({\r\n        studyInstanceUid: StudyInstanceUID,\r\n      });\r\n\r\n      let qidoStudiesForPatient = qidoForStudyUID;\r\n\r\n      // try to fetch the prior studies based on the patientID if the\r\n      // server can respond.\r\n      try {\r\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(\r\n          qidoForStudyUID\r\n        );\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n\r\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\r\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\r\n        return {\r\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\r\n          date: formatDate(qidoStudy.StudyDate),\r\n          description: qidoStudy.StudyDescription,\r\n          modalities: qidoStudy.ModalitiesInStudy,\r\n          numInstances: qidoStudy.NumInstances,\r\n        };\r\n      });\r\n\r\n      setStudyDisplayList(prevArray => {\r\n        const ret = [...prevArray];\r\n        for (const study of actuallyMappedStudies) {\r\n          if (\r\n            !prevArray.find(\r\n              it => it.studyInstanceUid === study.studyInstanceUid\r\n            )\r\n          ) {\r\n            ret.push(study);\r\n          }\r\n        }\r\n        return ret;\r\n      });\r\n    }\r\n\r\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\r\n\r\n  // ~~ Initial Thumbnails\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    currentDisplaySets.forEach(async dSet => {\r\n      const newImageSrcEntry = {};\r\n      const displaySet = displaySetService.getDisplaySetByUID(\r\n        dSet.displaySetInstanceUID\r\n      );\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n      // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n      if (imageId) {\r\n        // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n        newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(\r\n          imageId\r\n        );\r\n        setThumbnailImageSrcMap(prevState => {\r\n          return { ...prevState, ...newImageSrcEntry };\r\n        });\r\n      }\r\n    });\r\n  }, [displaySetService, dataSource, getImageSrc]);\r\n\r\n  // ~~ displaySets\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const mappedDisplaySets = _mapDisplaySets(\r\n      currentDisplaySets,\r\n      thumbnailImageSrcMap,\r\n      trackedSeries,\r\n      viewports,\r\n      viewportGridService,\r\n      dataSource,\r\n      displaySetService,\r\n      uiDialogService,\r\n      uiNotificationService\r\n    );\r\n\r\n    setDisplaySets(mappedDisplaySets);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService.activeDisplaySets,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    thumbnailImageSrcMap,\r\n  ]);\r\n\r\n  // ~~ subscriptions --> displaySets\r\n  useEffect(() => {\r\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\r\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      data => {\r\n        const { displaySetsAdded, options } = data;\r\n        displaySetsAdded.forEach(async dSet => {\r\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\r\n\r\n          const newImageSrcEntry = {};\r\n          const displaySet = displaySetService.getDisplaySetByUID(\r\n            displaySetInstanceUID\r\n          );\r\n\r\n          if (options.madeInClient) {\r\n            setJumpToDisplaySet(displaySetInstanceUID);\r\n          }\r\n\r\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n\r\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n          if (imageId) {\r\n            // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n            newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(\r\n              imageId\r\n            );\r\n            setThumbnailImageSrcMap(prevState => {\r\n              return { ...prevState, ...newImageSrcEntry };\r\n            });\r\n          }\r\n        });\r\n      }\r\n    );\r\n\r\n    // TODO: Will this always hold _all_ the displaySets we care about?\r\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\r\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\r\n      changedDisplaySets => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          changedDisplaySets,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsAdded.unsubscribe();\r\n      SubscriptionDisplaySetsChanged.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService,\r\n    dataSource,\r\n    getImageSrc,\r\n    thumbnailImageSrcMap,\r\n    trackedSeries,\r\n    viewports,\r\n  ]);\r\n\r\n  const tabs = _createStudyBrowserTabs(\r\n    StudyInstanceUIDs,\r\n    studyDisplayList,\r\n    displaySets,\r\n    hangingProtocolService\r\n  );\r\n\r\n  // TODO: Should not fire this on \"close\"\r\n  function _handleStudyClick(StudyInstanceUID) {\r\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(\r\n      StudyInstanceUID\r\n    );\r\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\r\n      ? [\r\n          ...expandedStudyInstanceUIDs.filter(\r\n            stdyUid => stdyUid !== StudyInstanceUID\r\n          ),\r\n        ]\r\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n\r\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n\r\n    if (!shouldCollapseStudy) {\r\n      const madeInClient = true;\r\n      requestDisplaySetCreationForStudy(\r\n        displaySetService,\r\n        StudyInstanceUID,\r\n        madeInClient\r\n      );\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (jumpToDisplaySet) {\r\n      // Get element by displaySetInstanceUID\r\n      const displaySetInstanceUID = jumpToDisplaySet;\r\n      const element = document.getElementById(\r\n        `thumbnail-${displaySetInstanceUID}`\r\n      );\r\n\r\n      if (element && typeof element.scrollIntoView === 'function') {\r\n        // TODO: Any way to support IE here?\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n\r\n        setJumpToDisplaySet(null);\r\n      }\r\n    }\r\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\r\n\r\n  useEffect(() => {\r\n    if (!jumpToDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInstanceUID = jumpToDisplaySet;\r\n    // Set the activeTabName and expand the study\r\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(\r\n      displaySetInstanceUID,\r\n      tabs\r\n    );\r\n    if (!thumbnailLocation) {\r\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\r\n\r\n      return;\r\n    }\r\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\r\n    setActiveTabName(tabName);\r\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    if (!studyExpanded) {\r\n      const updatedExpandedStudyInstanceUIDs = [\r\n        ...expandedStudyInstanceUIDs,\r\n        StudyInstanceUID,\r\n      ];\r\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n    }\r\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\r\n\r\n  return (\r\n    <StudyBrowser\r\n      tabs={tabs}\r\n      servicesManager={servicesManager}\r\n      activeTabName={activeTabName}\r\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\r\n      onClickStudy={_handleStudyClick}\r\n      onClickTab={clickedTabName => {\r\n        setActiveTabName(clickedTabName);\r\n      }}\r\n      onClickUntrack={displaySetInstanceUID => {\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          displaySetInstanceUID\r\n        );\r\n        // TODO: shift this somewhere else where we're centralizing this logic?\r\n        // Potentially a helper from displaySetInstanceUID to this\r\n        sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n        });\r\n      }}\r\n      onClickThumbnail={() => {}}\r\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\r\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\r\n    />\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  servicesManager: PropTypes.object.isRequired,\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PanelStudyBrowserTracking;\r\n\r\n/**\r\n * Maps from the DataSource's format to a naturalized object\r\n *\r\n * @param {*} studies\r\n */\r\nfunction _mapDataSourceStudies(studies) {\r\n  return studies.map(study => {\r\n    // TODO: Why does the data source return in this format?\r\n    return {\r\n      AccessionNumber: study.accession,\r\n      StudyDate: study.date,\r\n      StudyDescription: study.description,\r\n      NumInstances: study.instances,\r\n      ModalitiesInStudy: study.modalities,\r\n      PatientID: study.mrn,\r\n      PatientName: study.patientName,\r\n      StudyInstanceUID: study.studyInstanceUid,\r\n      StudyTime: study.time,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _mapDisplaySets(\r\n  displaySets,\r\n  thumbnailImageSrcMap,\r\n  trackedSeriesInstanceUIDs,\r\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\r\n  viewportGridService,\r\n  dataSource,\r\n  displaySetService,\r\n  uiDialogService,\r\n  uiNotificationService\r\n) {\r\n  const thumbnailDisplaySets = [];\r\n  const thumbnailNoImageDisplaySets = [];\r\n  displaySets\r\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n    .forEach(ds => {\r\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\r\n      const componentType = _getComponentType(ds.Modality);\r\n      const numPanes = viewportGridService.getNumViewportPanes();\r\n      const viewportIdentificator =\r\n        numPanes === 1\r\n          ? []\r\n          : viewports.reduce((acc, viewportData, index) => {\r\n              if (\r\n                index < numPanes &&\r\n                viewportData?.displaySetInstanceUIDs?.includes(\r\n                  ds.displaySetInstanceUID\r\n                )\r\n              ) {\r\n                acc.push(viewportData.viewportLabel);\r\n              }\r\n              return acc;\r\n            }, []);\r\n\r\n      const array =\r\n        componentType === 'thumbnailTracked'\r\n          ? thumbnailDisplaySets\r\n          : thumbnailNoImageDisplaySets;\r\n\r\n      const { displaySetInstanceUID } = ds;\r\n\r\n      const thumbnailProps = {\r\n        displaySetInstanceUID,\r\n        description: ds.SeriesDescription,\r\n        seriesNumber: ds.SeriesNumber,\r\n        modality: ds.Modality,\r\n        seriesDate: formatDate(ds.SeriesDate),\r\n        numInstances: ds.numImageFrames,\r\n        countIcon: ds.countIcon,\r\n        StudyInstanceUID: ds.StudyInstanceUID,\r\n        componentType,\r\n        imageSrc,\r\n        dragData: {\r\n          type: 'displayset',\r\n          displaySetInstanceUID,\r\n          // .. Any other data to pass\r\n        },\r\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\r\n        viewportIdentificator,\r\n      };\r\n\r\n      if (componentType === 'thumbnailNoImage') {\r\n        if (dataSource.reject && dataSource.reject.series) {\r\n          thumbnailProps.canReject = true;\r\n          thumbnailProps.onReject = () => {\r\n            uiDialogService.create({\r\n              id: 'ds-reject-sr',\r\n              centralize: true,\r\n              isDraggable: false,\r\n              showOverlay: true,\r\n              content: Dialog,\r\n              contentProps: {\r\n                title: 'Delete Report',\r\n                body: () => (\r\n                  <div className=\"p-4 text-white bg-primary-dark\">\r\n                    <p>Are you sure you want to delete this report?</p>\r\n                    <p>This action cannot be undone.</p>\r\n                  </div>\r\n                ),\r\n                actions: [\r\n                  { id: 'cancel', text: 'Cancel', type: 'secondary' },\r\n                  {\r\n                    id: 'yes',\r\n                    text: 'Yes',\r\n                    type: 'primary',\r\n                    classes: ['reject-yes-button'],\r\n                  },\r\n                ],\r\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\r\n                onShow: () => {\r\n                  const yesButton = document.querySelector(\r\n                    '.reject-yes-button'\r\n                  );\r\n\r\n                  yesButton.focus();\r\n                },\r\n                onSubmit: async ({ action }) => {\r\n                  switch (action.id) {\r\n                    case 'yes':\r\n                      try {\r\n                        await dataSource.reject.series(\r\n                          ds.StudyInstanceUID,\r\n                          ds.SeriesInstanceUID\r\n                        );\r\n                        displaySetService.deleteDisplaySet(\r\n                          displaySetInstanceUID\r\n                        );\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Report deleted successfully',\r\n                          type: 'success',\r\n                        });\r\n                      } catch (error) {\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Failed to delete report',\r\n                          type: 'error',\r\n                        });\r\n                      }\r\n                      break;\r\n                    case 'cancel':\r\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                      break;\r\n                  }\r\n                },\r\n              },\r\n            });\r\n          };\r\n        } else {\r\n          thumbnailProps.canReject = false;\r\n        }\r\n      }\r\n\r\n      array.push(thumbnailProps);\r\n    });\r\n\r\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n}\r\n\r\nconst thumbnailNoImageModalities = [\r\n  'SR',\r\n  'SEG',\r\n  'SM',\r\n  'RTSTRUCT',\r\n  'RTPLAN',\r\n  'RTDOSE',\r\n  'DOC',\r\n  'OT',\r\n];\r\n\r\nfunction _getComponentType(Modality) {\r\n  if (thumbnailNoImageModalities.includes(Modality)) {\r\n    return 'thumbnailNoImage';\r\n  }\r\n\r\n  return 'thumbnailTracked';\r\n}\r\n\r\n/**\r\n *\r\n * @param {string[]} primaryStudyInstanceUIDs\r\n * @param {object[]} studyDisplayList\r\n * @param {string} studyDisplayList.studyInstanceUid\r\n * @param {string} studyDisplayList.date\r\n * @param {string} studyDisplayList.description\r\n * @param {string} studyDisplayList.modalities\r\n * @param {number} studyDisplayList.numInstances\r\n * @param {object[]} displaySets\r\n * @returns tabs - The prop object expected by the StudyBrowser component\r\n */\r\nfunction _createStudyBrowserTabs(\r\n  primaryStudyInstanceUIDs,\r\n  studyDisplayList,\r\n  displaySets,\r\n  hangingProtocolService\r\n) {\r\n  const primaryStudies = [];\r\n  const recentStudies = [];\r\n  const allStudies = [];\r\n\r\n  // Iterate over each study...\r\n  studyDisplayList.forEach(study => {\r\n    // Find it's display sets\r\n    const displaySetsForStudy = displaySets.filter(\r\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\r\n    );\r\n\r\n    // Sort them\r\n    const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\r\n    displaySetsForStudy.sort(dsSortFn);\r\n\r\n    /* Sort by series number, then by series date\r\n      displaySetsForStudy.sort((a, b) => {\r\n        if (a.seriesNumber !== b.seriesNumber) {\r\n          return a.seriesNumber - b.seriesNumber;\r\n        }\r\n\r\n        const seriesDateA = Date.parse(a.seriesDate);\r\n        const seriesDateB = Date.parse(b.seriesDate);\r\n\r\n        return seriesDateA - seriesDateB;\r\n      });\r\n    */\r\n\r\n    // Map the study to it's tab/view representation\r\n    const tabStudy = Object.assign({}, study, {\r\n      displaySets: displaySetsForStudy,\r\n    });\r\n\r\n    // Add the \"tab study\" to the 'primary', 'recent', and/or 'all' tab group(s)\r\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\r\n      primaryStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    } else {\r\n      // TODO: Filter allStudies to dates within one year of current date\r\n      recentStudies.push(tabStudy);\r\n      allStudies.push(tabStudy);\r\n    }\r\n  });\r\n\r\n  // Newest first\r\n  const _byDate = (a, b) => {\r\n    const dateA = Date.parse(a);\r\n    const dateB = Date.parse(b);\r\n\r\n    return dateB - dateA;\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      name: 'primary',\r\n      label: 'Primary',\r\n      studies: primaryStudies.sort((studyA, studyB) =>\r\n        _byDate(studyA.date, studyB.date)\r\n      ),\r\n    },\r\n    {\r\n      name: 'recent',\r\n      label: 'Recent',\r\n      studies: recentStudies.sort((studyA, studyB) =>\r\n        _byDate(studyA.date, studyB.date)\r\n      ),\r\n    },\r\n    {\r\n      name: 'all',\r\n      label: 'All',\r\n      studies: allStudies.sort((studyA, studyB) =>\r\n        _byDate(studyA.date, studyB.date)\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return tabs;\r\n}\r\n\r\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\r\n  for (let t = 0; t < tabs.length; t++) {\r\n    const { studies } = tabs[t];\r\n\r\n    for (let s = 0; s < studies.length; s++) {\r\n      const { displaySets } = studies[s];\r\n\r\n      for (let d = 0; d < displaySets.length; d++) {\r\n        const displaySet = displaySets[d];\r\n\r\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\r\n          return {\r\n            tabName: tabs[t].name,\r\n            StudyInstanceUID: studies[s].studyInstanceUid,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","function requestDisplaySetCreationForStudy(\r\n  dataSource,\r\n  displaySetService,\r\n  StudyInstanceUID,\r\n  madeInClient\r\n) {\r\n  if (\r\n    displaySetService.activeDisplaySets.some(\r\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\r\n}\r\n\r\nexport default requestDisplaySetCreationForStudy;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}) {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(\r\n    extensionManager\r\n  );\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n  const _getImageSrcFromImageId = _createGetImageSrcFromImageIdFn(\r\n    extensionManager\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      servicesManager={servicesManager}\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nWrappedPanelStudyBrowserTracking.propTypes = {\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { Button, ButtonGroup } from '@ohif/ui';\r\n\r\nfunction ActionButtons({ onExportClick, onCreateReportClick, disabled }) {\r\n  const { t } = useTranslation('MeasurementTable');\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        className=\"text-base px-2 py-2\"\r\n        size=\"initial\"\r\n        variant={disabled ? 'disabled' : 'outlined'}\r\n        color=\"black\"\r\n        border=\"primaryActive\"\r\n        onClick={onExportClick}\r\n        disabled={disabled}\r\n      >\r\n        {t('Export')}\r\n      </Button>\r\n      <Button\r\n        className=\"ml-2 px-2 text-base\"\r\n        variant={disabled ? 'disabled' : 'outlined'}\r\n        size=\"initial\"\r\n        color=\"black\"\r\n        border=\"primaryActive\"\r\n        onClick={onCreateReportClick}\r\n        disabled={disabled}\r\n      >\r\n        {t('Create Report')}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nActionButtons.propTypes = {\r\n  onExportClick: PropTypes.func,\r\n  onCreateReportClick: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n};\r\n\r\nActionButtons.defaultProps = {\r\n  onExportClick: () => alert('Export'),\r\n  onCreateReportClick: () => alert('Create Report'),\r\n  disabled: false,\r\n};\r\n\r\nexport default ActionButtons;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  StudySummary,\r\n  MeasurementTable,\r\n  Dialog,\r\n  Input,\r\n  useViewportGrid,\r\n} from '@ohif/ui';\r\nimport { DicomMetadataStore, utils } from '@ohif/core';\r\nimport { useDebounce } from '@hooks';\r\nimport ActionButtons from './ActionButtons';\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\nimport debounce from 'lodash.debounce';\r\n\r\nconst { downloadCSVReport } = utils;\r\nconst { formatDate } = utils;\r\n\r\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\r\n  key: undefined, //\r\n  date: '', // '07-Sep-2010',\r\n  modality: '', // 'CT',\r\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\r\n};\r\n\r\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }) {\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(\r\n    Date.now().toString()\r\n  );\r\n  const debouncedMeasurementChangeTimestamp = useDebounce(\r\n    measurementChangeTimestamp,\r\n    200\r\n  );\r\n  const {\r\n    measurementService,\r\n    uiDialogService,\r\n    displaySetService,\r\n  } = servicesManager.services;\r\n  const [\r\n    trackedMeasurements,\r\n    sendTrackedMeasurementsEvent,\r\n  ] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const [displayStudySummary, setDisplayStudySummary] = useState(\r\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\r\n  );\r\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\r\n  const measurementsPanelRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const measurements = measurementService.getMeasurements();\r\n    const filteredMeasurements = measurements.filter(\r\n      m =>\r\n        trackedStudy === m.referenceStudyUID &&\r\n        trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    const mappedMeasurements = filteredMeasurements.map(m =>\r\n      _mapMeasurementToDisplay(\r\n        m,\r\n        measurementService.VALUE_TYPES,\r\n        displaySetService\r\n      )\r\n    );\r\n    setDisplayMeasurements(mappedMeasurements);\r\n    // eslint-ignore-next-line\r\n  }, [\r\n    measurementService,\r\n    trackedStudy,\r\n    trackedSeries,\r\n    debouncedMeasurementChangeTimestamp,\r\n  ]);\r\n\r\n  const updateDisplayStudySummary = async () => {\r\n    if (trackedMeasurements.matches('tracking')) {\r\n      const StudyInstanceUID = trackedStudy;\r\n      const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\r\n      const instanceMeta = studyMeta.series[0].instances[0];\r\n      const { StudyDate, StudyDescription } = instanceMeta;\r\n\r\n      const modalities = new Set();\r\n      studyMeta.series.forEach(series => {\r\n        if (trackedSeries.includes(series.SeriesInstanceUID)) {\r\n          modalities.add(series.instances[0].Modality);\r\n        }\r\n      });\r\n      const modality = Array.from(modalities).join('/');\r\n\r\n      if (displayStudySummary.key !== StudyInstanceUID) {\r\n        setDisplayStudySummary({\r\n          key: StudyInstanceUID,\r\n          date: StudyDate, // TODO: Format: '07-Sep-2010'\r\n          modality,\r\n          description: StudyDescription,\r\n        });\r\n      }\r\n    } else if (trackedStudy === '' || trackedStudy === undefined) {\r\n      setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\r\n    }\r\n  };\r\n\r\n  // ~~ DisplayStudySummary\r\n  useEffect(() => {\r\n    updateDisplayStudySummary();\r\n  }, [\r\n    displayStudySummary.key,\r\n    trackedMeasurements,\r\n    trackedStudy,\r\n    updateDisplayStudySummary,\r\n  ]);\r\n\r\n  // TODO: Better way to consolidated, debounce, check on change?\r\n  // Are we exposing the right API for measurementService?\r\n  // This watches for ALL measurementService changes. It updates a timestamp,\r\n  // which is debounced. After a brief period of inactivity, this triggers\r\n  // a re-render where we grab up-to-date measurements\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\r\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\r\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, () => {\r\n          setMeasurementsUpdated(Date.now().toString());\r\n          if (evt === added) {\r\n            debounce(() => {\r\n              measurementsPanelRef.current.scrollTop =\r\n                measurementsPanelRef.current.scrollHeight;\r\n            }, 300)();\r\n          }\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, sendTrackedMeasurementsEvent]);\r\n\r\n  async function exportReport() {\r\n    const measurements = measurementService.getMeasurements();\r\n    const trackedMeasurements = measurements.filter(\r\n      m =>\r\n        trackedStudy === m.referenceStudyUID &&\r\n        trackedSeries.includes(m.referenceSeriesUID)\r\n    );\r\n\r\n    downloadCSVReport(trackedMeasurements, measurementService);\r\n  }\r\n\r\n  const jumpToImage = ({ uid, isActive }) => {\r\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportIndex, uid);\r\n\r\n    onMeasurementItemClickHandler({ uid, isActive });\r\n  };\r\n\r\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\r\n    const measurement = measurementService.getMeasurement(uid);\r\n    jumpToImage({ uid, isActive });\r\n\r\n    const onSubmitHandler = ({ action, value }) => {\r\n      switch (action.id) {\r\n        case 'save': {\r\n          measurementService.update(\r\n            uid,\r\n            {\r\n              ...measurement,\r\n              ...value,\r\n            },\r\n            true\r\n          );\r\n        }\r\n      }\r\n      uiDialogService.dismiss({ id: 'enter-annotation' });\r\n    };\r\n\r\n    uiDialogService.create({\r\n      id: 'enter-annotation',\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Annotation',\r\n        noCloseButton: true,\r\n        value: { label: measurement.label || '' },\r\n        body: ({ value, setValue }) => {\r\n          const onChangeHandler = event => {\r\n            event.persist();\r\n            setValue(value => ({ ...value, label: event.target.value }));\r\n          };\r\n\r\n          const onKeyPressHandler = event => {\r\n            if (event.key === 'Enter') {\r\n              onSubmitHandler({ value, action: { id: 'save' } });\r\n            }\r\n          };\r\n          return (\r\n            <Input\r\n              label=\"Enter your annotation\"\r\n              labelClassName=\"text-white grow text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              id=\"annotation\"\r\n              className=\"bg-black border-primary-main\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={onChangeHandler}\r\n              onKeyPress={onKeyPressHandler}\r\n            />\r\n          );\r\n        },\r\n        actions: [\r\n          // temp: swap button types until colors are updated\r\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\r\n          { id: 'save', text: 'Save', type: 'secondary' },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\r\n    if (!isActive) {\r\n      const measurements = [...displayMeasurements];\r\n      const measurement = measurements.find(m => m.uid === uid);\r\n\r\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\r\n      measurement.isActive = true;\r\n      setDisplayMeasurements(measurements);\r\n    }\r\n  };\r\n\r\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType !== measurementService.VALUE_TYPES.POINT\r\n  );\r\n  const additionalFindings = displayMeasurements.filter(\r\n    dm => dm.measurementType === measurementService.VALUE_TYPES.POINT\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"overflow-x-hidden overflow-y-auto invisible-scrollbar\"\r\n        ref={measurementsPanelRef}\r\n        data-cy={'trackedMeasurements-panel'}\r\n      >\r\n        {displayStudySummary.key && (\r\n          <StudySummary\r\n            date={formatDate(displayStudySummary.date)}\r\n            modality={displayStudySummary.modality}\r\n            description={displayStudySummary.description}\r\n          />\r\n        )}\r\n        <MeasurementTable\r\n          title=\"Measurements\"\r\n          data={displayMeasurementsWithoutFindings}\r\n          servicesManager={servicesManager}\r\n          onClick={jumpToImage}\r\n          onEdit={onMeasurementItemEditHandler}\r\n        />\r\n        {additionalFindings.length !== 0 && (\r\n          <MeasurementTable\r\n            title=\"Additional Findings\"\r\n            data={additionalFindings}\r\n            servicesManager={servicesManager}\r\n            onClick={jumpToImage}\r\n            onEdit={onMeasurementItemEditHandler}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"flex justify-center p-4\">\r\n        <ActionButtons\r\n          onExportClick={exportReport}\r\n          onCreateReportClick={() => {\r\n            sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n              viewportIndex: viewportGrid.activeViewportIndex,\r\n              isBackupSave: true,\r\n            });\r\n          }}\r\n          disabled={\r\n            additionalFindings.length === 0 &&\r\n            displayMeasurementsWithoutFindings.length === 0\r\n          }\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelMeasurementTableTracking.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\n// TODO: This could be a measurementService mapper\r\nfunction _mapMeasurementToDisplay(measurement, types, displaySetService) {\r\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\r\n\r\n  // TODO: We don't deal with multiframe well yet, would need to update\r\n  // This in OHIF-312 when we add FrameIndex to measurements.\r\n\r\n  const instance = DicomMetadataStore.getInstance(\r\n    referenceStudyUID,\r\n    referenceSeriesUID,\r\n    SOPInstanceUID\r\n  );\r\n\r\n  const displaySets = displaySetService.getDisplaySetsForSeries(\r\n    referenceSeriesUID\r\n  );\r\n\r\n  if (!displaySets[0] || !displaySets[0].images) {\r\n    throw new Error(\r\n      'The tracked measurements panel should only be tracking \"stack\" displaySets.'\r\n    );\r\n  }\r\n\r\n  const {\r\n    displayText: baseDisplayText,\r\n    uid,\r\n    label: baseLabel,\r\n    type,\r\n    selected,\r\n    findingSites,\r\n    finding,\r\n  } = measurement;\r\n\r\n  const firstSite = findingSites?.[0];\r\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\r\n  let displayText = baseDisplayText || [];\r\n  if (findingSites) {\r\n    const siteText = [];\r\n    findingSites.forEach(site => {\r\n      if (site?.text !== label) siteText.push(site.text);\r\n    });\r\n    displayText = [...siteText, ...displayText];\r\n  }\r\n  if (finding && finding?.text !== label) {\r\n    displayText = [finding.text, ...displayText];\r\n  }\r\n\r\n  return {\r\n    uid,\r\n    label,\r\n    baseLabel,\r\n    measurementType: type,\r\n    displayText,\r\n    baseDisplayText,\r\n    isActive: selected,\r\n    finding,\r\n    findingSites,\r\n  };\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport {\r\n  PanelMeasurementTableTracking,\r\n  PanelStudyBrowserTracking,\r\n} from './panels';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\nfunction getPanelModule({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'group-layers',\r\n      iconLabel: 'Studies',\r\n      label: 'Studies',\r\n      component: PanelStudyBrowserTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: 'Measurements',\r\n      component: PanelMeasurementTableTracking.bind(null, {\r\n        commandsManager,\r\n        extensionManager,\r\n        servicesManager,\r\n      }),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(\r\n    /* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport'\r\n  );\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n}) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n"],"names":["RESPONSE","machineConfiguration","id","initial","context","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","idle","entry","on","TRACK_SERIES","SET_TRACKED_SERIES","target","actions","PROMPT_HYDRATE_SR","cond","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","assign","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","guards","shouldSetDirty","undefined","includes","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","servicesManager","extensionManager","uiViewportDialogService","viewportIndex","Promise","async","resolve","reject","promptResult","message","text","value","onSubmit","result","hide","show","onOutsideClick","_askTrackMeasurements","NO_NOT_FOR_SERIES","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","Loading","React","className","commandsManager","dataSource","measurements","options","displaySetService","uiNotificationService","uiDialogService","loadingDialogId","create","showOverlay","isDraggable","centralize","content","naturalizedReport","runCommand","measurementData","additionalFindingTypes","DicomMetadataStore","addInstances","displaySetInstanceUID","getMostRecentDisplaySet","title","error","dismiss","MIN_SR_SERIES_NUMBER","measurementService","displaySetInstanceUIDs","dialogId","Dialog","useLastPosition","contentProps","label","noCloseButton","onClose","_handleClose","action","_handleFormSubmit","body","setValue","Input","labelClassName","autoFocus","onChange","event","persist","onKeyPress","key","createReportDialogPrompt","getDataSources","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","SeriesDescription","SeriesNumber","srSeriesNumbers","getActiveDisplaySets","ds","Modality","map","Math","max","getNextSRSeriesNumber","createReportAsync","createdDisplaySetInstanceUIDs","HYDRATE_REPORT","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","TrackedMeasurementsContext","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","children","viewportGrid","viewportGridService","useViewportGrid","activeViewportIndex","viewports","machineOptions","Object","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","viewportOptions","initialImageOptions","index","StructuredReportDisplaySetInstanceUID","measurementIds","ms","fm","i","remove","uid","bind","measurementTrackingMachine","Machine","sendTrackedMeasurementsEvent","trackedMeasurementsService","useMachine","useEffect","activeViewport","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","formatDate","utils","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","hangingProtocolService","StudyInstanceUIDs","useImageViewer","numCols","numRows","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","added","EVENTS","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","subscriptions","forEach","push","subscribe","source","measurement","unsubscribe","unsub","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","qidoStudiesForPatient","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","find","it","fetchStudiesForPatient","currentDisplaySets","activeDisplaySets","newImageSrcEntry","dSet","imageIds","getImageIdsForDisplaySet","floor","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","tabs","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","dsSortFn","getDisplaySetSortFunction","sort","tabStudy","_byDate","a","b","dateA","Date","parse","studyA","studyB","_createStudyBrowserTabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","t","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickUntrack","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","numPanes","getNumViewportPanes","viewportIdentificator","reduce","acc","viewportData","viewportLabel","array","thumbnailProps","seriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","dragData","isTracked","series","canReject","onReject","classes","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","getCornerstoneLibraries","getImageSrcFromImageId","ex","Error","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","disabled","useTranslation","Button","size","variant","color","border","onClick","defaultProps","alert","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","PanelMeasurementTableTracking","measurementChangeTimestamp","setMeasurementsUpdated","now","toString","debouncedMeasurementChangeTimestamp","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","measurementsPanelRef","useRef","mappedMeasurements","types","SOPInstanceUID","getInstance","getDisplaySetsForSeries","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updateDisplayStudySummary","matches","studyMeta","getStudy","instanceMeta","Set","add","Array","from","join","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","debounce","current","scrollTop","scrollHeight","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","onMeasurementItemEditHandler","getMeasurement","onSubmitHandler","update","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","ref","StudySummary","MeasurementTable","onEdit","iconName","iconLabel","component","Component","OHIFCornerstoneViewport","props","fallback","_extends","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}