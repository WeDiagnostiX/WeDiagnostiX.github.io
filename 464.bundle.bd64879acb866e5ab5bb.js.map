{"version":3,"file":"464.bundle.bd64879acb866e5ab5bb.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/initWADOImageLoader.js","webpack:///../../../extensions/cornerstone/src/utils/callInputDialog.tsx","webpack:///../../../extensions/cornerstone/src/utils/getActiveViewportEnabledElement.ts","webpack:///../../../extensions/cornerstone/src/tools/CalibrationLineTool.ts","webpack:///../../../extensions/cornerstone/src/initCornerstoneTools.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Length.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Bidirectional.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getModalityUnit.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/EllipticalROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/CircleROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/ArrowAnnotate.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/CobbAngle.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/Angle.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/PlanarFreehandROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/RectangleROI.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.ts","webpack:///../../../extensions/cornerstone/src/initMeasurementService.js","webpack:///../../../extensions/cornerstone/src/initCineService.ts","webpack:///../../../extensions/cornerstone/src/utils/interleaveCenterLoader.ts","webpack:///../../../extensions/cornerstone/src/utils/getInterleavedFrames.js","webpack:///../../../extensions/cornerstone/src/utils/nthLoader.ts","webpack:///../../../extensions/cornerstone/src/utils/interleave.js","webpack:///../../../extensions/cornerstone/src/utils/getNthFrames.js","webpack:///../../../extensions/cornerstone/src/utils/interleaveTopToBottom.ts","webpack:///../../../extensions/cornerstone/src/utils/findNearbyToolData.ts","webpack:///../../../extensions/cornerstone/src/initContextMenu.ts","webpack:///../../../extensions/cornerstone/src/initDoubleClick.ts","webpack:///../../../extensions/cornerstone/src/init.tsx","webpack:///../../../extensions/cornerstone/src/utils/DicomFileUploader.ts","webpack:///../../../extensions/cornerstone/src/components/DicomUpload/DicomUploadProgressItem.tsx","webpack:///../../../extensions/cornerstone/src/components/DicomUpload/DicomUploadProgress.tsx","webpack:///../../../extensions/cornerstone/src/components/DicomUpload/DicomUpload.tsx","webpack:///../../../extensions/cornerstone/src/getCustomizationModule.ts","webpack:///../../../extensions/cornerstone/src/utils/CornerstoneViewportDownloadForm.tsx","webpack:///../../../extensions/cornerstone/src/utils/stackSync/calculateViewportRegistrations.ts","webpack:///../../../extensions/cornerstone/src/utils/stackSync/toggleStackImageSync.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/selection.ts","webpack:///../../../extensions/cornerstone/src/commandsModule.ts","webpack:///../../../extensions/cornerstone/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone/src/services/ToolGroupService/ToolGroupService.ts","webpack:///../../../extensions/cornerstone/src/services/ToolGroupService/index.js","webpack:///../../../extensions/cornerstone/src/services/SyncGroupService/SyncGroupService.ts","webpack:///../../../extensions/cornerstone/src/services/SyncGroupService/index.js","webpack:///../../../extensions/cornerstone/src/utils/transitions.ts","webpack:///../../../extensions/cornerstone/src/services/SegmentationService/SegmentationService.ts","webpack:///../../../extensions/cornerstone/src/services/SegmentationService/RTSTRUCT/mapROIContoursToRTStructData.ts","webpack:///../../../extensions/cornerstone/src/services/SegmentationService/index.js","webpack:///../../../extensions/cornerstone/src/utils/getCornerstoneViewportType.ts","webpack:///../../../extensions/cornerstone/src/services/CornerstoneCacheService/CornerstoneCacheService.ts","webpack:///../../../extensions/cornerstone/src/services/CornerstoneCacheService/index.js","webpack:///../../../extensions/cornerstone/src/services/ViewportService/constants.ts","webpack:///../../../extensions/cornerstone/src/services/ViewportService/Viewport.ts","webpack:///../../../extensions/cornerstone/src/utils/getCornerstoneOrientation.ts","webpack:///../../../extensions/cornerstone/src/utils/getCornerstoneBlendMode.ts","webpack:///../../../extensions/cornerstone/src/utils/JumpPresets.ts","webpack:///../../../extensions/cornerstone/src/services/ViewportService/CornerstoneViewportService.ts","webpack:///../../../extensions/cornerstone/src/utils/dicomLoaderService.js","webpack:///../../../extensions/cornerstone/src/id.js","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getHandlesFromPoints.js","webpack:///../../../extensions/cornerstone/src/index.tsx","webpack:///../../../extensions/cornerstone/src/state.ts","webpack:///../../../extensions/cornerstone/src/utils/measurementServiceMappings/utils/getSOPInstanceAttributes.js"],"sourcesContent":["import * as cornerstone from '@cornerstonejs/core';\nimport { volumeLoader } from '@cornerstonejs/core';\nimport { cornerstoneStreamingImageVolumeLoader } from '@cornerstonejs/streaming-image-volume-loader';\nimport dicomImageLoader, {\n  webWorkerManager,\n} from '@cornerstonejs/dicom-image-loader';\nimport dicomParser from 'dicom-parser';\nimport { errorHandler } from '@ohif/core';\n\nconst { registerVolumeLoader } = volumeLoader;\n\nlet initialized = false;\n\nfunction initWebWorkers(appConfig) {\n  const config = {\n    maxWebWorkers: Math.min(\n      Math.max(navigator.hardwareConcurrency - 1, 1),\n      appConfig.maxNumberOfWebWorkers\n    ),\n    startWebWorkersOnDemand: true,\n    taskConfiguration: {\n      decodeTask: {\n        initializeCodecsOnStartup: false,\n        usePDFJS: false,\n        strict: false,\n      },\n    },\n  };\n\n  if (!initialized) {\n    dicomImageLoader.webWorkerManager.initialize(config);\n    initialized = true;\n  }\n}\n\nexport default function initWADOImageLoader(\n  userAuthenticationService,\n  appConfig\n) {\n  dicomImageLoader.external.cornerstone = cornerstone;\n  dicomImageLoader.external.dicomParser = dicomParser;\n\n  registerVolumeLoader(\n    'cornerstoneStreamingImageVolume',\n    cornerstoneStreamingImageVolumeLoader\n  );\n\n  dicomImageLoader.configure({\n    decodeConfig: {\n      // !! IMPORTANT !!\n      // We should set this flag to false, since, by default @cornerstonejs/dicom-image-loader\n      // will convert everything to integers (to be able to work with cornerstone-2d).\n      // Until the default is set to true (which is the case for cornerstone3D),\n      // we should set this flag to false.\n      convertFloatPixelDataToInt: false,\n    },\n    beforeSend: function(xhr) {\n      const headers = userAuthenticationService.getAuthorizationHeader();\n\n      // Request:\n      // JPEG-LS Lossless (1.2.840.10008.1.2.4.80) if available, otherwise accept\n      // whatever transfer-syntax the origin server provides.\n      // For now we use image/jls and image/x-jls because some servers still use the old type\n      // http://dicom.nema.org/medical/dicom/current/output/html/part18.html\n      const xhrRequestHeaders = {\n        Accept: appConfig.omitQuotationForMultipartRequest\n          ? 'multipart/related; type=application/octet-stream'\n          : 'multipart/related; type=\"application/octet-stream\"',\n        // 'multipart/related; type=\"image/x-jls\", multipart/related; type=\"image/jls\"; transfer-syntax=\"1.2.840.10008.1.2.4.80\", multipart/related; type=\"image/x-jls\", multipart/related; type=\"application/octet-stream\"; transfer-syntax=*',\n      };\n\n      if (headers) {\n        Object.assign(xhrRequestHeaders, headers);\n      }\n\n      return xhrRequestHeaders;\n    },\n    errorInterceptor: error => {\n      errorHandler.getHTTPErrorHandler(error);\n    },\n  });\n\n  initWebWorkers(appConfig);\n}\n\nexport function destroy() {\n  // Note: we don't want to call .terminate on the webWorkerManager since\n  // that resets the config\n  const webWorkers = webWorkerManager.webWorkers;\n  for (let i = 0; i < webWorkers.length; i++) {\n    webWorkers[i].worker.terminate();\n  }\n  webWorkers.length = 0;\n}\n","import React from 'react';\nimport { Input, Dialog } from '@ohif/ui';\n\n/**\n *\n * @param {*} data\n * @param {*} data.text\n * @param {*} data.label\n * @param {*} event\n * @param {*} callback\n * @param {*} isArrowAnnotateInputDialog\n * @param {*} dialogConfig\n * @param {string?} dialogConfig.dialogTitle - title of the input dialog\n * @param {string?} dialogConfig.inputLabel - show label above the input\n */\nfunction callInputDialog(\n  uiDialogService,\n  data,\n  callback,\n  isArrowAnnotateInputDialog = true,\n  dialogConfig: any = {}\n) {\n  const dialogId = 'dialog-enter-annotation';\n  const label = data\n    ? isArrowAnnotateInputDialog\n      ? data.text\n      : data.label\n    : '';\n  const {\n    dialogTitle = 'Annotation',\n    inputLabel = 'Enter your annotation',\n    validateFunc = value => true,\n  } = dialogConfig;\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        if (typeof validateFunc === 'function' && !validateFunc(value.label))\n          return;\n\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: dialogTitle,\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              autoFocus\n              className=\"bg-black border-primary-main\"\n              type=\"text\"\n              id=\"annotation\"\n              label={inputLabel}\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { IEnabledElement } from '@cornerstonejs/core/dist/esm/types';\n\nimport { getEnabledElement as OHIFgetEnabledElement } from '../state';\n\nexport default function getActiveViewportEnabledElement(\n  viewportGridService\n): IEnabledElement {\n  const { activeViewportIndex } = viewportGridService.getState();\n  const { element } = OHIFgetEnabledElement(activeViewportIndex) || {};\n  const enabledElement = getEnabledElement(element);\n  return enabledElement;\n}\n","import { metaData } from '@cornerstonejs/core';\nimport { LengthTool, utilities } from '@cornerstonejs/tools';\nimport callInputDialog from '../utils/callInputDialog';\nimport getActiveViewportEnabledElement from '../utils/getActiveViewportEnabledElement';\n\nconst { calibrateImageSpacing } = utilities;\n\n/**\n * Calibration Line tool works almost the same as the\n */\nclass CalibrationLineTool extends LengthTool {\n  static toolName = 'CalibrationLine';\n\n  _renderingViewport: any;\n  _lengthToolRenderAnnotation = this.renderAnnotation;\n\n  renderAnnotation = (enabledElement, svgDrawingHelper) => {\n    const { viewport } = enabledElement;\n    this._renderingViewport = viewport;\n    return this._lengthToolRenderAnnotation(enabledElement, svgDrawingHelper);\n  };\n\n  _getTextLines(data, targetId) {\n    const [canvasPoint1, canvasPoint2] = data.handles.points.map(p =>\n      this._renderingViewport.worldToCanvas(p)\n    );\n    // for display, round to 2 decimal points\n    const lengthPx =\n      Math.round(calculateLength2(canvasPoint1, canvasPoint2) * 100) / 100;\n\n    const textLines = [`${lengthPx}px`];\n\n    return textLines;\n  }\n}\n\nfunction calculateLength2(point1, point2) {\n  const dx = point1[0] - point2[0];\n  const dy = point1[1] - point2[1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction calculateLength3(pos1, pos2) {\n  const dx = pos1[0] - pos2[0];\n  const dy = pos1[1] - pos2[1];\n  const dz = pos1[2] - pos2[2];\n\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n\nexport default CalibrationLineTool;\n\nexport function onCompletedCalibrationLine(servicesManager, csToolsEvent) {\n  const { uiDialogService, viewportGridService } = servicesManager.services;\n\n  // calculate length (mm) with the current Pixel Spacing\n  const annotationAddedEventDetail = csToolsEvent.detail;\n  const {\n    annotation: { metadata, data: annotationData },\n  } = annotationAddedEventDetail;\n  const { referencedImageId: imageId } = metadata;\n  const enabledElement = getActiveViewportEnabledElement(viewportGridService);\n  const { viewport } = enabledElement;\n\n  const length =\n    Math.round(\n      calculateLength3(\n        annotationData.handles.points[0],\n        annotationData.handles.points[1]\n      ) * 100\n    ) / 100;\n\n  // calculate the currently applied pixel spacing on the viewport\n  const calibratedPixelSpacing = metaData.get(\n    'calibratedPixelSpacing',\n    imageId\n  );\n  const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n  const currentRowPixelSpacing =\n    calibratedPixelSpacing?.[0] || imagePlaneModule?.rowPixelSpacing || 1;\n  const currentColumnPixelSpacing =\n    calibratedPixelSpacing?.[1] || imagePlaneModule?.columnPixelSpacing || 1;\n\n  const adjustCalibration = newLength => {\n    const spacingScale = newLength / length;\n    const rowSpacing = spacingScale * currentRowPixelSpacing;\n    const colSpacing = spacingScale * currentColumnPixelSpacing;\n\n    // trigger resize of the viewport to adjust the world/pixel mapping\n    calibrateImageSpacing(\n      imageId,\n      viewport.getRenderingEngine(),\n      rowSpacing,\n      colSpacing\n    );\n  };\n\n  return new Promise((resolve, reject) => {\n    if (!uiDialogService) {\n      reject('UIDialogService is not initiated');\n      return;\n    }\n\n    callInputDialog(\n      uiDialogService,\n      {\n        text: '',\n        label: `${length}`,\n      },\n      (value, id) => {\n        if (id === 'save') {\n          adjustCalibration(Number.parseFloat(value));\n          resolve(true);\n        } else {\n          reject('cancel');\n        }\n      },\n      false,\n      {\n        dialogTitle: 'Calibration',\n        inputLabel: 'Actual Physical distance (mm)',\n\n        // the input value must be a number\n        validateFunc: val => {\n          try {\n            const v = Number.parseFloat(val);\n            return !isNaN(v) && v !== 0.0;\n          } catch {\n            return false;\n          }\n        },\n      }\n    );\n  });\n}\n","import {\n    PanTool,\n    WindowLevelTool,\n    StackScrollTool,\n    StackScrollMouseWheelTool,\n    ZoomTool,\n    VolumeRotateMouseWheelTool,\n    MIPJumpToClickTool,\n    LengthTool,\n    RectangleROITool,\n    EllipticalROITool,\n    CircleROITool,\n    BidirectionalTool,\n    ArrowAnnotateTool,\n    DragProbeTool,\n    ProbeTool,\n    AngleTool,\n    CobbAngleTool,\n    MagnifyTool,\n    CrosshairsTool,\n    SegmentationDisplayTool,\n    init,\n    addTool,\n    annotation,\n    ReferenceLinesTool,\n    TrackballRotateTool,\n    PlanarFreehandROITool,\n    BrushTool,\n    CircleScissorsTool,\n    PaintFillTool,\n    RectangleROIStartEndThresholdTool,\n    RectangleROIThresholdTool,\n    RectangleScissorsTool,\n    SphereScissorsTool,\n    UndoTool\n} from '@cornerstonejs/tools';\n\nimport CalibrationLineTool from './tools/CalibrationLineTool';\n// import PlanarFreehandROITool from \"./tools/PlanarFreehandROITool\";\n\nexport default function initCornerstoneTools(configuration = {}) {\n  CrosshairsTool.isAnnotation = false;\n  ReferenceLinesTool.isAnnotation = false;\n\n  init(configuration);\n  addTool(PanTool);\n  addTool(WindowLevelTool);\n  addTool(StackScrollMouseWheelTool);\n  addTool(StackScrollTool);\n  addTool(ZoomTool);\n  addTool(ProbeTool);\n  addTool(VolumeRotateMouseWheelTool);\n  addTool(MIPJumpToClickTool);\n  addTool(LengthTool);\n  addTool(RectangleROITool);\n  addTool(EllipticalROITool);\n  addTool(CircleROITool);\n  addTool(BidirectionalTool);\n  addTool(ArrowAnnotateTool);\n  addTool(DragProbeTool);\n  addTool(AngleTool);\n  addTool(CobbAngleTool);\n  addTool(PlanarFreehandROITool);\n  addTool(MagnifyTool);\n  addTool(CrosshairsTool);\n  addTool(SegmentationDisplayTool);\n  addTool(ReferenceLinesTool);\n  addTool(CalibrationLineTool);\n  addTool(TrackballRotateTool);\n  addTool(BrushTool);\n  addTool(CircleScissorsTool);\n  addTool(PaintFillTool);\n  addTool(RectangleROIStartEndThresholdTool);\n  addTool(RectangleROIThresholdTool);\n  addTool(RectangleScissorsTool);\n  addTool(SphereScissorsTool);\n  addTool(UndoTool);\n\n  // Modify annotation tools to use dashed lines on SR\n  const annotationStyle = {\n    textBoxFontSize: '15px',\n    lineWidth: '1.5',\n  };\n\n  const defaultStyles = annotation.config.style.getDefaultToolStyles();\n  annotation.config.style.setDefaultToolStyles({\n    global: {\n      ...defaultStyles.global,\n      ...annotationStyle,\n    },\n  });\n}\n\nconst toolNames = {\n  Pan: PanTool.toolName,\n  ArrowAnnotate: ArrowAnnotateTool.toolName,\n  WindowLevel: WindowLevelTool.toolName,\n  StackScroll: StackScrollTool.toolName,\n  StackScrollMouseWheel: StackScrollMouseWheelTool.toolName,\n  Zoom: ZoomTool.toolName,\n  VolumeRotateMouseWheel: VolumeRotateMouseWheelTool.toolName,\n  MipJumpToClick: MIPJumpToClickTool.toolName,\n  Length: LengthTool.toolName,\n  DragProbe: DragProbeTool.toolName,\n  Probe: ProbeTool.toolName,\n  RectangleROI: RectangleROITool.toolName,\n  EllipticalROI: EllipticalROITool.toolName,\n  CircleROI: CircleROITool.toolName,\n  Bidirectional: BidirectionalTool.toolName,\n  Angle: AngleTool.toolName,\n  CobbAngle: CobbAngleTool.toolName,\n  PlanarFreehandROI: PlanarFreehandROITool.toolName,\n  Magnify: MagnifyTool.toolName,\n  Crosshairs: CrosshairsTool.toolName,\n  SegmentationDisplay: SegmentationDisplayTool.toolName,\n  ReferenceLines: ReferenceLinesTool.toolName,\n  CalibrationLine: CalibrationLineTool.toolName,\n  TrackballRotateTool: TrackballRotateTool.toolName,\n  BrushTool: BrushTool.toolName,\n  CircleScissorsTool: CircleScissorsTool.toolName,\n  PaintFillTool: PaintFillTool.toolName,\n  RectangleROIStartEndThresholdTool: RectangleROIStartEndThresholdTool.toolName,\n  RectangleROIThresholdTool: RectangleROIThresholdTool.toolName,\n  RectangleScissorsTool: RectangleScissorsTool.toolName,\n  SphereScissorsTool: SphereScissorsTool.toolName,\n  UndoTool: UndoTool.toolName,\n};\n\nexport { toolNames };\n","export default [\n  'Length',\n  'EllipticalROI',\n  'CircleROI',\n  'Bidirectional',\n  'ArrowAnnotate',\n  'Angle',\n  'CobbAngle',\n  'Probe',\n  'RectangleROI',\n  'PlanarFreehandROI',\n];\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst Length = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } =\n      getSOPInstanceAttributes(\n        referencedImageId,\n        cornerstoneViewportService,\n        viewportId\n      );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      displaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } =\n      getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { length } = targetStats;\n    const unit = 'mm';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      length,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Length');\n\n  mappedAnnotations.forEach(annotation => {\n    const { length } = annotation;\n    columns.push(`Length (mm)`);\n    values.push(length);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const { length, SeriesNumber, SOPInstanceUID, frameNumber } =\n    mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  if (length === null || length === undefined) return displayText;\n  const roundedLength = utils.roundNumber(length, 2);\n  displayText.push(\n    `${roundedLength} mm (S: ${SeriesNumber}${instanceText}${frameText})`\n  );\n\n  return displayText;\n}\n\nexport default Length;\n","import { annotation } from '@cornerstonejs/tools';\n\nimport SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst Bidirectional = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      displaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId, referencedSeriesInstanceUID } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber,\n    } = getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { length, width } = targetStats;\n    const unit = 'mm';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      length,\n      width,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Bidirectional');\n\n  mappedAnnotations.forEach(annotation => {\n    const { length, width } = annotation;\n    columns.push(`Length (mm)`, `Width (mm)`);\n    values.push(length, width);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const {\n    length,\n    width,\n    SeriesNumber,\n    SOPInstanceUID,\n    frameNumber,\n  } = mappedAnnotations[0];\n  const roundedLength = utils.roundNumber(length, 2);\n  const roundedWidth = utils.roundNumber(width, 2);\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  displayText.push(\n    `L: ${roundedLength} mm (S: ${SeriesNumber}${instanceText}${frameText})`\n  );\n  displayText.push(`W: ${roundedWidth} mm`);\n\n  return displayText;\n}\n\nexport default Bidirectional;\n","function getModalityUnit(modality) {\n  if (modality === 'CT') {\n    return 'HU';\n  } else if (modality === 'PT') {\n    return 'SUV';\n  } else {\n    return '';\n  }\n}\n\nexport default getModalityUnit;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport getModalityUnit from './utils/getModalityUnit';\nimport { utils } from '@ohif/core';\n\nconst EllipticalROI = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      displaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      // Todo: Non-acquisition plane measurement mapping not supported yet\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber,\n    } = getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality } = targetStats;\n    const unit = getModalityUnit(Modality);\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit,\n      mean,\n      stdDev,\n      max,\n      area,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:EllipticalROI');\n\n  mappedAnnotations.forEach(annotation => {\n    const { mean, stdDev, max, area, unit } = annotation;\n\n    if (!mean || !unit || !max || !area) {\n      return;\n    }\n\n    columns.push(\n      `max (${unit})`,\n      `mean (${unit})`,\n      `std (${unit})`,\n      `area (mm2)`\n    );\n    values.push(max, mean, stdDev, area);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  // Area sometimes becomes undefined if `preventHandleOutsideImage` is off.\n  const roundedArea = utils.roundNumber(area || 0, 2);\n  displayText.push(`${roundedArea} mm<sup>2</sup>`);\n\n  // Todo: we need a better UI for displaying all these information\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, max, SeriesNumber } = mappedAnnotation;\n\n    let maxStr = '';\n    if (max) {\n      const roundedMax = utils.roundNumber(max, 2);\n      maxStr = `Max: ${roundedMax} <small>${unit}</small> `;\n    }\n\n    const str = `${maxStr}(S:${SeriesNumber}${instanceText}${frameText})`;\n    if (!displayText.includes(str)) {\n      displayText.push(str);\n    }\n  });\n\n  return displayText;\n}\n\nexport default EllipticalROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport getModalityUnit from './utils/getModalityUnit';\nimport { utils } from '@ohif/core';\n\nconst CircleROI = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    DisplaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      CornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = DisplaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      DisplaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, DisplaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      // Todo: Non-acquisition plane measurement mapping not supported yet\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber,\n    } = getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality } = targetStats;\n    const unit = getModalityUnit(Modality);\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit,\n      mean,\n      stdDev,\n      max,\n      area,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:CircleROI');\n\n  mappedAnnotations.forEach(annotation => {\n    const { mean, stdDev, max, area, unit } = annotation;\n\n    if (!mean || !unit || !max || !area) {\n      return;\n    }\n\n    columns.push(\n      `max (${unit})`,\n      `mean (${unit})`,\n      `std (${unit})`,\n      `area (mm2)`\n    );\n    values.push(max, mean, stdDev, area);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  // Area sometimes becomes undefined if `preventHandleOutsideImage` is off.\n  const roundedArea = utils.roundNumber(area || 0, 2);\n  displayText.push(`${roundedArea} mm<sup>2</sup>`);\n\n  // Todo: we need a better UI for displaying all these information\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, max, SeriesNumber } = mappedAnnotation;\n\n    let maxStr = '';\n    if (max) {\n      const roundedMax = utils.roundNumber(max, 2);\n      maxStr = `Max: ${roundedMax} <small>${unit}</small> `;\n    }\n\n    const str = `${maxStr}(S:${SeriesNumber}${instanceText}${frameText})`;\n    if (!displayText.includes(str)) {\n      displayText.push(str);\n    }\n  });\n\n  return displayText;\n}\n\nexport default CircleROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\n\nconst Length = {\n  toAnnotation: measurement => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      displaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.text,\n      text: data.text,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport: () => {\n        throw new Error('Not implemented');\n      },\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, displaySetService) {\n  const { metadata, data } = annotation;\n  const { text } = data;\n  const { referencedImageId } = metadata;\n\n  const annotations = [];\n\n  const {\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    frameNumber,\n  } = getSOPInstanceAttributes(referencedImageId);\n\n  const displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    frameNumber\n  );\n\n  const { SeriesNumber } = displaySet;\n\n  annotations.push({\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesNumber,\n    frameNumber,\n    text,\n  });\n\n  return annotations;\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const { SeriesNumber, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  displayText.push(`(S: ${SeriesNumber}${instanceText}${frameText})`);\n\n  return displayText;\n}\n\nexport default Length;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst CobbAngle = {\n  toAnnotation: measurement => { },\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Cobb Angle tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      CornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      displaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, DisplaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return;\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber,\n    } = getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { angle } = targetStats;\n    const unit = '\\u00B0';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      angle,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:CobbAngle');\n\n  mappedAnnotations.forEach(annotation => {\n    const { angle, unit } = annotation;\n    columns.push(`Angle (${unit})`);\n    values.push(angle);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const {\n    angle,\n    unit,\n    SeriesNumber,\n    SOPInstanceUID,\n    frameNumber,\n  } = mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n  if (angle === undefined) return displayText;\n  const roundedAngle = utils.roundNumber(angle, 2);\n  displayText.push(\n    `${roundedAngle} ${unit} (S: ${SeriesNumber}${instanceText}${frameText})`\n  );\n\n  return displayText;\n}\n\nexport default CobbAngle;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport { utils } from '@ohif/core';\n\nconst Angle = {\n  toAnnotation: measurement => { },\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      CornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      displaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations?.[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, DisplaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return;\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber,\n    } = getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { angle } = targetStats;\n    const unit = '\\u00B0';\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      unit,\n      angle,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:Angle');\n\n  mappedAnnotations.forEach(annotation => {\n    const { angle, unit } = annotation;\n    columns.push(`Angle (${unit})`);\n    values.push(angle);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const {\n    angle,\n    unit,\n    SeriesNumber,\n    SOPInstanceUID,\n    frameNumber,\n  } = mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n  if (angle === undefined) return displayText;\n  const roundedAngle = utils.roundNumber(angle, 2);\n  displayText.push(\n    `${roundedAngle} ${unit} (S: ${SeriesNumber}${instanceText}${frameText})`\n  );\n\n  return displayText;\n}\n\nexport default Angle;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\n\nconst PlanarFreehandROI = {\n  toAnnotation: measurement => { },\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    DisplaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('PlanarFreehandROI tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      CornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = DisplaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      DisplaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: { ...data, ...data.cachedStats },\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\n/**\n * It maps an imaging library annotation to a list of simplified annotation properties.\n *\n * @param {Object} annotationData\n * @param {Object} DisplaySetService\n * @returns\n */\nfunction getMappedAnnotations(annotationData, DisplaySetService) {\n  const { metadata, data } = annotationData;\n  const { label } = data;\n  const { referencedImageId } = metadata;\n\n  const annotations = [];\n\n  const {\n    SOPInstanceUID: _SOPInstanceUID,\n    SeriesInstanceUID: _SeriesInstanceUID,\n  } = getSOPInstanceAttributes(referencedImageId) || {};\n\n  if (!_SOPInstanceUID || !_SeriesInstanceUID) {\n    return annotations;\n  }\n\n  const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n    _SOPInstanceUID,\n    _SeriesInstanceUID\n  );\n\n  const { SeriesNumber, SeriesInstanceUID } = displaySet;\n\n  annotations.push({\n    SeriesInstanceUID,\n    SeriesNumber,\n    label,\n    data,\n  });\n\n  return annotations;\n}\n\n/**\n * TBD\n * This function is used to convert the measurement data to a format that is suitable for the report generation (e.g. for the csv report).\n * The report returns a list of columns and corresponding values.\n * @param {*} mappedAnnotations\n * @param {*} points\n * @param {*} FrameOfReferenceUID\n * @returns Object representing the report's content for this tool.\n */\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations) {\n  return '';\n}\n\nexport default PlanarFreehandROI;\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\nimport getModalityUnit from './utils/getModalityUnit';\nimport { utils } from '@ohif/core';\n\nconst RectangleROI = {\n  toAnnotation: measurement => {},\n  toMeasurement: (\n    csToolsEventDetail,\n    DisplaySetService,\n    CornerstoneViewportService,\n    getValueTypeFromToolType\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Rectangle ROI tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } =\n      getSOPInstanceAttributes(\n        referencedImageId,\n        CornerstoneViewportService,\n        viewportId\n      );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = DisplaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { points } = data.handles;\n\n    const mappedAnnotations = getMappedAnnotations(\n      annotation,\n      DisplaySetService\n    );\n\n    const displayText = getDisplayText(mappedAnnotations, displaySet);\n    const getReport = () =>\n      _getReport(mappedAnnotations, points, FrameOfReferenceUID);\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      frameNumber: mappedAnnotations[0]?.frameNumber || 1,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: data.label,\n      displayText: displayText,\n      data: data.cachedStats,\n      type: getValueTypeFromToolType(toolName),\n      getReport,\n    };\n  },\n};\n\nfunction getMappedAnnotations(annotation, DisplaySetService) {\n  const { metadata, data } = annotation;\n  const { cachedStats } = data;\n  const { referencedImageId } = metadata;\n  const targets = Object.keys(cachedStats);\n\n  if (!targets.length) {\n    return [];\n  }\n\n  const annotations = [];\n  Object.keys(cachedStats).forEach(targetId => {\n    const targetStats = cachedStats[targetId];\n\n    if (!referencedImageId) {\n      // Todo: Non-acquisition plane measurement mapping not supported yet\n      throw new Error(\n        'Non-acquisition plane measurement mapping not supported'\n      );\n    }\n\n    const { SOPInstanceUID, SeriesInstanceUID, frameNumber } =\n      getSOPInstanceAttributes(referencedImageId);\n\n    const displaySet = DisplaySetService.getDisplaySetForSOPInstanceUID(\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      frameNumber\n    );\n\n    const { SeriesNumber } = displaySet;\n    const { mean, stdDev, max, area, Modality } = targetStats;\n    const unit = getModalityUnit(Modality);\n\n    annotations.push({\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      SeriesNumber,\n      frameNumber,\n      Modality,\n      unit,\n      mean,\n      stdDev,\n      max,\n      area,\n    });\n  });\n\n  return annotations;\n}\n\n/*\nThis function is used to convert the measurement data to a format that is\nsuitable for the report generation (e.g. for the csv report). The report\nreturns a list of columns and corresponding values.\n*/\nfunction _getReport(mappedAnnotations, points, FrameOfReferenceUID) {\n  const columns = [];\n  const values = [];\n\n  // Add Type\n  columns.push('AnnotationType');\n  values.push('Cornerstone:RectangleROI');\n\n  mappedAnnotations.forEach(annotation => {\n    const { mean, stdDev, max, area, unit } = annotation;\n\n    if (!mean || !unit || !max || !area) {\n      return;\n    }\n\n    columns.push(\n      `max (${unit})`,\n      `mean (${unit})`,\n      `std (${unit})`,\n      `area (mm2)`\n    );\n    values.push(max, mean, stdDev, area);\n  });\n\n  if (FrameOfReferenceUID) {\n    columns.push('FrameOfReferenceUID');\n    values.push(FrameOfReferenceUID);\n  }\n\n  if (points) {\n    columns.push('points');\n    // points has the form of [[x1, y1, z1], [x2, y2, z2], ...]\n    // convert it to string of [[x1 y1 z1];[x2 y2 z2];...]\n    // so that it can be used in the csv report\n    values.push(points.map(p => p.join(' ')).join(';'));\n  }\n\n  return {\n    columns,\n    values,\n  };\n}\n\nfunction getDisplayText(mappedAnnotations, displaySet) {\n  if (!mappedAnnotations || !mappedAnnotations.length) {\n    return '';\n  }\n\n  const displayText = [];\n\n  // Area is the same for all series\n  const { area, SOPInstanceUID, frameNumber } = mappedAnnotations[0];\n\n  const instance = displaySet.images.find(\n    image => image.SOPInstanceUID === SOPInstanceUID\n  );\n\n  let InstanceNumber;\n  if (instance) {\n    InstanceNumber = instance.InstanceNumber;\n  }\n\n  const instanceText = InstanceNumber ? ` I: ${InstanceNumber}` : '';\n  const frameText = displaySet.isMultiFrame ? ` F: ${frameNumber}` : '';\n\n  // Area sometimes becomes undefined if `preventHandleOutsideImage` is off.\n  const roundedArea = utils.roundNumber(area || 0, 2);\n  displayText.push(`${roundedArea} mm<sup>2</sup>`);\n\n  // Todo: we need a better UI for displaying all these information\n  mappedAnnotations.forEach(mappedAnnotation => {\n    const { unit, max, SeriesNumber } = mappedAnnotation;\n\n    let maxStr = '';\n    if (max) {\n      const roundedMax = utils.roundNumber(max, 2);\n      maxStr = `Max: ${roundedMax} <small>${unit}</small> `;\n    }\n\n    const str = `${maxStr}(S:${SeriesNumber}${instanceText}${frameText})`;\n    if (!displayText.includes(str)) {\n      displayText.push(str);\n    }\n  });\n\n  return displayText;\n}\n\nexport default RectangleROI;\n","import { MeasurementService } from '@ohif/core';\nimport Length from './Length';\nimport Bidirectional from './Bidirectional';\nimport EllipticalROI from './EllipticalROI';\nimport CircleROI from './CircleROI';\nimport ArrowAnnotate from './ArrowAnnotate';\nimport CobbAngle from './CobbAngle';\nimport Angle from './Angle';\nimport PlanarFreehandROI from './PlanarFreehandROI';\nimport RectangleROI from './RectangleROI';\n\nconst measurementServiceMappingsFactory = (\n  measurementService: MeasurementService,\n  displaySetService,\n  cornerstoneViewportService\n) => {\n  /**\n   * Maps measurement service format object to cornerstone annotation object.\n   *\n   * @param measurement The measurement instance\n   * @param definition The source definition\n   * @return Cornerstone annotation data\n   */\n\n  const _getValueTypeFromToolType = toolType => {\n    const {\n      POLYLINE,\n      ELLIPSE,\n      CIRCLE,\n      RECTANGLE,\n      BIDIRECTIONAL,\n      POINT,\n      ANGLE,\n    } = MeasurementService.VALUE_TYPES;\n\n    // TODO -> I get why this was attempted, but its not nearly flexible enough.\n    // A single measurement may have an ellipse + a bidirectional measurement, for instances.\n    // You can't define a bidirectional tool as a single type..\n    const TOOL_TYPE_TO_VALUE_TYPE = {\n      Length: POLYLINE,\n      EllipticalROI: ELLIPSE,\n      CircleROI: CIRCLE,\n      RectangleROI: RECTANGLE,\n      PlanarFreehandROI: POLYLINE,\n      Bidirectional: BIDIRECTIONAL,\n      ArrowAnnotate: POINT,\n      CobbAngle: ANGLE,\n      Angle: ANGLE,\n    };\n\n    return TOOL_TYPE_TO_VALUE_TYPE[toolType];\n  };\n\n  const factories = {\n    Length: {\n      toAnnotation: Length.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Length.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n    Bidirectional: {\n      toAnnotation: Bidirectional.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Bidirectional.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        // TODO -> We should eventually do something like shortAxis + longAxis,\n        // But its still a little unclear how these automatic interpretations will work.\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n          points: 2,\n        },\n      ],\n    },\n\n    EllipticalROI: {\n      toAnnotation: EllipticalROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        EllipticalROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.ELLIPSE,\n        },\n      ],\n    },\n\n    CircleROI: {\n      toAnnotation: CircleROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        CircleROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.CIRCLE,\n        },\n      ],\n    },\n\n    RectangleROI: {\n      toAnnotation: RectangleROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        RectangleROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n        },\n      ],\n    },\n\n    PlanarFreehandROI: {\n      toAnnotation: PlanarFreehandROI.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        PlanarFreehandROI.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POLYLINE,\n        },\n      ],\n    },\n\n    ArrowAnnotate: {\n      toAnnotation: ArrowAnnotate.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        ArrowAnnotate.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.POINT,\n          points: 1,\n        },\n      ],\n    },\n\n    CobbAngle: {\n      toAnnotation: CobbAngle.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        CobbAngle.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.ANGLE,\n        },\n      ],\n    },\n\n    Angle: {\n      toAnnotation: Angle.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        Angle.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService,\n          _getValueTypeFromToolType\n        ),\n      matchingCriteria: [\n        {\n          valueType: MeasurementService.VALUE_TYPES.ANGLE,\n        },\n      ],\n    },\n  };\n\n  return factories;\n};\n\nexport default measurementServiceMappingsFactory;\n","import { eventTarget } from '@cornerstonejs/core';\nimport { Enums, annotation } from '@cornerstonejs/tools';\nimport { DicomMetadataStore } from '@ohif/core';\nimport { toolNames } from './initCornerstoneTools';\nimport { onCompletedCalibrationLine } from './tools/CalibrationLineTool';\n\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\nimport getSOPInstanceAttributes from './utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\n\nconst { removeAnnotation } = annotation.state;\n\nconst csToolsEvents = Enums.Events;\n\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n\nconst initMeasurementService = (\n  measurementService,\n  displaySetService,\n  cornerstoneViewportService\n) => {\n  /* Initialization */\n  const {\n    Length,\n    Bidirectional,\n    EllipticalROI,\n    CircleROI,\n    ArrowAnnotate,\n    Angle,\n    CobbAngle,\n    RectangleROI,\n    PlanarFreehandROI,\n  } = measurementServiceMappingsFactory(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService\n  );\n  const csTools3DVer1MeasurementSource = measurementService.createSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  /* Mappings */\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Length',\n    Length.matchingCriteria,\n    Length.toAnnotation,\n    Length.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Bidirectional',\n    Bidirectional.matchingCriteria,\n    Bidirectional.toAnnotation,\n    Bidirectional.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'EllipticalROI',\n    EllipticalROI.matchingCriteria,\n    EllipticalROI.toAnnotation,\n    EllipticalROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CircleROI',\n    CircleROI.matchingCriteria,\n    CircleROI.toAnnotation,\n    CircleROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'ArrowAnnotate',\n    ArrowAnnotate.matchingCriteria,\n    ArrowAnnotate.toAnnotation,\n    ArrowAnnotate.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CobbAngle',\n    CobbAngle.matchingCriteria,\n    CobbAngle.toAnnotation,\n    CobbAngle.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'Angle',\n    Angle.matchingCriteria,\n    Angle.toAnnotation,\n    Angle.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'RectangleROI',\n    RectangleROI.matchingCriteria,\n    RectangleROI.toAnnotation,\n    RectangleROI.toMeasurement\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'PlanarFreehandROI',\n    PlanarFreehandROI.matchingCriteria,\n    PlanarFreehandROI.toAnnotation,\n    PlanarFreehandROI.toMeasurement\n  );\n\n  // On the UI side, the Calibration Line tool will work almost the same as the\n  // Length tool\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'CalibrationLine',\n    Length.matchingCriteria,\n    Length.toAnnotation,\n    Length.toMeasurement\n  );\n\n  return csTools3DVer1MeasurementSource;\n};\n\nconst connectToolsToMeasurementService = servicesManager => {\n  const {\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n  const csTools3DVer1MeasurementSource = initMeasurementService(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService\n  );\n  connectMeasurementServiceToTools(\n    measurementService,\n    cornerstoneViewportService,\n    csTools3DVer1MeasurementSource\n  );\n  const { annotationToMeasurement, remove } = csTools3DVer1MeasurementSource;\n\n  //\n  function addMeasurement(csToolsEvent) {\n    try {\n      const annotationAddedEventDetail = csToolsEvent.detail;\n      const {\n        annotation: { metadata, annotationUID },\n      } = annotationAddedEventDetail;\n      const { toolName } = metadata;\n\n      if (\n        csToolsEvent.type === completedEvt &&\n        toolName === toolNames.CalibrationLine\n      ) {\n        // show modal to input the measurement (mm)\n        onCompletedCalibrationLine(servicesManager, csToolsEvent)\n          .then(\n            () => {\n              console.log('calibration applied');\n            },\n            () => true\n          )\n          .finally(() => {\n            // we don't need the calibration line lingering around, remove the\n            // annotation from the display\n            removeAnnotation(annotationUID);\n            removeMeasurement(csToolsEvent);\n            // this will ensure redrawing of annotations\n            cornerstoneViewportService.resize();\n          });\n      } else {\n        // To force the measurementUID be the same as the annotationUID\n        // Todo: this should be changed when a measurement can include multiple annotations\n        // in the future\n        annotationAddedEventDetail.uid = annotationUID;\n        annotationToMeasurement(toolName, annotationAddedEventDetail);\n      }\n    } catch (error) {\n      console.warn('Failed to update measurement:', error);\n    }\n  }\n\n  function updateMeasurement(csToolsEvent) {\n    try {\n      const annotationModifiedEventDetail = csToolsEvent.detail;\n\n      const {\n        annotation: { metadata, annotationUID },\n      } = annotationModifiedEventDetail;\n\n      // If the measurement hasn't been added, don't modify it\n      const measurement = measurementService.getMeasurement(annotationUID);\n\n      if (!measurement) {\n        return;\n      }\n      const { toolName } = metadata;\n\n      annotationModifiedEventDetail.uid = annotationUID;\n      // Passing true to indicate this is an update and NOT a annotation (start) completion.\n      annotationToMeasurement(toolName, annotationModifiedEventDetail, true);\n    } catch (error) {\n      console.warn('Failed to update measurement:', error);\n    }\n  }\n  function selectMeasurement(csToolsEvent) {\n    try {\n      const annotationSelectionEventDetail = csToolsEvent.detail;\n\n      const {\n        added: addedSelectedAnnotationUIDs,\n        removed: removedSelectedAnnotationUIDs,\n      } = annotationSelectionEventDetail;\n\n      if (removedSelectedAnnotationUIDs) {\n        removedSelectedAnnotationUIDs.forEach(annotationUID =>\n          measurementService.setMeasurementSelected(annotationUID, false)\n        );\n      }\n\n      if (addedSelectedAnnotationUIDs) {\n        addedSelectedAnnotationUIDs.forEach(annotationUID =>\n          measurementService.setMeasurementSelected(annotationUID, true)\n        );\n      }\n    } catch (error) {\n      console.warn('Failed to select and unselect measurements:', error);\n    }\n  }\n\n  /**\n   * When csTools fires a removed event, remove the same measurement\n   * from the measurement service\n   *\n   * @param {*} csToolsEvent\n   */\n  function removeMeasurement(csToolsEvent) {\n    try {\n      try {\n        const annotationRemovedEventDetail = csToolsEvent.detail;\n        const {\n          annotation: { annotationUID },\n        } = annotationRemovedEventDetail;\n\n        const measurement = measurementService.getMeasurement(annotationUID);\n\n        if (measurement) {\n          console.log('~~ removeEvt', csToolsEvent);\n          remove(annotationUID, annotationRemovedEventDetail);\n        }\n      } catch (error) {\n        console.warn('Failed to update measurement:', error);\n      }\n    } catch (error) {\n      console.warn('Failed to remove measurement:', error);\n    }\n  }\n\n  // on display sets added, check if there are any measurements in measurement service that need to be\n  // put into cornerstone tools\n  const addedEvt = csToolsEvents.ANNOTATION_ADDED;\n  const completedEvt = csToolsEvents.ANNOTATION_COMPLETED;\n  const updatedEvt = csToolsEvents.ANNOTATION_MODIFIED;\n  const removedEvt = csToolsEvents.ANNOTATION_REMOVED;\n  const selectionEvt = csToolsEvents.ANNOTATION_SELECTION_CHANGE;\n\n  eventTarget.addEventListener(addedEvt, addMeasurement);\n  eventTarget.addEventListener(completedEvt, addMeasurement);\n  eventTarget.addEventListener(updatedEvt, updateMeasurement);\n  eventTarget.addEventListener(removedEvt, removeMeasurement);\n  eventTarget.addEventListener(selectionEvt, selectMeasurement);\n\n  return csTools3DVer1MeasurementSource;\n};\n\nconst connectMeasurementServiceToTools = (\n  measurementService,\n  cornerstoneViewportService,\n  measurementSource\n) => {\n  const {\n    MEASUREMENT_REMOVED,\n    MEASUREMENTS_CLEARED,\n    MEASUREMENT_UPDATED,\n    RAW_MEASUREMENT_ADDED,\n  } = measurementService.EVENTS;\n\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  measurementService.subscribe(MEASUREMENTS_CLEARED, ({ measurements }) => {\n    if (!Object.keys(measurements).length) {\n      return;\n    }\n\n    for (const measurement of Object.values(measurements)) {\n      const { uid, source } = measurement;\n      if (source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        continue;\n      }\n\n      removeAnnotation(uid);\n    }\n  });\n\n  measurementService.subscribe(\n    MEASUREMENT_UPDATED,\n    ({ source, measurement, notYetUpdatedAtSource }) => {\n      if (source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        return;\n      }\n\n      if (notYetUpdatedAtSource === false) {\n        // This event was fired by cornerstone telling the measurement service to sync.\n        // Already in sync.\n        return;\n      }\n\n      const { uid, label } = measurement;\n\n      const sourceAnnotation = annotation.state.getAnnotation(uid);\n      const { data, metadata } = sourceAnnotation;\n\n      if (!data) {\n        return;\n      }\n\n      if (data.label !== label) {\n        data.label = label;\n      }\n\n      if (metadata.toolName === 'ArrowAnnotate') {\n        data.text = label;\n      }\n\n      // Todo: trigger render for annotation\n    }\n  );\n\n  measurementService.subscribe(\n    RAW_MEASUREMENT_ADDED,\n    ({ source, measurement, data, dataSource }) => {\n      if (source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        return;\n      }\n\n      const {\n        referenceSeriesUID,\n        referenceStudyUID,\n        SOPInstanceUID,\n      } = measurement;\n\n      const instance = DicomMetadataStore.getInstance(\n        referenceStudyUID,\n        referenceSeriesUID,\n        SOPInstanceUID\n      );\n\n      let imageId;\n      let frameNumber = 1;\n\n      if (measurement?.metadata?.referencedImageId) {\n        imageId = measurement.metadata.referencedImageId;\n        frameNumber = getSOPInstanceAttributes(\n          measurement.metadata.referencedImageId\n        ).frameNumber;\n      } else {\n        imageId = dataSource.getImageIdsForInstance({ instance });\n      }\n\n      const annotationManager = annotation.state.getAnnotationManager();\n      annotationManager.addAnnotation({\n        annotationUID: measurement.uid,\n        highlighted: false,\n        isLocked: false,\n        invalidated: false,\n        metadata: {\n          toolName: measurement.toolName,\n          FrameOfReferenceUID: measurement.FrameOfReferenceUID,\n          referencedImageId: imageId,\n        },\n        data: {\n          text: data.annotation.data.text,\n          handles: { ...data.annotation.data.handles },\n          cachedStats: { ...data.annotation.data.cachedStats },\n          label: data.annotation.data.label,\n          frameNumber: frameNumber,\n        },\n      });\n    }\n  );\n\n  measurementService.subscribe(\n    MEASUREMENT_REMOVED,\n    ({ source, measurement: removedMeasurementId }) => {\n      if (source?.name && source.name !== CORNERSTONE_3D_TOOLS_SOURCE_NAME) {\n        return;\n      }\n      removeAnnotation(removedMeasurementId);\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      // Note: We could do a better job by triggering the render on the\n      // viewport itself, but the removeAnnotation does not include that info...\n      renderingEngine.render();\n    }\n  );\n};\n\nexport {\n  initMeasurementService,\n  connectToolsToMeasurementService,\n  connectMeasurementServiceToTools,\n};\n","import { utilities } from '@cornerstonejs/tools';\n\nfunction initCineService(cineService) {\n  const playClip = (element, playClipOptions) => {\n    return utilities.cine.playClip(element, playClipOptions);\n  };\n\n  const stopClip = element => {\n    return utilities.cine.stopClip(element);\n  };\n\n  cineService.setServiceImplementation({ playClip, stopClip });\n}\n\nexport default initCineService;\n","import { cache, imageLoadPoolManager, Enums } from '@cornerstonejs/core';\nimport getInterleavedFrames from './getInterleavedFrames';\nimport { compact, flatten, zip } from 'lodash';\n\n// Map of volumeId and SeriesInstanceId\nconst volumeIdMapsToLoad = new Map<string, string>();\nconst viewportIdVolumeInputArrayMap = new Map<string, unknown[]>();\n\n/**\n * This function caches the volumeUIDs until all the volumes inside the\n * hanging protocol are initialized. Then it goes through the imageIds\n * of the volumes, and interleave them, in order for the volumes to be loaded\n * together from middle to the start and the end.\n * @param {Object} props image loading properties from Cornerstone ViewportService\n * @returns\n */\nexport default function interleaveCenterLoader({\n  data: { viewportId, volumeInputArray },\n  displaySetsMatchDetails,\n  viewportMatchDetails: matchDetails,\n}) {\n  viewportIdVolumeInputArrayMap.set(viewportId, volumeInputArray);\n\n  // Based on the volumeInputs store the volumeIds and SeriesInstanceIds\n  // to keep track of the volumes being loaded\n  for (const volumeInput of volumeInputArray) {\n    const { volumeId } = volumeInput;\n    const volume = cache.getVolume(volumeId);\n\n    if (!volume) {\n      return;\n    }\n\n    // if the volumeUID is not in the volumeUIDs array, add it\n    if (!volumeIdMapsToLoad.has(volumeId)) {\n      const { metadata } = volume;\n      volumeIdMapsToLoad.set(volumeId, metadata.SeriesInstanceUID);\n    }\n  }\n\n  /**\n   * The following is checking if all the viewports that were matched in the HP has been\n   * successfully created their cornerstone viewport or not. Todo: This can be\n   * improved by not checking it, and as soon as the matched DisplaySets have their\n   * volume loaded, we start the loading, but that comes at the cost of viewports\n   * not being created yet (e.g., in a 10 viewport ptCT fusion, when one ct viewport and one\n   * pt viewport are created we have a guarantee that the volumes are created in the cache\n   * but the rest of the viewports (fusion, mip etc.) are not created yet. So\n   * we can't initiate setting the volumes for those viewports. One solution can be\n   * to add an event when a viewport is created (not enabled element event) and then\n   * listen to it and as the other viewports are created we can set the volumes for them\n   * since volumes are already started loading.\n   */\n  if (matchDetails.size !== viewportIdVolumeInputArrayMap.size) {\n    return;\n  }\n\n  // Check if all the matched volumes are loaded\n  for (const [_, details] of displaySetsMatchDetails.entries()) {\n    const { SeriesInstanceUID } = details;\n\n    // HangingProtocol has matched, but don't have all the volumes created yet, so return\n    if (!Array.from(volumeIdMapsToLoad.values()).includes(SeriesInstanceUID)) {\n      return;\n    }\n  }\n\n  const volumeIds = Array.from(volumeIdMapsToLoad.keys()).slice();\n  // get volumes from cache\n  const volumes = volumeIds.map(volumeId => {\n    return cache.getVolume(volumeId);\n  });\n\n  // iterate over all volumes, and get their imageIds, and interleave\n  // the imageIds and save them in AllRequests for later use\n  const AllRequests = [];\n  volumes.forEach(volume => {\n    const requests = volume.getImageLoadRequests();\n\n    if (!requests.length || !requests[0] || !requests[0].imageId) {\n      return;\n    }\n\n    const requestImageIds = requests.map(request => {\n      return request.imageId;\n    });\n\n    const imageIds = getInterleavedFrames(requestImageIds);\n\n    const reOrderedRequests = imageIds.map(({ imageId }) => {\n      const request = requests.find(req => req.imageId === imageId);\n      return request;\n    });\n\n    AllRequests.push(reOrderedRequests);\n  });\n\n  // flatten the AllRequests array, which will result in a list of all the\n  // imageIds for all the volumes but interleaved\n  const interleavedRequests = compact(flatten(zip(...AllRequests)));\n\n  // set the finalRequests to the imageLoadPoolManager\n  const finalRequests = [];\n  interleavedRequests.forEach(request => {\n    const { imageId } = request;\n\n    AllRequests.forEach(volumeRequests => {\n      const volumeImageIdRequest = volumeRequests.find(\n        req => req.imageId === imageId\n      );\n      if (volumeImageIdRequest) {\n        finalRequests.push(volumeImageIdRequest);\n      }\n    });\n  });\n\n  const requestType = Enums.RequestType.Prefetch;\n  const priority = 0;\n\n  finalRequests.forEach(\n    ({ callLoadImage, additionalDetails, imageId, imageIdIndex, options }) => {\n      const callLoadImageBound = callLoadImage.bind(\n        null,\n        imageId,\n        imageIdIndex,\n        options\n      );\n\n      imageLoadPoolManager.addRequest(\n        callLoadImageBound,\n        requestType,\n        additionalDetails,\n        priority\n      );\n    }\n  );\n\n  // clear the volumeIdMapsToLoad\n  volumeIdMapsToLoad.clear();\n\n  // copy the viewportIdVolumeInputArrayMap\n  const viewportIdVolumeInputArrayMapCopy = new Map(\n    viewportIdVolumeInputArrayMap\n  );\n\n  // reset the viewportIdVolumeInputArrayMap\n  viewportIdVolumeInputArrayMap.clear();\n\n  return viewportIdVolumeInputArrayMapCopy;\n}\n","export default function getInterleavedFrames(imageIds) {\n  const minImageIdIndex = 0;\n  const maxImageIdIndex = imageIds.length - 1;\n\n  const middleImageIdIndex = Math.floor(imageIds.length / 2);\n\n  let lowerImageIdIndex = middleImageIdIndex;\n  let upperImageIdIndex = middleImageIdIndex;\n\n  // Build up an array of images to prefetch, starting with the current image.\n  const imageIdsToPrefetch = [\n    { imageId: imageIds[middleImageIdIndex], imageIdIndex: middleImageIdIndex },\n  ];\n\n  const prefetchQueuedFilled = {\n    currentPositionDownToMinimum: false,\n    currentPositionUpToMaximum: false,\n  };\n\n  // Check if on edges and some criteria is already fulfilled\n\n  if (middleImageIdIndex === minImageIdIndex) {\n    prefetchQueuedFilled.currentPositionDownToMinimum = true;\n  } else if (middleImageIdIndex === maxImageIdIndex) {\n    prefetchQueuedFilled.currentPositionUpToMaximum = true;\n  }\n\n  while (\n    !prefetchQueuedFilled.currentPositionDownToMinimum ||\n    !prefetchQueuedFilled.currentPositionUpToMaximum\n  ) {\n    if (!prefetchQueuedFilled.currentPositionDownToMinimum) {\n      // Add imageId bellow\n      lowerImageIdIndex--;\n      imageIdsToPrefetch.push({\n        imageId: imageIds[lowerImageIdIndex],\n        imageIdIndex: lowerImageIdIndex,\n      });\n\n      if (lowerImageIdIndex === minImageIdIndex) {\n        prefetchQueuedFilled.currentPositionDownToMinimum = true;\n      }\n    }\n\n    if (!prefetchQueuedFilled.currentPositionUpToMaximum) {\n      // Add imageId above\n      upperImageIdIndex++;\n      imageIdsToPrefetch.push({\n        imageId: imageIds[upperImageIdIndex],\n        imageIdIndex: upperImageIdIndex,\n      });\n\n      if (upperImageIdIndex === maxImageIdIndex) {\n        prefetchQueuedFilled.currentPositionUpToMaximum = true;\n      }\n    }\n  }\n\n  return imageIdsToPrefetch;\n}\n","import { cache, imageLoadPoolManager, Enums } from '@cornerstonejs/core';\nimport getNthFrames from './getNthFrames';\nimport interleave from './interleave';\n\n// Map of volumeId and SeriesInstanceId\nconst volumeIdMapsToLoad = new Map<string, string>();\nconst viewportIdVolumeInputArrayMap = new Map<string, unknown[]>();\n\n/**\n * This function caches the volumeUIDs until all the volumes inside the\n * hanging protocol are initialized. Then it goes through the requests and\n * chooses a sub-selection starting the the first few objects, center objects\n * and last objects, and then the remaining nth images until all instances are\n * retrieved.  This causes the image to have a progressive load order and looks\n * visually much better.\n * @param {Object} props image loading properties from Cornerstone ViewportService\n */\nexport default function interleaveNthLoader({\n  data: { viewportId, volumeInputArray },\n  displaySetsMatchDetails,\n}) {\n  viewportIdVolumeInputArrayMap.set(viewportId, volumeInputArray);\n\n  // Based on the volumeInputs store the volumeIds and SeriesInstanceIds\n  // to keep track of the volumes being loaded\n  for (const volumeInput of volumeInputArray) {\n    const { volumeId } = volumeInput;\n    const volume = cache.getVolume(volumeId);\n\n    if (!volume) {\n      console.log(\"interleaveNthLoader::No volume, can't load it\");\n      return;\n    }\n\n    // if the volumeUID is not in the volumeUIDs array, add it\n    if (!volumeIdMapsToLoad.has(volumeId)) {\n      const { metadata } = volume;\n      volumeIdMapsToLoad.set(volumeId, metadata.SeriesInstanceUID);\n    }\n  }\n\n  const volumeIds = Array.from(volumeIdMapsToLoad.keys()).slice();\n  // get volumes from cache\n  const volumes = volumeIds.map(volumeId => {\n    return cache.getVolume(volumeId);\n  });\n\n  // iterate over all volumes, and get their imageIds, and interleave\n  // the imageIds and save them in AllRequests for later use\n  const originalRequests = volumes\n    .map(volume => volume.getImageLoadRequests())\n    .filter(requests => requests?.[0]?.imageId);\n\n  const orderedRequests = originalRequests.map(request =>\n    getNthFrames(request)\n  );\n\n  // set the finalRequests to the imageLoadPoolManager\n  const finalRequests = interleave(orderedRequests);\n\n  const requestType = Enums.RequestType.Prefetch;\n  const priority = 0;\n\n  finalRequests.forEach(\n    ({ callLoadImage, additionalDetails, imageId, imageIdIndex, options }) => {\n      const callLoadImageBound = callLoadImage.bind(\n        null,\n        imageId,\n        imageIdIndex,\n        options\n      );\n\n      imageLoadPoolManager.addRequest(\n        callLoadImageBound,\n        requestType,\n        additionalDetails,\n        priority\n      );\n    }\n  );\n\n  // clear the volumeIdMapsToLoad\n  volumeIdMapsToLoad.clear();\n\n  // copy the viewportIdVolumeInputArrayMap\n  const viewportIdVolumeInputArrayMapCopy = new Map(\n    viewportIdVolumeInputArrayMap\n  );\n\n  // reset the viewportIdVolumeInputArrayMap\n  viewportIdVolumeInputArrayMap.clear();\n\n  return viewportIdVolumeInputArrayMapCopy;\n}\n","/**\n * Interleave the items from all the lists so that the first items are first\n * in the returned list, the second items are next etc.\n * Does this in a O(n) fashion, and return lists[0] if there is only one list.\n *\n * @param {[]} lists\n * @returns [] reordered to be breadth first traversal of lists\n */\nexport default function interleave(lists) {\n  if (!lists || !lists.length) return [];\n  if (lists.length === 1) return lists[0];\n  console.time('interleave');\n  const useLists = [...lists];\n  const ret = [];\n  for (let i = 0; useLists.length > 0; i++) {\n    for (const list of useLists) {\n      if (i >= list.length) {\n        useLists.splice(useLists.indexOf(list), 1);\n        continue;\n      }\n      ret.push(list[i]);\n    }\n  }\n  console.timeEnd('interleave');\n  return ret;\n}\n","/**\n * Returns a re-ordered array consisting of, in order:\n *    1. First few objects\n *    2. Center objects\n *    3. Last few objects\n *    4. nth Objects (n=7), set 2\n *    5. nth Objects set 5,\n *    6. Remaining objects\n * What this does is return the first/center/start objects, as those\n * are often used first, then a selection of objects scattered over the\n * instances in order to allow making requests over a set of image instances.\n *\n * @param {[]} imageIds\n * @returns [] reordered to be an nth selection\n */\nexport default function getNthFrames(imageIds) {\n  const frames = [[], [], [], [], []];\n  const centerStart = imageIds.length / 2 - 3;\n  const centerEnd = centerStart + 6;\n\n  for (let i = 0; i < imageIds.length; i++) {\n    if (\n      i < 2 ||\n      i > imageIds.length - 4 ||\n      (i > centerStart && i < centerEnd)\n    ) {\n      frames[0].push(imageIds[i]);\n    } else if (i % 7 === 2) {\n      frames[1].push(imageIds[i]);\n    } else if (i % 7 === 5) {\n      frames[2].push(imageIds[i]);\n    } else {\n      frames[(i % 2) + 3].push(imageIds[i]);\n    }\n  }\n  const ret = [\n    ...frames[0],\n    ...frames[1],\n    ...frames[2],\n    ...frames[3],\n    ...frames[4],\n  ];\n  return ret;\n}\n","import { cache, imageLoadPoolManager, Enums } from '@cornerstonejs/core';\nimport { compact, flatten, zip } from 'lodash';\n\n// Map of volumeId and SeriesInstanceId\nconst volumeIdMapsToLoad = new Map<string, string>();\nconst viewportIdVolumeInputArrayMap = new Map<string, unknown[]>();\n\n/**\n * This function caches the volumeIds until all the volumes inside the\n * hanging protocol are initialized. Then it goes through the imageIds\n * of the volumes, and interleave them, in order for the volumes to be loaded\n * together from middle to the start and the end.\n * @param {Object} {viewportData, displaySetMatchDetails}\n * @returns\n */\nexport default function interleaveTopToBottom({\n  data: { viewportId, volumeInputArray },\n  displaySetsMatchDetails,\n  viewportMatchDetails: matchDetails,\n}) {\n  viewportIdVolumeInputArrayMap.set(viewportId, volumeInputArray);\n\n  // Based on the volumeInputs store the volumeIds and SeriesInstanceIds\n  // to keep track of the volumes being loaded\n  for (const volumeInput of volumeInputArray) {\n    const { volumeId } = volumeInput;\n    const volume = cache.getVolume(volumeId);\n\n    if (!volume) {\n      return;\n    }\n\n    // if the volumeUID is not in the volumeUIDs array, add it\n    if (!volumeIdMapsToLoad.has(volumeId)) {\n      const { metadata } = volume;\n      volumeIdMapsToLoad.set(volumeId, metadata.SeriesInstanceUID);\n    }\n  }\n\n  /**\n   * The following is checking if all the viewports that were matched in the HP has been\n   * successfully created their cornerstone viewport or not. Todo: This can be\n   * improved by not checking it, and as soon as the matched DisplaySets have their\n   * volume loaded, we start the loading, but that comes at the cost of viewports\n   * not being created yet (e.g., in a 10 viewport ptCT fusion, when one ct viewport and one\n   * pt viewport are created we have a guarantee that the volumes are created in the cache\n   * but the rest of the viewports (fusion, mip etc.) are not created yet. So\n   * we can't initiate setting the volumes for those viewports. One solution can be\n   * to add an event when a viewport is created (not enabled element event) and then\n   * listen to it and as the other viewports are created we can set the volumes for them\n   * since volumes are already started loading.\n   */\n  if (matchDetails.size !== viewportIdVolumeInputArrayMap.size) {\n    return;\n  }\n\n  // Check if all the matched volumes are loaded\n  for (const [_, details] of displaySetsMatchDetails.entries()) {\n    const { SeriesInstanceUID } = details;\n\n    // HangingProtocol has matched, but don't have all the volumes created yet, so return\n    if (!Array.from(volumeIdMapsToLoad.values()).includes(SeriesInstanceUID)) {\n      return;\n    }\n  }\n\n  const volumeIds = Array.from(volumeIdMapsToLoad.keys()).slice();\n  // get volumes from cache\n  const volumes = volumeIds.map(volumeId => {\n    return cache.getVolume(volumeId);\n  });\n\n  // iterate over all volumes, and get their imageIds, and interleave\n  // the imageIds and save them in AllRequests for later use\n  const AllRequests = [];\n  volumes.forEach(volume => {\n    const requests = volume.getImageLoadRequests();\n\n    if (!requests.length || !requests[0] || !requests[0].imageId) {\n      return;\n    }\n\n    // reverse the requests\n    AllRequests.push(requests.reverse());\n  });\n\n  // flatten the AllRequests array, which will result in a list of all the\n  // imageIds for all the volumes but interleaved\n  const interleavedRequests = compact(flatten(zip(...AllRequests)));\n\n  // set the finalRequests to the imageLoadPoolManager\n  const finalRequests = [];\n  interleavedRequests.forEach(request => {\n    const { imageId } = request;\n\n    AllRequests.forEach(volumeRequests => {\n      const volumeImageIdRequest = volumeRequests.find(\n        req => req.imageId === imageId\n      );\n      if (volumeImageIdRequest) {\n        finalRequests.push(volumeImageIdRequest);\n      }\n    });\n  });\n\n  const requestType = Enums.RequestType.Prefetch;\n  const priority = 0;\n\n  finalRequests.forEach(\n    ({ callLoadImage, additionalDetails, imageId, imageIdIndex, options }) => {\n      const callLoadImageBound = callLoadImage.bind(\n        null,\n        imageId,\n        imageIdIndex,\n        options\n      );\n\n      imageLoadPoolManager.addRequest(\n        callLoadImageBound,\n        requestType,\n        additionalDetails,\n        priority\n      );\n    }\n  );\n\n  // clear the volumeIdMapsToLoad\n  volumeIdMapsToLoad.clear();\n\n  // copy the viewportIdVolumeInputArrayMap\n  const viewportIdVolumeInputArrayMapCopy = new Map(\n    viewportIdVolumeInputArrayMap\n  );\n\n  // reset the viewportIdVolumeInputArrayMap\n  viewportIdVolumeInputArrayMap.clear();\n\n  return viewportIdVolumeInputArrayMapCopy;\n}\n","/**\n * Finds tool nearby event position triggered.\n *\n * @param {Object} commandsManager mannager of commands\n * @param {Object} event that has being triggered\n * @returns cs toolData or undefined if not found.\n */\nexport const findNearbyToolData = (commandsManager, evt) => {\n  if (!evt?.detail) {\n    return;\n  }\n  const { element, currentPoints } = evt.detail;\n  return commandsManager.runCommand(\n    'getNearbyAnnotation',\n    {\n      element,\n      canvasCoordinates: currentPoints?.canvas,\n    },\n    'CORNERSTONE'\n  );\n};\n","import { eventTarget, EVENTS } from '@cornerstonejs/core';\nimport { Enums } from '@cornerstonejs/tools';\nimport { setEnabledElement } from './state';\nimport { findNearbyToolData } from './utils/findNearbyToolData';\n\nconst cs3DToolsEvents = Enums.Events;\n\nconst DEFAULT_CONTEXT_MENU_CLICKS = {\n  button1: {\n    commands: [\n      {\n        commandName: 'closeContextMenu',\n      },\n    ],\n  },\n  button3: {\n    commands: [\n      {\n        commandName: 'showCornerstoneContextMenu',\n        commandOptions: {\n          menuId: 'measurementsContextMenu',\n        },\n      },\n    ],\n  },\n};\n\n/**\n * Generates a name, consisting of:\n *    * alt when the alt key is down\n *    * ctrl when the cctrl key is down\n *    * shift when the shift key is down\n *    * 'button' followed by the button number (1 left, 3 right etc)\n */\nfunction getEventName(evt) {\n  const button = evt.detail.event.which;\n  const nameArr = [];\n  if (evt.detail.event.altKey) nameArr.push('alt');\n  if (evt.detail.event.ctrlKey) nameArr.push('ctrl');\n  if (evt.detail.event.shiftKey) nameArr.push('shift');\n  nameArr.push('button');\n  nameArr.push(button);\n  return nameArr.join('');\n}\n\nfunction initContextMenu({\n  cornerstoneViewportService,\n  customizationService,\n  commandsManager,\n}): void {\n  /*\n   * Run the commands associated with the given button press,\n   * defaults on button1 and button2\n   */\n  const cornerstoneViewportHandleEvent = (name, evt) => {\n    const customizations = DEFAULT_CONTEXT_MENU_CLICKS || customizationService.get('cornerstoneViewportClickCommands')\n    const toRun = customizations[name];\n    console.log('initContextMenu::cornerstoneViewportHandleEvent', name, toRun);\n    const options = {\n      nearbyToolData: findNearbyToolData(commandsManager, evt),\n      event: evt,\n    };\n    commandsManager.run(toRun, options);\n  };\n\n  const cornerstoneViewportHandleClick = evt => {\n    const name = getEventName(evt);\n    cornerstoneViewportHandleEvent(name, evt);\n  };\n\n  function elementEnabledHandler(evt) {\n    const { viewportId, element } = evt.detail;\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n    if (!viewportInfo) return;\n    const viewportIndex = viewportInfo.getViewportIndex();\n    // TODO check update upstream\n    setEnabledElement(viewportIndex, element);\n\n    element.addEventListener(\n      cs3DToolsEvents.MOUSE_CLICK,\n      cornerstoneViewportHandleClick\n    );\n  }\n\n  function elementDisabledHandler(evt) {\n    const { element } = evt.detail;\n\n    element.removeEventListener(\n      cs3DToolsEvents.MOUSE_CLICK,\n      cornerstoneViewportHandleClick\n    );\n  }\n\n  eventTarget.addEventListener(\n    EVENTS.ELEMENT_ENABLED,\n    elementEnabledHandler.bind(null)\n  );\n\n  eventTarget.addEventListener(\n    EVENTS.ELEMENT_DISABLED,\n    elementDisabledHandler.bind(null)\n  );\n}\n\nexport default initContextMenu;\n","import { eventTarget, EVENTS } from '@cornerstonejs/core';\nimport { Enums } from '@cornerstonejs/tools';\nimport { CommandsManager, CustomizationService, Types } from '@ohif/core';\nimport { findNearbyToolData } from './utils/findNearbyToolData';\n\n\nconst cs3DToolsEvents = Enums.Events;\n\nconst DEFAULT_DOUBLE_CLICK = {\n  doubleClick: {\n    commandName: 'toggleOneUpCustom',\n    commandOptions: {},\n  },\n};\n\n/**\n * Generates a double click event name, consisting of:\n *    * alt when the alt key is down\n *    * ctrl when the cctrl key is down\n *    * shift when the shift key is down\n *    * 'doubleClick'\n */\nfunction getDoubleClickEventName(evt: CustomEvent) {\n  const nameArr = [];\n  if (evt.detail.event.altKey) nameArr.push('alt');\n  if (evt.detail.event.ctrlKey) nameArr.push('ctrl');\n  if (evt.detail.event.shiftKey) nameArr.push('shift');\n  nameArr.push('doubleClick');\n  return nameArr.join('');\n}\n\nexport type initDoubleClickArgs = {\n  customizationService: CustomizationService;\n  commandsManager: CommandsManager;\n};\n\nfunction initDoubleClick({\n  customizationService,\n  commandsManager,\n}: initDoubleClickArgs): void {\n  const cornerstoneViewportHandleDoubleClick = (evt: CustomEvent) => {\n    // Do not allow double click on a tool.\n    const nearbyToolData = findNearbyToolData(commandsManager, evt);\n    if (nearbyToolData) {\n      return;\n    }\n\n    const eventName = getDoubleClickEventName(evt);\n\n    // Allows for the customization of the double click on a viewport.\n    const customizations =\n      customizationService.get('cornerstoneViewportClickCommands') ||\n      DEFAULT_DOUBLE_CLICK;\n\n    const toRun = customizations[eventName];\n    console.log('toRun', toRun, customizations, eventName)\n\n    if (!toRun) {\n      return;\n    }\n\n    commandsManager.run(toRun);\n  };\n\n  function elementEnabledHandler(evt: CustomEvent) {\n    const { element } = evt.detail;\n\n    element.addEventListener(\n      cs3DToolsEvents.MOUSE_DOUBLE_CLICK,\n      cornerstoneViewportHandleDoubleClick\n    );\n  }\n\n  function elementDisabledHandler(evt: CustomEvent) {\n    const { element } = evt.detail;\n\n    element.removeEventListener(\n      cs3DToolsEvents.MOUSE_DOUBLE_CLICK,\n      cornerstoneViewportHandleDoubleClick\n    );\n  }\n\n  eventTarget.addEventListener(\n    EVENTS.ELEMENT_ENABLED,\n    elementEnabledHandler.bind(null)\n  );\n\n  eventTarget.addEventListener(\n    EVENTS.ELEMENT_DISABLED,\n    elementDisabledHandler.bind(null)\n  );\n}\n\nexport default initDoubleClick;\n","import OHIF, { Types } from '@ohif/core';\nimport React from 'react';\n\nimport * as cornerstone from '@cornerstonejs/core';\nimport * as cornerstoneTools from '@cornerstonejs/tools';\nimport {\n  init as cs3DInit,\n  eventTarget,\n  EVENTS,\n  metaData,\n  volumeLoader,\n  imageLoadPoolManager,\n  Settings,\n  utilities as csUtilities,\n} from '@cornerstonejs/core';\nimport { Enums, utilities, ReferenceLinesTool } from '@cornerstonejs/tools';\nimport { cornerstoneStreamingImageVolumeLoader } from '@cornerstonejs/streaming-image-volume-loader';\n\nimport initWADOImageLoader from './initWADOImageLoader';\nimport initCornerstoneTools from './initCornerstoneTools';\n\nimport { connectToolsToMeasurementService } from './initMeasurementService';\nimport initCineService from './initCineService';\nimport interleaveCenterLoader from './utils/interleaveCenterLoader';\nimport nthLoader from './utils/nthLoader';\nimport interleaveTopToBottom from './utils/interleaveTopToBottom';\nimport initContextMenu from './initContextMenu';\nimport initDoubleClick from './initDoubleClick';\n\n// TODO: Cypress tests are currently grabbing this from the window?\nwindow.cornerstone = cornerstone;\nwindow.cornerstoneTools = cornerstoneTools;\n/**\n *\n */\nexport default async function init({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n  appConfig,\n}: Types.Extensions.ExtensionParams): Promise<void> {\n  await cs3DInit();\n\n  // For debugging e2e tests that are failing on CI\n  cornerstone.setUseCPURendering(Boolean(appConfig.useCPURendering));\n  cornerstone.setConfiguration({\n    ...cornerstone.getConfiguration(),\n    rendering: {\n      ...cornerstone.getConfiguration().rendering,\n      strictZSpacingForVolumeViewport:\n        appConfig.strictZSpacingForVolumeViewport,\n    },\n  });\n\n  // For debugging large datasets\n  const MAX_CACHE_SIZE_1GB = 1073741824;\n  const maxCacheSize = appConfig.maxCacheSize;\n  cornerstone.cache.setMaxCacheSize(\n    maxCacheSize ? maxCacheSize : MAX_CACHE_SIZE_1GB\n  );\n\n  initCornerstoneTools();\n\n  Settings.getRuntimeSettings().set(\n    'useCursors',\n    Boolean(appConfig.useCursors)\n  );\n\n  const {\n    userAuthenticationService,\n    measurementService,\n    customizationService,\n    displaySetService,\n    uiDialogService,\n    uiModalService,\n    uiNotificationService,\n    cineService,\n    cornerstoneViewportService,\n    hangingProtocolService,\n    toolGroupService,\n    viewportGridService,\n    stateSyncService,\n  } = servicesManager.services;\n\n  window.services = servicesManager.services;\n  window.extensionManager = extensionManager;\n  window.commandsManager = commandsManager;\n\n  if (\n    appConfig.showWarningMessageForCrossOrigin &&\n    !window.crossOriginIsolated\n  ) {\n    uiNotificationService.show({\n      title: 'Cross Origin Isolation',\n      message:\n        'Cross Origin Isolation is not enabled, volume rendering will not work (e.g., MPR)',\n      type: 'warning',\n    });\n  }\n\n  if (\n    appConfig.showCPUFallbackMessage &&\n    cornerstone.getShouldUseCPURendering()\n  ) {\n    _showCPURenderingModal(uiModalService, hangingProtocolService);\n  }\n\n  // Stores a map from `lutPresentationId` to a Presentation object so that\n  // an OHIFCornerstoneViewport can be redisplayed with the same LUT\n  stateSyncService.register('lutPresentationStore', { clearOnModeExit: true });\n\n  // Stores a map from `positionPresentationId` to a Presentation object so that\n  // an OHIFCornerstoneViewport can be redisplayed with the same position\n  stateSyncService.register('positionPresentationStore', {\n    clearOnModeExit: true,\n  });\n\n  // Stores the entire ViewportGridService getState when toggling to one up\n  // (e.g. via a double click) so that it can be restored when toggling back.\n  stateSyncService.register('toggleOneUpViewportGridStore', {\n    clearOnModeExit: true,\n  });\n\n  const labelmapRepresentation =\n    cornerstoneTools.Enums.SegmentationRepresentations.Labelmap;\n\n  cornerstoneTools.segmentation.config.setGlobalRepresentationConfig(\n    labelmapRepresentation,\n    {\n      fillAlpha: 0.3,\n      fillAlphaInactive: 0.2,\n      outlineOpacity: 1,\n      outlineOpacityInactive: 0.65,\n    }\n  );\n\n  const metadataProvider = OHIF.classes.MetadataProvider;\n\n  volumeLoader.registerVolumeLoader(\n    'cornerstoneStreamingImageVolume',\n    cornerstoneStreamingImageVolumeLoader\n  );\n\n  hangingProtocolService.registerImageLoadStrategy(\n    'interleaveCenter',\n    interleaveCenterLoader\n  );\n  hangingProtocolService.registerImageLoadStrategy(\n    'interleaveTopToBottom',\n    interleaveTopToBottom\n  );\n  hangingProtocolService.registerImageLoadStrategy('nth', nthLoader);\n\n  // add metadata providers\n  metaData.addProvider(\n    csUtilities.calibratedPixelSpacingMetadataProvider.get.bind(\n      csUtilities.calibratedPixelSpacingMetadataProvider\n    )\n  ); // this provider is required for Calibration tool\n  metaData.addProvider(metadataProvider.get.bind(metadataProvider), 9999);\n\n  imageLoadPoolManager.maxNumRequests = {\n    interaction: appConfig?.maxNumRequests?.interaction || 100,\n    thumbnail: appConfig?.maxNumRequests?.thumbnail || 75,\n    prefetch: appConfig?.maxNumRequests?.prefetch || 10,\n  };\n\n  initWADOImageLoader(userAuthenticationService, appConfig);\n\n  /* Measurement Service */\n  this.measurementServiceSource = connectToolsToMeasurementService(\n    servicesManager\n  );\n\n  initCineService(cineService);\n\n  // When a custom image load is performed, update the relevant viewports\n  hangingProtocolService.subscribe(\n    hangingProtocolService.EVENTS.CUSTOM_IMAGE_LOAD_PERFORMED,\n    volumeInputArrayMap => {\n      for (const entry of volumeInputArrayMap.entries()) {\n        const [viewportId, volumeInputArray] = entry;\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(\n          viewportId\n        );\n\n        const ohifViewport = cornerstoneViewportService.getViewportInfo(\n          viewportId\n        );\n\n        const {\n          lutPresentationStore,\n          positionPresentationStore,\n        } = stateSyncService.getState();\n        const { presentationIds } = ohifViewport.getViewportOptions();\n        const presentations = {\n          positionPresentation:\n            positionPresentationStore[presentationIds?.positionPresentationId],\n          lutPresentation:\n            lutPresentationStore[presentationIds?.lutPresentationId],\n        };\n\n        cornerstoneViewportService.setVolumesForViewport(\n          viewport,\n          volumeInputArray,\n          presentations\n        );\n      }\n    }\n  );\n\n  initContextMenu({\n    cornerstoneViewportService,\n    customizationService,\n    commandsManager,\n  });\n\n  initDoubleClick({\n    customizationService,\n    commandsManager,\n  });\n\n  const newStackCallback = evt => {\n    const { element } = evt.detail;\n    utilities.stackPrefetch.enable(element);\n  };\n\n  const resetCrosshairs = evt => {\n    const { element } = evt.detail;\n    const { viewportId, renderingEngineId } = cornerstone.getEnabledElement(\n      element\n    );\n\n    const toolGroup = cornerstoneTools.ToolGroupManager.getToolGroupForViewport(\n      viewportId,\n      renderingEngineId\n    );\n\n    if (!toolGroup || !toolGroup._toolInstances?.['Crosshairs']) {\n      return;\n    }\n\n    const mode = toolGroup._toolInstances['Crosshairs'].mode;\n\n    if (mode === Enums.ToolModes.Active) {\n      toolGroup.setToolActive('Crosshairs');\n    } else if (mode === Enums.ToolModes.Passive) {\n      toolGroup.setToolPassive('Crosshairs');\n    } else if (mode === Enums.ToolModes.Enabled) {\n      toolGroup.setToolEnabled('Crosshairs');\n    }\n  };\n\n  function elementEnabledHandler(evt) {\n    const { element } = evt.detail;\n    element.addEventListener(EVENTS.CAMERA_RESET, resetCrosshairs);\n\n    eventTarget.addEventListener(\n      EVENTS.STACK_VIEWPORT_NEW_STACK,\n      newStackCallback\n    );\n  }\n\n  function elementDisabledHandler(evt) {\n    const { element } = evt.detail;\n\n    element.removeEventListener(EVENTS.CAMERA_RESET, resetCrosshairs);\n\n    // TODO - consider removing the callback when all elements are gone\n    // eventTarget.removeEventListener(\n    //   EVENTS.STACK_VIEWPORT_NEW_STACK,\n    //   newStackCallback\n    // );\n  }\n\n  eventTarget.addEventListener(\n    EVENTS.ELEMENT_ENABLED,\n    elementEnabledHandler.bind(null)\n  );\n\n  eventTarget.addEventListener(\n    EVENTS.ELEMENT_DISABLED,\n    elementDisabledHandler.bind(null)\n  );\n\n  viewportGridService.subscribe(\n    viewportGridService.EVENTS.ACTIVE_VIEWPORT_INDEX_CHANGED,\n    ({ viewportIndex, viewportId }) => {\n      viewportId = viewportId || `viewport-${viewportIndex}`;\n      const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n      if (!toolGroup || !toolGroup._toolInstances?.['ReferenceLines']) {\n        return;\n      }\n\n      // check if reference lines are active\n      const referenceLinesEnabled =\n        toolGroup._toolInstances['ReferenceLines'].mode ===\n        Enums.ToolModes.Enabled;\n\n      if (!referenceLinesEnabled) {\n        return;\n      }\n\n      toolGroup.setToolConfiguration(\n        ReferenceLinesTool.toolName,\n        {\n          sourceViewportId: viewportId,\n        },\n        true // overwrite\n      );\n\n      // make sure to set it to enabled again since we want to recalculate\n      // the source-target lines\n      toolGroup.setToolEnabled(ReferenceLinesTool.toolName);\n    }\n  );\n}\n\nfunction CPUModal() {\n  return (\n    <div>\n      <p>\n        Your computer does not have enough GPU power to support the default GPU\n        rendering mode. OHIF has switched to CPU rendering mode. Please note\n        that CPU rendering does not support all features such as Volume\n        Rendering, Multiplanar Reconstruction, and Segmentation Overlays.\n      </p>\n    </div>\n  );\n}\n\nfunction _showCPURenderingModal(uiModalService, hangingProtocolService) {\n  const callback = progress => {\n    if (progress === 100) {\n      uiModalService.show({\n        content: CPUModal,\n        title: 'OHIF Fell Back to CPU Rendering',\n      });\n\n      return true;\n    }\n  };\n\n  const { unsubscribe } = hangingProtocolService.subscribe(\n    hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n    () => {\n      const done = callback(100);\n\n      if (done) {\n        unsubscribe();\n      }\n    }\n  );\n}\n","import dicomImageLoader from '@cornerstonejs/dicom-image-loader';\n\nimport { PubSubService } from '@ohif/core';\n\nexport const EVENTS = {\n  PROGRESS: 'event:DicomFileUploader:progress',\n};\n\nexport interface DicomFileUploaderEvent {\n  fileId: number;\n}\n\nexport interface DicomFileUploaderProgressEvent extends DicomFileUploaderEvent {\n  percentComplete: number;\n}\n\nexport enum UploadStatus {\n  NotStarted,\n  InProgress,\n  Success,\n  Failed,\n  Cancelled,\n}\n\ntype CancelOrFailed = UploadStatus.Cancelled | UploadStatus.Failed;\n\nexport class UploadRejection {\n  message: string;\n  status: CancelOrFailed;\n\n  constructor(status: CancelOrFailed, message: string) {\n    this.message = message;\n    this.status = status;\n  }\n}\n\nexport default class DicomFileUploader extends PubSubService {\n  private _file;\n  private _fileId;\n  private _dataSource;\n  private _loadPromise;\n  private _abortController = new AbortController();\n  private _status: UploadStatus = UploadStatus.NotStarted;\n  private _percentComplete = 0;\n\n  constructor(file, dataSource) {\n    super(EVENTS);\n    this._file = file;\n    this._fileId = dicomImageLoader.wadouri.fileManager.add(file);\n    this._dataSource = dataSource;\n  }\n\n  getFileId(): string {\n    return this._fileId;\n  }\n\n  getFileName(): string {\n    return this._file.name;\n  }\n\n  getFileSize(): number {\n    return this._file.size;\n  }\n\n  cancel(): void {\n    this._abortController.abort();\n  }\n\n  getStatus(): UploadStatus {\n    return this._status;\n  }\n\n  getPercentComplete(): number {\n    return this._percentComplete;\n  }\n\n  async load(): Promise<void> {\n    if (this._loadPromise) {\n      // Already started loading, return the load promise.\n      return this._loadPromise;\n    }\n\n    this._loadPromise = new Promise<void>((resolve, reject) => {\n      // The upload listeners: fire progress events and/or settle the promise.\n      const uploadCallbacks = {\n        progress: evt => {\n          if (!evt.lengthComputable) {\n            // Progress computation is not possible.\n            return;\n          }\n\n          this._status = UploadStatus.InProgress;\n\n          this._percentComplete = Math.round((100 * evt.loaded) / evt.total);\n          this._broadcastEvent(EVENTS.PROGRESS, {\n            fileId: this._fileId,\n            percentComplete: this._percentComplete,\n          });\n        },\n        timeout: () => {\n          this._reject(\n            reject,\n            new UploadRejection(UploadStatus.Failed, 'The request timed out.')\n          );\n        },\n        abort: () => {\n          this._reject(\n            reject,\n            new UploadRejection(UploadStatus.Cancelled, 'Cancelled')\n          );\n        },\n        error: () => {\n          this._reject(\n            reject,\n            new UploadRejection(UploadStatus.Failed, 'The request failed.')\n          );\n        },\n      };\n\n      // First try to load the file.\n      dicomImageLoader.wadouri\n        .loadFileRequest(this._fileId)\n        .then(dicomFile => {\n          if (this._abortController.signal.aborted) {\n            this._reject(\n              reject,\n              new UploadRejection(UploadStatus.Cancelled, 'Cancelled')\n            );\n            return;\n          }\n\n          if (!this._checkDicomFile(dicomFile)) {\n            // The file is not DICOM\n            this._reject(\n              reject,\n              new UploadRejection(\n                UploadStatus.Failed,\n                'Not a valid DICOM file.'\n              )\n            );\n            return;\n          }\n\n          const request = new XMLHttpRequest();\n          this._addRequestCallbacks(request, uploadCallbacks);\n\n          // Do the actual upload by supplying the DICOM file and upload callbacks/listeners.\n          return this._dataSource.store\n            .dicom(dicomFile, request)\n            .then(() => {\n              this._status = UploadStatus.Success;\n              resolve();\n            })\n            .catch(reason => {\n              this._reject(reject, reason);\n            });\n        })\n        .catch(reason => {\n          this._reject(reject, reason);\n        });\n    });\n\n    return this._loadPromise;\n  }\n\n  private _isRejected(): boolean {\n    return (\n      this._status === UploadStatus.Failed ||\n      this._status === UploadStatus.Cancelled\n    );\n  }\n\n  private _reject(reject: (reason?: any) => void, reason: any) {\n    if (this._isRejected()) {\n      return;\n    }\n\n    if (reason instanceof UploadRejection) {\n      this._status = reason.status;\n      reject(reason);\n      return;\n    }\n\n    this._status = UploadStatus.Failed;\n\n    if (reason.message) {\n      reject(new UploadRejection(UploadStatus.Failed, reason.message));\n      return;\n    }\n\n    reject(new UploadRejection(UploadStatus.Failed, reason));\n  }\n\n  private _addRequestCallbacks(request: XMLHttpRequest, uploadCallbacks) {\n    const abortCallback = () => request.abort();\n    this._abortController.signal.addEventListener('abort', abortCallback);\n\n    for (const [eventName, callback] of Object.entries(uploadCallbacks)) {\n      request.upload.addEventListener(eventName, callback);\n    }\n\n    const cleanUpCallback = () => {\n      this._abortController.signal.removeEventListener('abort', abortCallback);\n\n      for (const [eventName, callback] of Object.entries(uploadCallbacks)) {\n        request.upload.removeEventListener(eventName, callback);\n      }\n\n      request.removeEventListener('loadend', cleanUpCallback);\n    };\n    request.addEventListener('loadend', cleanUpCallback);\n  }\n\n  private _checkDicomFile(arrayBuffer: ArrayBuffer) {\n    if (arrayBuffer.length <= 132) return false;\n    const arr = new Uint8Array(arrayBuffer.slice(128, 132));\n    // bytes from 128 to 132 must be \"DICM\"\n    return Array.from('DICM').every((char, i) => char.charCodeAt(0) === arr[i]);\n  }\n}\n","import React, {\n  ReactElement,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport DicomFileUploader, {\n  DicomFileUploaderProgressEvent,\n  EVENTS,\n  UploadRejection,\n  UploadStatus,\n} from '../../utils/DicomFileUploader';\nimport { Icon } from '@ohif/ui';\n\ntype DicomUploadProgressItemProps = {\n  dicomFileUploader: DicomFileUploader;\n};\n\n// eslint-disable-next-line react/display-name\nconst DicomUploadProgressItem = memo(\n  ({ dicomFileUploader }: DicomUploadProgressItemProps): ReactElement => {\n    const [percentComplete, setPercentComplete] = useState(\n      dicomFileUploader.getPercentComplete()\n    );\n    const [failedReason, setFailedReason] = useState('');\n    const [status, setStatus] = useState(dicomFileUploader.getStatus());\n\n    console.info(`${dicomFileUploader.getFileId()}`);\n    const isComplete = useCallback(() => {\n      return (\n        status === UploadStatus.Failed ||\n        status === UploadStatus.Cancelled ||\n        status === UploadStatus.Success\n      );\n    }, [status]);\n\n    useEffect(() => {\n      const progressSubscription = dicomFileUploader.subscribe(\n        EVENTS.PROGRESS,\n        (dicomFileUploaderProgressEvent: DicomFileUploaderProgressEvent) => {\n          setPercentComplete(dicomFileUploaderProgressEvent.percentComplete);\n        }\n      );\n\n      dicomFileUploader\n        .load()\n        .catch((reason: UploadRejection) => {\n          setStatus(reason.status);\n          setFailedReason(reason.message ?? '');\n        })\n        .finally(() => setStatus(dicomFileUploader.getStatus()));\n\n      return () => progressSubscription.unsubscribe();\n    }, []);\n\n    const cancelUpload = useCallback(() => {\n      dicomFileUploader.cancel();\n    }, []);\n\n    const getStatusIcon = (): ReactElement => {\n      switch (dicomFileUploader.getStatus()) {\n        case UploadStatus.Success:\n          return (\n            <Icon name=\"status-tracked\" className=\"text-primary-light\"></Icon>\n          );\n        case UploadStatus.InProgress:\n          return <Icon name=\"icon-transferring\"></Icon>;\n        case UploadStatus.Failed:\n          return <Icon name=\"icon-alert-small\"></Icon>;\n        case UploadStatus.Cancelled:\n          return <Icon name=\"icon-alert-outline\"></Icon>;\n        default:\n          return <></>;\n      }\n    };\n\n    return (\n      <div className=\"flex w-full p-2.5 text-lg min-h-14 items-center border-b border-secondary-light overflow-hidden\">\n        <div className=\"flex flex-col gap-1 self-top w-0 grow shrink\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex w-6 justify-center items-center shrink-0\">\n              {getStatusIcon()}\n            </div>\n            <div className=\"text-ellipsis whitespace-nowrap overflow-hidden\">\n              {dicomFileUploader.getFileName()}\n            </div>\n          </div>\n          {failedReason && <div className=\"pl-10\">{failedReason}</div>}\n        </div>\n        <div className=\"w-24 flex items-center\">\n          {!isComplete() && (\n            <>\n              {dicomFileUploader.getStatus() === UploadStatus.InProgress && (\n                <div className=\"w-10 text-right\">{percentComplete}%</div>\n              )}\n              <div className=\"flex cursor-pointer ml-auto\">\n                <Icon\n                  className=\"self-center text-primary-active\"\n                  name=\"close\"\n                  onClick={cancelUpload}\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nDicomUploadProgressItem.propTypes = {\n  dicomFileUploader: PropTypes.instanceOf(DicomFileUploader).isRequired,\n};\n\nexport default DicomUploadProgressItem;\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  ReactElement,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Icon, ProgressLoadingBar } from '@ohif/ui';\nimport DicomFileUploader, {\n  EVENTS,\n  UploadStatus,\n  DicomFileUploaderProgressEvent,\n  UploadRejection,\n} from '../../utils/DicomFileUploader';\nimport DicomUploadProgressItem from './DicomUploadProgressItem';\nimport classNames from 'classnames';\n\ntype DicomUploadProgressProps = {\n  dicomFileUploaderArr: DicomFileUploader[];\n  onComplete: () => void;\n};\n\nconst ONE_SECOND = 1000;\nconst ONE_MINUTE = ONE_SECOND * 60;\nconst ONE_HOUR = ONE_MINUTE * 60;\n\n// The base/initial interval time length used to calculate the\n// rate of the upload and in turn estimate the\n// the amount of time remaining for the upload. This is the length\n// of the very first interval to get a reasonable estimate on screen in\n// a reasonable amount of time. The length of each interval after the first\n// is based on the upload rate calculated. Faster rates use this base interval\n// length. Slower rates below UPLOAD_RATE_THRESHOLD get longer interval times\n// to obtain more accurate upload rates.\nconst BASE_INTERVAL_TIME = 15000;\n\n// The upload rate threshold to determine the length of the interval to\n// calculate the upload rate.\nconst UPLOAD_RATE_THRESHOLD = 75;\n\nconst NO_WRAP_ELLIPSIS_CLASS_NAMES =\n  'text-ellipsis whitespace-nowrap overflow-hidden';\n\nfunction DicomUploadProgress({\n  dicomFileUploaderArr,\n  onComplete,\n}: DicomUploadProgressProps): ReactElement {\n  const [totalUploadSize] = useState(\n    dicomFileUploaderArr.reduce(\n      (acc, fileUploader) => acc + fileUploader.getFileSize(),\n      0\n    )\n  );\n\n  const currentUploadSizeRef = useRef<number>(0);\n\n  const uploadRateRef = useRef(0);\n\n  const [timeRemaining, setTimeRemaining] = useState<number>(null);\n\n  const [percentComplete, setPercentComplete] = useState(0);\n\n  const [numFilesCompleted, setNumFilesCompleted] = useState(0);\n\n  const [numFails, setNumFails] = useState(0);\n\n  const [showFailedOnly, setShowFailedOnly] = useState(false);\n\n  const progressBarContainerRef = useRef<HTMLElement>();\n\n  /**\n   * The effect for measuring and setting the current upload rate. This is\n   * done by measuring the amount of data uploaded in a set interval time.\n   */\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n\n    // The amount of data already uploaded at the start of the interval.\n    let intervalStartUploadSize = 0;\n\n    // The starting time of the interval.\n    let intervalStartTime = Date.now();\n\n    const setUploadRateRef = () => {\n      const uploadSizeFromStartOfInterval =\n        currentUploadSizeRef.current - intervalStartUploadSize;\n\n      const now = Date.now();\n      const timeSinceStartOfInterval = now - intervalStartTime;\n\n      // Calculate and set the upload rate (ref)\n      uploadRateRef.current =\n        uploadSizeFromStartOfInterval / timeSinceStartOfInterval;\n\n      // Reset the interval starting values.\n      intervalStartUploadSize = currentUploadSizeRef.current;\n      intervalStartTime = now;\n\n      // Only start a new interval if there is more to upload.\n      if (totalUploadSize - currentUploadSizeRef.current > 0) {\n        if (uploadRateRef.current >= UPLOAD_RATE_THRESHOLD) {\n          timeoutId = setTimeout(setUploadRateRef, BASE_INTERVAL_TIME);\n        } else {\n          // The current upload rate is relatively slow, so use a larger\n          // time interval to get a better upload rate estimate.\n          timeoutId = setTimeout(setUploadRateRef, BASE_INTERVAL_TIME * 2);\n        }\n      }\n    };\n\n    // The very first interval is just the base time interval length.\n    timeoutId = setTimeout(setUploadRateRef, BASE_INTERVAL_TIME);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  /**\n   * The effect for: updating the overall percentage complete; setting the\n   * estimated time remaining; updating the number of files uploaded; and\n   * detecting if any error has occurred.\n   */\n  useEffect(() => {\n    let currentTimeRemaining = null;\n\n    // For each uploader, listen for the progress percentage complete and\n    // add promise catch/finally callbacks to detect errors and count number\n    // of uploads complete.\n    const subscriptions = dicomFileUploaderArr.map(fileUploader => {\n      let currentFileUploadSize = 0;\n\n      const updateProgress = (percentComplete: number) => {\n        const previousFileUploadSize = currentFileUploadSize;\n\n        currentFileUploadSize = Math.round(\n          (percentComplete / 100) * fileUploader.getFileSize()\n        );\n\n        currentUploadSizeRef.current = Math.min(\n          totalUploadSize,\n          currentUploadSizeRef.current -\n            previousFileUploadSize +\n            currentFileUploadSize\n        );\n\n        setPercentComplete(\n          (currentUploadSizeRef.current / totalUploadSize) * 100\n        );\n\n        if (uploadRateRef.current !== 0) {\n          const uploadSizeRemaining =\n            totalUploadSize - currentUploadSizeRef.current;\n\n          const timeRemaining = Math.round(\n            uploadSizeRemaining / uploadRateRef.current\n          );\n\n          if (currentTimeRemaining === null) {\n            currentTimeRemaining = timeRemaining;\n            setTimeRemaining(currentTimeRemaining);\n            return;\n          }\n\n          // Do not show an increase in the time remaining by two seconds or minutes\n          // so as to prevent jumping the time remaining up and down constantly\n          // due to rounding, inaccuracies in the estimate and slight variations\n          // in upload rates over time.\n          if (timeRemaining < ONE_MINUTE) {\n            const currentSecondsRemaining = Math.ceil(\n              currentTimeRemaining / ONE_SECOND\n            );\n            const secondsRemaining = Math.ceil(timeRemaining / ONE_SECOND);\n            const delta = secondsRemaining - currentSecondsRemaining;\n            if (delta < 0 || delta > 2) {\n              currentTimeRemaining = timeRemaining;\n              setTimeRemaining(currentTimeRemaining);\n            }\n            return;\n          }\n\n          if (timeRemaining < ONE_HOUR) {\n            const currentMinutesRemaining = Math.ceil(\n              currentTimeRemaining / ONE_MINUTE\n            );\n            const minutesRemaining = Math.ceil(timeRemaining / ONE_MINUTE);\n            const delta = minutesRemaining - currentMinutesRemaining;\n            if (delta < 0 || delta > 2) {\n              currentTimeRemaining = timeRemaining;\n              setTimeRemaining(currentTimeRemaining);\n            }\n            return;\n          }\n\n          // Hours remaining...\n          currentTimeRemaining = timeRemaining;\n          setTimeRemaining(currentTimeRemaining);\n        }\n      };\n\n      const progressCallback = (\n        progressEvent: DicomFileUploaderProgressEvent\n      ) => {\n        updateProgress(progressEvent.percentComplete);\n      };\n\n      // Use the uploader promise to flag any error and count the number of\n      // uploads completed.\n      fileUploader\n        .load()\n        .catch((rejection: UploadRejection) => {\n          if (rejection.status === UploadStatus.Failed) {\n            setNumFails(numFails => numFails + 1);\n          }\n        })\n        .finally(() => {\n          // If any error occurred, the percent complete progress stops firing\n          // but this call to updateProgress nicely puts all finished uploads at 100%.\n          updateProgress(100);\n          setNumFilesCompleted(numCompleted => numCompleted + 1);\n        });\n\n      return fileUploader.subscribe(EVENTS.PROGRESS, progressCallback);\n    });\n    return () => {\n      subscriptions.forEach(subscription => subscription.unsubscribe());\n    };\n  }, []);\n\n  const cancelAllUploads = useCallback(async () => {\n    for (const dicomFileUploader of dicomFileUploaderArr) {\n      // Important: we need a non-blocking way to cancel every upload,\n      // otherwise the UI will freeze and the user will not be able\n      // to interact with the app and progress will not be updated.\n      const promise = new Promise<void>((resolve, reject) => {\n        setTimeout(() => {\n          dicomFileUploader.cancel();\n          resolve();\n        }, 0);\n      });\n    }\n  }, []);\n\n  const getFormattedTimeRemaining = useCallback((): string => {\n    if (timeRemaining == null) {\n      return '';\n    }\n\n    if (timeRemaining < ONE_MINUTE) {\n      const secondsRemaining = Math.ceil(timeRemaining / ONE_SECOND);\n      return `${secondsRemaining} ${\n        secondsRemaining === 1 ? 'second' : 'seconds'\n      }`;\n    }\n\n    if (timeRemaining < ONE_HOUR) {\n      const minutesRemaining = Math.ceil(timeRemaining / ONE_MINUTE);\n      return `${minutesRemaining} ${\n        minutesRemaining === 1 ? 'minute' : 'minutes'\n      }`;\n    }\n\n    const hoursRemaining = Math.ceil(timeRemaining / ONE_HOUR);\n    return `${hoursRemaining} ${hoursRemaining === 1 ? 'hour' : 'hours'}`;\n  }, [timeRemaining]);\n\n  const getPercentCompleteRounded = useCallback(\n    () => Math.min(100, Math.round(percentComplete)),\n    [percentComplete]\n  );\n\n  /**\n   * Determines if the progress bar should show the infinite animation or not.\n   * Show the infinite animation for progress less than 1% AND if less than\n   * one pixel of the progress bar would be displayed.\n   */\n  const showInfiniteProgressBar = useCallback((): boolean => {\n    return (\n      getPercentCompleteRounded() < 1 &&\n      (progressBarContainerRef?.current?.offsetWidth ?? 0) *\n        (percentComplete / 100) <\n        1\n    );\n  }, [getPercentCompleteRounded, percentComplete]);\n\n  /**\n   * Gets the css style for the 'n of m' (files completed) text. The only css attribute\n   * of the style is width such that the 'n of m' is always a fixed width and thus\n   * as each file completes uploading the text on screen does not constantly shift\n   * left and right.\n   */\n  const getNofMFilesStyle = useCallback(() => {\n    // the number of digits accounts for the digits being on each side of the ' of '\n    const numDigits = 2 * dicomFileUploaderArr.length.toString().length;\n    // the number of digits + 2 spaces and 2 characters for ' of '\n    const numChars = numDigits + 4;\n    return { width: `${numChars}ch` };\n  }, []);\n\n  const getNumCompletedAndTimeRemainingComponent = (): ReactElement => {\n    return (\n      <div className=\"text-lg px-1 pb-4 h-14 flex bg-primary-dark items-center\">\n        {numFilesCompleted === dicomFileUploaderArr.length ? (\n          <>\n            <span className={NO_WRAP_ELLIPSIS_CLASS_NAMES}>{`${\n              dicomFileUploaderArr.length\n            } ${\n              dicomFileUploaderArr.length > 1 ? 'files' : 'file'\n            } completed.`}</span>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={false}\n              className=\"ml-auto\"\n              onClick={onComplete}\n            >\n              {'Close'}\n            </Button>\n          </>\n        ) : (\n          <>\n            <span\n              style={getNofMFilesStyle()}\n              className={classNames(NO_WRAP_ELLIPSIS_CLASS_NAMES, 'text-end')}\n            >\n              {`${numFilesCompleted} of ${dicomFileUploaderArr.length}`}&nbsp;\n            </span>\n            <span className={NO_WRAP_ELLIPSIS_CLASS_NAMES}>\n              {' files completed.'}&nbsp;\n            </span>\n            <span className={NO_WRAP_ELLIPSIS_CLASS_NAMES}>\n              {timeRemaining\n                ? `Less than ${getFormattedTimeRemaining()} remaining. `\n                : ''}\n            </span>\n            <span\n              className={classNames(\n                NO_WRAP_ELLIPSIS_CLASS_NAMES,\n                'cursor-pointer text-primary-active hover:text-primary-light active:text-aqua-pale ml-auto'\n              )}\n              onClick={cancelAllUploads}\n            >\n              Cancel All Uploads\n            </span>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const getShowFailedOnlyIconComponent = (): ReactElement => {\n    return (\n      <div className=\"ml-auto flex justify-center w-6\">\n        {numFails > 0 && (\n          <div\n            onClick={() =>\n              setShowFailedOnly(currentShowFailedOnly => !currentShowFailedOnly)\n            }\n          >\n            <Icon className=\"cursor-pointer\" name=\"icon-status-alert\"></Icon>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getPercentCompleteComponent = (): ReactElement => {\n    return (\n      <div className=\"overflow-y-scroll ohif-scrollbar px-2 border-b border-secondary-light\">\n        <div className=\"flex w-full p-2.5 items-center min-h-14\">\n          {numFilesCompleted === dicomFileUploaderArr.length ? (\n            <>\n              <div className=\"text-xl text-primary-light\">\n                {numFails > 0\n                  ? `Completed with ${numFails} ${\n                      numFails > 1 ? 'errors' : 'error'\n                    }!`\n                  : 'Completed!'}\n              </div>\n              {getShowFailedOnlyIconComponent()}\n            </>\n          ) : (\n            <>\n              <div ref={progressBarContainerRef} className=\"flex-grow\">\n                <ProgressLoadingBar\n                  progress={\n                    showInfiniteProgressBar()\n                      ? undefined\n                      : Math.min(100, percentComplete)\n                  }\n                ></ProgressLoadingBar>\n              </div>\n              <div className=\"w-24 ml-1 flex items-center\">\n                <div className=\"w-10 text-right\">{`${getPercentCompleteRounded()}%`}</div>\n                {getShowFailedOnlyIconComponent()}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col grow\">\n      {getNumCompletedAndTimeRemainingComponent()}\n      <div className=\"flex flex-col bg-black text-lg overflow-hidden grow\">\n        {getPercentCompleteComponent()}\n        <div className=\"overflow-y-scroll ohif-scrollbar px-2 grow h-1\">\n          {dicomFileUploaderArr\n            .filter(\n              dicomFileUploader =>\n                !showFailedOnly ||\n                dicomFileUploader.getStatus() === UploadStatus.Failed\n            )\n            .map(dicomFileUploader => (\n              <DicomUploadProgressItem\n                key={dicomFileUploader.getFileId()}\n                dicomFileUploader={dicomFileUploader}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nDicomUploadProgress.propTypes = {\n  dicomFileUploaderArr: PropTypes.arrayOf(\n    PropTypes.instanceOf(DicomFileUploader)\n  ).isRequired,\n  onComplete: PropTypes.func.isRequired,\n};\n\nexport default DicomUploadProgress;\n","import React, { useCallback, useState } from 'react';\nimport { ReactElement } from 'react';\nimport Dropzone from 'react-dropzone';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DicomFileUploader from '../../utils/DicomFileUploader';\nimport DicomUploadProgress from './DicomUploadProgress';\nimport { Button } from '@ohif/ui';\nimport './DicomUpload.css';\n\ntype DicomUploadProps = {\n  dataSource;\n  onComplete: () => void;\n  onStarted: () => void;\n};\n\nfunction DicomUpload({\n  dataSource,\n  onComplete,\n  onStarted,\n}: DicomUploadProps): ReactElement {\n  const baseClassNames = 'min-h-[480px] flex flex-col bg-black select-none';\n  const [dicomFileUploaderArr, setDicomFileUploaderArr] = useState([]);\n\n  const onDrop = useCallback(async acceptedFiles => {\n    onStarted();\n    setDicomFileUploaderArr(\n      acceptedFiles.map(file => new DicomFileUploader(file, dataSource))\n    );\n  }, []);\n\n  const getDropZoneComponent = (): ReactElement => {\n    return (\n      <Dropzone\n        onDrop={acceptedFiles => {\n          onDrop(acceptedFiles);\n        }}\n        noClick\n      >\n        {({ getRootProps }) => (\n          <div\n            {...getRootProps()}\n            className=\"m-5 dicom-upload-drop-area-border-dash flex flex-col items-center justify-center h-full\"\n          >\n            <div className=\"flex gap-3\">\n              <Dropzone onDrop={onDrop} noDrag>\n                {({ getRootProps, getInputProps }) => (\n                  <div {...getRootProps()}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={false}\n                      onClick={() => {}}\n                    >\n                      {'Add files'}\n                      <input {...getInputProps()} />\n                    </Button>\n                  </div>\n                )}\n              </Dropzone>\n              <Dropzone onDrop={onDrop} noDrag>\n                {({ getRootProps, getInputProps }) => (\n                  <div {...getRootProps()}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primaryDark\"\n                      border=\"primaryActive\"\n                      disabled={false}\n                      onClick={() => {}}\n                    >\n                      {'Add folder'}\n                      <input\n                        {...getInputProps()}\n                        webkitdirectory=\"true\"\n                        mozdirectory=\"true\"\n                      />\n                    </Button>\n                  </div>\n                )}\n              </Dropzone>\n            </div>\n            <div className=\"pt-5\">or drag images or folders here</div>\n            <div className=\"pt-3 text-aqua-pale text-lg\">\n              (DICOM files supported)\n            </div>\n          </div>\n        )}\n      </Dropzone>\n    );\n  };\n\n  return (\n    <>\n      {dicomFileUploaderArr.length ? (\n        <div className={classNames('h-[calc(100vh-300px)]', baseClassNames)}>\n          <DicomUploadProgress\n            dicomFileUploaderArr={Array.from(dicomFileUploaderArr)}\n            onComplete={onComplete}\n          />\n        </div>\n      ) : (\n        <div className={classNames('h-[480px]', baseClassNames)}>\n          {getDropZoneComponent()}\n        </div>\n      )}\n    </>\n  );\n}\n\nDicomUpload.propTypes = {\n  dataSource: PropTypes.object.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onStarted: PropTypes.func.isRequired,\n};\n\nexport default DicomUpload;\n","import { Enums } from '@cornerstonejs/tools';\nimport { toolNames } from './initCornerstoneTools';\nimport DicomUpload from './components/DicomUpload/DicomUpload';\n\nconst tools = {\n  active: [\n    {\n      toolName: toolNames.WindowLevel,\n      bindings: [{ mouseButton: Enums.MouseBindings.Primary }],\n    },\n    {\n      toolName: toolNames.Pan,\n      bindings: [{ mouseButton: Enums.MouseBindings.Auxiliary }],\n    },\n    {\n      toolName: toolNames.Zoom,\n      bindings: [{ mouseButton: Enums.MouseBindings.Secondary }],\n    },\n    { toolName: toolNames.StackScrollMouseWheel, bindings: [] },\n  ],\n  enabled: [{ toolName: toolNames.SegmentationDisplay }],\n};\n\nfunction getCustomizationModule() {\n  return [\n    {\n      name: 'cornerstoneDicomUploadComponent',\n      value: {\n        id: 'dicomUploadComponent',\n        component: DicomUpload,\n      },\n    },\n    {\n      name: 'default',\n      value: [\n        {\n          id: 'cornerstone.overlayViewportTools',\n          tools,\n        },\n      ],\n    },\n  ];\n}\n\nexport default getCustomizationModule;\n","import React, { useEffect, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport {\n  Enums,\n  getEnabledElement,\n  getOrCreateCanvas,\n  StackViewport,\n  VolumeViewport,\n} from '@cornerstonejs/core';\nimport { ToolGroupManager } from '@cornerstonejs/tools';\nimport PropTypes from 'prop-types';\nimport { ViewportDownloadForm } from '@ohif/ui';\n\nimport { getEnabledElement as OHIFgetEnabledElement } from '../state';\n\nconst MINIMUM_SIZE = 100;\nconst DEFAULT_SIZE = 512;\nconst MAX_TEXTURE_SIZE = 10000;\nconst VIEWPORT_ID = 'cornerstone-viewport-download-form';\n\nconst CornerstoneViewportDownloadForm = ({\n  onClose,\n  activeViewportIndex,\n  cornerstoneViewportService,\n}) => {\n  const enabledElement = OHIFgetEnabledElement(activeViewportIndex);\n  const activeViewportElement = enabledElement?.element;\n  const activeViewportEnabledElement = getEnabledElement(activeViewportElement);\n\n  const {\n    viewportId: activeViewportId,\n    renderingEngineId,\n  } = activeViewportEnabledElement;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    activeViewportId,\n    renderingEngineId\n  );\n\n  const toolModeAndBindings = Object.keys(toolGroup.toolOptions).reduce(\n    (acc, toolName) => {\n      const tool = toolGroup.toolOptions[toolName];\n      const { mode, bindings } = tool;\n\n      return {\n        ...acc,\n        [toolName]: {\n          mode,\n          bindings,\n        },\n      };\n    },\n    {}\n  );\n\n  useEffect(() => {\n    return () => {\n      Object.keys(toolModeAndBindings).forEach(toolName => {\n        const { mode, bindings } = toolModeAndBindings[toolName];\n        toolGroup.setToolMode(toolName, mode, { bindings });\n      });\n    };\n  }, []);\n\n  const enableViewport = viewportElement => {\n    if (viewportElement) {\n      const { renderingEngine, viewport } = getEnabledElement(\n        activeViewportElement\n      );\n\n      const viewportInput = {\n        viewportId: VIEWPORT_ID,\n        element: viewportElement,\n        type: viewport.type,\n        defaultOptions: {\n          background: viewport.defaultOptions.background,\n          orientation: viewport.defaultOptions.orientation,\n        },\n      };\n\n      renderingEngine.enableElement(viewportInput);\n    }\n  };\n\n  const disableViewport = viewportElement => {\n    if (viewportElement) {\n      const { renderingEngine } = getEnabledElement(viewportElement);\n      return new Promise(resolve => {\n        renderingEngine.disableElement(VIEWPORT_ID);\n      });\n    }\n  };\n\n  const updateViewportPreview = (\n    downloadViewportElement,\n    internalCanvas,\n    fileType\n  ) =>\n    new Promise(resolve => {\n      const enabledElement = getEnabledElement(downloadViewportElement);\n\n      const { viewport: downloadViewport, renderingEngine } = enabledElement;\n\n      // Note: Since any trigger of dimensions will update the viewport,\n      // we need to resize the offScreenCanvas to accommodate for the new\n      // dimensions, this is due to the reason that we are using the GPU offScreenCanvas\n      // to render the viewport for the downloadViewport.\n      renderingEngine.resize();\n\n      // Trigger the render on the viewport to update the on screen\n      downloadViewport.render();\n\n      downloadViewportElement.addEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        function updateViewport(event) {\n          const enabledElement = getEnabledElement(event.target);\n          const { viewport } = enabledElement;\n          const { element } = viewport;\n\n          const downloadCanvas = getOrCreateCanvas(element);\n\n          const type = 'image/' + fileType;\n          const dataUrl = downloadCanvas.toDataURL(type, 1);\n\n          let newWidth = element.offsetHeight;\n          let newHeight = element.offsetWidth;\n\n          if (newWidth > DEFAULT_SIZE || newHeight > DEFAULT_SIZE) {\n            const multiplier = DEFAULT_SIZE / Math.max(newWidth, newHeight);\n            newHeight *= multiplier;\n            newWidth *= multiplier;\n          }\n\n          resolve({ dataUrl, width: newWidth, height: newHeight });\n\n          downloadViewportElement.removeEventListener(\n            Enums.Events.IMAGE_RENDERED,\n            updateViewport\n          );\n        }\n      );\n    });\n\n  const loadImage = (activeViewportElement, viewportElement, width, height) =>\n    new Promise(resolve => {\n      if (activeViewportElement && viewportElement) {\n        const activeViewportEnabledElement = getEnabledElement(\n          activeViewportElement\n        );\n\n        if (!activeViewportEnabledElement) {\n          return;\n        }\n\n        const { viewport } = activeViewportEnabledElement;\n\n        const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n        const downloadViewport = renderingEngine.getViewport(VIEWPORT_ID);\n\n        if (downloadViewport instanceof StackViewport) {\n          const imageId = viewport.getCurrentImageId();\n          const properties = viewport.getProperties();\n\n          downloadViewport.setStack([imageId]).then(() => {\n            downloadViewport.setProperties(properties);\n\n            const newWidth = Math.min(width || image.width, MAX_TEXTURE_SIZE);\n            const newHeight = Math.min(\n              height || image.height,\n              MAX_TEXTURE_SIZE\n            );\n\n            resolve({ width: newWidth, height: newHeight });\n          });\n        } else if (downloadViewport instanceof VolumeViewport) {\n          const actors = viewport.getActors();\n          // downloadViewport.setActors(actors);\n          actors.forEach(actor => {\n            downloadViewport.addActor(actor);\n          });\n\n          downloadViewport.setCamera(viewport.getCamera());\n          downloadViewport.render();\n\n          const newWidth = Math.min(width || image.width, MAX_TEXTURE_SIZE);\n          const newHeight = Math.min(height || image.height, MAX_TEXTURE_SIZE);\n\n          resolve({ width: newWidth, height: newHeight });\n        }\n      }\n    });\n\n  const toggleAnnotations = (\n    toggle,\n    viewportElement,\n    activeViewportElement\n  ) => {\n    const activeViewportEnabledElement = getEnabledElement(\n      activeViewportElement\n    );\n\n    const downloadViewportElement = getEnabledElement(viewportElement);\n\n    const {\n      viewportId: activeViewportId,\n      renderingEngineId,\n    } = activeViewportEnabledElement;\n    const { viewportId: downloadViewportId } = downloadViewportElement;\n\n    if (!activeViewportEnabledElement || !downloadViewportElement) {\n      return;\n    }\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      activeViewportId,\n      renderingEngineId\n    );\n\n    // add the viewport to the toolGroup\n    toolGroup.addViewport(downloadViewportId, renderingEngineId);\n\n    Object.keys(toolGroup._toolInstances).forEach(toolName => {\n      // make all tools Enabled so that they can not be interacted with\n      // in the download viewport\n      if (toggle && toolName !== 'Crosshairs') {\n        try {\n          toolGroup.setToolEnabled(toolName);\n        } catch (e) {\n          console.log(e);\n        }\n      } else {\n        toolGroup.setToolDisabled(toolName);\n      }\n    });\n  };\n\n  const downloadBlob = (filename, fileType) => {\n    const file = `${filename}.${fileType}`;\n    const divForDownloadViewport = document.querySelector(\n      `div[data-viewport-uid=\"${VIEWPORT_ID}\"]`\n    );\n\n    html2canvas(divForDownloadViewport).then(canvas => {\n      const link = document.createElement('a');\n      link.download = file;\n      link.href = canvas.toDataURL(fileType, 1.0);\n      link.click();\n    });\n  };\n\n  return (\n    <ViewportDownloadForm\n      onClose={onClose}\n      minimumSize={MINIMUM_SIZE}\n      maximumSize={MAX_TEXTURE_SIZE}\n      defaultSize={DEFAULT_SIZE}\n      canvasClass={'cornerstone-canvas'}\n      activeViewportElement={activeViewportElement}\n      enableViewport={enableViewport}\n      disableViewport={disableViewport}\n      updateViewportPreview={updateViewportPreview}\n      loadImage={loadImage}\n      toggleAnnotations={toggleAnnotations}\n      downloadBlob={downloadBlob}\n    />\n  );\n};\n\nCornerstoneViewportDownloadForm.propTypes = {\n  onClose: PropTypes.func,\n  activeViewportIndex: PropTypes.number.isRequired,\n};\n\nexport default CornerstoneViewportDownloadForm;\n","import { Types, getRenderingEngine, utilities } from '@cornerstonejs/core';\n\nexport default function calculateViewportRegistrations(\n  viewports: Types.IViewportId[]\n) {\n  const viewportPairs = _getViewportPairs(viewports);\n\n  for (const [viewport, nextViewport] of viewportPairs) {\n    // check if they are in the same Frame of Reference\n    const renderingEngine1 = getRenderingEngine(viewport.renderingEngineId);\n    const renderingEngine2 = getRenderingEngine(nextViewport.renderingEngineId);\n\n    const csViewport1 = renderingEngine1.getViewport(viewport.viewportId);\n    const csViewport2 = renderingEngine2.getViewport(nextViewport.viewportId);\n\n    utilities.calculateViewportsSpatialRegistration(csViewport1, csViewport2);\n  }\n}\n\nconst _getViewportPairs = (viewports: Types.IViewportId[]) => {\n  const viewportPairs = [];\n\n  for (let i = 0; i < viewports.length; i++) {\n    for (let j = i + 1; j < viewports.length; j++) {\n      viewportPairs.push([viewports[i], viewports[j]]);\n    }\n  }\n\n  return viewportPairs;\n};\n","import calculateViewportRegistrations from './calculateViewportRegistrations';\n\n// [ {\n//   synchronizerId: string,\n//   viewports: [ { viewportId: number, renderingEngineId: string, index: number } , ...]\n// ]}\nlet STACK_IMAGE_SYNC_GROUPS_INFO = [];\n\nexport default function toggleStackImageSync({\n  toggledState,\n  servicesManager,\n  getEnabledElement,\n}) {\n  const {\n    syncGroupService,\n    viewportGridService,\n    displaySetService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  if (!toggledState) {\n    STACK_IMAGE_SYNC_GROUPS_INFO.forEach(syncGroupInfo => {\n      const { viewports, synchronizerId } = syncGroupInfo;\n\n      viewports.forEach(({ viewportId, renderingEngineId }) => {\n        syncGroupService.removeViewportFromSyncGroup(\n          viewportId,\n          renderingEngineId,\n          synchronizerId\n        );\n      });\n    });\n\n    return;\n  }\n\n  STACK_IMAGE_SYNC_GROUPS_INFO = [];\n\n  // create synchronization groups and add viewports\n  let { viewports } = viewportGridService.getState();\n\n  // filter empty viewports\n  viewports = viewports.filter(\n    viewport =>\n      viewport.displaySetInstanceUIDs && viewport.displaySetInstanceUIDs.length\n  );\n\n  // filter reconstructable viewports\n  viewports = viewports.filter(viewport => {\n    const { displaySetInstanceUIDs } = viewport;\n\n    for (const displaySetInstanceUID of displaySetInstanceUIDs) {\n      const displaySet = displaySetService.getDisplaySetByUID(\n        displaySetInstanceUID\n      );\n\n      if (displaySet && displaySet.isReconstructable) {\n        return true;\n      }\n\n      return false;\n    }\n  });\n\n  const viewportsByOrientation = viewports.reduce((acc, viewport) => {\n    const { viewportId, viewportType } = viewport.viewportOptions;\n\n    if (viewportType !== 'stack') {\n      console.warn('Viewport is not a stack, cannot sync images yet');\n      return acc;\n    }\n\n    const { element } = cornerstoneViewportService.getViewportInfo(viewportId);\n    const { viewport: csViewport, renderingEngineId } = getEnabledElement(\n      element\n    );\n    const { viewPlaneNormal } = csViewport.getCamera();\n\n    // Should we round here? I guess so, but not sure how much precision we need\n    const orientation = viewPlaneNormal.map(v => Math.round(v)).join(',');\n\n    if (!acc[orientation]) {\n      acc[orientation] = [];\n    }\n\n    acc[orientation].push({ viewportId, renderingEngineId });\n\n    return acc;\n  }, {});\n\n  // create synchronizer for each group\n  Object.values(viewportsByOrientation).map(viewports => {\n    let synchronizerId = viewports\n      .map(({ viewportId }) => viewportId)\n      .join(',');\n\n    synchronizerId = `imageSync_${synchronizerId}`;\n\n    calculateViewportRegistrations(viewports);\n\n    viewports.forEach(({ viewportId, renderingEngineId }) => {\n      syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, {\n        type: 'stackimage',\n        id: synchronizerId,\n        source: true,\n        target: true,\n      });\n    });\n\n    STACK_IMAGE_SYNC_GROUPS_INFO.push({\n      synchronizerId,\n      viewports,\n    });\n  });\n}\n","import { annotation as cs3dToolAnnotationUtils } from '@cornerstonejs/tools';\n\n/**\n * Check whether an annotation from imaging library is selected or not.\n * @param {string} annotationUID uid of imaging library annotation\n * @returns boolean\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return cs3dToolAnnotationUtils.selection.isAnnotationSelected(annotationUID);\n}\n\n/**\n * Change an annotation from imaging library's selected property.\n * @param annotationUID - uid of imaging library annotation\n * @param selected - new value for selected\n */\nfunction setAnnotationSelected(annotationUID: string, selected: boolean): void {\n  const isCurrentSelected = isAnnotationSelected(annotationUID);\n  // branch cut, avoid invoking imaging library unnecessarily.\n  if (isCurrentSelected !== selected) {\n    cs3dToolAnnotationUtils.selection.setAnnotationSelected(\n      annotationUID,\n      selected\n    );\n  }\n}\n\nfunction getFirstAnnotationSelected(element) {\n  const [selectedAnnotationUID] =\n    cs3dToolAnnotationUtils.selection.getAnnotationsSelected() || [];\n\n  if (selectedAnnotationUID) {\n    return cs3dToolAnnotationUtils.state.getAnnotation(selectedAnnotationUID);\n  }\n}\n\nexport {\n  isAnnotationSelected,\n  setAnnotationSelected,\n  getFirstAnnotationSelected,\n};\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport {\n  ToolGroupManager,\n  Enums,\n  utilities as cstUtils,\n  ReferenceLinesTool,\n} from '@cornerstonejs/tools';\nimport { Types as OhifTypes } from '@ohif/core';\n\nimport CornerstoneViewportDownloadForm from './utils/CornerstoneViewportDownloadForm';\nimport callInputDialog from './utils/callInputDialog';\nimport toggleStackImageSync from './utils/stackSync/toggleStackImageSync';\nimport { getFirstAnnotationSelected } from './utils/measurementServiceMappings/utils/selection';\nimport getActiveViewportEnabledElement from './utils/getActiveViewportEnabledElement';\nimport { CornerstoneServices } from './types';\n\nfunction commandsModule({\n  servicesManager,\n  commandsManager,\n}: OhifTypes.Extensions.ExtensionParams): OhifTypes.Extensions.CommandsModule {\n  const {\n    viewportGridService,\n    toolGroupService,\n    cineService,\n    toolbarService,\n    uiDialogService,\n    cornerstoneViewportService,\n    uiNotificationService,\n    measurementService,\n    displaySetService\n  } = servicesManager.services as CornerstoneServices;\n\n  const { measurementServiceSource } = this;\n\n  function _getActiveViewportEnabledElement() {\n    return getActiveViewportEnabledElement(viewportGridService);\n  }\n  const actions = {\n    /**\n     * Generates the selector props for the context menu, specific to\n     * the cornerstone viewport, and then runs the context menu.\n     */\n    showCornerstoneContextMenu: options => {\n      const element = _getActiveViewportEnabledElement()?.viewport?.element;\n\n      const optionsToUse = { ...options, element };\n      const { useSelectedAnnotation, nearbyToolData, event } = optionsToUse;\n\n      // This code is used to invoke the context menu via keyboard shortcuts\n      if (useSelectedAnnotation && !nearbyToolData) {\n        const firstAnnotationSelected = getFirstAnnotationSelected(element);\n        // filter by allowed selected tools from config property (if there is any)\n        const isToolAllowed =\n          !optionsToUse.allowedSelectedTools ||\n          optionsToUse.allowedSelectedTools.includes(\n            firstAnnotationSelected?.metadata?.toolName\n          );\n        if (isToolAllowed) {\n          optionsToUse.nearbyToolData = firstAnnotationSelected;\n        } else {\n          return;\n        }\n      }\n\n      optionsToUse.defaultPointsPosition = [];\n      // if (optionsToUse.nearbyToolData) {\n      //   optionsToUse.defaultPointsPosition = commandsManager.runCommand(\n      //     'getToolDataActiveCanvasPoints',\n      //     { toolData: optionsToUse.nearbyToolData }\n      //   );\n      // }\n\n      // TODO - make the selectorProps richer by including the study metadata and display set.\n      optionsToUse.selectorProps = {\n        toolName: optionsToUse.nearbyToolData?.metadata?.toolName,\n        value: optionsToUse.nearbyToolData,\n        uid: optionsToUse.nearbyToolData?.annotationUID,\n        nearbyToolData: optionsToUse.nearbyToolData,\n        event,\n        ...optionsToUse.selectorProps,\n      };\n\n      commandsManager.run(options, optionsToUse);\n    },\n\n    getNearbyToolData({ nearbyToolData, element, canvasCoordinates }) {\n      return (\n        nearbyToolData ??\n        cstUtils.getAnnotationNearPoint(element, canvasCoordinates)\n      );\n    },\n    getNearbyAnnotation({ element, canvasCoordinates }) {\n      const nearbyToolData = actions.getNearbyToolData({\n        nearbyToolData: null,\n        element,\n        canvasCoordinates,\n      });\n\n      const isAnnotation = toolName => {\n        const enabledElement = getEnabledElement(element);\n\n        if (!enabledElement) {\n          return;\n        }\n\n        const { renderingEngineId, viewportId } = enabledElement;\n        const toolGroup = ToolGroupManager.getToolGroupForViewport(\n          viewportId,\n          renderingEngineId\n        );\n\n        const toolInstance = toolGroup.getToolInstance(toolName);\n\n        return toolInstance?.constructor?.isAnnotation ?? true;\n      };\n\n      return nearbyToolData?.metadata?.toolName &&\n        isAnnotation(nearbyToolData.metadata.toolName)\n        ? nearbyToolData\n        : null;\n    },\n\n    // Measurement tool commands:\n\n    /** Delete the given measurement */\n    deleteMeasurement: ({ uid }) => {\n      if (uid) {\n        measurementServiceSource.remove(uid);\n      }\n    },\n\n    /**\n     * Show the measurement labelling input dialog and update the label\n     * on the measurement with a response if not cancelled.\n     */\n    setMeasurementLabel: ({ uid }) => {\n      const measurement = measurementService.getMeasurement(uid);\n\n      callInputDialog(\n        uiDialogService,\n        measurement,\n        (label, actionId) => {\n          if (actionId === 'cancel') {\n            return;\n          }\n\n          const updatedMeasurement = Object.assign({}, measurement, {\n            label,\n          });\n\n          measurementService.update(\n            updatedMeasurement.uid,\n            updatedMeasurement,\n            true\n          );\n        },\n        false\n      );\n    },\n\n    /**\n     *\n     * @param props - containing the updates to apply\n     * @param props.measurementKey - chooses the measurement key to apply the\n     *        code to.  This will typically be finding or site to apply a\n     *        finind code or a findingSites code.\n     * @param props.code - A coding scheme value from DICOM, including:\n     *       * CodeValue - the language independent code, for example '1234'\n     *       * CodingSchemeDesignator - the issue of the code value\n     *       * CodeMeaning - the text value shown to the user\n     *       * ref - a string reference in the form `<designator>:<codeValue>`\n     *       * Other fields\n     *     Note it is a valid option to remove the finding or site values by\n     *     supplying null for the code.\n     * @param props.uid - the measurement UID to find it with\n     * @param props.label - the text value for the code.  Has NOTHING to do with\n     *        the measurement label, which can be set with textLabel\n     * @param props.textLabel is the measurement label to apply.  Set to null to\n     *            delete.\n     *\n     * If the measurementKey is `site`, then the code will also be added/replace\n     * the 0 element of findingSites.  This behaviour is expected to be enhanced\n     * in the future with ability to set other site information.\n     */\n    updateMeasurement: props => {\n      const { code, uid, textLabel, label } = props;\n      const measurement = measurementService.getMeasurement(uid);\n      const updatedMeasurement = {\n        ...measurement,\n      };\n      // Call it textLabel as the label value\n      // TODO - remove the label setting when direct rendering of findingSites is enabled\n      if (textLabel !== undefined) {\n        updatedMeasurement.label = textLabel;\n      }\n      if (code !== undefined) {\n        const measurementKey = code.type || 'finding';\n\n        if (code.ref && !code.CodeValue) {\n          const split = code.ref.indexOf(':');\n          code.CodeValue = code.ref.substring(split + 1);\n          code.CodeMeaning = code.text || label;\n          code.CodingSchemeDesignator = code.ref.substring(0, split);\n        }\n        updatedMeasurement[measurementKey] = code;\n        // TODO - remove this line once the measurements table customizations are in\n        if (measurementKey !== 'finding') {\n          if (updatedMeasurement.findingSites) {\n            updatedMeasurement.findingSites = updatedMeasurement.findingSites.filter(\n              it => it.type !== measurementKey\n            );\n            updatedMeasurement.findingSites.push(code);\n          } else {\n            updatedMeasurement.findingSites = [code];\n          }\n        }\n      }\n      measurementService.update(\n        updatedMeasurement.uid,\n        updatedMeasurement,\n        true\n      );\n    },\n\n    // Retrieve value commands\n    getActiveViewportEnabledElement: _getActiveViewportEnabledElement,\n\n    setViewportActive: ({ viewportId }) => {\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(\n        viewportId\n      );\n      if (!viewportInfo) {\n        console.warn('No viewport found for viewportId:', viewportId);\n        return;\n      }\n\n      const viewportIndex = viewportInfo.getViewportIndex();\n      viewportGridService.setActiveViewportIndex(viewportIndex);\n    },\n    arrowTextCallback: ({ callback, data }) => {\n      callInputDialog(uiDialogService, data, callback);\n    },\n    toggleCine: () => {\n      const { viewports } = viewportGridService.getState();\n      const { isCineEnabled } = cineService.getState();\n      cineService.setIsCineEnabled(!isCineEnabled);\n      toolbarService.setButton('Cine', { props: { isActive: !isCineEnabled } });\n      viewports.forEach((_, index) =>\n        cineService.setCine({ id: index, isPlaying: false })\n      );\n    },\n    setWindowLevel({ window, level, toolGroupId }) {\n      // convert to numbers\n      const windowWidthNum = Number(window);\n      const windowCenterNum = Number(level);\n\n      const { viewportId } = _getActiveViewportEnabledElement();\n      const viewportToolGroupId = toolGroupService.getToolGroupForViewport(\n        viewportId\n      );\n\n      if (toolGroupId && toolGroupId !== viewportToolGroupId) {\n        return;\n      }\n\n      // get actor from the viewport\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      const viewport = renderingEngine.getViewport(viewportId);\n\n      const { lower, upper } = csUtils.windowLevel.toLowHighRange(\n        windowWidthNum,\n        windowCenterNum\n      );\n\n      viewport.setProperties({\n        voiRange: {\n          upper,\n          lower,\n        },\n      });\n      viewport.render();\n    },\n\n    // Just call the toolbar service record interaction - allows\n    // executing a toolbar command as a full toolbar command with side affects\n    // coming from the ToolbarService itself.\n    toolbarServiceRecordInteraction: props => {\n      toolbarService.recordInteraction(props);\n    },\n\n    setToolActive: ({ toolName, toolGroupId = null }) => {\n      if (toolName === 'Crosshairs') {\n        const activeViewportToolGroup = toolGroupService.getToolGroup(null);\n\n        if (!activeViewportToolGroup._toolInstances.Crosshairs) {\n          uiNotificationService.show({\n            title: 'Crosshairs',\n            message:\n              'You need to be in a MPR view to use Crosshairs. Click on MPR button in the toolbar to activate it.',\n            type: 'info',\n            duration: 3000,\n          });\n\n          throw new Error('Crosshairs tool is not available in this viewport');\n        }\n      }\n\n      const { viewports } = viewportGridService.getState() || {\n        viewports: [],\n      };\n\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n      const toolGroupViewportIds = toolGroup?.getViewportIds?.();\n\n      // if toolGroup has been destroyed, or its viewports have been removed\n      if (!toolGroupViewportIds || !toolGroupViewportIds.length) {\n        return;\n      }\n\n      const filteredViewports = viewports.filter(viewport => {\n        if (!viewport.viewportOptions) {\n          return false;\n        }\n\n        return toolGroupViewportIds.includes(\n          viewport.viewportOptions.viewportId\n        );\n      });\n\n      if (!filteredViewports.length) {\n        return;\n      }\n\n      if (!toolGroup.getToolInstance(toolName)) {\n        uiNotificationService.show({\n          title: `${toolName} tool`,\n          message: `The ${toolName} tool is not available in this viewport.`,\n          type: 'info',\n          duration: 3000,\n        });\n\n        throw new Error(`ToolGroup ${toolGroup.id} does not have this tool.`);\n      }\n\n      const activeToolName = toolGroup.getActivePrimaryMouseButtonTool();\n\n      if (activeToolName) {\n        // Todo: this is a hack to prevent the crosshairs to stick around\n        // after another tool is selected. We should find a better way to do this\n        if (activeToolName === 'Crosshairs') {\n          toolGroup.setToolDisabled(activeToolName);\n        } else {\n          toolGroup.setToolPassive(activeToolName);\n        }\n      }\n      // Set the new toolName to be active\n      toolGroup.setToolActive(toolName, {\n        bindings: [\n          {\n            mouseButton: Enums.MouseBindings.Primary,\n          },\n        ],\n      });\n    },\n    showDownloadViewportModal: () => {\n      const { activeViewportIndex } = viewportGridService.getState();\n\n      if (\n        !cornerstoneViewportService.getCornerstoneViewportByIndex(\n          activeViewportIndex\n        )\n      ) {\n        // Cannot download a non-cornerstone viewport (image).\n        uiNotificationService.show({\n          title: 'Download Image',\n          message: 'Image cannot be downloaded',\n          type: 'error',\n        });\n        return;\n      }\n\n      const { uiModalService } = servicesManager.services;\n\n      if (uiModalService) {\n        uiModalService.show({\n          content: CornerstoneViewportDownloadForm,\n          title: 'Download High Quality Image',\n          contentProps: {\n            activeViewportIndex,\n            onClose: uiModalService.hide,\n            cornerstoneViewportService,\n          },\n        });\n      }\n    },\n    rotateViewport: ({ rotation }) => {\n      const enabledElement = _getActiveViewportEnabledElement();\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        const { rotation: currentRotation } = viewport.getProperties();\n        const newRotation = (currentRotation + rotation) % 360;\n        viewport.setProperties({ rotation: newRotation });\n        viewport.render();\n      }\n    },\n    flipViewportHorizontal: () => {\n      const enabledElement = _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        const { flipHorizontal } = viewport.getCamera();\n        viewport.setCamera({ flipHorizontal: !flipHorizontal });\n        viewport.render();\n      }\n    },\n    flipViewportVertical: () => {\n      const enabledElement = _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        const { flipVertical } = viewport.getCamera();\n        viewport.setCamera({ flipVertical: !flipVertical });\n        viewport.render();\n      }\n    },\n    invertViewport: ({ element }) => {\n      let enabledElement;\n\n      if (element === undefined) {\n        enabledElement = _getActiveViewportEnabledElement();\n      } else {\n        enabledElement = element;\n      }\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        const { invert } = viewport.getProperties();\n        viewport.setProperties({ invert: !invert });\n        viewport.render();\n      }\n    },\n    resetViewport: () => {\n      const enabledElement = _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        viewport.resetProperties();\n        viewport.resetCamera();\n      } else {\n        // Todo: add reset properties for volume viewport\n        viewport.resetCamera();\n      }\n\n      viewport.render();\n    },\n    scaleViewport: ({ direction }) => {\n      const enabledElement = _getActiveViewportEnabledElement();\n      const scaleFactor = direction > 0 ? 0.9 : 1.1;\n\n      if (!enabledElement) {\n        return;\n      }\n      const { viewport } = enabledElement;\n\n      if (viewport instanceof StackViewport) {\n        if (direction) {\n          const { parallelScale } = viewport.getCamera();\n          viewport.setCamera({ parallelScale: parallelScale * scaleFactor });\n          viewport.render();\n        } else {\n          viewport.resetCamera();\n          viewport.render();\n        }\n      }\n    },\n\n    /** Jumps the active viewport or the specified one to the given slice index */\n    jumpToImage: ({ imageIndex, viewport: gridViewport }): void => {\n      // Get current active viewport (return if none active)\n      let viewport;\n      if (!gridViewport) {\n        const enabledElement = _getActiveViewportEnabledElement();\n        if (!enabledElement) {\n          return;\n        }\n        viewport = enabledElement.viewport;\n      } else {\n        viewport = cornerstoneViewportService.getCornerstoneViewport(\n          gridViewport.id\n        );\n      }\n\n      // Get number of slices\n      // -> Copied from cornerstone3D jumpToSlice\\_getImageSliceData()\n      let numberOfSlices = 0;\n\n      if (viewport instanceof StackViewport) {\n        numberOfSlices = viewport.getImageIds().length;\n      } else if (viewport instanceof VolumeViewport) {\n        numberOfSlices = csUtils.getImageSliceDataForVolumeViewport(viewport)\n          .numberOfSlices;\n      } else {\n        throw new Error('Unsupported viewport type');\n      }\n\n      const jumpIndex =\n        imageIndex < 0 ? numberOfSlices + imageIndex : imageIndex;\n      if (jumpIndex >= numberOfSlices || jumpIndex < 0) {\n        throw new Error(`Can't jump to ${imageIndex}`);\n      }\n\n      // Set slice to last slice\n      const options = { imageIndex: jumpIndex };\n      cstUtils.jumpToSlice(viewport.element, options);\n    },\n    scroll: ({ direction }) => {\n      const enabledElement = _getActiveViewportEnabledElement();\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n      const options = { delta: direction };\n\n      cstUtils.scroll(viewport, options);\n    },\n    setAllViewportsColorMap: ({ window, level, toolGroupId }) => {\n      const { viewportId } = _getActiveViewportEnabledElement();\n      const viewportToolGroupId = toolGroupService.getToolGroupForViewport(\n          viewportId\n      );\n\n      if (toolGroupId && toolGroupId !== viewportToolGroupId) {\n        return;\n      }\n\n      // get actor from the viewport\n      const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n      const viewport = renderingEngine.getViewport(viewportId);\n\n      viewport.setProperties({\n        colormap: 'hot_iron'\n      });\n      viewport.render();\n    },\n    setViewportColormap: ({\n      viewportIndex,\n      displaySetInstanceUID,\n      colormap,\n      immediate = false,\n    }) => {\n\n      const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(\n        viewportIndex\n      );\n\n      const actorEntries = viewport.getActors();\n\n      const actorEntry = actorEntries.find(actorEntry => {\n        return actorEntry.uid.includes(displaySetInstanceUID);\n      });\n\n      const { actor: volumeActor, uid: volumeId } = actorEntry;\n\n      viewport.setProperties({ colormap, volumeActor }, volumeId);\n\n      if (immediate) {\n        viewport.render();\n      }\n    },\n    incrementActiveViewport: () => {\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      const nextViewportIndex = (activeViewportIndex + 1) % viewports.length;\n      viewportGridService.setActiveViewportIndex(nextViewportIndex);\n    },\n    decrementActiveViewport: () => {\n      const { activeViewportIndex, viewports } = viewportGridService.getState();\n      const nextViewportIndex =\n        (activeViewportIndex - 1 + viewports.length) % viewports.length;\n      viewportGridService.setActiveViewportIndex(nextViewportIndex);\n    },\n    toggleStackImageSync: ({ toggledState }) => {\n      toggleStackImageSync({\n        getEnabledElement,\n        servicesManager,\n        toggledState,\n      });\n    },\n    toggleReferenceLines: ({ toggledState }) => {\n      const { activeViewportIndex } = viewportGridService.getState();\n      const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\n        activeViewportIndex\n      );\n\n      const viewportId = viewportInfo.getViewportId();\n      const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n      if (!toggledState) {\n        toolGroup.setToolDisabled(ReferenceLinesTool.toolName);\n      }\n\n      toolGroup.setToolConfiguration(\n        ReferenceLinesTool.toolName,\n        {\n          sourceViewportId: viewportId,\n        },\n        true // overwrite\n      );\n      toolGroup.setToolEnabled(ReferenceLinesTool.toolName);\n    },\n  };\n\n  const definitions = {\n    // The command here is to show the viewer context menu, as being the\n    // context menu\n    showCornerstoneContextMenu: {\n      commandFn: actions.showCornerstoneContextMenu,\n      storeContexts: [],\n      options: {\n        menuCustomizationId: 'measurementsContextMenu',\n        useSelectedAnnotation: true,\n        commands: [\n          {\n            commandName: 'showContextMenu',\n          },\n        ],\n      },\n    },\n\n    getNearbyToolData: {\n      commandFn: actions.getNearbyToolData,\n    },\n    getNearbyAnnotation: {\n      commandFn: actions.getNearbyAnnotation,\n      storeContexts: [],\n      options: {},\n    },\n\n    deleteMeasurement: {\n      commandFn: actions.deleteMeasurement,\n    },\n    setMeasurementLabel: {\n      commandFn: actions.setMeasurementLabel,\n    },\n    updateMeasurement: {\n      commandFn: actions.updateMeasurement,\n    },\n\n    setWindowLevel: {\n      commandFn: actions.setWindowLevel,\n    },\n    toolbarServiceRecordInteraction: {\n      commandFn: actions.toolbarServiceRecordInteraction,\n    },\n    setToolActive: {\n      commandFn: actions.setToolActive,\n    },\n    rotateViewportCW: {\n      commandFn: actions.rotateViewport,\n      options: { rotation: 90 },\n    },\n    rotateViewportCCW: {\n      commandFn: actions.rotateViewport,\n      options: { rotation: -90 },\n    },\n    incrementActiveViewport: {\n      commandFn: actions.incrementActiveViewport,\n    },\n    decrementActiveViewport: {\n      commandFn: actions.decrementActiveViewport,\n    },\n    flipViewportHorizontal: {\n      commandFn: actions.flipViewportHorizontal,\n    },\n    flipViewportVertical: {\n      commandFn: actions.flipViewportVertical,\n    },\n    invertViewport: {\n      commandFn: actions.invertViewport,\n    },\n    resetViewport: {\n      commandFn: actions.resetViewport,\n    },\n    scaleUpViewport: {\n      commandFn: actions.scaleViewport,\n      options: { direction: 1 },\n    },\n    scaleDownViewport: {\n      commandFn: actions.scaleViewport,\n      options: { direction: -1 },\n    },\n    fitViewportToWindow: {\n      commandFn: actions.scaleViewport,\n      options: { direction: 0 },\n    },\n    nextImage: {\n      commandFn: actions.scroll,\n      options: { direction: 1 },\n    },\n    previousImage: {\n      commandFn: actions.scroll,\n      options: { direction: -1 },\n    },\n    firstImage: {\n      commandFn: actions.jumpToImage,\n      options: { imageIndex: 0 },\n    },\n    lastImage: {\n      commandFn: actions.jumpToImage,\n      options: { imageIndex: -1 },\n    },\n    jumpToImage: {\n      commandFn: actions.jumpToImage,\n    },\n    showDownloadViewportModal: {\n      commandFn: actions.showDownloadViewportModal,\n    },\n    toggleCine: {\n      commandFn: actions.toggleCine,\n    },\n    arrowTextCallback: {\n      commandFn: actions.arrowTextCallback,\n    },\n    setViewportActive: {\n      commandFn: actions.setViewportActive,\n    },\n    setAllViewportsColorMap: {\n      commandFn: actions.setAllViewportsColorMap\n    },\n    setViewportColormap: {\n      commandFn: actions.setViewportColormap,\n    },\n    toggleStackImageSync: {\n      commandFn: actions.toggleStackImageSync,\n    },\n    toggleReferenceLines: {\n      commandFn: actions.toggleReferenceLines,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'CORNERSTONE',\n  };\n}\n\nexport default commandsModule;\n","import { Types } from '@ohif/core';\n\nconst mpr: Types.HangingProtocol.Protocol = {\n  id: 'mpr',\n  name: 'Multi-Planar Reconstruction',\n  locked: true,\n  hasUpdatedPriorsInformation: false,\n  createdDate: '2021-02-23',\n  modifiedDate: '2023-04-03',\n  availableTo: {},\n  editableBy: {},\n  // Unknown number of priors referenced - so just match any study\n  numberOfPriorsReferenced: 0,\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'nth',\n  callbacks: {\n    // Switches out of MPR mode when the layout change button is used\n    onLayoutChange: [\n      {\n        commandName: 'toggleHangingProtocol',\n        commandOptions: { protocolId: 'mpr' },\n        context: 'DEFAULT',\n      },\n    ],\n    // Turns off crosshairs when switching out of MPR mode\n    onProtocolExit: [\n      {\n        commandName: 'toolbarServiceRecordInteraction',\n        commandOptions: {\n          interactionType: 'tool',\n          commands: [\n            {\n              commandOptions: {\n                toolName: 'WindowLevel',\n              },\n              context: 'CORNERSTONE',\n            },\n          ],\n        },\n      },\n    ],\n  },\n  displaySetSelectors: {\n    activeDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'MPR 1x3',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 3,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 1 / 3,\n              height: 1,\n            },\n            {\n              x: 1 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1,\n            },\n            {\n              x: 2 / 3,\n              y: 0,\n              width: 1 / 3,\n              height: 1,\n            },\n          ],\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [\n              {\n                type: 'voi',\n                id: 'mpr',\n                source: true,\n                target: true,\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [\n              {\n                type: 'voi',\n                id: 'mpr',\n                source: true,\n                target: true,\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            syncGroups: [\n              {\n                type: 'voi',\n                id: 'mpr',\n                source: true,\n                target: true,\n              },\n            ],\n          },\n          displaySets: [\n            {\n              id: 'activeDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst mprAnd3DVolumeViewport = {\n  id: 'mprAnd3DVolumeViewport',\n  locked: true,\n  hasUpdatedPriorsInformation: false,\n  name: 'mpr',\n  createdDate: '2023-03-15T10:29:44.894Z',\n  modifiedDate: '2023-03-15T10:29:44.894Z',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  imageLoadStrategy: 'interleaveCenter',\n  displaySetSelectors: {\n    mprDisplaySet: {\n      seriesMatchingRules: [\n        {\n          weight: 1,\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isSeriesUIDFromURL',\n          constraint: {\n            equals: { value: true },\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      id: 'mpr3Stage',\n      name: 'mpr',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 2,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            // syncGroups: [\n            //   {\n            //     type: 'voi',\n            //     id: 'mpr',\n            //     source: true,\n            //     target: true,\n            //   },\n            // ],\n          },\n          displaySets: [\n            {\n              id: 'mprDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'volume3d',\n            viewportType: 'volume3d',\n            orientation: 'coronal',\n            customViewportProps: {\n              hideOverlays: true,\n            },\n          },\n          displaySets: [\n            {\n              id: 'mprDisplaySet',\n              // options: {\n              //   displayPreset: 'CT-Cardiac3',\n              // },\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'coronal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            // syncGroups: [\n            //   {\n            //     type: 'voi',\n            //     id: 'mpr',\n            //     source: true,\n            //     target: true,\n            //   },\n            // ],\n          },\n          displaySets: [\n            {\n              id: 'mprDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'sagittal',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n            // syncGroups: [\n            //   {\n            //     type: 'voi',\n            //     id: 'mpr',\n            //     source: true,\n            //     target: true,\n            //   },\n            // ],\n          },\n          displaySets: [\n            {\n              id: 'mprDisplaySet',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst panoramicViewport = {\n  id: 'panoramicViewport',\n  locked: true,\n  hasUpdatedPriorsInformation: false,\n  name: 'Panoramic',\n  createdDate: '2023-07-10T16:35:08.894Z',\n  modifiedDate: '2023-07-10',\n  availableTo: {},\n  editableBy: {},\n  protocolMatchingRules: [],\n  displaySetSelectors: {\n    mprAxesDisplaySet: {\n      seriesMatchingRules: [\n          {\n            attribute: 'Modality',\n            constraint: {\n              equals: {\n                value: 'CT',\n              },\n            },\n            required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: { value: true },\n          },\n        },\n        {\n          attribute: 'isSeriesUIDFromURL',\n          constraint: {\n            equals: { value: true },\n          },\n          required: true\n        },\n      ],\n    },\n    contrastedMeanDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'numImageFrames',\n          constraint: {\n            equals: { value: 1 },\n          },\n          required: true\n        },\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {value: 'OT'},\n          },\n        },\n        {\n          attribute: 'isContrastedDerivedFromSeriesURL',\n          constraint: {\n            equals: {value: true}\n          },\n          required: true\n        }\n      ],\n    },\n    panoramicDisplaySet: {\n      seriesMatchingRules: [\n          {\n            attribute: 'numImageFrames',\n            constraint: {\n              equals: { value: 1 },\n            },\n            required: true\n          },\n          {\n            attribute: 'Modality',\n            constraint: {\n              equals: {value: 'OT'},\n            },\n          },\n          {\n            attribute: 'isPanoramicDerivedFromSeriesURL',\n            constraint: {\n              equals: {value: true}\n            },\n            required: true\n          }\n      ],\n    },\n    dentascanDisplaySet: {\n      seriesMatchingRules: [\n          {\n            attribute: 'numImageFrames',\n            constraint: {\n              greaterThan: { value: 1 },\n            },\n          },\n          {\n            attribute: 'Modality',\n            constraint: {\n              equals: {value: 'OT'},\n            },\n          },\n          {\n            attribute: 'isDentascanDerivedFromSeriesURL',\n            constraint: {\n              equals: {value: true}\n            },\n            required: true\n          }\n      ],\n    },\n\n  },\n  stages: [\n    {\n      id: 'panoramicStage',\n      name: 'mpr',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'volume',\n            orientation: 'axial',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'mprAxesDisplaySet',\n            },\n          ],\n        },\n      ]\n    },\n    {\n      id: 'panoramicStage2',\n      name: 'mpr',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        // {\n        //   viewportOptions: {\n        //     toolGroupId: 'mpr',\n        //     orientation: 'axial',\n        //     viewportType: 'volume',\n        //     initialImageOptions: {\n        //       preset: 'middle',\n        //     },\n        //   },\n        //   displaySets: [\n        //     {\n        //       id: 'mprAxesDisplaySet',\n        //     },\n        //   ],\n        // },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'contrastedMeanDisplaySet',\n            },\n          ],\n        },\n      ]\n    },\n    {\n      id: 'panoramicStage3',\n      name: 'mpr',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 2,\n          columns: 5,\n          layoutOptions: [\n            {\n              x: 0,\n              y: 0,\n              width: 0.3,\n              height: 0.5\n            },\n            {\n              x: 0.3,\n              y: 0,\n              width: 0.7,\n              height: 0.5\n            },\n            {\n              x: 0,\n              y: 0.5,\n              width: 0.2,\n              height: 0.5\n            },\n            {\n              x: 0.2,\n              y: 0.5,\n              width: 0.2,\n              height: 0.5\n            },\n            {\n              x: 0.4,\n              y: 0.5,\n              width: 0.2,\n              height: 0.5\n            },\n            {\n              x: 0.6,\n              y: 0.5,\n              width: 0.2,\n              height: 0.5\n            },\n            {\n              x: 0.8,\n              y: 0.5,\n              width: 0.2,\n              height: 0.5\n            }\n          ],\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'contrastedMeanDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n              {\n                id: 'panoramicDisplaySet',\n              },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n              {\n                id: 'dentascanDisplaySet',\n              },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'dentascanDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'dentascanDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'dentascanDisplaySet',\n            },\n          ],\n        },\n        {\n          viewportOptions: {\n            toolGroupId: 'mpr',\n            viewportType: 'stack',\n            initialImageOptions: {\n              preset: 'middle',\n            },\n          },\n          displaySets: [\n            {\n              id: 'dentascanDisplaySet',\n            },\n          ],\n        },\n      ]\n    },\n  ]\n}\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: mpr.id,\n      protocol: mpr,\n    },\n    {\n      name: mprAnd3DVolumeViewport.id,\n      protocol: mprAnd3DVolumeViewport,\n    },\n    {\n      name: panoramicViewport.id,\n      protocol: panoramicViewport\n    }\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import { ToolGroupManager, Enums, Types } from '@cornerstonejs/tools';\n\nimport { Types as OhifTypes, pubSubServiceInterface } from '@ohif/core';\nimport getActiveViewportEnabledElement from '../../utils/getActiveViewportEnabledElement';\n\nconst EVENTS = {\n  VIEWPORT_ADDED: 'event::cornerstone::toolgroupservice:viewportadded',\n  TOOLGROUP_CREATED: 'event::cornerstone::toolgroupservice:toolgroupcreated',\n};\n\ntype Tool = {\n  toolName: string;\n  bindings?: typeof Enums.MouseBindings | Enums.KeyboardBindings;\n};\n\ntype Tools = {\n  active: Tool[];\n  passive?: Tool[];\n  enabled?: Tool[];\n  disabled?: Tool[];\n};\n\nexport default class ToolGroupService {\n  public static REGISTRATION = {\n    name: 'toolGroupService',\n    altName: 'ToolGroupService',\n    create: ({\n      servicesManager,\n    }: OhifTypes.Extensions.ExtensionParams): ToolGroupService => {\n      return new ToolGroupService(servicesManager);\n    },\n  };\n\n  serviceManager: any;\n  private toolGroupIds: Set<string> = new Set();\n  /**\n   * Service-specific\n   */\n  listeners: { [key: string]: Function[] };\n  EVENTS: { [key: string]: string };\n\n  constructor(serviceManager) {\n    const {\n      cornerstoneViewportService,\n      viewportGridService,\n    } = serviceManager.services;\n    this.cornerstoneViewportService = cornerstoneViewportService;\n    this.viewportGridService = viewportGridService;\n    this.listeners = {};\n    this.EVENTS = EVENTS;\n    Object.assign(this, pubSubServiceInterface);\n  }\n\n  onModeExit() {\n    this.destroy();\n  }\n\n  /**\n   * Retrieves a tool group from the ToolGroupManager by tool group ID.\n   * If no tool group ID is provided, it retrieves the tool group of the active viewport.\n   * @param toolGroupId - Optional ID of the tool group to retrieve.\n   * @returns The tool group or undefined if it is not found.\n   */\n  public getToolGroup(toolGroupId?: string): Types.IToolGroup | void {\n    let toolGroupIdToUse = toolGroupId;\n\n    if (!toolGroupIdToUse) {\n      // Use the active viewport's tool group if no tool group id is provided\n      const enabledElement = getActiveViewportEnabledElement(\n        this.viewportGridService\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { renderingEngineId, viewportId } = enabledElement;\n      const toolGroup = ToolGroupManager.getToolGroupForViewport(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!toolGroup) {\n        console.warn(\n          'No tool group found for viewportId:',\n          viewportId,\n          'and renderingEngineId:',\n          renderingEngineId\n        );\n        return;\n      }\n\n      toolGroupIdToUse = toolGroup.id;\n    }\n\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupIdToUse);\n    return toolGroup;\n  }\n\n  public getToolGroupIds(): string[] {\n    return Array.from(this.toolGroupIds);\n  }\n\n  public getToolGroupForViewport(viewportId: string): Types.IToolGroup | void {\n    const renderingEngine = this.cornerstoneViewportService.getRenderingEngine();\n    return ToolGroupManager.getToolGroupForViewport(\n      viewportId,\n      renderingEngine.id\n    );\n  }\n\n  public getActiveToolForViewport(viewportId: string): string {\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(viewportId);\n    if (!toolGroup) {\n      return null;\n    }\n\n    return toolGroup.getActivePrimaryMouseButtonTool();\n  }\n\n  public destroy() {\n    ToolGroupManager.destroy();\n    this.toolGroupIds = new Set();\n  }\n\n  public destroyToolGroup(toolGroupId: string) {\n    ToolGroupManager.destroyToolGroup(toolGroupId);\n    this.toolGroupIds.delete(toolGroupId);\n  }\n\n  public removeViewportFromToolGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    deleteToolGroupIfEmpty?: boolean\n  ): void {\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewportId,\n      renderingEngineId\n    );\n\n    if (!toolGroup) {\n      return;\n    }\n\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n\n    const viewportIds = toolGroup.getViewportIds();\n\n    if (viewportIds.length === 0 && deleteToolGroupIfEmpty) {\n      ToolGroupManager.destroyToolGroup(toolGroup.id);\n    }\n  }\n\n  public addViewportToToolGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    toolGroupId?: string\n  ): void {\n    if (!toolGroupId) {\n      // If toolGroupId is not provided, add the viewport to all toolGroups\n      const toolGroups = ToolGroupManager.getAllToolGroups();\n      toolGroups.forEach(toolGroup => {\n        toolGroup.addViewport(viewportId, renderingEngineId);\n      });\n    } else {\n      let toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n      if (!toolGroup) {\n        toolGroup = this.createToolGroup(toolGroupId);\n      }\n\n      toolGroup.addViewport(viewportId, renderingEngineId);\n    }\n\n    this._broadcastEvent(EVENTS.VIEWPORT_ADDED, {\n      viewportId,\n      toolGroupId,\n    });\n  }\n\n  public createToolGroup(toolGroupId: string): Types.IToolGroup {\n    if (this.getToolGroup(toolGroupId)) {\n      throw new Error(`ToolGroup ${toolGroupId} already exists`);\n    }\n\n    // if the toolGroup doesn't exist, create it\n    const toolGroup = ToolGroupManager.createToolGroup(toolGroupId);\n    this.toolGroupIds.add(toolGroupId);\n\n    this._broadcastEvent(EVENTS.TOOLGROUP_CREATED, {\n      toolGroupId,\n    });\n\n    return toolGroup;\n  }\n\n  public addToolsToToolGroup(\n    toolGroupId: string,\n    tools: Array<Tool>,\n    configs: any = {}\n  ): void {\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n    // this.changeConfigurationIfNecessary(toolGroup, volumeId);\n    this._addTools(toolGroup, tools, configs);\n    this._setToolsMode(toolGroup, tools);\n  }\n\n  public createToolGroupAndAddTools(\n    toolGroupId: string,\n    tools: Array<Tool>,\n    configs: any = {}\n  ): Types.IToolGroup {\n    const toolGroup = this.createToolGroup(toolGroupId);\n    this.addToolsToToolGroup(toolGroupId, tools, configs);\n    return toolGroup;\n  }\n\n  /**\n  private changeConfigurationIfNecessary(toolGroup, volumeUID) {\n    // handle specific assignment for volumeUID (e.g., fusion)\n    const toolInstances = toolGroup._toolInstances;\n    // Object.values(toolInstances).forEach(toolInstance => {\n    //   if (toolInstance.configuration) {\n    //     toolInstance.configuration.volumeUID = volumeUID;\n    //   }\n    // });\n  }\n  */\n\n  /**\n   * Get the tool's configuration based on the tool name and tool group id\n   * @param toolGroupId - The id of the tool group that the tool instance belongs to.\n   * @param toolName - The name of the tool\n   * @returns The configuration of the tool.\n   */\n  public getToolConfiguration(toolGroupId: string, toolName: string) {\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n    if (!toolGroup) {\n      return null;\n    }\n\n    const tool = toolGroup.getToolInstance(toolName);\n    if (!tool) {\n      return null;\n    }\n\n    return tool.configuration;\n  }\n\n  /**\n   * Set the tool instance configuration. This will update the tool instance configuration\n   * on the toolGroup\n   * @param toolGroupId - The id of the tool group that the tool instance belongs to.\n   * @param toolName - The name of the tool\n   * @param config - The configuration object that you want to set.\n   */\n  public setToolConfiguration(toolGroupId, toolName, config) {\n    const toolGroup = ToolGroupManager.getToolGroup(toolGroupId);\n    const toolInstance = toolGroup.getToolInstance(toolName);\n    toolInstance.configuration = config;\n  }\n\n  private _getToolNames(toolGroupTools: Tools): string[] {\n    const toolNames = [];\n    if (toolGroupTools.active) {\n      toolGroupTools.active.forEach(tool => {\n        toolNames.push(tool.toolName);\n      });\n    }\n    if (toolGroupTools.passive) {\n      toolGroupTools.passive.forEach(tool => {\n        toolNames.push(tool.toolName);\n      });\n    }\n\n    if (toolGroupTools.enabled) {\n      toolGroupTools.enabled.forEach(tool => {\n        toolNames.push(tool.toolName);\n      });\n    }\n\n    if (toolGroupTools.disabled) {\n      toolGroupTools.disabled.forEach(tool => {\n        toolNames.push(tool.toolName);\n      });\n    }\n\n    return toolNames;\n  }\n\n  private _setToolsMode(toolGroup, tools) {\n    const { active, passive, enabled, disabled } = tools;\n\n    if (active) {\n      active.forEach(({ toolName, bindings }) => {\n        toolGroup.setToolActive(toolName, { bindings });\n      });\n    }\n\n    if (passive) {\n      passive.forEach(({ toolName }) => {\n        toolGroup.setToolPassive(toolName);\n      });\n    }\n\n    if (enabled) {\n      enabled.forEach(({ toolName }) => {\n        toolGroup.setToolEnabled(toolName);\n      });\n    }\n\n    if (disabled) {\n      disabled.forEach(({ toolName }) => {\n        toolGroup.setToolDisabled(toolName);\n      });\n    }\n  }\n\n  private _addTools(toolGroup, tools, configs) {\n    const toolNames = this._getToolNames(tools);\n    toolNames.forEach(toolName => {\n      // Initialize the toolConfig if no configuration is provided\n      const toolConfig = configs[toolName] ?? {};\n\n      // if (volumeUID) {\n      //   toolConfig.volumeUID = volumeUID;\n      // }\n\n      toolGroup.addTool(toolName, { ...toolConfig });\n    });\n  }\n}\n","import ToolGroupService from './ToolGroupService';\n\nexport default ToolGroupService;\n","import {\n  synchronizers,\n  SynchronizerManager,\n  Synchronizer,\n} from '@cornerstonejs/tools';\n\nimport { pubSubServiceInterface, Types, ServicesManager } from '@ohif/core';\n\nconst EVENTS = {\n  TOOL_GROUP_CREATED: 'event::cornerstone::syncgroupservice:toolgroupcreated',\n};\n\n/**\n * @params options - are an optional set of options associated with the first\n * sync group declared.\n */\nexport type SyncCreator = (\n  type: string,\n  options?: Record<string, unknown>\n) => Synchronizer;\n\nexport type SyncGroup = {\n  type: string;\n  id?: string;\n  // Source and target default to true if not specified\n  source?: boolean;\n  target?: boolean;\n  options?: Record<string, unknown>;\n};\n\nconst POSITION = 'cameraposition';\nconst VOI = 'voi';\nconst ZOOMPAN = 'zoompan';\nconst STACKIMAGE = 'stackimage';\n\nconst asSyncGroup = (syncGroup: string | SyncGroup): SyncGroup =>\n  typeof syncGroup === 'string' ? { type: syncGroup } : syncGroup;\n\nexport default class SyncGroupService {\n  static REGISTRATION = {\n    name: 'syncGroupService',\n    altName: 'SyncGroupService',\n    create: ({\n      servicesManager,\n    }: Types.Extensions.ExtensionParams): SyncGroupService => {\n      return new SyncGroupService(servicesManager);\n    },\n  };\n\n  servicesManager: ServicesManager;\n  listeners: { [key: string]: (...args: any[]) => void } = {};\n  EVENTS: { [key: string]: string };\n  synchronizerCreators: Record<string, SyncCreator> = {\n    [POSITION]: synchronizers.createCameraPositionSynchronizer,\n    [VOI]: synchronizers.createVOISynchronizer,\n    [ZOOMPAN]: synchronizers.createZoomPanSynchronizer,\n    [STACKIMAGE]: synchronizers.createStackImageSynchronizer,\n  };\n\n  constructor(serviceManager: ServicesManager) {\n    this.servicesManager = serviceManager;\n    this.listeners = {};\n    this.EVENTS = EVENTS;\n    //\n    Object.assign(this, pubSubServiceInterface);\n  }\n\n  private _createSynchronizer(\n    type: string,\n    id: string,\n    options\n  ): Synchronizer | undefined {\n    const syncCreator = this.synchronizerCreators[type.toLowerCase()];\n    if (syncCreator) {\n      return syncCreator(id, options);\n    } else {\n      console.warn('Unknown synchronizer type', type, id);\n    }\n  }\n\n  /**\n   * Creates a synchronizer type.\n   * @param type is the type of the synchronizer to create\n   * @param creator\n   */\n  public setSynchronizer(type: string, creator: SyncCreator): void {\n    this.synchronizerCreators[type.toLowerCase()] = creator;\n  }\n\n  protected _getOrCreateSynchronizer(\n    type: string,\n    id: string,\n    options: Record<string, unknown>\n  ): Synchronizer | undefined {\n    let synchronizer = SynchronizerManager.getSynchronizer(id);\n\n    if (!synchronizer) {\n      synchronizer = this._createSynchronizer(type, id, options);\n    }\n    return synchronizer;\n  }\n\n  public addViewportToSyncGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    syncGroups?: SyncGroup | string | SyncGroup[] | string[]\n  ): void {\n    if (!syncGroups) {\n      return;\n    }\n\n    const syncGroupsArray = Array.isArray(syncGroups)\n      ? syncGroups\n      : [syncGroups];\n\n    syncGroupsArray.forEach(syncGroup => {\n      const syncGroupObj = asSyncGroup(syncGroup);\n      const {\n        type,\n        target = true,\n        source = true,\n        options = {},\n        id = type,\n      } = syncGroupObj;\n\n      const synchronizer = this._getOrCreateSynchronizer(type, id, options);\n      synchronizer.setOptions(viewportId, options);\n\n      const viewportInfo = { viewportId, renderingEngineId };\n      if (target && source) {\n        synchronizer.add(viewportInfo);\n        return;\n      } else if (source) {\n        synchronizer.addSource(viewportInfo);\n      } else if (target) {\n        synchronizer.addTarget(viewportInfo);\n      }\n    });\n  }\n\n  public destroy(): void {\n    SynchronizerManager.destroy();\n  }\n\n  public removeViewportFromSyncGroup(\n    viewportId: string,\n    renderingEngineId: string,\n    syncGroupId?: string\n  ): void {\n    const synchronizers = SynchronizerManager.getAllSynchronizers();\n\n    const filteredSynchronizers = syncGroupId\n      ? synchronizers.filter(s => s.id === syncGroupId)\n      : synchronizers;\n\n    filteredSynchronizers.forEach(synchronizer => {\n      if (!synchronizer) {\n        return;\n      }\n\n      synchronizer.remove({\n        viewportId,\n        renderingEngineId,\n      });\n\n      // check if any viewport is left in any of the sync groups, if not, delete that sync group\n      const sourceViewports = synchronizer.getSourceViewports();\n      const targetViewports = synchronizer.getTargetViewports();\n\n      if (!sourceViewports.length && !targetViewports.length) {\n        SynchronizerManager.destroySynchronizer(synchronizer.id);\n      }\n    });\n  }\n}\n","import SyncGroupService from './SyncGroupService';\n\nexport default SyncGroupService;\n","/**\n * It is a bell curved function that uses ease in out quadratic for css\n * transition timing function for each side of the curve.\n *\n * @param {number} x - The current time, in the range [0, 1].\n * @param {number} baseline - The baseline value to start from and return to.\n * @returns the value of the transition at time x.\n */\nexport function easeInOutBell(x: number, baseline: number): number {\n  const alpha = 1 - baseline;\n\n  // prettier-ignore\n  if (x < 1 / 4) {\n    return  4 * Math.pow(2 * x, 3) * alpha + baseline;\n  } else if (x < 1 / 2) {\n    return (1 - Math.pow(-4 * x + 2, 3) / 2) * alpha + baseline;\n  } else if (x < 3 / 4) {\n    return (1 - Math.pow(4 * x - 2, 3) / 2) * alpha + baseline;\n  } else {\n    return (- 4 * Math.pow(2 * x - 2, 3)) * alpha + baseline;\n  }\n}\n\n/**\n * A reversed bell curved function that starts from 1 and goes to baseline and\n * come back to 1 again. It uses ease in out quadratic for css transition\n * timing function for each side of the curve.\n *\n * @param {number} x - The current time, in the range [0, 1].\n * @param {number} baseline - The baseline value to start from and return to.\n * @returns the value of the transition at time x.\n */\nexport function reverseEaseInOutBell(x: number, baseline: number): number {\n  const y = easeInOutBell(x, baseline);\n  return -y + 1 + baseline;\n}\n","import cloneDeep from 'lodash.clonedeep';\n\nimport { Types as OhifTypes, ServicesManager, PubSubService } from '@ohif/core';\nimport {\n  cache,\n  Enums as csEnums,\n  geometryLoader,\n  eventTarget,\n  getEnabledElementByIds,\n  metaData,\n  utilities as csUtils,\n  volumeLoader,\n} from '@cornerstonejs/core';\nimport {\n  CONSTANTS as cstConstants,\n  Enums as csToolsEnums,\n  segmentation as cstSegmentation,\n  Types as cstTypes,\n  utilities as cstUtils,\n} from '@cornerstonejs/tools';\nimport isEqual from 'lodash.isequal';\nimport { Types as ohifTypes } from '@ohif/core';\nimport { easeInOutBell, reverseEaseInOutBell } from '../../utils/transitions';\nimport {\n  Segment,\n  Segmentation,\n  SegmentationConfig,\n} from './SegmentationServiceTypes';\nimport { mapROIContoursToRTStructData } from './RTSTRUCT/mapROIContoursToRTStructData';\n\nconst { COLOR_LUT } = cstConstants;\nconst LABELMAP = csToolsEnums.SegmentationRepresentations.Labelmap;\nconst CONTOUR = csToolsEnums.SegmentationRepresentations.Contour;\n\nconst EVENTS = {\n  // fired when the segmentation is updated (e.g. when a segment is added, removed, or modified, locked, visibility changed etc.)\n  SEGMENTATION_UPDATED: 'event::segmentation_updated',\n  // fired when the segmentation data (e.g., labelmap pixels) is modified\n  SEGMENTATION_DATA_MODIFIED: 'event::segmentation_data_modified',\n  // fired when the segmentation is added to the cornerstone\n  SEGMENTATION_ADDED: 'event::segmentation_added',\n  // fired when the segmentation is removed\n  SEGMENTATION_REMOVED: 'event::segmentation_removed',\n  // fired when the configuration for the segmentation is changed (e.g., brush size, render fill, outline thickness, etc.)\n  SEGMENTATION_CONFIGURATION_CHANGED:\n    'event::segmentation_configuration_changed',\n  // fired when the active segment is loaded in SEG or RTSTRUCT\n  SEGMENT_LOADING_COMPLETE: 'event::segment_loading_complete',\n  // for all segments\n  SEGMENTATION_LOADING_COMPLETE: 'event::segmentation_loading_complete',\n};\n\nconst VALUE_TYPES = {};\n\nconst SEGMENT_CONSTANT = {\n  opacity: 255,\n  isVisible: true,\n  isLocked: false,\n};\n\nconst VOLUME_LOADER_SCHEME = 'cornerstoneStreamingImageVolume';\n\nclass SegmentationService extends PubSubService {\n  static REGISTRATION = {\n    name: 'segmentationService',\n    altName: 'SegmentationService',\n    create: ({\n      servicesManager,\n    }: OhifTypes.Extensions.ExtensionParams): SegmentationService => {\n      return new SegmentationService({ servicesManager });\n    },\n  };\n\n  segmentations: Record<string, Segmentation>;\n  readonly servicesManager: ServicesManager;\n  highlightIntervalId = null;\n  readonly EVENTS = EVENTS;\n\n  constructor({ servicesManager }) {\n    super(EVENTS);\n    this.segmentations = {};\n\n    this.servicesManager = servicesManager;\n\n    this._initSegmentationService();\n  }\n\n  public destroy = () => {\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_MODIFIED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.removeEventListener(\n      csToolsEnums.Events.SEGMENTATION_DATA_MODIFIED,\n      this._onSegmentationDataModified\n    );\n\n    // remove the segmentations from the cornerstone\n    Object.keys(this.segmentations).forEach(segmentationId => {\n      this._removeSegmentationFromCornerstone(segmentationId);\n    });\n\n    this.segmentations = {};\n    this.listeners = {};\n  };\n\n  /**\n   * It adds a segment to a segmentation, basically just setting the properties for\n   * the segment.\n   * @param segmentationId - The ID of the segmentation you want to add a\n   * segment to.\n   * @param segmentIndex - The index of the segment to add.\n   * @param toolGroupId\n   * @param properties - The properties of the segment to add including\n   * -- label: the label of the segment\n   * -- color: the color of the segment\n   * -- opacity: the opacity of the segment\n   * -- visibility: the visibility of the segment (boolean)\n   * -- isLocked: whether the segment is locked for editing\n   * -- active: whether the segment is currently the active segment to be edited\n   * @param override : true if we want for an already existing segmentIndex to be overriden\n   *                    by the new one\n   */\n  public addSegment(\n    segmentationId: string,\n    segmentIndex: number,\n    toolGroupId?: string,\n    properties?: {\n      label?: string;\n      color?: ohifTypes.RGB;\n      opacity?: number;\n      visibility?: boolean;\n      isLocked?: boolean;\n      active?: boolean;\n    },\n    override = false\n  ): void {\n    if (segmentIndex === 0) {\n      throw new Error('Segment index 0 is reserved for \"no label\"');\n    }\n\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const {\n      segmentationRepresentationUID,\n      segmentation,\n    } = this._getSegmentationInfo(segmentationId, toolGroupId);\n\n\n    while (override && this._getSegmentInfo(segmentation, segmentIndex)) {\n      console.warn(`Segment ${segmentIndex} already exists`);\n      segmentIndex++;\n    }\n\n    const rgbaColor = cstSegmentation.config.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n\n    segmentation.segments[segmentIndex] = {\n      label: properties.label,\n      segmentIndex: segmentIndex,\n      color: [rgbaColor[0], rgbaColor[1], rgbaColor[2]],\n      opacity: rgbaColor[3],\n      isVisible: true,\n      isLocked: false,\n    };\n\n    segmentation.segmentCount = segmentation.segments.length - 1;\n\n    const suppressEvents = true;\n    if (properties !== undefined) {\n      const {\n        color: newColor,\n        opacity,\n        isLocked,\n        visibility,\n        active,\n      } = properties;\n\n      if (newColor !== undefined) {\n        this._setSegmentColor(\n          segmentationId,\n          segmentIndex,\n          newColor,\n          toolGroupId,\n          suppressEvents\n        );\n      }\n\n      if (opacity !== undefined) {\n        this._setSegmentOpacity(\n          segmentationId,\n          segmentIndex,\n          opacity,\n          toolGroupId,\n          suppressEvents\n        );\n      }\n\n      if (visibility !== undefined) {\n        this._setSegmentVisibility(\n          segmentationId,\n          segmentIndex,\n          visibility,\n          toolGroupId,\n          suppressEvents\n        );\n      }\n\n      if (active !== undefined) {\n        this._setActiveSegment(segmentationId, segmentIndex, suppressEvents);\n      }\n\n      if (isLocked !== undefined) {\n        this._setSegmentLocked(\n          segmentationId,\n          segmentIndex,\n          isLocked,\n          suppressEvents\n        );\n      }\n    }\n\n    if (segmentation.activeSegmentIndex === null) {\n      this._setActiveSegment(segmentationId, segmentIndex, suppressEvents);\n    }\n\n    // Todo: this includes non-hydrated segmentations which might not be\n    // persisted in the store\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n      segmentation,\n    });\n  }\n\n  public removeSegment(segmentationId: string, segmentIndex: number): void {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      console.warn(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    if (segmentIndex === 0) {\n      throw new Error('Segment index 0 is reserved for \"no label\"');\n    }\n\n    if (!this._getSegmentInfo(segmentation, segmentIndex)) {\n      return;\n    }\n\n    segmentation.segmentCount--;\n\n    segmentation.segments[segmentIndex] = null;\n\n    // Get volume and delete the labels\n    // Todo: handle other segmentations other than labelmap\n    const labelmapVolume = this.getLabelmapVolume(segmentationId);\n\n    const { dimensions } = labelmapVolume;\n    const scalarData = labelmapVolume.getScalarData();\n\n    // Set all values of this segment to zero and get which frames have been edited.\n    const frameLength = dimensions[0] * dimensions[1];\n    const numFrames = dimensions[2];\n\n    let voxelIndex = 0;\n\n    const modifiedFrames = new Set() as Set<number>;\n\n    for (let frame = 0; frame < numFrames; frame++) {\n      for (let p = 0; p < frameLength; p++) {\n        if (scalarData[voxelIndex] === segmentIndex) {\n          scalarData[voxelIndex] = 0;\n          modifiedFrames.add(frame);\n        }\n\n        voxelIndex++;\n      }\n    }\n\n    const modifiedFramesArray: number[] = Array.from(modifiedFrames);\n\n    // Trigger texture update of modified segmentation frames.\n    cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(\n      segmentationId,\n      modifiedFramesArray\n    );\n\n    if (segmentation.activeSegmentIndex === segmentIndex) {\n      const segmentIndices = Object.keys(segmentation.segments);\n\n      const newActiveSegmentIndex = segmentIndices.length\n        ? Number(segmentIndices[0])\n        : 1;\n\n      this._setActiveSegment(segmentationId, newActiveSegmentIndex, true);\n    }\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n      segmentation,\n    });\n  }\n\n  public setSegmentVisibility(\n    segmentationId: string,\n    segmentIndex: number,\n    isVisible: boolean,\n    toolGroupId?: string,\n    suppressEvents = false\n  ): void {\n    this._setSegmentVisibility(\n      segmentationId,\n      segmentIndex,\n      isVisible,\n      toolGroupId,\n      suppressEvents\n    );\n  }\n\n  public setSegmentLockedForSegmentation(\n    segmentationId: string,\n    segmentIndex: number,\n    isLocked: boolean\n  ): void {\n    const suppressEvents = false;\n    this._setSegmentLocked(\n      segmentationId,\n      segmentIndex,\n      isLocked,\n      suppressEvents\n    );\n  }\n\n  public setSegmentLabel(\n    segmentationId: string,\n    segmentIndex: number,\n    segmentLabel: string\n  ): void {\n    this._setSegmentLabel(segmentationId, segmentIndex, segmentLabel);\n  }\n\n  public setSegmentColor(\n    segmentationId: string,\n    segmentIndex: number,\n    color: ohifTypes.RGB,\n    toolGroupId?: string\n  ): void {\n    this._setSegmentColor(segmentationId, segmentIndex, color, toolGroupId);\n  }\n\n  public setSegmentRGBA = (\n    segmentationId: string,\n    segmentIndex: number,\n    rgbaColor: cstTypes.Color,\n    toolGroupId?: string\n  ): void => {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const suppressEvents = true;\n    this._setSegmentOpacity(\n      segmentationId,\n      segmentIndex,\n      rgbaColor[3],\n      toolGroupId,\n      suppressEvents\n    );\n\n    this._setSegmentColor(\n      segmentationId,\n      segmentIndex,\n      [rgbaColor[0], rgbaColor[1], rgbaColor[2]],\n      toolGroupId,\n      suppressEvents\n    );\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n      segmentation,\n    });\n  };\n\n  public setSegmentOpacity(\n    segmentationId: string,\n    segmentIndex: number,\n    opacity: number,\n    toolGroupId?: string\n  ): void {\n    this._setSegmentOpacity(segmentationId, segmentIndex, opacity, toolGroupId);\n  }\n\n  public setActiveSegmentationForToolGroup(\n    segmentationId: string,\n    toolGroupId?: string\n  ): void {\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const suppressEvents = false;\n    this._setActiveSegmentationForToolGroup(\n      segmentationId,\n      toolGroupId,\n      suppressEvents\n    );\n  }\n\n  public setActiveSegmentForSegmentation(\n    segmentationId: string,\n    segmentIndex: number\n  ): void {\n    this._setActiveSegment(segmentationId, segmentIndex, false);\n  }\n\n  /**\n   * Get all segmentations.\n   *\n   * * @param filterNonHydratedSegmentations - If true, only return hydrated segmentations\n   * hydrated segmentations are those that have been loaded and persisted\n   * in the state, but non hydrated segmentations are those that are\n   * only created for the SEG displayset (SEG viewport) and the user might not\n   * have loaded them yet fully.\n   *\n\n   * @return Array of segmentations\n   */\n  public getSegmentations(\n    filterNonHydratedSegmentations = true\n  ): Segmentation[] {\n    const segmentations = this._getSegmentations();\n\n    return (\n      segmentations &&\n      segmentations.filter(segmentation => {\n        return !filterNonHydratedSegmentations || segmentation.hydrated;\n      })\n    );\n  }\n\n  private _getSegmentations(): Segmentation[] {\n    const segmentations = this.arrayOfObjects(this.segmentations);\n    return (\n      segmentations &&\n      segmentations.map(m => this.segmentations[Object.keys(m)[0]])\n    );\n  }\n\n  /**\n   * Get specific segmentation by its id.\n   *\n   * @param segmentationId If of the segmentation\n   * @return segmentation instance\n   */\n  public getSegmentation(segmentationId: string): Segmentation {\n    return this.segmentations[segmentationId];\n  }\n\n  public addOrUpdateSegmentation(\n    segmentation: Segmentation,\n    suppressEvents = false,\n    notYetUpdatedAtSource = false\n  ): string {\n    const { id: segmentationId } = segmentation;\n    let cachedSegmentation = this.segmentations[segmentationId];\n    if (cachedSegmentation) {\n      // Update the segmentation (mostly for assigning metadata/labels)\n      Object.assign(cachedSegmentation, segmentation);\n\n      this._updateCornerstoneSegmentations({\n        segmentationId,\n        notYetUpdatedAtSource,\n      });\n\n      if (!suppressEvents) {\n        this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n          segmentation: cachedSegmentation,\n        });\n      }\n\n      return segmentationId;\n    }\n\n    const representationType = segmentation.type;\n    const representationData =\n      segmentation.representationData[representationType];\n    cstSegmentation.addSegmentations([\n      {\n        segmentationId,\n        representation: {\n          type: representationType,\n          data: {\n            ...representationData,\n          },\n        },\n      },\n    ]);\n\n    // Define a new color LUT and associate it with this segmentation.\n    // Todo: need to be generalized to accept custom color LUTs\n    const newColorLUT = this.generateNewColorLUT();\n    const newColorLUTIndex = this.getNextColorLUTIndex();\n\n    cstSegmentation.config.color.addColorLUT(newColorLUT, newColorLUTIndex);\n\n    this.segmentations[segmentationId] = {\n      ...segmentation,\n      label: segmentation.label || '',\n      segments: segmentation.segments || [null],\n      activeSegmentIndex: segmentation.activeSegmentIndex ?? null,\n      segmentCount: segmentation.segmentCount ?? 0,\n      isActive: false,\n      colorLUTIndex: newColorLUTIndex,\n      isVisible: true,\n    };\n\n    cachedSegmentation = this.segmentations[segmentationId];\n\n    this._updateCornerstoneSegmentations({\n      segmentationId,\n      notYetUpdatedAtSource: true,\n    });\n\n    if (!suppressEvents) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_ADDED, {\n        segmentation: cachedSegmentation,\n      });\n    }\n\n    return cachedSegmentation.id;\n  }\n\n  public async createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    segmentationId?: string,\n    suppressEvents = false\n  ): Promise<string> {\n    // Todo: we only support creating labelmap for SEG displaySets for now\n    const representationType = LABELMAP;\n\n    segmentationId = segmentationId ?? segDisplaySet.displaySetInstanceUID;\n\n    const defaultScheme = this._getDefaultSegmentationScheme();\n\n    const segmentation: Segmentation = {\n      ...defaultScheme,\n      id: segmentationId,\n      displaySetInstanceUID: segDisplaySet.displaySetInstanceUID,\n      type: representationType,\n      representationData: {\n        [LABELMAP]: {\n          volumeId: segmentationId,\n          referencedVolumeId: segDisplaySet.referencedVolumeId,\n        },\n      },\n    };\n\n    const labelmap = this.getLabelmapVolume(segmentationId);\n    const cachedSegmentation = this.getSegmentation(segmentationId);\n    if (labelmap && cachedSegmentation) {\n      // if the labelmap with the same segmentationId already exists, we can\n      // just assume that the segmentation is already created and move on with\n      // updating the state\n      return this.addOrUpdateSegmentation(\n        Object.assign(segmentation, cachedSegmentation),\n        suppressEvents\n      );\n    }\n\n    const { segments, referencedVolumeId } = segDisplaySet;\n\n    if (!segments || !referencedVolumeId) {\n      throw new Error(\n        'To create the segmentation from SEG displaySet, the displaySet should be loaded first, you can perform segDisplaySet.load() before calling this method.'\n      );\n    }\n\n    // if the labelmap doesn't exist, we need to create it first from the\n    // DICOM SEG displaySet data\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n\n    if (!referencedVolume) {\n      throw new Error(\n        `No volume found for referencedVolumeId: ${referencedVolumeId}`\n      );\n    }\n\n    // Force use of a Uint8Array SharedArrayBuffer for the segmentation to save space and so\n    // it is easily compressible in worker thread.\n    const derivedVolume = await volumeLoader.createAndCacheDerivedVolume(\n      referencedVolumeId,\n      {\n        volumeId: segmentationId,\n        targetBuffer: {\n          type: 'Uint8Array',\n          sharedArrayBuffer: true,\n        },\n      }\n    );\n    const [rows, columns] = derivedVolume.dimensions;\n    const derivedVolumeScalarData = derivedVolume.getScalarData();\n\n    const { imageIds } = referencedVolume;\n    const sopUIDImageIdIndexMap = imageIds.reduce((acc, imageId, index) => {\n      const { sopInstanceUid } = metaData.get('generalImageModule', imageId);\n      acc[sopInstanceUid] = index;\n      return acc;\n    }, {} as { [sopUID: string]: number });\n\n    const numSegments = Object.keys(segments).length;\n    // Note: ideally we could use the TypedArray set method, but since each\n    // slice can have multiple segments, we need to loop over each slice and\n    // set the segment value for each segment.\n    let overlappingSegments = false;\n\n    const _segmentInfoUpdate = (segmentInfo, segmentIndex) => {\n      const { pixelData: segPixelData } = segmentInfo;\n\n      let segmentX = 0;\n      let segmentY = 0;\n      let segmentZ = 0;\n      let count = 0;\n\n      for (const [\n        functionalGroupIndex,\n        functionalGroup,\n      ] of segmentInfo.functionalGroups.entries()) {\n        const {\n          ReferencedSOPInstanceUID,\n        } = functionalGroup.DerivationImageSequence.SourceImageSequence;\n\n        const imageIdIndex = sopUIDImageIdIndexMap[ReferencedSOPInstanceUID];\n\n        if (imageIdIndex === -1) {\n          return;\n        }\n\n        const step = rows * columns;\n\n        // we need a faster way to get the pixel data for the current\n        // functional group, which we use typed array view\n\n        const functionGroupPixelData = new Uint8Array(\n          segPixelData.buffer,\n          functionalGroupIndex * step,\n          step\n        );\n\n        const functionalGroupStartIndex = imageIdIndex * step;\n        const functionalGroupEndIndex = (imageIdIndex + 1) * step;\n\n        // Note: this for loop is not optimized, since DICOM SEG stores\n        // each segment as a separate labelmap so if there is a slice\n        // that has multiple segments, we will have to loop over each\n        // segment and we cannot use the TypedArray set method.\n        for (\n          let i = functionalGroupStartIndex, j = 0;\n          i < functionalGroupEndIndex;\n          i++, j++\n        ) {\n          if (functionGroupPixelData[j] !== 0) {\n            if (derivedVolumeScalarData[i] !== 0) {\n              overlappingSegments = true;\n            }\n\n            derivedVolumeScalarData[i] = segmentIndex;\n\n            // centroid calculations\n            segmentX += i % columns;\n            segmentY += Math.floor(i / columns) % rows;\n            segmentZ += Math.floor(i / (columns * rows));\n            count++;\n          }\n        }\n      }\n\n      // centroid calculations\n      const x = Math.floor(segmentX / count);\n      const y = Math.floor(segmentY / count);\n      const z = Math.floor(segmentZ / count);\n\n      const centerWorld = derivedVolume.imageData.indexToWorld([x, y, z]);\n\n      segmentation.cachedStats = {\n        ...segmentation.cachedStats,\n        segmentCenter: {\n          ...segmentation.cachedStats.segmentCenter,\n          [segmentIndex]: {\n            center: {\n              image: [x, y, z],\n              world: centerWorld,\n            },\n            modifiedTime: segDisplaySet.SeriesDate,\n          },\n        },\n      };\n\n      const numInitialized = Object.keys(segmentation.cachedStats.segmentCenter)\n        .length;\n\n      // Calculate percentage completed\n      const percentComplete = Math.round((numInitialized / numSegments) * 100);\n\n      this._broadcastEvent(EVENTS.SEGMENT_LOADING_COMPLETE, {\n        percentComplete,\n        numSegments: numSegments,\n      });\n    };\n\n    const promiseArray = [];\n\n    for (const segmentIndex in segments) {\n      const segmentInfo = segments[segmentIndex];\n\n      // Important: we need a non-blocking way to update the segmentation\n      // state, otherwise the UI will freeze and the user will not be able\n      // to interact with the app or progress bars will not be updated.\n      const promise = new Promise<void>((resolve, reject) => {\n        setTimeout(() => {\n          _segmentInfoUpdate(segmentInfo, segmentIndex);\n          resolve();\n        }, 0);\n      });\n\n      promiseArray.push(promise);\n    }\n\n    await Promise.all(promiseArray);\n\n    segmentation.segmentCount = Object.keys(segments).length;\n    segmentation.segments = [null]; // segment 0\n\n    Object.keys(segments).forEach(segmentIndex => {\n      const segmentInfo = segments[segmentIndex];\n      const segIndex = Number(segmentIndex);\n\n      segmentation.segments[segIndex] = {\n        label: segmentInfo.label || `Segment ${segIndex}`,\n        segmentIndex: Number(segmentIndex),\n        color: [\n          segmentInfo.color[0],\n          segmentInfo.color[1],\n          segmentInfo.color[2],\n        ],\n        opacity: segmentInfo.color[3],\n        isVisible: true,\n        isLocked: false,\n      };\n    });\n\n    segDisplaySet.isLoaded = true;\n\n    this._broadcastEvent(EVENTS.SEGMENTATION_LOADING_COMPLETE, {\n      segmentationId,\n      segDisplaySet,\n      overlappingSegments,\n    });\n\n    return this.addOrUpdateSegmentation(segmentation, suppressEvents);\n  }\n\n  public async createSegmentationForRTDisplaySet(\n    rtDisplaySet,\n    segmentationId?: string,\n    suppressEvents = false\n  ): Promise<string> {\n    // Todo: we currently only have support for contour representation for initial\n    // RT display\n    const representationType = CONTOUR;\n    segmentationId = segmentationId ?? rtDisplaySet.displaySetInstanceUID;\n    const { structureSet } = rtDisplaySet;\n\n    if (!structureSet) {\n      throw new Error(\n        'To create the contours from RT displaySet, the displaySet should be loaded first, you can perform rtDisplaySet.load() before calling this method.'\n      );\n    }\n\n    const defaultScheme = this._getDefaultSegmentationScheme();\n    const rtDisplaySetUID = rtDisplaySet.displaySetInstanceUID;\n\n    const allRTStructData = mapROIContoursToRTStructData(\n      structureSet,\n      rtDisplaySetUID\n    );\n\n    // sort by segmentIndex\n    allRTStructData.sort((a, b) => a.segmentIndex - b.segmentIndex);\n\n    const geometryIds = allRTStructData.map(({ geometryId }) => geometryId);\n\n    const segmentation: Segmentation = {\n      ...defaultScheme,\n      id: segmentationId,\n      displaySetInstanceUID: rtDisplaySetUID,\n      type: representationType,\n      representationData: {\n        [CONTOUR]: {\n          geometryIds,\n        },\n      },\n    };\n\n    const cachedSegmentation = this.getSegmentation(segmentationId);\n\n    if (cachedSegmentation) {\n      // if the labelmap with the same segmentationId already exists, we can\n      // just assume that the segmentation is already created and move on with\n      // updating the state\n      return this.addOrUpdateSegmentation(\n        Object.assign(segmentation, cachedSegmentation),\n        suppressEvents\n      );\n    }\n\n    if (!structureSet.ROIContours?.length) {\n      throw new Error(\n        'The structureSet does not contain any ROIContours. Please ensure the structureSet is loaded first.'\n      );\n    }\n    const segmentsCachedStats = {};\n    const initializeContour = async rtStructData => {\n      const { data, id, color, segmentIndex, geometryId } = rtStructData;\n      const geometry = await geometryLoader.createAndCacheGeometry(geometryId, {\n        geometryData: {\n          data,\n          id,\n          color,\n          frameOfReferenceUID: structureSet.frameOfReferenceUID,\n          segmentIndex,\n        },\n        type: csEnums.GeometryType.CONTOUR,\n      });\n\n      const contourSet = geometry.data;\n      const centroid = contourSet.getCentroid();\n\n      segmentsCachedStats[segmentIndex] = {\n        center: { world: centroid },\n        modifiedTime: rtDisplaySet.SeriesDate, // we use the SeriesDate as the modifiedTime since this is the first time we are creating the segmentation\n      };\n\n      segmentation.segments[segmentIndex] = {\n        label: id,\n        segmentIndex,\n        color,\n        ...SEGMENT_CONSTANT,\n      };\n\n      const numInitialized = Object.keys(segmentsCachedStats).length;\n\n      // Calculate percentage completed\n      const percentComplete = Math.round(\n        (numInitialized / allRTStructData.length) * 100\n      );\n\n      this._broadcastEvent(EVENTS.SEGMENT_LOADING_COMPLETE, {\n        percentComplete,\n        // Note: this is not the geometryIds length since there might be\n        // some missing ROINumbers\n        numSegments: allRTStructData.length,\n      });\n    };\n\n    const promiseArray = [];\n\n    for (let i = 0; i < allRTStructData.length; i++) {\n      const promise = new Promise<void>((resolve, reject) => {\n        setTimeout(() => {\n          initializeContour(allRTStructData[i]).then(() => {\n            resolve();\n          });\n        }, 0);\n      });\n\n      promiseArray.push(promise);\n    }\n\n    await Promise.all(promiseArray);\n\n    segmentation.segmentCount = allRTStructData.length;\n    rtDisplaySet.isLoaded = true;\n\n    segmentation.cachedStats = {\n      ...segmentation.cachedStats,\n      segmentCenter: {\n        ...segmentation.cachedStats.segmentCenter,\n        ...segmentsCachedStats,\n      },\n    };\n\n    this._broadcastEvent(EVENTS.SEGMENTATION_LOADING_COMPLETE, {\n      segmentationId,\n      rtDisplaySet,\n    });\n\n    return this.addOrUpdateSegmentation(segmentation, suppressEvents);\n  }\n\n  public jumpToSegmentCenter(\n    segmentationId: string,\n    segmentIndex: number,\n    toolGroupId?: string,\n    highlightAlpha = 0.9,\n    highlightSegment = true,\n    animationLength = 750,\n    highlightHideOthers = false,\n    highlightFunctionType = 'ease-in-out' // todo: make animation functions configurable from outside\n  ): void {\n    const { toolGroupService } = this.servicesManager.services;\n    const center = this._getSegmentCenter(segmentationId, segmentIndex);\n    if(!center) return\n\n    const { world } = center;\n\n    // todo: generalize\n    toolGroupId =\n      toolGroupId || this._getToolGroupIdsWithSegmentation(segmentationId);\n\n    const toolGroups = [];\n\n    if (Array.isArray(toolGroupId)) {\n      toolGroupId.forEach(toolGroup => {\n        toolGroups.push(toolGroupService.getToolGroup(toolGroup));\n      });\n    } else {\n      toolGroups.push(toolGroupService.getToolGroup(toolGroupId));\n    }\n\n    toolGroups.forEach(toolGroup => {\n      const viewportsInfo = toolGroup.getViewportsInfo();\n\n      // @ts-ignore\n      for (const { viewportId, renderingEngineId } of viewportsInfo) {\n        const { viewport } = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n        cstUtils.viewport.jumpToWorld(viewport, world);\n      }\n\n      if (highlightSegment) {\n        this.highlightSegment(\n          segmentationId,\n          segmentIndex,\n          toolGroup.id,\n          highlightAlpha,\n          animationLength,\n          highlightHideOthers,\n          highlightFunctionType\n        );\n      }\n    });\n  }\n\n  public highlightSegment(\n    segmentationId: string,\n    segmentIndex: number,\n    toolGroupId?: string,\n    alpha = 0.9,\n    animationLength = 750,\n    hideOthers = true,\n    highlightFunctionType = 'ease-in-out'\n  ): void {\n    if (this.highlightIntervalId) {\n      clearInterval(this.highlightIntervalId);\n    }\n\n    const segmentation = this.getSegmentation(segmentationId);\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const segmentationRepresentation = this._getSegmentationRepresentation(\n      segmentationId,\n      toolGroupId\n    );\n\n    const { type } = segmentationRepresentation;\n    const { segments } = segmentation;\n\n    const highlightFn =\n      type === LABELMAP\n        ? this._highlightLabelmap.bind(this)\n        : this._highlightContour.bind(this);\n\n    const adjustedAlpha = type === LABELMAP ? alpha : 1 - alpha;\n\n    highlightFn(\n      segmentIndex,\n      adjustedAlpha,\n      hideOthers,\n      segments,\n      toolGroupId,\n      animationLength,\n      segmentationRepresentation\n    );\n  }\n\n  public createSegmentationForDisplaySet = async (\n    displaySetInstanceUID: string,\n    options?: {\n      segmentationId: string;\n      label: string;\n    }\n  ): Promise<string> => {\n    const { displaySetService } = this.servicesManager.services;\n\n    const displaySet = displaySetService.getDisplaySetByUID(\n      displaySetInstanceUID\n    );\n\n    // Todo: we currently only support labelmap for segmentation for a displaySet\n    const representationType = LABELMAP;\n\n    const volumeId = this._getVolumeIdForDisplaySet(displaySet);\n\n    const segmentationId = options?.segmentationId ?? `${csUtils.uuidv4()}`;\n\n    // Force use of a Uint8Array SharedArrayBuffer for the segmentation to save space and so\n    // it is easily compressible in worker thread.\n    await volumeLoader.createAndCacheDerivedVolume(volumeId, {\n      volumeId: segmentationId,\n      targetBuffer: {\n        type: 'Uint8Array',\n        sharedArrayBuffer: true,\n      },\n    });\n\n    const defaultScheme = this._getDefaultSegmentationScheme();\n\n    const segmentation: Segmentation = {\n      ...defaultScheme,\n      id: segmentationId,\n      displaySetInstanceUID,\n      label: options?.label,\n      // We should set it as active by default, as it created for display\n      isActive: true,\n      type: representationType,\n      representationData: {\n        LABELMAP: {\n          volumeId: segmentationId,\n          referencedVolumeId: volumeId, // Todo: this is so ugly\n        },\n      },\n    };\n\n    this.addOrUpdateSegmentation(segmentation);\n\n    return segmentationId;\n  };\n\n  /**\n   * Toggles the visibility of a segmentation in the state, and broadcasts the event.\n   * Note: this method does not update the segmentation state in the source. It only\n   * updates the state, and there should be separate listeners for that.\n   * @param ids segmentation ids\n   */\n  public toggleSegmentationVisibility = (segmentationId: string): void => {\n    this._toggleSegmentationVisibility(segmentationId, false);\n  };\n\n  public addSegmentationRepresentationToToolGroup = async (\n    toolGroupId: string,\n    segmentationId: string,\n    hydrateSegmentation = false,\n    representationType = csToolsEnums.SegmentationRepresentations.Labelmap\n  ): Promise<void> => {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (!segmentation) {\n      throw new Error(\n        `Segmentation with segmentationId ${segmentationId} not found.`\n      );\n    }\n\n    if (hydrateSegmentation) {\n      // hydrate the segmentation if it's not hydrated yet\n      segmentation.hydrated = true;\n    }\n\n    const { colorLUTIndex } = segmentation;\n\n    // Based on the segmentationId, set the colorLUTIndex.\n    const segmentationRepresentationUIDs = await cstSegmentation.addSegmentationRepresentations(\n      toolGroupId,\n      [\n        {\n          segmentationId,\n          type: representationType,\n        },\n      ]\n    );\n\n    // set the latest segmentation representation as active one\n    this._setActiveSegmentationForToolGroup(\n      segmentationId,\n      toolGroupId,\n      segmentationRepresentationUIDs[0]\n    );\n\n    cstSegmentation.config.color.setColorLUT(\n      toolGroupId,\n      segmentationRepresentationUIDs[0],\n      colorLUTIndex\n    );\n\n    // add the segmentation segments properly\n    for (const segment of segmentation.segments) {\n      if (segment === null || segment === undefined) {\n        continue;\n      }\n\n      const {\n        segmentIndex,\n        color,\n        isLocked,\n        isVisible: visibility,\n        opacity,\n      } = segment;\n\n      const suppressEvents = true;\n\n      if (color !== undefined) {\n        this._setSegmentColor(\n          segmentationId,\n          segmentIndex,\n          color,\n          toolGroupId,\n          suppressEvents\n        );\n      }\n\n      if (opacity !== undefined) {\n        this._setSegmentOpacity(\n          segmentationId,\n          segmentIndex,\n          opacity,\n          toolGroupId,\n          suppressEvents\n        );\n      }\n\n      if (visibility !== undefined) {\n        this._setSegmentVisibility(\n          segmentationId,\n          segmentIndex,\n          visibility,\n          toolGroupId,\n          suppressEvents\n        );\n      }\n\n      if (isLocked !== undefined) {\n        this._setSegmentLocked(\n          segmentationId,\n          segmentIndex,\n          isLocked,\n          suppressEvents\n        );\n      }\n    }\n  };\n\n  public setSegmentRGBAColorForSegmentation = (\n    segmentationId: string,\n    segmentIndex: number,\n    rgbaColor,\n    toolGroupId?: string\n  ) => {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    this._setSegmentOpacity(\n      segmentationId,\n      segmentIndex,\n      rgbaColor[3],\n      toolGroupId, // toolGroupId\n      true\n    );\n    this._setSegmentColor(\n      segmentationId,\n      segmentIndex,\n      [rgbaColor[0], rgbaColor[1], rgbaColor[2]],\n      toolGroupId, // toolGroupId\n      true\n    );\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n      segmentation,\n    });\n  };\n\n  public getToolGroupIdsWithSegmentation = (\n    segmentationId: string\n  ): string[] => {\n    const toolGroupIds = cstSegmentation.state.getToolGroupIdsWithSegmentation(\n      segmentationId\n    );\n    return toolGroupIds;\n  };\n\n  public hydrateSegmentation = (\n    segmentationId: string,\n    suppressEvents = false\n  ): void => {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (!segmentation) {\n      throw new Error(\n        `Segmentation with segmentationId ${segmentationId} not found.`\n      );\n    }\n\n    segmentation.hydrated = true;\n\n    if (!suppressEvents) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  };\n\n  private _highlightLabelmap(\n    segmentIndex: number,\n    alpha: number,\n    hideOthers: boolean,\n    segments: Segment[],\n    toolGroupId: string,\n    animationLength: number,\n    segmentationRepresentation: cstTypes.ToolGroupSpecificRepresentation\n  ) {\n    const newSegmentSpecificConfig = {\n      [segmentIndex]: {\n        LABELMAP: {\n          fillAlpha: alpha,\n        },\n      },\n    };\n\n    if (hideOthers) {\n      for (let i = 0; i < segments.length; i++) {\n        if (i !== segmentIndex) {\n          newSegmentSpecificConfig[i] = {\n            LABELMAP: {\n              fillAlpha: 0,\n            },\n          };\n        }\n      }\n    }\n\n    const { fillAlpha } = this.getConfiguration(toolGroupId);\n\n    let startTime: number = null;\n    const animation = (timestamp: number) => {\n      if (startTime === null) {\n        startTime = timestamp;\n      }\n\n      const elapsed = timestamp - startTime;\n      const progress = Math.min(elapsed / animationLength, 1);\n\n      cstSegmentation.config.setSegmentSpecificConfig(\n        toolGroupId,\n        segmentationRepresentation.segmentationRepresentationUID,\n        {\n          [segmentIndex]: {\n            LABELMAP: {\n              fillAlpha: easeInOutBell(progress, fillAlpha),\n            },\n          },\n        }\n      );\n\n      if (progress < 1) {\n        requestAnimationFrame(animation);\n      } else {\n        cstSegmentation.config.setSegmentSpecificConfig(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          {}\n        );\n      }\n    };\n\n    requestAnimationFrame(animation);\n  }\n\n  private _highlightContour(\n    segmentIndex: number,\n    alpha: number,\n    hideOthers: boolean,\n    segments: Segment[],\n    toolGroupId: string,\n    animationLength: number,\n    segmentationRepresentation: cstTypes.ToolGroupSpecificRepresentation\n  ) {\n    const startTime = performance.now();\n\n    const animate = (currentTime: number) => {\n      const progress = (currentTime - startTime) / animationLength;\n      if (progress >= 1) {\n        cstSegmentation.config.setSegmentSpecificConfig(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          {}\n        );\n        return;\n      }\n\n      const reversedProgress = reverseEaseInOutBell(progress, 0.1);\n      cstSegmentation.config.setSegmentSpecificConfig(\n        toolGroupId,\n        segmentationRepresentation.segmentationRepresentationUID,\n        {\n          [segmentIndex]: {\n            CONTOUR: {\n              fillAlpha: reversedProgress,\n            },\n          },\n        }\n      );\n\n      requestAnimationFrame(animate);\n    };\n\n    requestAnimationFrame(animate);\n  }\n\n  public removeSegmentationRepresentationFromToolGroup(\n    toolGroupId: string,\n    segmentationRepresentationUIDsIds?: string[]\n  ): void {\n    const uids = segmentationRepresentationUIDsIds || [];\n    if (!uids.length) {\n      const representations = cstSegmentation.state.getSegmentationRepresentations(\n        toolGroupId\n      );\n\n      if (!representations || !representations.length) {\n        return;\n      }\n\n      uids.push(\n        ...representations.map(rep => rep.segmentationRepresentationUID)\n      );\n    }\n\n    cstSegmentation.removeSegmentationsFromToolGroup(toolGroupId, uids);\n  }\n\n  /**\n   * Removes a segmentation and broadcasts the removed event.\n   *\n   * @param {string} segmentationId The segmentation id\n   */\n  public remove(segmentationId: string): void {\n    const segmentation = this.segmentations[segmentationId];\n    const wasActive = segmentation.isActive;\n\n    if (!segmentationId || !segmentation) {\n      console.warn(\n        `No segmentationId provided, or unable to find segmentation by id.`\n      );\n      return;\n    }\n\n    const { colorLUTIndex } = segmentation;\n\n    this._removeSegmentationFromCornerstone(segmentationId);\n\n    // Delete associated colormap\n    // Todo: bring this back\n    cstSegmentation.state.removeColorLUT(colorLUTIndex);\n\n    delete this.segmentations[segmentationId];\n\n    // If this segmentation was active, and there is another segmentation, set another one active.\n\n    if (wasActive) {\n      const remainingSegmentations = this._getSegmentations();\n\n      if (remainingSegmentations.length) {\n        const { id } = remainingSegmentations[0];\n\n        this._setActiveSegmentationForToolGroup(\n          id,\n          this._getFirstToolGroupId(),\n          false\n        );\n      }\n    }\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_REMOVED, {\n      segmentationId,\n    });\n  }\n\n  public getConfiguration = (toolGroupId?: string): SegmentationConfig => {\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const brushSize = 1;\n    // const brushSize = cstUtils.segmentation.getBrushSizeForToolGroup(\n    //   toolGroupId\n    // );\n\n    const brushThresholdGate = 1;\n    // const brushThresholdGate = cstUtils.segmentation.getBrushThresholdForToolGroup(\n    //   toolGroupId\n    // );\n\n    const segmentationRepresentations = this.getSegmentationRepresentationsForToolGroup(\n      toolGroupId\n    );\n\n    const typeToUse = segmentationRepresentations?.[0]?.type || LABELMAP;\n\n    const config = cstSegmentation.config.getGlobalConfig();\n    const { renderInactiveSegmentations } = config;\n\n    const representation = config.representations[typeToUse];\n\n    const {\n      renderOutline,\n      outlineWidthActive,\n      renderFill,\n      fillAlpha,\n      fillAlphaInactive,\n      outlineOpacity,\n      outlineOpacityInactive,\n    } = representation;\n\n    return {\n      brushSize,\n      brushThresholdGate,\n      fillAlpha,\n      fillAlphaInactive,\n      outlineWidthActive,\n      renderFill,\n      renderInactiveSegmentations,\n      renderOutline,\n      outlineOpacity,\n      outlineOpacityInactive,\n    };\n  };\n\n  public setConfiguration = (configuration: SegmentationConfig): void => {\n    const {\n      brushSize,\n      brushThresholdGate,\n      fillAlpha,\n      fillAlphaInactive,\n      outlineWidthActive,\n      outlineOpacity,\n      renderFill,\n      renderInactiveSegmentations,\n      renderOutline,\n    } = configuration;\n\n    const setConfigValueIfDefined = (key, value, transformFn = null) => {\n      if (value !== undefined) {\n        const transformedValue = transformFn ? transformFn(value) : value;\n        this._setSegmentationConfig(key, transformedValue);\n      }\n    };\n\n    setConfigValueIfDefined('renderOutline', renderOutline);\n    setConfigValueIfDefined('outlineWidthActive', outlineWidthActive);\n    setConfigValueIfDefined('outlineOpacity', outlineOpacity, v => v / 100);\n    setConfigValueIfDefined('fillAlpha', fillAlpha, v => v / 100);\n    setConfigValueIfDefined('renderFill', renderFill);\n    setConfigValueIfDefined(\n      'fillAlphaInactive',\n      fillAlphaInactive,\n      v => v / 100\n    );\n    setConfigValueIfDefined('outlineOpacityInactive', fillAlphaInactive, v =>\n      Math.max(0.75, v / 100)\n    );\n\n    if (renderInactiveSegmentations !== undefined) {\n      const config = cstSegmentation.config.getGlobalConfig();\n      config.renderInactiveSegmentations = renderInactiveSegmentations;\n      cstSegmentation.config.setGlobalConfig(config);\n    }\n\n    // if (brushSize !== undefined) {\n    //   const { toolGroupService } = this.servicesManager.services;\n\n    //   const toolGroupIds = toolGroupService.getToolGroupIds();\n\n    //   toolGroupIds.forEach(toolGroupId => {\n    //     cstUtils.segmentation.setBrushSizeForToolGroup(toolGroupId, brushSize);\n    //   });\n    // }\n\n    // if (brushThresholdGate !== undefined) {\n    //   const { toolGroupService } = this.servicesManager.services;\n\n    //   const toolGroupIds = toolGroupService.getFirstToolGroupIds();\n\n    //   toolGroupIds.forEach(toolGroupId => {\n    //     cstUtils.segmentation.setBrushThresholdForToolGroup(\n    //       toolGroupId,\n    //       brushThresholdGate\n    //     );\n    //   });\n    // }\n\n    this._broadcastEvent(\n      this.EVENTS.SEGMENTATION_CONFIGURATION_CHANGED,\n      this.getConfiguration()\n    );\n  };\n\n  public getLabelmapVolume = (segmentationId: string) => {\n    return cache.getVolume(segmentationId);\n  };\n\n  public getSegmentationRepresentationsForToolGroup = toolGroupId => {\n    return cstSegmentation.state.getSegmentationRepresentations(toolGroupId);\n  };\n\n  public setSegmentLabelForSegmentation(\n    segmentationId: string,\n    segmentIndex: number,\n    label: string\n  ) {\n    this._setSegmentLabelForSegmentation(segmentationId, segmentIndex, label);\n  }\n\n  private _setSegmentLabelForSegmentation(\n    segmentationId: string,\n    segmentIndex: number,\n    label: string,\n    suppressEvents = false\n  ) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const segmentInfo = segmentation.segments[segmentIndex];\n\n    if (segmentInfo === undefined) {\n      throw new Error(\n        `Segment ${segmentIndex} not yet added to segmentation: ${segmentationId}`\n      );\n    }\n\n    segmentInfo.label = label;\n\n    if (suppressEvents === false) {\n      // this._setSegmentationModified(segmentationId);\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  }\n\n  public shouldRenderSegmentation(\n    viewportDisplaySetInstanceUIDs,\n    segDisplaySetInstanceUID\n  ) {\n    if (\n      !viewportDisplaySetInstanceUIDs ||\n      !viewportDisplaySetInstanceUIDs.length\n    ) {\n      return false;\n    }\n\n    const { displaySetService } = this.servicesManager.services;\n\n    let shouldDisplaySeg = false;\n\n    const segDisplaySet = displaySetService.getDisplaySetByUID(\n      segDisplaySetInstanceUID\n    );\n\n    const segFrameOfReferenceUID = this._getFrameOfReferenceUIDForSeg(\n      segDisplaySet\n    );\n\n    // check if the displaySet is sharing the same frameOfReferenceUID\n    // with the new segmentation\n    for (const displaySetInstanceUID of viewportDisplaySetInstanceUIDs) {\n      const displaySet = displaySetService.getDisplaySetByUID(\n        displaySetInstanceUID\n      );\n\n      // Todo: this might not be ideal for use cases such as 4D, since we\n      // don't want to show the segmentation for all the frames\n      if (\n        displaySet.isReconstructable &&\n        displaySet?.images?.[0]?.FrameOfReferenceUID === segFrameOfReferenceUID\n      ) {\n        shouldDisplaySeg = true;\n        break;\n      }\n    }\n\n    return shouldDisplaySeg;\n  }\n\n  private _getDefaultSegmentationScheme() {\n    return {\n      activeSegmentIndex: 1,\n      cachedStats: {},\n      label: '',\n      segmentsLocked: [],\n      displayText: [],\n      hydrated: false, // by default we don't hydrate the segmentation for SEG displaySets\n      segmentCount: 0,\n      segments: [],\n      isVisible: true,\n      isActive: false,\n      colorLUTIndex: 0,\n    };\n  }\n\n  private _setActiveSegmentationForToolGroup(\n    segmentationId: string,\n    toolGroupId: string,\n    suppressEvents = false\n  ) {\n    const segmentations = this._getSegmentations();\n    const targetSegmentation = this.getSegmentation(segmentationId);\n\n    if (targetSegmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    segmentations.forEach(segmentation => {\n      segmentation.isActive = segmentation.id === segmentationId;\n    });\n\n    const representation = this._getSegmentationRepresentation(\n      segmentationId,\n      toolGroupId\n    );\n\n    cstSegmentation.activeSegmentation.setActiveSegmentationRepresentation(\n      toolGroupId,\n      representation.segmentationRepresentationUID\n    );\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation: targetSegmentation,\n      });\n    }\n  }\n\n  private _toggleSegmentationVisibility = (\n    segmentationId: string,\n    suppressEvents = false\n  ) => {\n    const segmentation = this.segmentations[segmentationId];\n\n    if (!segmentation) {\n      throw new Error(\n        `Segmentation with segmentationId ${segmentationId} not found.`\n      );\n    }\n\n    segmentation.isVisible = !segmentation.isVisible;\n\n    this._updateCornerstoneSegmentationVisibility(segmentationId);\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  };\n\n  private _setActiveSegment(\n    segmentationId: string,\n    segmentIndex: number,\n    suppressEvents = false\n  ) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    cstSegmentation.segmentIndex.setActiveSegmentIndex(\n      segmentationId,\n      segmentIndex\n    );\n\n    segmentation.activeSegmentIndex = segmentIndex;\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  }\n\n  private _getSegmentInfo(segmentation: Segmentation, segmentIndex: number) {\n    const segments = segmentation.segments;\n\n    if (!segments) {\n      return;\n    }\n\n    if (segments && segments.length > 0) {\n      return segments[segmentIndex];\n    }\n  }\n\n  private _getVolumeIdForDisplaySet(displaySet) {\n    const volumeLoaderSchema =\n      displaySet.volumeLoaderSchema ?? VOLUME_LOADER_SCHEME;\n\n    return `${volumeLoaderSchema}:${displaySet.displaySetInstanceUID}`;\n  }\n\n  private _setSegmentColor = (\n    segmentationId: string,\n    segmentIndex: number,\n    color: ohifTypes.RGB,\n    toolGroupId?: string,\n    suppressEvents = false\n  ) => {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const segmentInfo = this._getSegmentInfo(segmentation, segmentIndex);\n\n    if (segmentInfo === undefined) {\n      throw new Error(\n        `Segment ${segmentIndex} not yet added to segmentation: ${segmentationId}`\n      );\n    }\n\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const segmentationRepresentation = this._getSegmentationRepresentation(\n      segmentationId,\n      toolGroupId\n    );\n\n    if (!segmentationRepresentation) {\n      throw new Error(\n        'Must add representation to toolgroup before setting segments'\n      );\n    }\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n\n    const rgbaColor = cstSegmentation.config.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    cstSegmentation.config.color.setColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex,\n      [...color, rgbaColor[3]]\n    );\n\n    segmentInfo.color = color;\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  };\n\n  private _getSegmentCenter(segmentationId, segmentIndex) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (!segmentation) {\n      return;\n    }\n\n    const { cachedStats } = segmentation;\n\n    if (!cachedStats) {\n      return;\n    }\n\n    const { segmentCenter } = cachedStats;\n\n    if (!segmentCenter) {\n      return;\n    }\n\n    const { center } = segmentCenter[segmentIndex];\n\n    return center;\n  }\n\n  private _setSegmentLocked(\n    segmentationId: string,\n    segmentIndex: number,\n    isLocked: boolean,\n    suppressEvents = false\n  ) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const segmentInfo = this._getSegmentInfo(segmentation, segmentIndex);\n\n    if (segmentInfo === undefined) {\n      throw new Error(\n        `Segment ${segmentIndex} not yet added to segmentation: ${segmentationId}`\n      );\n    }\n\n    segmentInfo.isLocked = isLocked;\n\n    cstSegmentation.segmentLocking.setSegmentIndexLocked(\n      segmentationId,\n      segmentIndex,\n      isLocked\n    );\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  }\n\n  private _setSegmentVisibility(\n    segmentationId: string,\n    segmentIndex: number,\n    isVisible: boolean,\n    toolGroupId?: string,\n    suppressEvents = false\n  ) {\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const {\n      segmentationRepresentationUID,\n      segmentation,\n    } = this._getSegmentationInfo(segmentationId, toolGroupId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const segmentInfo = this._getSegmentInfo(segmentation, segmentIndex);\n\n    if (segmentInfo === undefined) {\n      throw new Error(\n        `Segment ${segmentIndex} not yet added to segmentation: ${segmentationId}`\n      );\n    }\n\n    segmentInfo.isVisible = isVisible;\n\n    cstSegmentation.config.visibility.setSegmentVisibility(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex,\n      isVisible\n    );\n\n    // make sure to update the isVisible flag on the segmentation\n    // if a segment becomes invisible then the segmentation should be invisible\n    // in the status as well, and show correct icon\n    segmentation.isVisible = segmentation.segments\n      .filter(Boolean)\n      .every(segment => segment.isVisible);\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  }\n\n  private _setSegmentOpacity = (\n    segmentationId: string,\n    segmentIndex: number,\n    opacity: number,\n    toolGroupId?: string,\n    suppressEvents = false\n  ) => {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const segmentInfo = this._getSegmentInfo(segmentation, segmentIndex);\n\n    if (segmentInfo === undefined) {\n      throw new Error(\n        `Segment ${segmentIndex} not yet added to segmentation: ${segmentationId}`\n      );\n    }\n\n    toolGroupId = toolGroupId ?? this._getFirstToolGroupId();\n\n    const segmentationRepresentation = this._getSegmentationRepresentation(\n      segmentationId,\n      toolGroupId\n    );\n\n    if (!segmentationRepresentation) {\n      throw new Error(\n        'Must add representation to toolgroup before setting segments'\n      );\n    }\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n\n    const rgbaColor = cstSegmentation.config.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    cstSegmentation.config.color.setColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex,\n      [rgbaColor[0], rgbaColor[1], rgbaColor[2], opacity]\n    );\n\n    segmentInfo.opacity = opacity;\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  };\n\n  private _setSegmentLabel(\n    segmentationId: string,\n    segmentIndex: number,\n    segmentLabel: string,\n    suppressEvents = false\n  ) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n\n    const segmentInfo = this._getSegmentInfo(segmentation, segmentIndex);\n\n    if (segmentInfo === undefined) {\n      throw new Error(\n        `Segment ${segmentIndex} not yet added to segmentation: ${segmentationId}`\n      );\n    }\n\n    segmentInfo.label = segmentLabel;\n\n    if (suppressEvents === false) {\n      this._broadcastEvent(this.EVENTS.SEGMENTATION_UPDATED, {\n        segmentation,\n      });\n    }\n  }\n\n  private _getSegmentationRepresentation(segmentationId, toolGroupId) {\n    const segmentationRepresentations = this.getSegmentationRepresentationsForToolGroup(\n      toolGroupId\n    );\n\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n\n    // Todo: this finds the first segmentation representation that matches the segmentationId\n    // If there are two labelmap representations from the same segmentation, this will not work\n    const representation = segmentationRepresentations.find(\n      representation => representation.segmentationId === segmentationId\n    );\n\n    return representation;\n  }\n\n  private _setSegmentationConfig = (property, value) => {\n    // Todo: currently we only support global config, and we get the type\n    // from the first segmentation\n    const typeToUse = this.getSegmentations()[0].type;\n\n    const { cornerstoneViewportService } = this.servicesManager.services;\n\n    const config = cstSegmentation.config.getGlobalConfig();\n\n    config.representations[typeToUse][property] = value;\n\n    // Todo: add non global (representation specific config as well)\n    cstSegmentation.config.setGlobalConfig(config);\n\n    const renderingEngine = cornerstoneViewportService.getRenderingEngine();\n    const viewportIds = cornerstoneViewportService.getViewportIds();\n\n    renderingEngine.renderViewports(viewportIds);\n  };\n\n  private _initSegmentationService() {\n    // Connect Segmentation Service to Cornerstone3D.\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_MODIFIED,\n      this._onSegmentationModifiedFromSource\n    );\n\n    eventTarget.addEventListener(\n      csToolsEnums.Events.SEGMENTATION_DATA_MODIFIED,\n      this._onSegmentationDataModified\n    );\n  }\n\n  private _onSegmentationDataModified = evt => {\n    const { segmentationId } = evt.detail;\n\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      // Part of add operation, not update operation, exit early.\n      return;\n    }\n\n    this._broadcastEvent(this.EVENTS.SEGMENTATION_DATA_MODIFIED, {\n      segmentation,\n    });\n  };\n\n  private _onSegmentationModifiedFromSource = evt => {\n    const { segmentationId } = evt.detail;\n\n    const segmentation = this.segmentations[segmentationId];\n\n    if (segmentation === undefined) {\n      // Part of add operation, not update operation, exit early.\n      return;\n    }\n\n    const segmentationState = cstSegmentation.state.getSegmentation(\n      segmentationId\n    );\n\n    if (!segmentationState) {\n      return;\n    }\n\n    const {\n      activeSegmentIndex,\n      cachedStats,\n      segmentsLocked,\n      label,\n      type,\n    } = segmentationState;\n\n    if (![LABELMAP, CONTOUR].includes(type)) {\n      throw new Error(\n        `Unsupported segmentation type: ${type}. Only ${LABELMAP} and ${CONTOUR} are supported.`\n      );\n    }\n\n    const representationData = segmentationState.representationData[type];\n\n    // TODO: handle other representations when available in cornerstone3D\n    const segmentationSchema = {\n      ...segmentation,\n      activeSegmentIndex,\n      cachedStats,\n      displayText: [],\n      id: segmentationId,\n      label,\n      segmentsLocked,\n      type,\n      representationData: {\n        [type]: {\n          ...representationData,\n        },\n      },\n    };\n\n    try {\n      this.addOrUpdateSegmentation(segmentationSchema);\n    } catch (error) {\n      console.warn(\n        `Failed to add/update segmentation ${segmentationId}`,\n        error\n      );\n    }\n  };\n\n  private _getSegmentationInfo(segmentationId: string, toolGroupId: string) {\n    const segmentation = this.getSegmentation(segmentationId);\n\n    if (segmentation === undefined) {\n      throw new Error(`no segmentation for segmentationId: ${segmentationId}`);\n    }\n    const segmentationRepresentation = this._getSegmentationRepresentation(\n      segmentationId,\n      toolGroupId\n    );\n\n    if (!segmentationRepresentation) {\n      throw new Error(\n        'Must add representation to toolgroup before setting segments'\n      );\n    }\n\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n\n    return { segmentationRepresentationUID, segmentation };\n  }\n\n  private _removeSegmentationFromCornerstone(segmentationId: string) {\n    // TODO: This should be from the configuration\n    const removeFromCache = true;\n    const segmentationState = cstSegmentation.state;\n    const sourceSegState = segmentationState.getSegmentation(segmentationId);\n\n    if (!sourceSegState) {\n      return;\n    }\n\n    const toolGroupIds = segmentationState.getToolGroupIdsWithSegmentation(\n      segmentationId\n    );\n\n    toolGroupIds.forEach(toolGroupId => {\n      const segmentationRepresentations = segmentationState.getSegmentationRepresentations(\n        toolGroupId\n      );\n\n      const UIDsToRemove = [];\n      segmentationRepresentations.forEach(representation => {\n        if (representation.segmentationId === segmentationId) {\n          UIDsToRemove.push(representation.segmentationRepresentationUID);\n        }\n      });\n\n      // remove segmentation representations\n      cstSegmentation.removeSegmentationsFromToolGroup(\n        toolGroupId,\n        UIDsToRemove,\n        true // immediate\n      );\n    });\n\n    // cleanup the segmentation state too\n    segmentationState.removeSegmentation(segmentationId);\n\n    if (removeFromCache && cache.getVolumeLoadObject(segmentationId)) {\n      cache.removeVolumeLoadObject(segmentationId);\n    }\n  }\n\n  private _updateCornerstoneSegmentations({\n    segmentationId,\n    notYetUpdatedAtSource,\n  }) {\n    if (notYetUpdatedAtSource === false) {\n      return;\n    }\n    const segmentationState = cstSegmentation.state;\n    const sourceSegmentation = segmentationState.getSegmentation(\n      segmentationId\n    );\n    const segmentation = this.segmentations[segmentationId];\n    const { label, cachedStats } = segmentation;\n\n    // Update the label in the source if necessary\n    if (sourceSegmentation.label !== label) {\n      sourceSegmentation.label = label;\n    }\n\n    if (!isEqual(sourceSegmentation.cachedStats, cachedStats)) {\n      sourceSegmentation.cachedStats = cachedStats;\n    }\n  }\n\n  private _updateCornerstoneSegmentationVisibility = segmentationId => {\n    const segmentationState = cstSegmentation.state;\n    const toolGroupIds = segmentationState.getToolGroupIdsWithSegmentation(\n      segmentationId\n    );\n\n    toolGroupIds.forEach(toolGroupId => {\n      const segmentationRepresentations = cstSegmentation.state.getSegmentationRepresentations(\n        toolGroupId\n      );\n\n      if (segmentationRepresentations.length === 0) {\n        return;\n      }\n\n      // Todo: this finds the first segmentation representation that matches the segmentationId\n      // If there are two labelmap representations from the same segmentation, this will not work\n      const representation = segmentationRepresentations.find(\n        representation => representation.segmentationId === segmentationId\n      );\n\n      const { segmentsHidden } = representation;\n\n      const currentVisibility = segmentsHidden.size === 0 ? true : false;\n      const newVisibility = !currentVisibility;\n\n      cstSegmentation.config.visibility.setSegmentationVisibility(\n        toolGroupId,\n        representation.segmentationRepresentationUID,\n        newVisibility\n      );\n\n      // update segments visibility\n      const { segmentation } = this._getSegmentationInfo(\n        segmentationId,\n        toolGroupId\n      );\n\n      const segments = segmentation.segments.filter(Boolean);\n\n      segments.forEach(segment => {\n        segment.isVisible = newVisibility;\n      });\n    });\n  };\n\n  private _getToolGroupIdsWithSegmentation(segmentationId: string) {\n    const segmentationState = cstSegmentation.state;\n    const toolGroupIds = segmentationState.getToolGroupIdsWithSegmentation(\n      segmentationId\n    );\n\n    return toolGroupIds;\n  }\n\n  private _getFrameOfReferenceUIDForSeg(displaySet) {\n    const frameOfReferenceUID = displaySet.instance?.FrameOfReferenceUID;\n\n    if (frameOfReferenceUID) {\n      return frameOfReferenceUID;\n    }\n\n    // if not found we should try the ReferencedFrameOfReferenceSequence\n    const referencedFrameOfReferenceSequence =\n      displaySet.instance?.ReferencedFrameOfReferenceSequence;\n\n    if (referencedFrameOfReferenceSequence) {\n      return referencedFrameOfReferenceSequence.FrameOfReferenceUID;\n    }\n  }\n\n  private _getFirstToolGroupId = () => {\n    const { toolGroupService } = this.servicesManager.services;\n    const toolGroupIds = toolGroupService.getToolGroupIds();\n\n    return toolGroupIds[0];\n  };\n\n  private getNextColorLUTIndex = (): number => {\n    let i = 0;\n    while (true) {\n      if (cstSegmentation.state.getColorLUT(i) === undefined) {\n        return i;\n      }\n\n      i++;\n    }\n  };\n\n  private generateNewColorLUT() {\n    const newColorLUT = cloneDeep(COLOR_LUT);\n\n    return newColorLUT;\n  }\n\n  /**\n   * Converts object of objects to array.\n   *\n   * @return {Array} Array of objects\n   */\n  private arrayOfObjects = obj => {\n    return Object.entries(obj).map(e => ({ [e[0]]: e[1] }));\n  };\n}\n\nexport default SegmentationService;\nexport { EVENTS, VALUE_TYPES };\n","/**\n * Maps a DICOM RT Struct ROI Contour to a RTStruct data that can be used\n * in Segmentation Service\n *\n * @param structureSet - A DICOM RT Struct ROI Contour\n * @param rtDisplaySetUID - A CornerstoneTools DisplaySet UID\n * @returns An array of object that includes data, id, segmentIndex, color\n * and geometry Id\n */\nexport function mapROIContoursToRTStructData(\n  structureSet: unknown,\n  rtDisplaySetUID: unknown\n) {\n  return structureSet.ROIContours.map(\n    ({ contourPoints, ROINumber, ROIName, colorArray }) => {\n      const data = contourPoints.map(({ points, ...rest }) => {\n        const newPoints = points.map(({ x, y, z }) => {\n          return [x, y, z];\n        });\n\n        return {\n          ...rest,\n          points: newPoints,\n        };\n      });\n\n      const id = ROIName || ROINumber;\n\n      return {\n        data,\n        id,\n        segmentIndex: ROINumber,\n        color: colorArray,\n        geometryId: `${rtDisplaySetUID}:${id}:segmentIndex-${ROINumber}`,\n      };\n    }\n  );\n}\n","import SegmentationService from './SegmentationService';\n\nexport default SegmentationService;\n","import { Enums } from '@cornerstonejs/core';\n\nconst STACK = 'stack';\nconst VOLUME = 'volume';\nconst ORTHOGRAPHIC = 'orthographic';\nconst VOLUME_3D = 'volume3d';\n\nexport default function getCornerstoneViewportType(\n  viewportType: string\n): Enums.ViewportType {\n  const lowerViewportType = viewportType.toLowerCase();\n  if (lowerViewportType === STACK) {\n    return Enums.ViewportType.STACK;\n  }\n\n  if (lowerViewportType === VOLUME || lowerViewportType === ORTHOGRAPHIC) {\n    return Enums.ViewportType.ORTHOGRAPHIC;\n  }\n\n  if (lowerViewportType === VOLUME_3D) {\n    return Enums.ViewportType.VOLUME_3D;\n  }\n\n  throw new Error(\n    `Invalid viewport type: ${viewportType}. Valid types are: stack, volume`\n  );\n}\n","import { ServicesManager, Types } from '@ohif/core';\nimport {\n  cache as cs3DCache,\n  Enums,\n  volumeLoader,\n  utilities as utils,\n} from '@cornerstonejs/core';\n\nimport getCornerstoneViewportType from '../../utils/getCornerstoneViewportType';\nimport {\n  StackViewportData,\n  VolumeViewportData,\n} from '../../types/CornerstoneCacheService';\n\nconst VOLUME_LOADER_SCHEME = 'cornerstoneStreamingImageVolume';\n\nclass CornerstoneCacheService {\n  static REGISTRATION = {\n    name: 'cornerstoneCacheService',\n    altName: 'CornerstoneCacheService',\n    create: ({\n      servicesManager,\n    }: Types.Extensions.ExtensionParams): CornerstoneCacheService => {\n      return new CornerstoneCacheService(servicesManager);\n    },\n  };\n\n  polyDataStateCache: any = {};\n  panoramicStateCache: any = {};\n  stackImageIds: Map<string, string[]> = new Map();\n  volumeImageIds: Map<string, string[]> = new Map();\n  readonly servicesManager: ServicesManager;\n\n  constructor(servicesManager: ServicesManager) {\n    this.servicesManager = servicesManager;\n  }\n\n\n  public setPolyDataStateCache(polyDataState) {this.polyDataStateCache = polyDataState}\n  public getPolyDataStateCache(){return this.polyDataStateCache}\n\n  public setPanoramicStateCache(panoramicState, seriesUID) {this.panoramicStateCache[seriesUID] = panoramicState}\n  public getPanoramicStateCache(seriesUID){return this.panoramicStateCache[seriesUID]}\n\n  public getCacheSize() {\n    return cs3DCache.getCacheSize();\n  }\n\n  public getCacheFreeSpace() {\n    return cs3DCache.getBytesAvailable();\n  }\n\n  public async createViewportData(\n    displaySets: unknown[],\n    viewportOptions: Record<string, unknown>,\n    dataSource: unknown,\n    initialImageIndex?: number\n  ): Promise<StackViewportData | VolumeViewportData> {\n    let viewportType = viewportOptions.viewportType as string;\n\n    // Todo: Since Cornerstone 3D currently doesn't support segmentation\n    // on stack viewport, we should check if whether the the displaySets\n    // that are about to be displayed are referenced in a segmentation\n    // as a reference volume, if so, we should hang a volume viewport\n    // instead of a stack viewport\n    if (this._shouldRenderSegmentation(displaySets)) {\n      viewportType = 'volume';\n\n      // update viewportOptions to reflect the new viewport type\n      viewportOptions.viewportType = viewportType;\n    }\n\n    const cs3DViewportType = getCornerstoneViewportType(viewportType);\n    let viewportData: StackViewportData | VolumeViewportData;\n\n    if (cs3DViewportType === Enums.ViewportType.STACK) {\n      viewportData = await this._getStackViewportData(\n        dataSource,\n        displaySets,\n        initialImageIndex,\n        cs3DViewportType\n      );\n      // console.log('STACK VIEWPORT DATA', viewportData)\n    }\n\n    if (\n      cs3DViewportType === Enums.ViewportType.ORTHOGRAPHIC ||\n      cs3DViewportType === Enums.ViewportType.VOLUME_3D\n    ) {\n      viewportData = await this._getVolumeViewportData(\n        dataSource,\n        displaySets,\n        cs3DViewportType\n      );\n    }\n\n    viewportData.viewportType = cs3DViewportType;\n\n    return viewportData;\n  }\n\n  public async invalidateViewportData(\n    viewportData: VolumeViewportData,\n    invalidatedDisplaySetInstanceUID: string,\n    dataSource,\n    displaySetService\n  ) {\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\n      return this._getCornerstoneStackImageIds(\n        displaySetService.getDisplaySetByUID(invalidatedDisplaySetInstanceUID),\n        dataSource\n      );\n    }\n\n    // Todo: grab the volume and get the id from the viewport itself\n    const volumeId = `${VOLUME_LOADER_SCHEME}:${invalidatedDisplaySetInstanceUID}`;\n\n    const volume = cs3DCache.getVolume(volumeId);\n\n    if (volume) {\n      cs3DCache.removeVolumeLoadObject(volumeId);\n      this.volumeImageIds.delete(volumeId);\n    }\n\n    const displaySets = viewportData.data.map(({ displaySetInstanceUID }) =>\n      displaySetService.getDisplaySetByUID(displaySetInstanceUID)\n    );\n\n    const newViewportData = await this._getVolumeViewportData(\n      dataSource,\n      displaySets,\n      viewportData.viewportType\n    );\n\n    return newViewportData;\n  }\n\n  private _getStackViewportData(\n    dataSource,\n    displaySets,\n    initialImageIndex,\n    viewportType: Enums.ViewportType\n  ): StackViewportData {\n    // For Stack Viewport we don't have fusion currently\n    const displaySet = displaySets[0];\n\n    let stackImageIds = this.stackImageIds.get(\n      displaySet.displaySetInstanceUID\n    );\n\n    if (!stackImageIds) {\n      stackImageIds = this._getCornerstoneStackImageIds(displaySet, dataSource);\n      this.stackImageIds.set(displaySet.displaySetInstanceUID, stackImageIds);\n    }\n\n    const {\n      displaySetInstanceUID,\n      StudyInstanceUID,\n      isCompositeStack,\n    } = displaySet;\n\n    const StackViewportData: StackViewportData = {\n      viewportType,\n      data: {\n        StudyInstanceUID,\n        displaySetInstanceUID,\n        isCompositeStack,\n        imageIds: stackImageIds,\n      },\n    };\n\n    if (typeof initialImageIndex === 'number') {\n      StackViewportData.data.initialImageIndex = initialImageIndex;\n    }\n\n    return StackViewportData;\n  }\n\n  private async _getVolumeViewportData(\n    dataSource,\n    displaySets,\n    viewportType: Enums.ViewportType\n  ): Promise<VolumeViewportData> {\n    // Todo: Check the cache for multiple scenarios to see if we need to\n    // decache the volume data from other viewports or not\n\n    const volumeData = [];\n\n    for (const displaySet of displaySets) {\n      // Don't create volumes for the displaySets that have custom load\n      // function (e.g., SEG, RT, since they rely on the reference volumes\n      // and they take care of their own loading after they are created in their\n      // getSOPClassHandler method\n\n      if (displaySet.load && displaySet.load instanceof Function) {\n        const { userAuthenticationService } = this.servicesManager.services;\n        const headers = userAuthenticationService.getAuthorizationHeader();\n        await displaySet.load({ headers });\n\n        volumeData.push({\n          studyInstanceUID: displaySet.StudyInstanceUID,\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\n        });\n\n        // Todo: do some cache check and empty the cache if needed\n        continue;\n      }\n\n      const volumeLoaderSchema =\n        displaySet.volumeLoaderSchema ?? VOLUME_LOADER_SCHEME;\n\n      const volumeId = `${volumeLoaderSchema}:${displaySet.displaySetInstanceUID}`;\n\n      let volumeImageIds = this.volumeImageIds.get(\n        displaySet.displaySetInstanceUID\n      );\n\n      let volume = cs3DCache.getVolume(volumeId);\n\n      if (!volumeImageIds || !volume) {\n        volumeImageIds = this._getCornerstoneVolumeImageIds(\n          displaySet,\n          dataSource\n        );\n\n        volume = await volumeLoader.createAndCacheVolume(volumeId, {\n          imageIds: volumeImageIds,\n        });\n\n        this.volumeImageIds.set(\n          displaySet.displaySetInstanceUID,\n          volumeImageIds\n        );\n      }\n\n      volumeData.push({\n        StudyInstanceUID: displaySet.StudyInstanceUID,\n        displaySetInstanceUID: displaySet.displaySetInstanceUID,\n        volume,\n        volumeId,\n        imageIds: volumeImageIds,\n      });\n    }\n\n    return {\n      viewportType,\n      data: volumeData,\n    };\n  }\n\n  private _shouldRenderSegmentation(displaySets) {\n    const { segmentationService } = this.servicesManager.services;\n\n    const viewportDisplaySetInstanceUIDs = displaySets.map(\n      ({ displaySetInstanceUID }) => displaySetInstanceUID\n    );\n\n    // check inside segmentations if any of them are referencing the displaySets\n    // that are about to be displayed\n    const segmentations = segmentationService.getSegmentations();\n\n    for (const segmentation of segmentations) {\n      const segDisplaySetInstanceUID = segmentation.displaySetInstanceUID;\n\n      const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n        viewportDisplaySetInstanceUIDs,\n        segDisplaySetInstanceUID\n      );\n\n      if (shouldDisplaySeg) {\n        return true;\n      }\n    }\n  }\n\n  private _getCornerstoneStackImageIds(displaySet, dataSource): string[] {\n    return displaySet.images.map(img => {\n      return img.imageId\n    })\n    // return dataSource.getImageIdsForDisplaySet(displaySet);\n  }\n\n  private _getCornerstoneVolumeImageIds(displaySet, dataSource): string[] {\n    const stackImageIds = this._getCornerstoneStackImageIds(\n      displaySet,\n      dataSource\n    );\n\n    return stackImageIds;\n  }\n}\n\nexport default CornerstoneCacheService;\n","import CornerstoneCacheService from './CornerstoneCacheService';\n\nexport default CornerstoneCacheService;\n","const RENDERING_ENGINE_ID = 'OHIFCornerstoneRenderingEngine';\n\nexport { RENDERING_ENGINE_ID };\n","import { Types, Enums } from '@cornerstonejs/core';\nimport { Types as UITypes } from '@ohif/ui';\nimport {\n  StackViewportData,\n  VolumeViewportData,\n} from '../../types/CornerstoneCacheService';\nimport getCornerstoneBlendMode from '../../utils/getCornerstoneBlendMode';\nimport getCornerstoneOrientation from '../../utils/getCornerstoneOrientation';\nimport getCornerstoneViewportType from '../../utils/getCornerstoneViewportType';\nimport JumpPresets from '../../utils/JumpPresets';\nimport { SyncGroup } from '../SyncGroupService/SyncGroupService';\n\nexport type InitialImageOptions = {\n  index?: number;\n  preset?: JumpPresets;\n};\n\nexport type ViewportOptions = {\n  id?: string;\n  viewportType: Enums.ViewportType;\n  toolGroupId: string;\n  viewportId: string;\n  // Presentation ID to store/load presentation state from\n  presentationIds?: UITypes.PresentationIds;\n  orientation?: Enums.OrientationAxis;\n  background?: Types.Point3;\n  syncGroups?: SyncGroup[];\n  initialImageOptions?: InitialImageOptions;\n  customViewportProps?: Record<string, unknown>;\n  /*\n   * Allows drag and drop of display sets not matching viewport options, but\n   * doesn't show them initially.  Displays initially blank if no required match\n   */\n  allowUnmatchedView?: boolean;\n};\n\nexport type PublicViewportOptions = {\n  id?: string;\n  viewportType?: string;\n  toolGroupId?: string;\n  presentationIds?: UITypes.PresentationIds;\n  viewportId?: string;\n  orientation?: Enums.OrientationAxis;\n  background?: Types.Point3;\n  syncGroups?: SyncGroup[];\n  initialImageOptions?: InitialImageOptions;\n  customViewportProps?: Record<string, unknown>;\n  allowUnmatchedView?: boolean;\n};\n\nexport type DisplaySetSelector = {\n  id?: string;\n  options?: PublicDisplaySetOptions;\n};\n\nexport type PublicDisplaySetOptions = {\n  /** The display set options can have an id in order to distinguish\n   * it from other similar items.\n   */\n  id?: string;\n  voi?: VOI;\n  voiInverted?: boolean;\n  blendMode?: string;\n  slabThickness?: number;\n  colormap?: string;\n  displayPreset?: string;\n};\n\nexport type DisplaySetOptions = {\n  id?: string;\n  voi?: VOI;\n  voiInverted: boolean;\n  blendMode?: Enums.BlendModes;\n  slabThickness?: number;\n  colormap?: string;\n  displayPreset?: string;\n};\n\ntype VOI = {\n  windowWidth: number;\n  windowCenter: number;\n};\n\nexport type DisplaySet = {\n  displaySetInstanceUID: string;\n};\n\nconst STACK = 'stack';\nconst DEFAULT_TOOLGROUP_ID = 'default';\n\n// Return true if the data contains the given display set UID OR the imageId\n// if it is a composite object.\nconst dataContains = (\n  data,\n  displaySetUID: string,\n  imageId?: string\n): boolean => {\n  if (data.displaySetInstanceUID === displaySetUID) return true;\n  if (imageId && data.isCompositeStack && data.imageIds) {\n    return !!data.imageIds.find(dataId => dataId === imageId);\n  }\n  return false;\n};\n\nclass ViewportInfo {\n  private viewportId = '';\n  private viewportIndex: number;\n  private element: HTMLDivElement;\n  private viewportOptions: ViewportOptions;\n  private displaySetOptions: Array<DisplaySetOptions>;\n  private viewportData: StackViewportData | VolumeViewportData;\n  private renderingEngineId: string;\n\n  constructor(viewportIndex: number, viewportId: string) {\n    this.viewportIndex = viewportIndex;\n    this.viewportId = viewportId;\n    this.setPublicViewportOptions({});\n    this.setPublicDisplaySetOptions([{}]);\n  }\n\n  /**\n   * Return true if the viewport contains the given display set UID,\n   * OR if it is a composite stack and contains the given imageId\n   */\n  public contains(displaySetUID: string, imageId: string): boolean {\n    if (!this.viewportData?.data) return false;\n\n    if (this.viewportData.data.length) {\n      return !!this.viewportData.data.find(data =>\n        dataContains(data, displaySetUID, imageId)\n      );\n    }\n    return dataContains(this.viewportData.data, displaySetUID, imageId);\n  }\n\n  public destroy = (): void => {\n    this.element = null;\n    this.viewportData = null;\n    this.viewportOptions = null;\n    this.displaySetOptions = null;\n  };\n\n  public setRenderingEngineId(renderingEngineId: string): void {\n    this.renderingEngineId = renderingEngineId;\n  }\n\n  public getRenderingEngineId(): string {\n    return this.renderingEngineId;\n  }\n\n  public setViewportId(viewportId: string): void {\n    this.viewportId = viewportId;\n  }\n  public setViewportIndex(viewportIndex: number): void {\n    this.viewportIndex = viewportIndex;\n  }\n\n  public setElement(element: HTMLDivElement): void {\n    this.element = element;\n  }\n\n  public setViewportData(\n    viewportData: StackViewportData | VolumeViewportData\n  ): void {\n    this.viewportData = viewportData;\n  }\n\n  public getViewportData(): StackViewportData | VolumeViewportData {\n    return this.viewportData;\n  }\n\n  public getViewportIndex(): number {\n    return this.viewportIndex;\n  }\n\n  public getElement(): HTMLDivElement {\n    return this.element;\n  }\n\n  public getViewportId(): string {\n    return this.viewportId;\n  }\n\n  public setPublicDisplaySetOptions(\n    publicDisplaySetOptions: PublicDisplaySetOptions[] | DisplaySetSelector[]\n  ): void {\n    // map the displaySetOptions and check if they are undefined then set them to default values\n    const displaySetOptions = this.mapDisplaySetOptions(\n      publicDisplaySetOptions\n    );\n\n    this.setDisplaySetOptions(displaySetOptions);\n  }\n\n  public hasDisplaySet(displaySetInstanceUID: string): boolean {\n    // Todo: currently this does not work for non image & referenceImage displaySets.\n    // Since SEG and other derived displaySets are loaded in a different way, and not\n    // via cornerstoneViewportService\n    let viewportData = this.getViewportData();\n\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\n      viewportData = viewportData as VolumeViewportData;\n      return viewportData.data.some(\n        ({ displaySetInstanceUID: dsUID }) => dsUID === displaySetInstanceUID\n      );\n    }\n\n    viewportData = viewportData as StackViewportData;\n    return viewportData.data.displaySetInstanceUID === displaySetInstanceUID;\n  }\n\n  public setPublicViewportOptions(\n    viewportOptionsEntry: PublicViewportOptions\n  ): void {\n    let viewportType = viewportOptionsEntry.viewportType;\n    const {\n      toolGroupId = DEFAULT_TOOLGROUP_ID,\n      presentationIds,\n    } = viewportOptionsEntry;\n    let orientation;\n\n    if (!viewportType) {\n      viewportType = getCornerstoneViewportType(STACK);\n    } else {\n      viewportType = getCornerstoneViewportType(\n        viewportOptionsEntry.viewportType\n      );\n    }\n\n    // map SAGITTAL, AXIAL, CORONAL orientation to be used by cornerstone\n    if (viewportOptionsEntry.viewportType?.toLowerCase() !== STACK) {\n      orientation = getCornerstoneOrientation(viewportOptionsEntry.orientation);\n    }\n\n    if (!toolGroupId) {\n      toolGroupId = DEFAULT_TOOLGROUP_ID;\n    }\n\n    this.setViewportOptions({\n      ...viewportOptionsEntry,\n      viewportId: this.viewportId,\n      viewportType: viewportType as Enums.ViewportType,\n      orientation,\n      toolGroupId,\n      presentationIds,\n    });\n  }\n\n  public setViewportOptions(viewportOptions: ViewportOptions): void {\n    this.viewportOptions = viewportOptions;\n  }\n\n  public getViewportOptions(): ViewportOptions {\n    return this.viewportOptions;\n  }\n\n  public setDisplaySetOptions(\n    displaySetOptions: Array<DisplaySetOptions>\n  ): void {\n    this.displaySetOptions = displaySetOptions;\n  }\n\n  public getSyncGroups(): SyncGroup[] {\n    this.viewportOptions.syncGroups ||= [];\n    return this.viewportOptions.syncGroups;\n  }\n\n  public getDisplaySetOptions(): Array<DisplaySetOptions> {\n    return this.displaySetOptions;\n  }\n\n  public getViewportType(): Enums.ViewportType {\n    return this.viewportOptions.viewportType || Enums.ViewportType.STACK;\n  }\n\n  public getToolGroupId(): string {\n    return this.viewportOptions.toolGroupId;\n  }\n\n  public getBackground(): Types.Point3 {\n    return this.viewportOptions.background || [0, 0, 0];\n  }\n\n  public getOrientation(): Enums.OrientationAxis {\n    return this.viewportOptions.orientation;\n  }\n\n  public getInitialImageOptions(): InitialImageOptions {\n    return this.viewportOptions.initialImageOptions;\n  }\n\n  // Handle incoming public display set options or a display set select\n  // with a contained options.\n  private mapDisplaySetOptions(\n    options: PublicDisplaySetOptions[] | DisplaySetSelector[] = [{}]\n  ): Array<DisplaySetOptions> {\n    const displaySetOptions: Array<DisplaySetOptions> = [];\n\n    options.forEach(item => {\n      let option = item?.options || item;\n      if (!option) {\n        option = {\n          blendMode: undefined,\n          slabThickness: undefined,\n          colormap: undefined,\n          voi: {},\n          voiInverted: false,\n        };\n      }\n      const blendMode = getCornerstoneBlendMode(option.blendMode);\n\n      displaySetOptions.push({\n        voi: option.voi,\n        voiInverted: option.voiInverted,\n        colormap: option.colormap,\n        slabThickness: option.slabThickness,\n        blendMode,\n        displayPreset: option.displayPreset,\n      });\n    });\n\n    return displaySetOptions;\n  }\n}\n\nexport default ViewportInfo;\n","import { Enums } from '@cornerstonejs/core';\n\nconst AXIAL = 'axial';\nconst SAGITTAL = 'sagittal';\nconst CORONAL = 'coronal';\n\nexport default function getCornerstoneOrientation(\n  orientation: string\n): Enums.OrientationAxis {\n  if (orientation) {\n    switch (orientation.toLowerCase()) {\n      case AXIAL:\n        return Enums.OrientationAxis.AXIAL;\n      case SAGITTAL:\n        return Enums.OrientationAxis.SAGITTAL;\n      case CORONAL:\n        return Enums.OrientationAxis.CORONAL;\n      default:\n        return Enums.OrientationAxis.ACQUISITION;\n    }\n  }\n\n  return Enums.OrientationAxis.ACQUISITION;\n}\n","import { Enums } from '@cornerstonejs/core';\n\nconst MIP = 'mip';\n\nexport default function getCornerstoneBlendMode(\n  blendMode: string\n): Enums.BlendModes {\n  if (!blendMode) {\n    return Enums.BlendModes.COMPOSITE;\n  }\n\n  if (blendMode.toLowerCase() === MIP) {\n    return Enums.BlendModes.MAXIMUM_INTENSITY_BLEND;\n  }\n\n  throw new Error();\n}\n","/**\n * Jump Presets - This enum defines the 3 jump states which are available\n * to be used with the jumpToSlice utility function.\n */\nenum JumpPresets {\n  /** Jumps to first slice */\n  First = 'first',\n  /** Jumps to last slice */\n  Last = 'last',\n  /** Jumps to the middle slice */\n  Middle = 'middle',\n}\n\nexport default JumpPresets;\n","import { PubSubService, ServicesManager } from '@ohif/core';\nimport * as OhifTypes from '@ohif/core/types';\nimport {\n  RenderingEngine,\n  StackViewport,\n  Types,\n  getRenderingEngine,\n  utilities as csUtils,\n  VolumeViewport,\n  VolumeViewport3D,\n  cache,\n  utilities,\n  CONSTANTS,\n  Enums as csEnums, getEnabledElement,\n  metaData\n} from '@cornerstonejs/core';\n\nimport {\n  utilities as csToolsUtils,\n  Enums as csToolsEnums,\n} from '@cornerstonejs/tools';\nimport { IViewportService } from './IViewportService';\nimport { RENDERING_ENGINE_ID } from './constants';\nimport ViewportInfo, {\n  ViewportOptions,\n  DisplaySetOptions,\n  PublicViewportOptions,\n} from './Viewport';\nimport {\n  StackViewportData,\n  VolumeViewportData,\n} from '../../types/CornerstoneCacheService';\nimport { Presentation, Presentations } from '../../types/Presentation';\n\nimport JumpPresets from '../../utils/JumpPresets';\nimport vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\n\nimport {applyPreset} from \"@cornerstonejs/core/dist/cjs/utilities\";\nimport vtkActor from \"@kitware/vtk.js/Rendering/Core/Actor\";\nimport vtkVolume from \"@kitware/vtk.js/Rendering/Core/Volume\";\nimport vtkVolumeMapper from \"@kitware/vtk.js/Rendering/Core/VolumeMapper\";\nimport vtkColorTransferFunction from \"@kitware/vtk.js/Rendering/Core/ColorTransferFunction\";\nimport vtkPiecewiseFunction from \"@kitware/vtk.js/Common/DataModel/PiecewiseFunction\";\nimport vtkImageMarchingCubes from \"@kitware/vtk.js/Filters/General/ImageMarchingCubes\"\nimport vtkMapper from \"@kitware/vtk.js/Rendering/Core/Mapper\";\nimport vtkSphereSource from \"@kitware/vtk.js/Filters/Sources/SphereSource\";\nimport vtkImageCropFilter from \"@kitware/vtk.js/Filters/General/ImageCropFilter\";\n\n\nconst EVENTS = {\n  VIEWPORT_DATA_CHANGED:\n    'event::cornerstoneViewportService:viewportDataChanged',\n};\n\n/**\n * Handles cornerstone viewport logic including enabling, disabling, and\n * updating the viewport.\n */\nclass CornerstoneViewportService extends PubSubService\n  implements IViewportService {\n  static REGISTRATION = {\n    name: 'cornerstoneViewportService',\n    altName: 'CornerstoneViewportService',\n    create: ({\n      servicesManager,\n    }: OhifTypes.Extensions.ExtensionParams): CornerstoneViewportService => {\n      return new CornerstoneViewportService(servicesManager);\n    },\n  };\n\n  renderingEngine: Types.IRenderingEngine | null;\n  viewportsInfo: Map<number, ViewportInfo> = new Map();\n  viewportsById: Map<string, ViewportInfo> = new Map();\n  viewportGridResizeObserver: ResizeObserver | null;\n  viewportsDisplaySets: Map<string, string[]> = new Map();\n\n  // Some configs\n  enableResizeDetector: true;\n  resizeRefreshRateMs: 200;\n  resizeRefreshMode: 'debounce';\n  servicesManager = null;\n\n  constructor(servicesManager: ServicesManager) {\n    super(EVENTS);\n    this.renderingEngine = null;\n    this.viewportGridResizeObserver = null;\n    this.servicesManager = servicesManager;\n  }\n\n  /**\n   * Adds the HTML element to the viewportService\n   * @param {*} viewportIndex\n   * @param {*} elementRef\n   */\n  public enableViewport(\n    viewportIndex: number,\n    viewportOptions: PublicViewportOptions,\n    elementRef: HTMLDivElement\n  ): void {\n    // Use the provided viewportId\n    // Not providing a viewportId is frowned upon because it does weird things\n    // on moving them around, but it does mostly work.\n    if (!viewportOptions.viewportId) {\n      console.warn('Should provide viewport id externally', viewportOptions);\n      viewportOptions.viewportId =\n        this.getViewportId(viewportIndex) || `viewport-${viewportIndex}`;\n    }\n    const { viewportId } = viewportOptions;\n    const viewportInfo = new ViewportInfo(viewportIndex, viewportId);\n\n    if (!viewportInfo.viewportId) {\n      throw new Error('Should have viewport ID afterwards');\n    }\n\n\n    viewportInfo.setElement(elementRef);\n    this.viewportsInfo.set(viewportIndex, viewportInfo);\n    this.viewportsById.set(viewportId, viewportInfo);\n  }\n\n  public getViewportIds(): string[] {\n    const viewportIds = [];\n\n    this.viewportsInfo.forEach(viewportInfo => {\n      viewportIds.push(viewportInfo.getViewportId());\n    });\n\n    return viewportIds;\n  }\n\n  public getViewportId(viewportIndex: number): string {\n    return this.viewportsInfo[viewportIndex]?.viewportId;\n  }\n\n  /**\n   * It retrieves the renderingEngine if it does exist, or creates one otherwise\n   * @returns {RenderingEngine} rendering engine\n   */\n  public getRenderingEngine() {\n    // get renderingEngine from cache if it exists\n    const renderingEngine = getRenderingEngine(RENDERING_ENGINE_ID);\n\n    if (renderingEngine) {\n      this.renderingEngine = renderingEngine;\n      return this.renderingEngine;\n    }\n\n    if (!renderingEngine || renderingEngine.hasBeenDestroyed) {\n      this.renderingEngine = new RenderingEngine(RENDERING_ENGINE_ID);\n    }\n\n    return this.renderingEngine;\n  }\n\n  /**\n   * It triggers the resize on the rendering engine.\n   */\n  public resize() {\n    const immediate = true;\n    const keepCamera = true;\n\n    this.renderingEngine.resize(immediate, keepCamera);\n    this.renderingEngine.render();\n  }\n\n  /**\n   * Removes the viewport from cornerstone, and destroys the rendering engine\n   */\n  public destroy() {\n    this._removeResizeObserver();\n    this.viewportGridResizeObserver = null;\n    try {\n      this.renderingEngine?.destroy?.();\n    } catch (e) {\n      console.warn('Rendering engine not destroyed', e);\n    }\n    this.viewportsDisplaySets.clear();\n    this.renderingEngine = null;\n    cache.purgeCache();\n  }\n\n  /**\n   * Disables the viewport inside the renderingEngine, if no viewport is left\n   * it destroys the renderingEngine.\n   *\n   * This is called when the element goes away entirely - with new viewportId's\n   * created for every new viewport, this will be called whenever the set of\n   * viewports is changed, but NOT when the viewport position changes only.\n   *\n   * @param viewportIndex\n   */\n  public disableElement(viewportIndex: number): void {\n    const viewportInfo = this.viewportsInfo.get(viewportIndex);\n    if (!viewportInfo) {\n      return;\n    }\n\n    const viewportId = viewportInfo.getViewportId();\n\n    this.renderingEngine && this.renderingEngine.disableElement(viewportId);\n\n    this.viewportsInfo.get(viewportIndex).destroy();\n    this.viewportsInfo.delete(viewportIndex);\n    this.viewportsById.delete(viewportId);\n  }\n\n  public setPresentations(viewport, presentations?: Presentations): void {\n    const properties = presentations?.lutPresentation?.properties;\n    if (properties) viewport.setProperties(properties);\n    const camera = presentations?.positionPresentation?.camera;\n    if (camera) viewport.setCamera(camera);\n  }\n\n  public getPresentation(viewportIndex: number): Presentation {\n    const viewportInfo = this.viewportsInfo.get(viewportIndex);\n    if (!viewportInfo) return;\n    const { viewportType, presentationIds } = viewportInfo.getViewportOptions();\n\n    const csViewport = this.getCornerstoneViewportByIndex(viewportIndex);\n    if (!csViewport) return;\n\n    const properties = csViewport.getProperties();\n    if (properties.isComputedVOI) {\n      delete properties.voiRange;\n      delete properties.VOILUTFunction;\n    }\n    const initialImageIndex = csViewport.getCurrentImageIdIndex();\n    const camera = csViewport.getCamera();\n    return {\n      presentationIds,\n      viewportType:\n        !viewportType || viewportType === 'stack' ? 'stack' : 'volume',\n      properties,\n      initialImageIndex,\n      camera,\n    };\n  }\n\n  /**\n   * Uses the renderingEngine to enable the element for the given viewport index\n   * and sets the displaySet data to the viewport\n   * @param {*} viewportIndex\n   * @param {*} displaySet\n   * @param {*} dataSource\n   * @returns\n   */\n  public setViewportData(\n    viewportIndex: number,\n    viewportData: StackViewportData | VolumeViewportData,\n    publicViewportOptions: PublicViewportOptions,\n    publicDisplaySetOptions: DisplaySetOptions[],\n    presentations?: Presentations\n  ): void {\n    console.log('setViewportData', viewportIndex, viewportData, publicViewportOptions, publicDisplaySetOptions, presentations)\n    const renderingEngine = this.getRenderingEngine();\n    const viewportId =\n      publicViewportOptions.viewportId || this.getViewportId(viewportIndex);\n    if (!viewportId) {\n      throw new Error('Must define viewportId externally');\n    }\n\n    const viewportInfo = this.viewportsById.get(viewportId);\n    console.log('ID', viewportId, viewportIndex, publicViewportOptions.viewportId)\n\n    if (!viewportInfo) {\n      throw new Error('Viewport info not defined');\n    }\n\n    // If the viewport has moved index, then record the new index\n    if (viewportInfo.viewportIndex !== viewportIndex) {\n      this.viewportsInfo.delete(viewportInfo.viewportIndex);\n      this.viewportsInfo.set(viewportIndex, viewportInfo);\n      viewportInfo.viewportIndex = viewportIndex;\n    }\n\n    viewportInfo.setRenderingEngineId(renderingEngine.id);\n\n    const {\n      viewportOptions,\n      displaySetOptions,\n    } = this._getViewportAndDisplaySetOptions(\n      publicViewportOptions,\n      publicDisplaySetOptions,\n      viewportInfo\n    );\n\n    viewportInfo.setViewportOptions(viewportOptions);\n    viewportInfo.setDisplaySetOptions(displaySetOptions);\n    viewportInfo.setViewportData(viewportData);\n\n    const element = viewportInfo.getElement();\n    const type = viewportInfo.getViewportType();\n    const background = viewportInfo.getBackground();\n    const orientation = viewportInfo.getOrientation();\n\n    const viewportInput: Types.PublicViewportInput = {\n      viewportId,\n      element,\n      type,\n      defaultOptions: {\n        background,\n        orientation,\n      },\n    };\n\n    // Todo: this is not optimal at all, we are re-enabling the already enabled\n    // element which is not what we want. But enabledElement as part of the\n    // renderingEngine is designed to be used like this. This will trigger\n    // ENABLED_ELEMENT again and again, which will run onEnableElement callbacks\n    renderingEngine.enableElement(viewportInput);\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    this._setDisplaySets(viewport, viewportData, viewportInfo, presentations);\n\n    // The broadcast event here ensures that listeners have a valid, up to date\n    // viewport to access.  Doing it too early can result in exceptions or\n    // invalid data.\n    this._broadcastEvent(this.EVENTS.VIEWPORT_DATA_CHANGED, {\n      viewportData: viewportData,\n      viewportIndex,\n      viewportId,\n    });\n  }\n\n  public getCornerstoneViewport(\n    viewportId: string\n  ): Types.IStackViewport | Types.IVolumeViewport | null {\n    const viewportInfo = this.getViewportInfo(viewportId);\n\n    if (\n      !viewportInfo ||\n      !this.renderingEngine ||\n      this.renderingEngine.hasBeenDestroyed\n    ) {\n      return null;\n    }\n\n    const viewport = this.renderingEngine.getViewport(viewportId);\n\n    return viewport;\n  }\n\n  public getCornerstoneViewportByIndex(\n    viewportIndex: number\n  ): Types.IStackViewport | Types.IVolumeViewport | null {\n    const viewportInfo = this.getViewportInfoByIndex(viewportIndex);\n\n    if (\n      !viewportInfo ||\n      !this.renderingEngine ||\n      this.renderingEngine.hasBeenDestroyed\n    ) {\n      return null;\n    }\n\n    const viewport = this.renderingEngine.getViewport(\n      viewportInfo.getViewportId()\n    );\n\n    return viewport;\n  }\n\n  /**\n   * Returns the viewportIndex for the provided viewportId\n   * @param {string} viewportId - the viewportId\n   * @returns {number} - the viewportIndex\n   */\n  public getViewportInfoByIndex(viewportIndex: number): ViewportInfo {\n    return this.viewportsInfo.get(viewportIndex);\n  }\n\n  public getViewportInfo(viewportId: string): ViewportInfo {\n    // @ts-ignore\n    for (const [index, viewport] of this.viewportsInfo.entries()) {\n      if (viewport.getViewportId() === viewportId) {\n        return viewport;\n      }\n    }\n    return null;\n  }\n\n  _setStackViewport(\n    viewport: Types.IStackViewport,\n    viewportData: StackViewportData,\n    viewportInfo: ViewportInfo,\n    presentations: Presentations\n  ): void {\n    const displaySetOptions = viewportInfo.getDisplaySetOptions();\n\n    const {\n      imageIds,\n      initialImageIndex,\n      displaySetInstanceUID,\n    } = viewportData.data;\n\n    this.viewportsDisplaySets.set(viewport.id, [displaySetInstanceUID]);\n\n    let initialImageIndexToUse =\n      presentations?.positionPresentation?.initialImageIndex ??\n      initialImageIndex;\n\n    if (\n      initialImageIndexToUse === undefined ||\n      initialImageIndexToUse === null\n    ) {\n      initialImageIndexToUse =\n        this._getInitialImageIndexForViewport(viewportInfo, imageIds) || 0;\n    }\n    // console.log('INITIAL IMAGE INDEX TO USE', initialImageIndexToUse)\n\n    const properties = { ...presentations.lutPresentation?.properties };\n    if (!presentations.lutPresentation?.properties) {\n      const { voi, voiInverted } = displaySetOptions[0];\n      if (voi && (voi.windowWidth || voi.windowCenter)) {\n        const { lower, upper } = csUtils.windowLevel.toLowHighRange(\n          voi.windowWidth,\n          voi.windowCenter\n        );\n        properties.voiRange = { lower, upper };\n      }\n\n      if (voiInverted !== undefined) {\n        properties.invert = voiInverted;\n      }\n    }\n\n    viewport.setStack(imageIds, initialImageIndexToUse).then(() => {\n      viewport.setProperties(properties);\n      const camera = presentations.positionPresentation?.camera;\n      if (camera) viewport.setCamera(camera);\n    });\n  }\n\n  private _getInitialImageIndexForViewport(\n    viewportInfo: ViewportInfo,\n    imageIds?: string[]\n  ): number {\n    const initialImageOptions = viewportInfo.getInitialImageOptions();\n\n    if (!initialImageOptions) {\n      return;\n    }\n\n    const { index, preset } = initialImageOptions;\n    const viewportType = viewportInfo.getViewportType();\n\n    let numberOfSlices;\n    if (viewportType === csEnums.ViewportType.STACK) {\n      numberOfSlices = imageIds.length;\n    } else if (viewportType === csEnums.ViewportType.ORTHOGRAPHIC) {\n      const viewport = this.getCornerstoneViewport(\n        viewportInfo.getViewportId()\n      );\n      const imageSliceData = csUtils.getImageSliceDataForVolumeViewport(\n        viewport\n      );\n\n      if (!imageSliceData) {\n        return;\n      }\n\n      ({ numberOfSlices } = imageSliceData);\n    } else {\n      return;\n    }\n\n    return this._getInitialImageIndex(numberOfSlices, index, preset);\n  }\n\n  _getInitialImageIndex(\n    numberOfSlices: number,\n    imageIndex?: number,\n    preset?: JumpPresets\n  ): number {\n    const lastSliceIndex = numberOfSlices - 1;\n\n    if (imageIndex !== undefined) {\n      return csToolsUtils.clip(imageIndex, 0, lastSliceIndex);\n    }\n\n    if (preset === JumpPresets.First) {\n      return 0;\n    }\n\n    if (preset === JumpPresets.Last) {\n      return lastSliceIndex;\n    }\n\n    if (preset === JumpPresets.Middle) {\n      // Note: this is a simple but yet very important formula.\n      // since viewport reset works with the middle slice\n      // if the below formula is not correct, on a viewport reset\n      // it will jump to a different slice than the middle one which\n      // was the initial slice, and we have some tools such as Crosshairs\n      // which rely on a relative camera modifications and those will break.\n      return lastSliceIndex % 2 === 0\n        ? lastSliceIndex / 2\n        : (lastSliceIndex + 1) / 2;\n    }\n\n    return 0;\n  }\n\n  async _setVolumeViewport(\n    viewport: Types.IVolumeViewport,\n    viewportData: VolumeViewportData,\n    viewportInfo: ViewportInfo,\n    presentations: Presentations\n  ): Promise<void> {\n    // TODO: We need to overhaul the way data sources work so requests can be made\n    // async. I think we should follow the image loader pattern which is async and\n    // has a cache behind it.\n    // The problem is that to set this volume, we need the metadata, but the request is\n    // already in-flight, and the promise is not cached, so we have no way to wait for\n    // it and know when it has fully arrived.\n    // loadStudyMetadata(StudyInstanceUID) => Promise([instances for study])\n    // loadSeriesMetadata(StudyInstanceUID, SeriesInstanceUID) => Promise([instances for series])\n    // If you call loadStudyMetadata and it's not in the DicomMetadataStore cache, it should fire\n    // a request through the data source?\n    // (This call may or may not create sub-requests for series metadata)\n    const volumeInputArray = [];\n    const displaySetOptionsArray = viewportInfo.getDisplaySetOptions();\n    const { hangingProtocolService } = this.servicesManager.services;\n\n    const volumeToLoad = [];\n    const displaySetInstanceUIDs = [];\n\n    for (const [index, data] of viewportData.data.entries()) {\n      const { volume, imageIds, displaySetInstanceUID } = data;\n\n      displaySetInstanceUIDs.push(displaySetInstanceUID);\n\n      if (!volume) {\n        console.log('Volume display set not found');\n        continue;\n      }\n\n      volumeToLoad.push(volume);\n\n      const displaySetOptions = displaySetOptionsArray[index];\n      const { volumeId } = volume;\n\n      volumeInputArray.push({\n        imageIds,\n        volumeId,\n        blendMode: displaySetOptions.blendMode,\n        slabThickness: this._getSlabThickness(displaySetOptions, volumeId),\n      });\n    }\n\n    this.viewportsDisplaySets.set(viewport.id, displaySetInstanceUIDs);\n\n    if (\n      hangingProtocolService.hasCustomImageLoadStrategy() &&\n      !hangingProtocolService.customImageLoadPerformed\n    ) {\n      // delegate the volume loading to the hanging protocol service if it has a custom image load strategy\n      return hangingProtocolService.runImageLoadStrategy({\n        viewportId: viewport.id,\n        volumeInputArray,\n      });\n    }\n\n    volumeToLoad.forEach(volume => {\n      if (!volume.loadStatus.loaded && !volume.loadStatus.loading) {\n        volume.load();\n      }\n    });\n\n    // This returns the async continuation only\n    return this.setVolumesForViewport(\n      viewport,\n      volumeInputArray,\n      presentations\n    );\n  }\n\n  public async setVolumesForViewport(\n    viewport,\n    volumeInputArray,\n    presentations\n  ) {\n    const {\n      displaySetService,\n      toolGroupService,\n    } = this.servicesManager.services;\n\n    console.log('SET VOLUMES FOR VIEWPORT', volumeInputArray, viewport, viewport.id)\n\n    const viewportInfo = this.getViewportInfo(viewport.id);\n    const displaySetOptions = viewportInfo.getDisplaySetOptions();\n\n    // Todo: use presentations states\n    const volumesProperties = volumeInputArray.map((volumeInput, index) => {\n      const { volumeId } = volumeInput;\n      const displaySetOption = displaySetOptions[index];\n      const { voi, voiInverted, colormap, displayPreset } = displaySetOption;\n      const properties = {};\n\n      if (voi && (voi.windowWidth || voi.windowCenter)) {\n        const { lower, upper } = csUtils.windowLevel.toLowHighRange(\n          voi.windowWidth,\n          voi.windowCenter\n        );\n        properties.voiRange = { lower, upper };\n      }\n\n      if (voiInverted !== undefined) {\n        properties.invert = voiInverted;\n      }\n\n      if (colormap !== undefined) {\n        properties.colormap = colormap;\n      }\n\n      if (displayPreset !== undefined) {\n        properties.preset = displayPreset;\n      }\n\n      return { properties, volumeId };\n    });\n\n    //28 -3024 0 0 0 -901 0 0 0 -900 0.92 0.74 0.70 450 1\n    const customPreset =   {\n          name: 'CT-Custom',\n          gradientOpacity: '4 -3024 0.5 1000 0.5',\n          scalarOpacity:\n              '12 -3024 0 -801 0 -800 0.05 449 0.05 450 1',\n          colorTransfer:\n              '28 -3024 0 0 0 -801 0 0 0 -800 0.92 0.74 0.70 448 0.92 0.74 0.70 449 0.5 0.5 0.1 1224 1 1 1',\n          interpolation: '1',\n    }\n\n    // console.log('VIA', volumeInputArray, viewport)\n\n    if(viewport.type === 'volume3d'){\n      let actorEntries = viewport.getActors()\n\n      if(actorEntries.length === 0){\n        // TODO Ensure there are non 'volume3d' viewports\n        const waitLoading = () => new Promise<void>((resolve, reject) => {\n            const imageVolume = cache.getVolume(volumeInputArray[0].volumeId);\n            if (imageVolume && imageVolume.loadStatus.loaded) {\n                resolve()\n            } else {\n                setTimeout(() => waitLoading().then(resolve), 100);\n            }\n        });\n        await waitLoading();\n        let volumeEntries = []\n        viewport.setVolumes(volumeInputArray).then(() => {\n          actorEntries = viewport.getActors()\n          actorEntries.forEach(obj => {\n            const inputData = obj.actor.getMapper().getInputData()\n            const actor = vtkVolume.newInstance();\n            const mapper = vtkVolumeMapper.newInstance();\n            mapper.setInputData(inputData);\n            mapper.setSampleDistance(1);\n            actor.setMapper(mapper);\n\n            const ctfun = vtkColorTransferFunction.newInstance();\n            ctfun.addRGBPoint(-3024, 0, 0, 0);\n            ctfun.addRGBPoint(-801, 0, 0, 0);\n            ctfun.addRGBPoint(-800, 0.92, 0.74, 0.7);\n            ctfun.addRGBPoint(448, 0.92, 0.74, 0.7);\n            ctfun.addRGBPoint(449, 0.5, 0.5, 0.1);\n            ctfun.addRGBPoint(1224, 1, 1, 1);\n\n            const ofun = vtkPiecewiseFunction.newInstance();\n            ofun.addPoint(-3024, 0);\n            ofun.addPoint(-801, 0);\n            ofun.addPoint(-800, 0.05);\n            ofun.addPoint(449, 0.05);\n            ofun.addPoint(450, 1);\n            ofun.addPoint(1299, 1);\n            ofun.addPoint(1300, 1)\n\n            actor.getProperty().setRGBTransferFunction(0, ctfun);\n            actor.getProperty().setScalarOpacity(0, ofun);\n            actor.getProperty().setScalarOpacityUnitDistance(0, 4.5);\n            actor.getProperty().setInterpolationTypeToLinear();\n            actor.getProperty().setUseGradientOpacity(0, true);\n            actor.getProperty().setGradientOpacityMinimumValue(0, 15);\n            actor.getProperty().setGradientOpacityMinimumOpacity(0, 0.0);\n            actor.getProperty().setGradientOpacityMaximumValue(0, 100);\n            actor.getProperty().setGradientOpacityMaximumOpacity(0, 0.5);\n            actor.getProperty().setShade(true);\n            actor.getProperty().setAmbient(0.2);\n            actor.getProperty().setDiffuse(0.7);\n            actor.getProperty().setSpecular(0.7);\n            actor.getProperty().setSpecularPower(8.0);\n\n            obj.actor = actor\n            volumeEntries.push(obj)\n          })\n          viewport.setActors(volumeEntries)\n        });\n      }\n      else\n        viewport.setActors(actorEntries)\n    }\n      // let volumeEntry = viewport.getActor(volumeId);\n      // if (!volumeEntry) {\n      //   volumeEntry = actorEntries[0];\n      // }\n      // const inputData = volumeEntry.actor.getMapper().getInputData()\n    else\n      await viewport.setVolumes(volumeInputArray);\n\n    volumesProperties.forEach(({ properties, volumeId }) => {\n        viewport.setProperties(properties, volumeId);\n    });\n\n    this.setPresentations(viewport, presentations);\n\n    // load any secondary displaySets\n    const displaySetInstanceUIDs = this.viewportsDisplaySets.get(viewport.id);\n\n    // can be SEG or RTSTRUCT for now\n    const overlayDisplaySet = displaySetInstanceUIDs\n      .map(displaySetService.getDisplaySetByUID)\n      .find(displaySet => displaySet?.isOverlayDisplaySet);\n\n    if (overlayDisplaySet) {\n      this.addOverlayRepresentationForDisplaySet(overlayDisplaySet, viewport);\n    } else {\n      // If the displaySet is not a SEG displaySet we assume it is a primary displaySet\n      // and we can look into hydrated segmentations to check if any of them are\n      // associated with the primary displaySet\n\n      // get segmentations only returns the hydrated segmentations\n      this._addSegmentationRepresentationToToolGroupIfNecessary(\n        displaySetInstanceUIDs,\n        viewport\n      );\n    }\n\n    const toolGroup = toolGroupService.getToolGroupForViewport(viewport.id);\n    csToolsUtils.segmentation.triggerSegmentationRender(toolGroup.id);\n\n    const imageIndex = this._getInitialImageIndexForViewport(viewportInfo);\n\n    if (imageIndex !== undefined) {\n      csToolsUtils.jumpToSlice(viewport.element, {\n        imageIndex,\n      });\n    }\n    viewport.render();\n  }\n\n  private _addSegmentationRepresentationToToolGroupIfNecessary(\n    displaySetInstanceUIDs: string[],\n    viewport: any\n  ) {\n    const {\n      segmentationService,\n      toolGroupService,\n    } = this.servicesManager.services;\n\n    const toolGroup = toolGroupService.getToolGroupForViewport(viewport.id);\n\n    // this only returns hydrated segmentations\n    const segmentations = segmentationService.getSegmentations();\n\n    for (const segmentation of segmentations) {\n      const toolGroupSegmentationRepresentations =\n        segmentationService.getSegmentationRepresentationsForToolGroup(\n          toolGroup.id\n        ) || [];\n\n      // if there is already a segmentation representation for this segmentation\n      // for this toolGroup, don't bother at all\n      const isSegmentationInToolGroup = toolGroupSegmentationRepresentations.find(\n        representation => representation.segmentationId === segmentation.id\n      );\n\n      if (isSegmentationInToolGroup) {\n        continue;\n      }\n\n      // otherwise, check if the hydrated segmentations are in the same FOR\n      // as the primary displaySet, if so add the representation (since it was not there)\n      const { id: segDisplaySetInstanceUID, type } = segmentation;\n      const segFrameOfReferenceUID = this._getFrameOfReferenceUID(\n        segDisplaySetInstanceUID\n      );\n\n      let shouldDisplaySeg = false;\n\n      for (const displaySetInstanceUID of displaySetInstanceUIDs) {\n        const primaryFrameOfReferenceUID = this._getFrameOfReferenceUID(\n          displaySetInstanceUID\n        );\n\n        if (segFrameOfReferenceUID === primaryFrameOfReferenceUID) {\n          shouldDisplaySeg = true;\n          break;\n        }\n      }\n\n      if (!shouldDisplaySeg) {\n        return;\n      }\n\n      segmentationService.addSegmentationRepresentationToToolGroup(\n        toolGroup.id,\n        segmentation.id,\n        false, // already hydrated,\n        segmentation.type\n      );\n    }\n  }\n\n  private addOverlayRepresentationForDisplaySet(\n    displaySet: any,\n    viewport: any\n  ) {\n    const {\n      segmentationService,\n      toolGroupService,\n    } = this.servicesManager.services;\n\n    const { referencedVolumeId } = displaySet;\n    const segmentationId = displaySet.displaySetInstanceUID;\n\n    const toolGroup = toolGroupService.getToolGroupForViewport(viewport.id);\n\n    const representationType =\n      referencedVolumeId && cache.getVolume(referencedVolumeId) !== undefined\n        ? csToolsEnums.SegmentationRepresentations.Labelmap\n        : csToolsEnums.SegmentationRepresentations.Contour;\n\n    segmentationService.addSegmentationRepresentationToToolGroup(\n      toolGroup.id,\n      segmentationId,\n      false,\n      representationType\n    );\n  }\n\n  // Todo: keepCamera is an interim solution until we have a better solution for\n  // keeping the camera position when the viewport data is changed\n  public updateViewport(\n    viewportIndex: number,\n    viewportData,\n    presentations: Presentations,\n    keepCamera = false\n  ) {\n    const viewportInfo = this.getViewportInfoByIndex(viewportIndex);\n\n    const viewportId = viewportInfo.getViewportId();\n    const viewport = this.getCornerstoneViewport(viewportId);\n    const viewportCamera = viewport.getCamera();\n\n    if (viewport instanceof VolumeViewport) {\n      this._setVolumeViewport(viewport, viewportData, viewportInfo, presentations).then(() => {\n        if (keepCamera) {\n          viewport.setCamera(viewportCamera);\n          viewport.render();\n        }\n      });\n\n      return;\n    }\n\n    if (viewport instanceof StackViewport) {\n      this._setStackViewport(viewport, viewportData, viewportInfo, presentations);\n      return;\n    }\n  }\n\n  _setDisplaySetInURL(\n      displaySetUID: string\n  ): void {\n    //Update display set instance uid currently shown in viewports in URL (if update is necessary)\n    //So that the info can be catched in hanging protocol testsuite\n    //to show right serie in viewport loading\n\n    if(!displaySetUID) return;\n\n    const params = new URLSearchParams(window.location.search);\n    if(params.get('displaySetInstanceUID') !== displaySetUID){\n      params.set('displaySetInstanceUID', displaySetUID)\n      const newurl =  window.location.protocol + \"//\" + window.location.host +\n                      window.location.pathname + '?' + params.toString()\n      window.history.pushState({path: newurl}, '', newurl)\n    }\n  }\n\n  _setSeriesUIDInURL(\n      imageId: string\n  ): void {\n    //Update display set instance uid currently shown in viewports in URL (if update is necessary)\n    //So that the info can be catched in hanging protocol testsuite\n    //to show right serie in viewport loading\n    if(!imageId) return;\n    const seriesUID = metaData.get('generalSeriesModule', imageId).seriesInstanceUID\n    const params = new URLSearchParams(window.location.search);\n    if(params.get('seriesUID') !== seriesUID){\n      params.set('seriesUID', seriesUID)\n      const newurl =  window.location.protocol + \"//\" + window.location.host +\n          window.location.pathname + '?' + params.toString()\n      window.history.pushState({path: newurl}, '', newurl)\n    }\n  }\n\n  _setDisplaySets(\n    viewport: StackViewport | VolumeViewport,\n    viewportData: StackViewportData | VolumeViewportData,\n    viewportInfo: ViewportInfo,\n    presentations: Presentations = {}\n  ): void {\n    this._setSeriesUIDInURL(viewportData?.data[0]?.imageIds[0])\n\n    if (viewport instanceof StackViewport) {\n      this._setStackViewport(\n        viewport,\n        viewportData as StackViewportData,\n        viewportInfo,\n        presentations\n      );\n    } else if (\n      viewport instanceof VolumeViewport ||\n      viewport instanceof VolumeViewport3D\n    ) {\n      this._setVolumeViewport(\n        viewport,\n        viewportData as VolumeViewportData,\n        viewportInfo,\n        presentations\n      );\n    } else {\n      throw new Error('Unknown viewport type');\n    }\n  }\n\n  /**\n   * Removes the resize observer from the viewport element\n   */\n  _removeResizeObserver() {\n    if (this.viewportGridResizeObserver) {\n      this.viewportGridResizeObserver.disconnect();\n    }\n  }\n\n  _getSlabThickness(displaySetOptions, volumeId) {\n    const { blendMode } = displaySetOptions;\n    if (\n      blendMode === undefined ||\n      displaySetOptions.slabThickness === undefined\n    ) {\n      return;\n    }\n\n    // if there is a slabThickness set as a number then use it\n    if (typeof displaySetOptions.slabThickness === 'number') {\n      return displaySetOptions.slabThickness;\n    }\n\n    if (displaySetOptions.slabThickness.toLowerCase() === 'fullvolume') {\n      // calculate the slab thickness based on the volume dimensions\n      const imageVolume = cache.getVolume(volumeId);\n\n      const { dimensions } = imageVolume;\n      const slabThickness = Math.sqrt(\n        dimensions[0] * dimensions[0] +\n          dimensions[1] * dimensions[1] +\n          dimensions[2] * dimensions[2]\n      );\n\n      return slabThickness;\n    }\n  }\n\n  _getViewportAndDisplaySetOptions(\n    publicViewportOptions: PublicViewportOptions,\n    publicDisplaySetOptions: DisplaySetOptions[],\n    viewportInfo: ViewportInfo\n  ): {\n    viewportOptions: ViewportOptions;\n    displaySetOptions: DisplaySetOptions[];\n  } {\n    const viewportIndex = viewportInfo.getViewportIndex();\n\n    // Creating a temporary viewportInfo to handle defaults\n    const newViewportInfo = new ViewportInfo(\n      viewportIndex,\n      viewportInfo.getViewportId()\n    );\n\n    // To handle setting the default values if missing for the viewportOptions and\n    // displaySetOptions\n    newViewportInfo.setPublicViewportOptions(publicViewportOptions);\n    newViewportInfo.setPublicDisplaySetOptions(publicDisplaySetOptions);\n\n    const newViewportOptions = newViewportInfo.getViewportOptions();\n    const newDisplaySetOptions = newViewportInfo.getDisplaySetOptions();\n\n    return {\n      viewportOptions: newViewportOptions,\n      displaySetOptions: newDisplaySetOptions,\n    };\n  }\n\n  _getFrameOfReferenceUID(displaySetInstanceUID) {\n    const { displaySetService } = this.servicesManager.services;\n    const displaySet = displaySetService.getDisplaySetByUID(\n      displaySetInstanceUID\n    );\n\n    if (!displaySet) {\n      return;\n    }\n\n    if (displaySet.frameOfReferenceUID) {\n      return displaySet.frameOfReferenceUID;\n    }\n\n    if (displaySet.Modality === 'SEG') {\n      const { instance } = displaySet;\n      return instance.FrameOfReferenceUID;\n    }\n\n    if (displaySet.Modality === 'RTSTRUCT') {\n      const { instance } = displaySet;\n      return instance.ReferencedFrameOfReferenceSequence.FrameOfReferenceUID;\n    }\n\n    const { images } = displaySet;\n    if (images && images.length) {\n      return images[0].FrameOfReferenceUID;\n    }\n  }\n\n  /**\n   * Looks through the viewports to see if the specified measurement can be\n   * displayed in one of the viewports.\n   *\n   * @param measurement\n   *          The measurement that is desired to view.\n   * @param activeViewportIndex - the index that was active at the time the jump\n   *          was initiated.\n   * @return the viewportIndex to display the given measurement\n   */\n  public getViewportIndexToJump(\n    activeViewportIndex: number,\n    displaySetInstanceUID: string,\n    cameraProps: unknown\n  ): number {\n    const viewportInfo = this.viewportsInfo.get(activeViewportIndex);\n    const { referencedImageId } = cameraProps;\n    if (viewportInfo?.contains(displaySetInstanceUID, referencedImageId)) {\n      return activeViewportIndex;\n    }\n\n    return (\n      [...this.viewportsById.values()].find(viewportInfo =>\n        viewportInfo.contains(displaySetInstanceUID, referencedImageId)\n      )?.viewportIndex ?? -1\n    );\n  }\n}\n\nexport default CornerstoneViewportService;\n","import { imageLoader } from '@cornerstonejs/core';\nimport dicomImageLoader from '@cornerstonejs/dicom-image-loader';\nimport { api } from 'dicomweb-client';\nimport { DICOMWeb, errorHandler } from '@ohif/core';\n\nconst getImageId = imageObj => {\n  if (!imageObj) {\n    return;\n  }\n\n  return typeof imageObj.getImageId === 'function'\n    ? imageObj.getImageId()\n    : imageObj.url;\n};\n\nconst findImageIdOnStudies = (studies, displaySetInstanceUID) => {\n  const study = studies.find(study => {\n    const displaySet = study.displaySets.some(\n      displaySet => displaySet.displaySetInstanceUID === displaySetInstanceUID\n    );\n    return displaySet;\n  });\n  const { series = [] } = study;\n  const { instances = [] } = series[0] || {};\n  const instance = instances[0];\n\n  return getImageId(instance);\n};\n\nconst someInvalidStrings = strings => {\n  const stringsArray = Array.isArray(strings) ? strings : [strings];\n  const emptyString = string => !string;\n  let invalid = stringsArray.some(emptyString);\n  return invalid;\n};\n\nconst getImageInstance = dataset => {\n  return dataset && dataset.images && dataset.images[0];\n};\n\nconst getNonImageInstance = dataset => {\n  return dataset && dataset.instance;\n};\n\nconst getImageInstanceId = imageInstance => {\n  return getImageId(imageInstance);\n};\n\nconst fetchIt = (url, headers = DICOMWeb.getAuthorizationHeader()) => {\n  return fetch(url, headers).then(response => response.arrayBuffer());\n};\n\nconst cornerstoneRetriever = imageId => {\n  return imageLoader.loadAndCacheImage(imageId).then(image => {\n    return image && image.data && image.data.byteArray.buffer;\n  });\n};\n\nconst wadorsRetriever = (\n  url,\n  studyInstanceUID,\n  seriesInstanceUID,\n  sopInstanceUID,\n  headers = DICOMWeb.getAuthorizationHeader(),\n  errorInterceptor = errorHandler.getHTTPErrorHandler()\n) => {\n  const config = {\n    url,\n    headers,\n    errorInterceptor,\n  };\n  const dicomWeb = new api.DICOMwebClient(config);\n\n  return dicomWeb.retrieveInstance({\n    studyInstanceUID,\n    seriesInstanceUID,\n    sopInstanceUID,\n  });\n};\n\nconst getImageLoaderType = imageId => {\n  const loaderRegExp = /^\\w+\\:/;\n  const loaderType = loaderRegExp.exec(imageId);\n\n  return (\n    (loaderRegExp.lastIndex === 0 &&\n      loaderType &&\n      loaderType[0] &&\n      loaderType[0].replace(':', '')) ||\n    ''\n  );\n};\n\nclass DicomLoaderService {\n  getLocalData(dataset, studies) {\n    // Use referenced imageInstance\n    const imageInstance = getImageInstance(dataset);\n    const nonImageInstance = getNonImageInstance(dataset);\n\n    if (\n      (!imageInstance && !nonImageInstance) ||\n      !nonImageInstance.imageId.startsWith('dicomfile')\n    ) {\n      return;\n    }\n\n    const instance = imageInstance || nonImageInstance;\n\n    let imageId = getImageInstanceId(instance);\n\n    // or Try to get it from studies\n    if (someInvalidStrings(imageId)) {\n      imageId = findImageIdOnStudies(studies, dataset.displaySetInstanceUID);\n    }\n\n    if (!someInvalidStrings(imageId)) {\n      return dicomImageLoader.wadouri.loadFileRequest(imageId);\n    }\n  }\n\n  getDataByImageType(dataset) {\n    const imageInstance = getImageInstance(dataset);\n\n    if (imageInstance) {\n      const imageId = getImageInstanceId(imageInstance);\n      let getDicomDataMethod = fetchIt;\n      const loaderType = getImageLoaderType(imageId);\n\n      switch (loaderType) {\n        case 'dicomfile':\n          getDicomDataMethod = cornerstoneRetriever.bind(this, imageId);\n          break;\n        case 'wadors':\n          const url = imageInstance.getData().wadoRoot;\n          const studyInstanceUID = imageInstance.getStudyInstanceUID();\n          const seriesInstanceUID = imageInstance.getSeriesInstanceUID();\n          const sopInstanceUID = imageInstance.getSOPInstanceUID();\n          const invalidParams = someInvalidStrings([\n            url,\n            studyInstanceUID,\n            seriesInstanceUID,\n            sopInstanceUID,\n          ]);\n          if (invalidParams) {\n            return;\n          }\n\n          getDicomDataMethod = wadorsRetriever.bind(\n            this,\n            url,\n            studyInstanceUID,\n            seriesInstanceUID,\n            sopInstanceUID\n          );\n          break;\n        case 'wadouri':\n          // Strip out the image loader specifier\n          imageId = imageId.substring(imageId.indexOf(':') + 1);\n\n          if (someInvalidStrings(imageId)) {\n            return;\n          }\n          getDicomDataMethod = fetchIt.bind(this, imageId);\n          break;\n        default:\n          throw new Error(\n            `Unsupported image type: ${loaderType} for imageId: ${imageId}`\n          );\n      }\n\n      return getDicomDataMethod();\n    }\n  }\n\n  getDataByDatasetType(dataset) {\n    const {\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      SOPInstanceUID,\n      authorizationHeaders,\n      wadoRoot,\n      wadoUri,\n    } = dataset;\n    // Retrieve wadors or just try to fetch wadouri\n    if (!someInvalidStrings(wadoRoot)) {\n      return wadorsRetriever(\n        wadoRoot,\n        StudyInstanceUID,\n        SeriesInstanceUID,\n        SOPInstanceUID,\n        authorizationHeaders\n      );\n    } else if (!someInvalidStrings(wadoUri)) {\n      return fetchIt(wadoUri, { headers: authorizationHeaders });\n    }\n  }\n\n  *getLoaderIterator(dataset, studies, headers) {\n    yield this.getLocalData(dataset, studies);\n    yield this.getDataByImageType(dataset);\n    yield this.getDataByDatasetType(dataset);\n  }\n\n  findDicomDataPromise(dataset, studies, headers) {\n    dataset.authorizationHeaders = headers;\n    const loaderIterator = this.getLoaderIterator(dataset, studies);\n    // it returns first valid retriever method.\n    for (const loader of loaderIterator) {\n      if (loader) {\n        return loader;\n      }\n    }\n\n    // in case of no valid loader\n    throw new Error('Invalid dicom data loader');\n  }\n}\n\nconst dicomLoaderService = new DicomLoaderService();\n\nexport default dicomLoaderService;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","export default function getHandlesFromPoints(points) {\n  if (points.longAxis && points.shortAxis) {\n    const handles = {};\n    handles.start = points.longAxis[0];\n    handles.end = points.longAxis[1];\n    handles.perpendicularStart = points.longAxis[0];\n    handles.perpendicularEnd = points.longAxis[1];\n    return handles;\n  }\n\n  return points\n    .map((p, i) => (i % 10 === 0 ? { start: p } : { end: p }))\n    .reduce((obj, item) => Object.assign(obj, { ...item }), {});\n}\n","import React from 'react';\nimport * as cornerstone from '@cornerstonejs/core';\nimport * as cornerstoneTools from '@cornerstonejs/tools';\nimport {\n  Enums as cs3DEnums,\n  imageLoadPoolManager,\n  imageRetrievalPoolManager,\n} from '@cornerstonejs/core';\nimport { Enums as cs3DToolsEnums } from '@cornerstonejs/tools';\nimport { ServicesManager, Types } from '@ohif/core';\n\nimport init from './init';\nimport getCustomizationModule from './getCustomizationModule';\nimport getCommandsModule from './commandsModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport ToolGroupService from './services/ToolGroupService';\nimport SyncGroupService from './services/SyncGroupService';\nimport SegmentationService from './services/SegmentationService';\nimport CornerstoneCacheService from './services/CornerstoneCacheService';\nimport CornerstoneViewportService from './services/ViewportService/CornerstoneViewportService';\nimport * as CornerstoneExtensionTypes from './types';\n\nimport { toolNames } from './initCornerstoneTools';\nimport { getEnabledElement, reset as enabledElementReset } from './state';\nimport dicomLoaderService from './utils/dicomLoaderService';\nimport getActiveViewportEnabledElement from './utils/getActiveViewportEnabledElement';\n\nimport { id } from './id';\nimport * as csWADOImageLoader from './initWADOImageLoader.js';\nimport { measurementMappingUtils } from './utils/measurementServiceMappings';\nimport type { PublicViewportOptions } from './services/ViewportService/Viewport';\n\nconst Component = React.lazy(() => {\n  return import(\n    /* webpackPrefetch: true */ './Viewport/OHIFCornerstoneViewport'\n  );\n});\n\nconst OHIFCornerstoneViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n *\n */\nconst cornerstoneExtension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  onModeExit: (): void => {\n    // Empty out the image load and retrieval pools to prevent memory leaks\n    // on the mode exits\n    Object.values(cs3DEnums.RequestType).forEach(type => {\n      imageLoadPoolManager.clearRequestStack(type);\n      imageRetrievalPoolManager.clearRequestStack(type);\n    });\n\n    csWADOImageLoader.destroy();\n    enabledElementReset();\n  },\n\n  /**\n   * Register the Cornerstone 3D services and set them up for use.\n   *\n   * @param configuration.csToolsConfig - Passed directly to `initCornerstoneTools`\n   */\n  preRegistration: function (\n    props: Types.Extensions.ExtensionParams\n  ): Promise<void> {\n    const { servicesManager } = props;\n    servicesManager.registerService(CornerstoneViewportService.REGISTRATION);\n    servicesManager.registerService(ToolGroupService.REGISTRATION);\n    servicesManager.registerService(SyncGroupService.REGISTRATION);\n    servicesManager.registerService(SegmentationService.REGISTRATION);\n    servicesManager.registerService(CornerstoneCacheService.REGISTRATION);\n\n    return init.call(this, props);\n  },\n\n  getHangingProtocolModule,\n  getViewportModule({ servicesManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneViewport = props => {\n      // const onNewImageHandler = jumpData => {\n      //   commandsManager.runCommand('jumpToImage', jumpData);\n      // };\n      const { toolbarService } = (servicesManager as ServicesManager).services;\n\n      return (\n        <OHIFCornerstoneViewport\n          {...props}\n          toolbarService={toolbarService}\n          servicesManager={servicesManager}\n          commandsManager={commandsManager}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'cornerstone',\n        component: ExtendedOHIFCornerstoneViewport,\n      },\n    ];\n  },\n  getCommandsModule,\n  getCustomizationModule,\n  getUtilityModule({ servicesManager }) {\n    return [\n      {\n        name: 'common',\n        exports: {\n          getCornerstoneLibraries: () => {\n            return { cornerstone, cornerstoneTools };\n          },\n          getEnabledElement,\n          dicomLoaderService,\n        },\n      },\n      {\n        name: 'core',\n        exports: {\n          Enums: cs3DEnums,\n        },\n      },\n      {\n        name: 'tools',\n        exports: {\n          toolNames,\n          Enums: cs3DToolsEnums,\n        },\n      },\n    ];\n  },\n};\n\nexport type { PublicViewportOptions };\nexport { measurementMappingUtils, CornerstoneExtensionTypes, toolNames , getActiveViewportEnabledElement};\nexport default cornerstoneExtension;\n","const state = {\n  // The `defaultContext` of an extension's commandsModule\n  DEFAULT_CONTEXT: 'CORNERSTONE',\n  enabledElements: {},\n};\n\n/**\n * Sets the enabled element `dom` reference for an active viewport.\n * @param {HTMLElement} dom Active viewport element.\n * @return void\n */\nconst setEnabledElement = (\n  viewportIndex: number,\n  element: HTMLElement,\n  context?: string\n): void => {\n  const targetContext = context || state.DEFAULT_CONTEXT;\n\n  state.enabledElements[viewportIndex] = {\n    element,\n    context: targetContext,\n  };\n};\n\n/**\n * Grabs the enabled element `dom` reference of an ative viewport.\n *\n * @return {HTMLElement} Active viewport element.\n */\nconst getEnabledElement = viewportIndex => {\n  return state.enabledElements[viewportIndex];\n};\n\nconst reset = () => {\n  state.enabledElements = {};\n};\n\nexport { setEnabledElement, getEnabledElement, reset };\n","import * as cornerstone from '@cornerstonejs/core';\n\n/**\n * It checks if the imageId is provided then it uses it to query\n * the metadata and get the SOPInstanceUID, SeriesInstanceUID and StudyInstanceUID.\n * If the imageId is not provided then undefined is returned.\n * @param {string} imageId The image id of the referenced image\n * @returns\n */\nexport default function getSOPInstanceAttributes(imageId) {\n  if (imageId) {\n    return _getUIDFromImageID(imageId);\n  }\n\n  // Todo: implement for volume viewports and use the referencedSeriesInstanceUID\n}\n\nfunction _getUIDFromImageID(imageId) {\n  const instance = cornerstone.metaData.get('instance', imageId);\n  console.log('get uid from image id', instance)\n\n  return {\n    SOPInstanceUID: instance.SOPInstanceUID,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    frameNumber: instance.frameNumber || 1,\n  };\n}\n"],"names":["registerVolumeLoader","volumeLoader","initialized","initWADOImageLoader","userAuthenticationService","appConfig","dicomImageLoader","cornerstone","dicomParser","cornerstoneStreamingImageVolumeLoader","decodeConfig","convertFloatPixelDataToInt","beforeSend","xhr","headers","getAuthorizationHeader","xhrRequestHeaders","Accept","omitQuotationForMultipartRequest","Object","assign","errorInterceptor","error","errorHandler","getHTTPErrorHandler","config","maxWebWorkers","Math","min","max","navigator","hardwareConcurrency","maxNumberOfWebWorkers","startWebWorkersOnDemand","taskConfiguration","decodeTask","initializeCodecsOnStartup","usePDFJS","strict","initialize","initWebWorkers","uiDialogService","data","callback","isArrowAnnotateInputDialog","dialogConfig","dialogId","label","text","dialogTitle","inputLabel","validateFunc","value","onSubmitHandler","action","id","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","onClose","actions","type","onSubmit","body","setValue","React","Input","autoFocus","className","labelClassName","onChange","event","persist","target","onKeyPress","key","getActiveViewportEnabledElement","viewportGridService","activeViewportIndex","getState","element","OHIFgetEnabledElement","getEnabledElement","calibrateImageSpacing","utilities","CalibrationLineTool","LengthTool","constructor","args","_renderingViewport","_lengthToolRenderAnnotation","this","renderAnnotation","enabledElement","svgDrawingHelper","viewport","_getTextLines","targetId","canvasPoint1","canvasPoint2","handles","points","map","p","worldToCanvas","round","point1","point2","dx","dy","sqrt","calculateLength2","toolName","onCompletedCalibrationLine","servicesManager","csToolsEvent","services","annotationAddedEventDetail","detail","annotation","metadata","annotationData","referencedImageId","imageId","length","pos1","pos2","dz","calculateLength3","calibratedPixelSpacing","metaData","imagePlaneModule","currentRowPixelSpacing","rowPixelSpacing","currentColumnPixelSpacing","columnPixelSpacing","Promise","resolve","reject","callInputDialog","newLength","spacingScale","rowSpacing","colSpacing","getRenderingEngine","adjustCalibration","Number","parseFloat","val","v","isNaN","toolNames","Pan","PanTool","ArrowAnnotate","ArrowAnnotateTool","WindowLevel","WindowLevelTool","StackScroll","StackScrollTool","StackScrollMouseWheel","StackScrollMouseWheelTool","Zoom","ZoomTool","VolumeRotateMouseWheel","VolumeRotateMouseWheelTool","MipJumpToClick","MIPJumpToClickTool","Length","DragProbe","DragProbeTool","Probe","ProbeTool","RectangleROI","RectangleROITool","EllipticalROI","EllipticalROITool","CircleROI","CircleROITool","Bidirectional","BidirectionalTool","Angle","AngleTool","CobbAngle","CobbAngleTool","PlanarFreehandROI","PlanarFreehandROITool","Magnify","MagnifyTool","Crosshairs","CrosshairsTool","SegmentationDisplay","SegmentationDisplayTool","ReferenceLines","ReferenceLinesTool","CalibrationLine","TrackballRotateTool","BrushTool","CircleScissorsTool","PaintFillTool","RectangleROIStartEndThresholdTool","RectangleROIThresholdTool","RectangleScissorsTool","SphereScissorsTool","UndoTool","toAnnotation","measurement","toMeasurement","csToolsEventDetail","displaySetService","cornerstoneViewportService","getValueTypeFromToolType","viewportId","annotationUID","console","warn","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","Error","SOPInstanceUID","SeriesInstanceUID","StudyInstanceUID","getSOPInstanceAttributes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","mappedAnnotations","cachedStats","keys","annotations","forEach","targetStats","frameNumber","SeriesNumber","unit","push","getMappedAnnotations","displayText","instance","images","find","image","InstanceNumber","instanceText","frameText","isMultiFrame","roundedLength","utils","roundNumber","getDisplayText","uid","referenceSeriesUID","referenceStudyUID","displaySetInstanceUID","getReport","columns","values","join","_getReport","referencedSeriesInstanceUID","width","roundedWidth","modality","mean","stdDev","area","Modality","getModalityUnit","roundedArea","mappedAnnotation","maxStr","str","DisplaySetService","CornerstoneViewportService","angle","undefined","roundedAngle","_SOPInstanceUID","_SeriesInstanceUID","measurementServiceMappingsFactory","measurementService","_getValueTypeFromToolType","toolType","POLYLINE","ELLIPSE","CIRCLE","RECTANGLE","BIDIRECTIONAL","POINT","ANGLE","MeasurementService","VALUE_TYPES","csToolsAnnotation","matchingCriteria","valueType","removeAnnotation","csToolsEvents","Enums","CORNERSTONE_3D_TOOLS_SOURCE_NAME","connectToolsToMeasurementService","csTools3DVer1MeasurementSource","initMeasurementService","createSource","addMapping","connectMeasurementServiceToTools","annotationToMeasurement","remove","addMeasurement","completedEvt","then","log","finally","removeMeasurement","resize","annotationRemovedEventDetail","getMeasurement","addedEvt","ANNOTATION_ADDED","ANNOTATION_COMPLETED","updatedEvt","ANNOTATION_MODIFIED","removedEvt","ANNOTATION_REMOVED","selectionEvt","ANNOTATION_SELECTION_CHANGE","eventTarget","addEventListener","annotationModifiedEventDetail","annotationSelectionEventDetail","added","addedSelectedAnnotationUIDs","removed","removedSelectedAnnotationUIDs","setMeasurementSelected","measurementSource","MEASUREMENT_REMOVED","MEASUREMENTS_CLEARED","MEASUREMENT_UPDATED","RAW_MEASUREMENT_ADDED","EVENTS","getSource","subscribe","measurements","source","name","notYetUpdatedAtSource","sourceAnnotation","dataSource","DicomMetadataStore","getInstance","getImageIdsForInstance","addAnnotation","highlighted","isLocked","invalidated","removedMeasurementId","render","cineService","setServiceImplementation","playClip","playClipOptions","stopClip","volumeIdMapsToLoad","Map","viewportIdVolumeInputArrayMap","interleaveCenterLoader","volumeInputArray","displaySetsMatchDetails","viewportMatchDetails","matchDetails","set","volumeInput","volumeId","volume","cache","getVolume","has","size","_","details","entries","Array","from","volumes","slice","AllRequests","requests","getImageLoadRequests","reOrderedRequests","imageIds","maxImageIdIndex","middleImageIdIndex","floor","lowerImageIdIndex","upperImageIdIndex","imageIdsToPrefetch","imageIdIndex","prefetchQueuedFilled","currentPositionDownToMinimum","currentPositionUpToMaximum","getInterleavedFrames","request","req","interleavedRequests","compact","flatten","zip","finalRequests","volumeRequests","volumeImageIdRequest","requestType","Prefetch","callLoadImage","additionalDetails","options","callLoadImageBound","bind","imageLoadPoolManager","addRequest","clear","viewportIdVolumeInputArrayMapCopy","interleaveNthLoader","lists","time","useLists","ret","i","list","splice","indexOf","timeEnd","interleave","filter","frames","centerStart","centerEnd","getNthFrames","interleaveTopToBottom","reverse","findNearbyToolData","commandsManager","evt","currentPoints","runCommand","canvasCoordinates","canvas","cs3DToolsEvents","DEFAULT_CONTEXT_MENU_CLICKS","button1","commands","commandName","button3","commandOptions","menuId","customizationService","cornerstoneViewportHandleClick","button","which","nameArr","altKey","ctrlKey","shiftKey","getEventName","cornerstoneViewportHandleEvent","toRun","get","nearbyToolData","run","ELEMENT_ENABLED","viewportInfo","getViewportInfo","viewportIndex","getViewportIndex","setEnabledElement","MOUSE_CLICK","ELEMENT_DISABLED","removeEventListener","DEFAULT_DOUBLE_CLICK","doubleClick","cornerstoneViewportHandleDoubleClick","eventName","getDoubleClickEventName","customizations","MOUSE_DOUBLE_CLICK","async","init","extensionManager","configuration","cs3DInit","Boolean","useCPURendering","rendering","strictZSpacingForVolumeViewport","maxCacheSize","setMaxCacheSize","isAnnotation","addTool","defaultStyles","getDefaultToolStyles","setDefaultToolStyles","global","textBoxFontSize","lineWidth","initCornerstoneTools","Settings","getRuntimeSettings","useCursors","uiModalService","uiNotificationService","hangingProtocolService","toolGroupService","stateSyncService","window","showWarningMessageForCrossOrigin","crossOriginIsolated","show","message","showCPUFallbackMessage","progress","CPUModal","unsubscribe","PROTOCOL_CHANGED","_showCPURenderingModal","register","clearOnModeExit","labelmapRepresentation","cornerstoneTools","Labelmap","fillAlpha","fillAlphaInactive","outlineOpacity","outlineOpacityInactive","metadataProvider","OHIF","MetadataProvider","registerImageLoadStrategy","nthLoader","csUtilities","maxNumRequests","interaction","thumbnail","prefetch","measurementServiceSource","initCineService","CUSTOM_IMAGE_LOAD_PERFORMED","volumeInputArrayMap","entry","getCornerstoneViewport","ohifViewport","lutPresentationStore","positionPresentationStore","presentationIds","getViewportOptions","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","setVolumesForViewport","initContextMenu","initDoubleClick","newStackCallback","resetCrosshairs","renderingEngineId","toolGroup","_toolInstances","mode","Active","setToolActive","Passive","setToolPassive","Enabled","setToolEnabled","CAMERA_RESET","STACK_VIEWPORT_NEW_STACK","ACTIVE_VIEWPORT_INDEX_CHANGED","getToolGroupForViewport","setToolConfiguration","sourceViewportId","PROGRESS","UploadStatus","UploadRejection","status","DicomFileUploader","PubSubService","file","super","_file","_fileId","_dataSource","_loadPromise","_abortController","AbortController","_status","NotStarted","_percentComplete","fileManager","add","getFileId","getFileName","getFileSize","cancel","abort","getStatus","getPercentComplete","load","uploadCallbacks","lengthComputable","InProgress","loaded","total","_broadcastEvent","fileId","percentComplete","timeout","_reject","Failed","Cancelled","loadFileRequest","dicomFile","signal","aborted","_checkDicomFile","XMLHttpRequest","_addRequestCallbacks","store","dicom","Success","catch","reason","_isRejected","abortCallback","upload","cleanUpCallback","arrayBuffer","arr","Uint8Array","every","char","charCodeAt","DicomUploadProgressItem","memo","dicomFileUploader","setPercentComplete","useState","failedReason","setFailedReason","setStatus","info","isComplete","useCallback","useEffect","progressSubscription","dicomFileUploaderProgressEvent","cancelUpload","getStatusIcon","Icon","onClick","propTypes","PropTypes","isRequired","ONE_SECOND","ONE_MINUTE","ONE_HOUR","BASE_INTERVAL_TIME","NO_WRAP_ELLIPSIS_CLASS_NAMES","DicomUploadProgress","dicomFileUploaderArr","onComplete","totalUploadSize","reduce","acc","fileUploader","currentUploadSizeRef","useRef","uploadRateRef","timeRemaining","setTimeRemaining","numFilesCompleted","setNumFilesCompleted","numFails","setNumFails","showFailedOnly","setShowFailedOnly","progressBarContainerRef","timeoutId","intervalStartUploadSize","intervalStartTime","Date","now","setUploadRateRef","uploadSizeFromStartOfInterval","current","timeSinceStartOfInterval","setTimeout","clearTimeout","currentTimeRemaining","subscriptions","currentFileUploadSize","updateProgress","previousFileUploadSize","uploadSizeRemaining","currentSecondsRemaining","ceil","delta","currentMinutesRemaining","rejection","numCompleted","progressEvent","subscription","cancelAllUploads","getFormattedTimeRemaining","secondsRemaining","minutesRemaining","hoursRemaining","getPercentCompleteRounded","showInfiniteProgressBar","offsetWidth","getNofMFilesStyle","toString","getShowFailedOnlyIconComponent","currentShowFailedOnly","Button","variant","color","disabled","style","classNames","ref","ProgressLoadingBar","DicomUpload","onStarted","baseClassNames","setDicomFileUploaderArr","onDrop","acceptedFiles","Dropzone","noClick","getRootProps","_extends","noDrag","getInputProps","border","webkitdirectory","mozdirectory","tools","active","bindings","mouseButton","Primary","Auxiliary","Secondary","enabled","component","DEFAULT_SIZE","MAX_TEXTURE_SIZE","VIEWPORT_ID","CornerstoneViewportDownloadForm","activeViewportElement","activeViewportEnabledElement","activeViewportId","ToolGroupManager","toolModeAndBindings","toolOptions","tool","setToolMode","ViewportDownloadForm","minimumSize","maximumSize","defaultSize","canvasClass","enableViewport","viewportElement","renderingEngine","viewportInput","defaultOptions","background","orientation","enableElement","disableViewport","disableElement","updateViewportPreview","downloadViewportElement","internalCanvas","fileType","downloadViewport","IMAGE_RENDERED","updateViewport","downloadCanvas","getOrCreateCanvas","dataUrl","toDataURL","newWidth","offsetHeight","newHeight","multiplier","height","loadImage","getViewport","StackViewport","getCurrentImageId","properties","getProperties","setStack","setProperties","VolumeViewport","getActors","actor","addActor","setCamera","getCamera","toggleAnnotations","toggle","downloadViewportId","addViewport","e","setToolDisabled","downloadBlob","filename","divForDownloadViewport","document","querySelector","html2canvas","link","createElement","download","href","click","_getViewportPairs","viewports","viewportPairs","j","STACK_IMAGE_SYNC_GROUPS_INFO","toggleStackImageSync","toggledState","syncGroupService","syncGroupInfo","synchronizerId","removeViewportFromSyncGroup","displaySetInstanceUIDs","getDisplaySetByUID","isReconstructable","viewportsByOrientation","viewportType","viewportOptions","csViewport","viewPlaneNormal","nextViewport","renderingEngine1","renderingEngine2","csViewport1","csViewport2","calculateViewportRegistrations","addViewportToSyncGroup","isAnnotationSelected","cs3dToolAnnotationUtils","setAnnotationSelected","selected","getFirstAnnotationSelected","selectedAnnotationUID","toolbarService","_getActiveViewportEnabledElement","showCornerstoneContextMenu","optionsToUse","useSelectedAnnotation","firstAnnotationSelected","allowedSelectedTools","defaultPointsPosition","selectorProps","getNearbyToolData","cstUtils","getNearbyAnnotation","toolInstance","getToolInstance","deleteMeasurement","setMeasurementLabel","actionId","updatedMeasurement","update","updateMeasurement","props","code","textLabel","measurementKey","CodeValue","split","substring","CodeMeaning","CodingSchemeDesignator","findingSites","it","setViewportActive","setActiveViewportIndex","arrowTextCallback","toggleCine","isCineEnabled","setIsCineEnabled","setButton","isActive","index","setCine","isPlaying","setWindowLevel","level","toolGroupId","windowWidthNum","windowCenterNum","viewportToolGroupId","lower","upper","csUtils","voiRange","toolbarServiceRecordInteraction","recordInteraction","getToolGroup","duration","toolGroupViewportIds","getViewportIds","activeToolName","getActivePrimaryMouseButtonTool","showDownloadViewportModal","getCornerstoneViewportByIndex","hide","rotateViewport","rotation","currentRotation","newRotation","flipViewportHorizontal","flipHorizontal","flipViewportVertical","flipVertical","invertViewport","invert","resetViewport","resetProperties","resetCamera","scaleViewport","direction","scaleFactor","parallelScale","jumpToImage","imageIndex","gridViewport","numberOfSlices","getImageIds","jumpIndex","scroll","setAllViewportsColorMap","colormap","setViewportColormap","immediate","actorEntry","volumeActor","incrementActiveViewport","nextViewportIndex","decrementActiveViewport","toggleReferenceLines","getViewportInfoByIndex","getViewportId","definitions","commandFn","storeContexts","menuCustomizationId","rotateViewportCW","rotateViewportCCW","scaleUpViewport","scaleDownViewport","fitViewportToWindow","nextImage","previousImage","firstImage","lastImage","defaultContext","mpr","locked","hasUpdatedPriorsInformation","createdDate","modifiedDate","availableTo","editableBy","numberOfPriorsReferenced","protocolMatchingRules","imageLoadStrategy","callbacks","onLayoutChange","protocolId","context","onProtocolExit","interactionType","displaySetSelectors","activeDisplaySet","seriesMatchingRules","weight","attribute","constraint","equals","required","stages","viewportStructure","layoutType","rows","layoutOptions","x","y","initialImageOptions","preset","syncGroups","displaySets","mprAnd3DVolumeViewport","mprDisplaySet","customViewportProps","hideOverlays","panoramicViewport","mprAxesDisplaySet","contrastedMeanDisplaySet","panoramicDisplaySet","dentascanDisplaySet","greaterThan","protocol","VIEWPORT_ADDED","TOOLGROUP_CREATED","ToolGroupService","serviceManager","toolGroupIds","Set","listeners","pubSubServiceInterface","onModeExit","destroy","toolGroupIdToUse","getToolGroupIds","getActiveToolForViewport","destroyToolGroup","delete","removeViewportFromToolGroup","deleteToolGroupIfEmpty","removeViewports","addViewportToToolGroup","createToolGroup","addToolsToToolGroup","configs","_addTools","_setToolsMode","createToolGroupAndAddTools","getToolConfiguration","_getToolNames","toolGroupTools","passive","toolConfig","_ToolGroupService","REGISTRATION","altName","TOOL_GROUP_CREATED","SyncGroupService","synchronizerCreators","synchronizers","_createSynchronizer","syncCreator","toLowerCase","setSynchronizer","creator","_getOrCreateSynchronizer","synchronizer","SynchronizerManager","isArray","syncGroup","syncGroupObj","asSyncGroup","setOptions","addSource","addTarget","syncGroupId","s","sourceViewports","getSourceViewports","targetViewports","getTargetViewports","_SyncGroupService","easeInOutBell","baseline","alpha","pow","COLOR_LUT","cstConstants","LABELMAP","csToolsEnums","CONTOUR","Contour","SEGMENTATION_UPDATED","SEGMENTATION_DATA_MODIFIED","SEGMENTATION_ADDED","SEGMENTATION_REMOVED","SEGMENTATION_CONFIGURATION_CHANGED","SEGMENT_LOADING_COMPLETE","SEGMENTATION_LOADING_COMPLETE","SEGMENT_CONSTANT","opacity","isVisible","SegmentationService","segmentations","highlightIntervalId","SEGMENTATION_MODIFIED","_onSegmentationModifiedFromSource","_onSegmentationDataModified","segmentationId","_removeSegmentationFromCornerstone","setSegmentRGBA","segmentIndex","rgbaColor","segmentation","getSegmentation","_setSegmentOpacity","_setSegmentColor","createSegmentationForDisplaySet","representationType","_getVolumeIdForDisplaySet","targetBuffer","sharedArrayBuffer","_getDefaultSegmentationScheme","representationData","referencedVolumeId","addOrUpdateSegmentation","toggleSegmentationVisibility","_toggleSegmentationVisibility","addSegmentationRepresentationToToolGroup","hydrateSegmentation","hydrated","colorLUTIndex","segmentationRepresentationUIDs","cstSegmentation","_setActiveSegmentationForToolGroup","segment","segments","visibility","suppressEvents","_setSegmentVisibility","_setSegmentLocked","setSegmentRGBAColorForSegmentation","getToolGroupIdsWithSegmentation","getConfiguration","_getFirstToolGroupId","segmentationRepresentations","getSegmentationRepresentationsForToolGroup","typeToUse","renderInactiveSegmentations","representation","representations","renderOutline","outlineWidthActive","renderFill","brushSize","brushThresholdGate","setConfiguration","setConfigValueIfDefined","transformFn","transformedValue","_setSegmentationConfig","getLabelmapVolume","_updateCornerstoneSegmentationVisibility","segmentInfo","_getSegmentInfo","segmentationRepresentation","_getSegmentationRepresentation","segmentationRepresentationUID","property","getSegmentations","viewportIds","renderViewports","segmentationState","activeSegmentIndex","segmentsLocked","segmentationSchema","segmentsHidden","newVisibility","_getSegmentationInfo","getNextColorLUTIndex","arrayOfObjects","obj","_initSegmentationService","addSegment","override","segmentCount","newColor","_setActiveSegment","removeSegment","labelmapVolume","dimensions","scalarData","getScalarData","frameLength","numFrames","voxelIndex","modifiedFrames","frame","modifiedFramesArray","segmentIndices","newActiveSegmentIndex","setSegmentVisibility","setSegmentLockedForSegmentation","setSegmentLabel","segmentLabel","_setSegmentLabel","setSegmentColor","setSegmentOpacity","setActiveSegmentationForToolGroup","setActiveSegmentForSegmentation","filterNonHydratedSegmentations","_getSegmentations","m","cachedSegmentation","_updateCornerstoneSegmentations","newColorLUT","generateNewColorLUT","newColorLUTIndex","createSegmentationForSEGDisplaySet","segDisplaySet","labelmap","referencedVolume","derivedVolume","derivedVolumeScalarData","sopUIDImageIdIndexMap","sopInstanceUid","numSegments","overlappingSegments","_segmentInfoUpdate","pixelData","segPixelData","segmentX","segmentY","segmentZ","count","functionalGroupIndex","functionalGroup","functionalGroups","ReferencedSOPInstanceUID","DerivationImageSequence","SourceImageSequence","step","functionGroupPixelData","buffer","functionalGroupEndIndex","z","centerWorld","imageData","indexToWorld","segmentCenter","center","world","modifiedTime","SeriesDate","numInitialized","promiseArray","promise","all","segIndex","isLoaded","createSegmentationForRTDisplaySet","rtDisplaySet","structureSet","defaultScheme","rtDisplaySetUID","allRTStructData","ROIContours","contourPoints","ROINumber","ROIName","colorArray","rest","geometryId","mapROIContoursToRTStructData","sort","a","b","geometryIds","segmentsCachedStats","initializeContour","rtStructData","centroid","geometryLoader","geometryData","frameOfReferenceUID","csEnums","getCentroid","jumpToSegmentCenter","highlightAlpha","highlightSegment","animationLength","highlightHideOthers","highlightFunctionType","_getSegmentCenter","_getToolGroupIdsWithSegmentation","toolGroups","viewportsInfo","getViewportsInfo","getEnabledElementByIds","hideOthers","clearInterval","_highlightLabelmap","_highlightContour","newSegmentSpecificConfig","startTime","animation","timestamp","elapsed","requestAnimationFrame","performance","animate","currentTime","reversedProgress","removeSegmentationRepresentationFromToolGroup","segmentationRepresentationUIDsIds","uids","rep","wasActive","remainingSegmentations","setSegmentLabelForSegmentation","_setSegmentLabelForSegmentation","shouldRenderSegmentation","viewportDisplaySetInstanceUIDs","segDisplaySetInstanceUID","shouldDisplaySeg","segFrameOfReferenceUID","_getFrameOfReferenceUIDForSeg","targetSegmentation","volumeLoaderSchema","getSegmentationRepresentations","UIDsToRemove","removeSegmentation","getVolumeLoadObject","removeVolumeLoadObject","sourceSegmentation","isEqual","referencedFrameOfReferenceSequence","ReferencedFrameOfReferenceSequence","cloneDeep","_SegmentationService","getCornerstoneViewportType","lowerViewportType","STACK","ORTHOGRAPHIC","VOLUME_3D","VOLUME_LOADER_SCHEME","CornerstoneCacheService","polyDataStateCache","panoramicStateCache","stackImageIds","volumeImageIds","setPolyDataStateCache","polyDataState","getPolyDataStateCache","setPanoramicStateCache","panoramicState","seriesUID","getPanoramicStateCache","getCacheSize","cs3DCache","getCacheFreeSpace","getBytesAvailable","createViewportData","initialImageIndex","_shouldRenderSegmentation","cs3DViewportType","viewportData","_getStackViewportData","_getVolumeViewportData","invalidateViewportData","invalidatedDisplaySetInstanceUID","_getCornerstoneStackImageIds","isCompositeStack","StackViewportData","volumeData","Function","studyInstanceUID","_getCornerstoneVolumeImageIds","segmentationService","img","_CornerstoneCacheService","RENDERING_ENGINE_ID","DEFAULT_TOOLGROUP_ID","dataContains","displaySetUID","dataId","displaySetOptions","setPublicViewportOptions","setPublicDisplaySetOptions","contains","setRenderingEngineId","getRenderingEngineId","setViewportId","setViewportIndex","setElement","setViewportData","getViewportData","getElement","publicDisplaySetOptions","mapDisplaySetOptions","setDisplaySetOptions","hasDisplaySet","some","dsUID","viewportOptionsEntry","AXIAL","SAGITTAL","CORONAL","ACQUISITION","getCornerstoneOrientation","setViewportOptions","getSyncGroups","getDisplaySetOptions","getViewportType","getToolGroupId","getBackground","getOrientation","getInitialImageOptions","item","option","blendMode","slabThickness","voi","voiInverted","COMPOSITE","MAXIMUM_INTENSITY_BLEND","getCornerstoneBlendMode","displayPreset","JumpPresets","VIEWPORT_DATA_CHANGED","viewportsById","viewportGridResizeObserver","viewportsDisplaySets","enableResizeDetector","resizeRefreshRateMs","resizeRefreshMode","elementRef","ViewportInfo","hasBeenDestroyed","RenderingEngine","_removeResizeObserver","purgeCache","setPresentations","camera","getPresentation","isComputedVOI","VOILUTFunction","getCurrentImageIdIndex","publicViewportOptions","_getViewportAndDisplaySetOptions","_setDisplaySets","_setStackViewport","initialImageIndexToUse","_getInitialImageIndexForViewport","windowWidth","windowCenter","imageSliceData","_getInitialImageIndex","lastSliceIndex","csToolsUtils","First","Last","Middle","_setVolumeViewport","displaySetOptionsArray","volumeToLoad","_getSlabThickness","hasCustomImageLoadStrategy","customImageLoadPerformed","runImageLoadStrategy","loadStatus","loading","volumesProperties","displaySetOption","actorEntries","waitLoading","imageVolume","volumeEntries","setVolumes","inputData","getMapper","getInputData","vtkVolume","mapper","vtkVolumeMapper","setInputData","setSampleDistance","setMapper","ctfun","vtkColorTransferFunction","addRGBPoint","ofun","vtkPiecewiseFunction","addPoint","getProperty","setRGBTransferFunction","setScalarOpacity","setScalarOpacityUnitDistance","setInterpolationTypeToLinear","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","setShade","setAmbient","setDiffuse","setSpecular","setSpecularPower","setActors","overlayDisplaySet","isOverlayDisplaySet","addOverlayRepresentationForDisplaySet","_addSegmentationRepresentationToToolGroupIfNecessary","_getFrameOfReferenceUID","keepCamera","viewportCamera","_setDisplaySetInURL","params","URLSearchParams","location","search","newurl","host","pathname","history","pushState","path","_setSeriesUIDInURL","seriesInstanceUID","VolumeViewport3D","disconnect","newViewportInfo","getViewportIndexToJump","cameraProps","_CornerstoneViewportService","getImageId","imageObj","url","someInvalidStrings","strings","string","getImageInstance","dataset","getImageInstanceId","imageInstance","fetchIt","DICOMWeb","fetch","response","cornerstoneRetriever","imageLoader","byteArray","wadorsRetriever","sopInstanceUID","api","DICOMwebClient","retrieveInstance","getLocalData","studies","nonImageInstance","getNonImageInstance","startsWith","findImageIdOnStudies","study","series","instances","getDataByImageType","getDicomDataMethod","loaderType","loaderRegExp","exec","lastIndex","replace","getImageLoaderType","getData","wadoRoot","getStudyInstanceUID","getSeriesInstanceUID","getSOPInstanceUID","getDataByDatasetType","authorizationHeaders","wadoUri","getLoaderIterator","findDicomDataPromise","loaderIterator","loader","packageJson","getHandlesFromPoints","longAxis","shortAxis","start","end","perpendicularStart","perpendicularEnd","Component","OHIFCornerstoneViewport","fallback","cs3DEnums","clearRequestStack","imageRetrievalPoolManager","webWorkers","webWorkerManager","worker","terminate","csWADOImageLoader","enabledElementReset","preRegistration","registerService","call","getHangingProtocolModule","getViewportModule","getCommandsModule","getCustomizationModule","getUtilityModule","exports","getCornerstoneLibraries","dicomLoaderService","cs3DToolsEnums","state","DEFAULT_CONTEXT","enabledElements","targetContext","reset","_getUIDFromImageID"],"sourceRoot":""}