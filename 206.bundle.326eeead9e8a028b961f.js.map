{"version":3,"file":"206.bundle.326eeead9e8a028b961f.js","mappings":"6HAEMA,E,6DAAKC,GAELC,EAAoB,GAAGF,oC,sECI7B,MAAMG,EAAe,CAAC,gCAEhBC,EAAe,CAAC,EAEtB,SAASC,EACPC,EACAC,EACAC,GAEA,MAAMC,EAAWH,EAAU,IAErB,iBACJI,EAAgB,kBAChBC,EAAiB,eACjBC,EAAc,kBACdC,EAAiB,aACjBC,EAAY,WACZC,EAAU,YACVC,EAAW,SACXC,EAAQ,QACRC,EAAO,YACPC,GACEV,EAEEW,EAAa,CACjBC,SAAU,MACVC,SAAS,EACTC,mBAAmB,EACnBC,sBAAuBC,EAAAA,MAAMC,OAC7Bb,oBACAC,eACAC,aACAH,iBACAD,oBACAD,mBACAR,kBAAiB,EACjBc,cACAW,iBAAkB,KAClBC,4BAA6B,KAC7BC,gCAAiC,KACjCC,qBAAqB,EACrBC,UAAU,EACVC,YAAY,EACZC,SAAU,CAAC,EACX9B,eACAM,WACAH,UAAW,CAACG,GACZQ,WACAE,cACAD,UACAgB,qBAAqB,GAGjBC,EAA2B1B,EAAS2B,yBAE1C,IAAKD,EAEH,YADAE,QAAQC,MAAM,mDAIhB,MAAMC,EAAmBJ,EAAyB,IAAMA,EA8BxD,OA5BAf,EAAWO,iBAAmBlB,EAAS2B,yBAAyBI,2BAChEpB,EAAWQ,4BAA8BW,EAAiB5B,kBAE1DS,EAAWqB,uBAAyB,KAClC,MAAM,kBAAEC,GAAsBnC,EAAgBoC,SACxCC,EAAwBF,EAAkBG,wBAC9CzB,EAAWQ,6BAGb,IAAKgB,GAA0D,IAAjCA,EAAsBE,OAClD,MAAM,IAAIC,MAAM,gDAGlB,MAAMC,EAAuBJ,EAAsB,GAEnDxB,EAAWS,gCAAkCmB,EAAqBxB,sBAGlEJ,EAAW6B,oBAAsBD,EAAqBxB,sBACtD,MAAM0B,EAAqB,mCAAmC9B,EAAW6B,sBAGzE,OAFA7B,EAAW8B,mBAAqBA,EAEzBF,CAAoB,EAG7B5B,EAAW+B,KAAOC,OAASC,mBAM7B,SACEC,EACA/C,EACAC,EACA6C,GAEA,MAAM,eAAEzC,GAAmB0C,GACrB,oBAAEC,GAAwBhD,EAAgBoC,SAEhD,IACGW,EAAchC,SAAWgC,EAAcvB,WACxC3B,EAAaQ,IAoHjB,SAA6B0C,EAAeC,GAE1C,OAAOA,EAAoBC,gBAAgBF,EAAc9B,sBAC3D,CAtHIiC,CAAoBH,EAAeC,GAEnC,OAAOnD,EAAaQ,GA8BtB,OA3BA0C,EAAchC,SAAU,EAIxBlB,EAAaQ,GAAkB,IAAI8C,SAAQN,MAAOO,EAASC,KACpDN,EAAcrB,UAA2D,IAA/C4B,OAAOC,KAAKR,EAAcrB,UAAUa,cAyBvEM,gBAA6B,iBAC3B5C,EAAgB,gBAChBD,EAAe,cACf+C,EAAa,QACbD,IAEA,MAAMU,EAAgBvD,EAAiBwD,eACrC,qDAGI,oBAAET,EAAmB,sBAAEU,GAA0B1D,EAAgBoC,UAEjE,mBAAEuB,GAAuBH,EAAcI,QACvCC,QAAoBF,EAAmBG,qBAAqBf,EAAe,KAAMD,GAEjFiB,EAAyBC,EAAAA,MAAMC,UAAUlB,EAAcJ,oBAE7D,IAAKoB,EACH,MAAM,IAAIvB,MACR,yFAIJ,MAAM,SAAE0B,GAAaH,EAGfI,EAAY,KACZC,GAAkB,EAExBC,EAAAA,YAAYC,iBAAiBC,EAAAA,EAAMC,OAAOC,4BAA4BC,IACpE,MAAM,gBAAEC,GAAoBD,EAAIE,OAChC5B,EAAoB6B,gBAAgB7B,EAAoB8B,OAAOC,yBAA0B,CACvFJ,mBACA,IAGJ,MAAMK,QAAgBC,EAAAA,YAAYC,cAAcC,aAAaC,kBAC3DlB,EACAL,EACAwB,EAAAA,SACA,CAAEjB,kBAAiBD,YAAWE,YAAW,cAAEiB,aAAYA,EAAAA,eAGzD,IAAIC,GAAoC,EACxCP,EAAQQ,YAAYC,KAAKC,SAAQ,CAACD,EAAME,KCzL1C,IAAuBC,ED0LfD,EAAI,IACNF,EAAKI,KAAOJ,EAAKK,8BAEbL,EAAKI,KACPJ,EAAKI,MC9LUD,ED8LWH,EAAKI,KC7LzBE,EAAAA,QAAAA,KAAWC,OAAOC,aAAaL,GAAQM,KAAIC,GAAKC,KAAKC,MAAU,IAAJF,OD+LjEZ,GAAoC,EACpCE,EAAKI,KAAOS,EAAAA,UAAAA,UAAoBX,EAAIW,EAAAA,UAAAA,UAAoB/D,SAE5D,IAGEyC,EAAQuB,qBACV7C,EAAsB8C,KAAK,CACzBC,MAAO,uBACPC,QACE,8FACFC,KAAM,YAILpB,GAEH7B,EAAsB8C,KAAK,CACzBC,MAAO,mBACPC,QACE,wGACFC,KAAM,UACNC,SAAU,MAIdtD,OAAOuD,OAAO9D,EAAeiC,EAC/B,CAtGY8B,CAAc,CAClB7G,mBACAD,kBACA+C,gBACAD,YAIJ,MAAMiE,GAAiB,EACvB/D,EACGgE,mCAAmCjE,EAAe,KAAMgE,GACxDE,MAAK,KACJlE,EAAchC,SAAU,EACxBqC,GAAS,IAEV8D,OAAMnF,IACLgB,EAAchC,SAAU,EACxBsC,EAAOtB,EAAM,GACb,IAGClC,EAAaQ,EACtB,CAlDU8G,CAAMtG,EAAYb,EAAiBC,EAAkB6C,GAEtD,CAACjC,EACV,CAoJA,QAdA,UAAkC,gBAAEb,EAAe,iBAAEC,IAKnD,MAAO,CACL,CACEmH,KAAM,YACNxH,eACAyH,yBAR6BtH,GACxBD,EAA0BC,EAAWC,EAAiBC,IAUjE,EEnPMqH,EAA8C,CAClD7H,GAAI,YAIJ2H,KAAM,gBAENG,sBAAuB,GACvBC,aAAc,CAAC,WAIfC,yBAA0B,EAG1BC,gBAAiB,CACfC,gBAAiB,CACfC,aAAc,QACdC,YAAa,UACbC,oBAAoB,GAEtBC,YAAa,CACX,CACEtI,GAAI,kBACJuI,yBAA0B,KAIhCC,oBAAqB,CACnBC,gBAAiB,CACfC,oBAAqB,CACnB,CACEC,UAAW,WACXC,WAAY,CACVC,OAAQ,WAMlBC,OAAQ,CACN,CACEnB,KAAM,gBACNoB,kBAAmB,CACjBC,WAAY,OACZC,WAAY,CACVC,KAAM,EACNC,QAAS,IAGbC,UAAW,CACT,CACElB,gBAAiB,CAAEG,oBAAoB,GACvCC,YAAa,CACX,CACEtI,GAAI,yBAkBlB,QATA,WACE,MAAO,CACL,CACE2H,KAAME,EAAY7H,GAClBqJ,SAAUxB,GAGhB,E,wDCzEO,IAAKyB,EAAqB,SAArBA,GAAqB,OAArBA,EAAqB,oBAArBA,EAAqB,oBAArBA,CAAqB,MC6DjC,QA1DA,SAAyBC,EAAiBC,EAAOC,GAC/C,MAAMC,EAAW,sBAEXC,EAAkBA,EAAGC,SAAQC,YACjC,OAAQD,EAAO5J,IACb,IAAK,OACHyJ,EAASI,EAAML,MAAOI,EAAO5J,IAC7B,MACF,IAAK,SACHyJ,EAAS,GAAIG,EAAO5J,IAGxBuJ,EAAgBO,QAAQ,CAAE9J,GAAI0J,GAAW,EAGvCH,GACFA,EAAgBQ,OAAO,CACrB/J,GAAI0J,EACJM,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,QAASC,EAAAA,GACTC,aAAc,CACZrD,MAAO,UACP6C,MAAO,CAAEL,SACTc,eAAe,EACfC,QAASA,IAAMhB,EAAgBO,QAAQ,CAAE9J,GAAI0J,IAC7Cc,QAAS,CACP,CAAExK,GAAI,SAAUyK,KAAM,SAAUvD,KAAMwD,EAAAA,GAAAA,GAAiBC,WACvD,CAAE3K,GAAI,OAAQyK,KAAM,UAAWvD,KAAMwD,EAAAA,GAAAA,GAAiBE,UAExDC,SAAUlB,EACVmB,KAAMA,EAAGjB,QAAOkB,cAEZC,EAAAA,cAACC,EAAAA,GAAK,CACJzB,MAAM,0BACN0B,eAAe,uCACfC,WAAS,EACTC,UAAU,+BACVlE,KAAK,OACL2C,MAAOA,EAAML,MACb6B,SAAUC,IACRA,EAAMC,UACNR,GAASlB,IAAS,IAAMA,EAAOL,MAAO8B,EAAME,OAAO3B,SAAS,EAE9D4B,WAAYH,IACQ,UAAdA,EAAMI,KACR/B,EAAgB,CAAEE,QAAOD,OAAQ,CAAE5J,GAAI,SACzC,MAQhB,E,eCFA,QAnDA,SAA+BuJ,EAAiBoC,EAAWlC,GACzD,MAAMC,EAAW,aAEXC,EAAkBA,EAAGC,SAAQC,YACjC,OAAQD,EAAO5J,IACb,IAAK,OACHyJ,EAASI,EAAM8B,UAAW/B,EAAO5J,IACjC,MACF,IAAK,SACHyJ,EAAS,GAAIG,EAAO5J,IAGxBuJ,EAAgBO,QAAQ,CAAE9J,GAAI0J,GAAW,EAGvCH,GACFA,EAAgBQ,OAAO,CACrB/J,GAAI0J,EACJM,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,QAASC,EAAAA,GACTC,aAAc,CACZrD,MAAO,gBACP6C,MAAO,CAAE8B,aACTrB,eAAe,EACfC,QAASA,IAAMhB,EAAgBO,QAAQ,CAAE9J,GAAI0J,IAC7Cc,QAAS,CACP,CAAExK,GAAI,SAAUyK,KAAM,SAAUvD,KAAM,WACtC,CAAElH,GAAI,OAAQyK,KAAM,OAAQvD,KAAM,cAEpC2D,SAAUlB,EACVmB,KAAMA,EAAGjB,QAAOkB,cAMZC,EAAAA,cAACY,EAAAA,GAAY,CACXC,MAAOhC,EAAM8B,UACbN,SAPiBQ,IACnBd,EAAS,CAAEY,UAAWE,EAAMC,KAAM,EAOhCC,aAAc,GACdC,MAAO,QAOrB,E,yDCvCA,MCdA,ED6BKC,EAC2BC,SACAC,SACAd,WACAe,WACAC,WACAC,OAAO,EACPC,OAAO,GACPC,qBACAC,iBACAvB,iBACAwB,eACAC,aAAY,EACZC,gBAAgB,GAChBC,iBAE5B,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAASd,IACxCe,EAAaC,IAAkBF,EAAAA,EAAAA,UAASb,IAE/CgB,EAAAA,EAAAA,YAAU,KAEHjB,EAASE,IACZW,EAAeb,GAMZC,EAASE,GACZa,EAAef,GAAO,GAIvB,CAACD,EAAQC,IAEZ,MAAMiB,EAAiBC,IACnB,MAAMxD,EAAQyD,OAAOD,EAAE7B,OAAO3B,OAC3BA,EAAQuC,IACXW,EAAelD,GAIfwB,EAASxB,EAAOoD,GAAY,EAG1BM,EAAiBF,IACnB,MAAMxD,EAAQyD,OAAOD,EAAE7B,OAAO3B,OAC3BA,EAAQwC,IACXa,EAAerD,GAIfwB,EAASyB,EAAajD,GAAM,EAM1B2D,EAAoBlB,GAAQ,EAAIQ,EAAYW,QAAQ,GAAKX,EAAYW,QAAQ,GAC7EC,EAAoBpB,GAAQ,EAAIW,EAAYQ,QAAQ,GAAKR,EAAYQ,QAAQ,GAEnF,OACIzC,EAAAA,cAAA,OACI2C,MAAO,CAACC,cAAc,UACtBxC,UAAW,8CACPoB,GAA0C,MAG7CG,GAA+B,SAAlBC,GACV5B,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAC6C,EAAAA,EAAU,CACPC,QAASpB,GAAgB,WACzBqB,UAAU,IACV3C,UAAW4C,IAAW,MAAO9C,GAAkB,eAE9CsC,EACAjB,GAELvB,EAAAA,cAAC6C,EAAAA,EAAU,CACPC,QAASpB,GAAgB,WACzBqB,UAAU,IACV3C,UAAW4C,IAAW,MAAO9C,GAAkB,eAE9CwC,EACAnB,IAIbvB,EAAAA,cAAA,OAAK2C,MAAO,CAACC,cAAc,OAAQxC,UAAW,iBAC1CJ,EAAAA,cAAA,SACI9D,KAAK,QACL+G,IAAK7B,EACL8B,IAAK7B,EACLxC,MAAOiD,EACP1B,UAAW,+DACPqB,GAAkC,KAEtCkB,MAAO,CAACQ,WAAY,WACpB9C,SAAU+B,EACVpN,GAAG,WACHsM,KAAMA,IAEVtB,EAAAA,cAAA,SACI9D,KAAK,QACL+G,IAAK7B,EACL8B,IAAK7B,EACLxC,MAAOoD,EACP7B,UAAW,+DACPqB,GAAkC,KAEtCkB,MAAO,CAACQ,WAAY,WACpB9C,SAAUkC,EACVvN,GAAG,WACHsM,KAAMA,KAGbK,KAAeC,GAAmC,UAAlBA,IAC7B5B,EAAAA,cAAA,OAAK2C,MAAO,CAACC,cAAc,MAAO5B,MAAM,QAASZ,UAAW,iBACxDJ,EAAAA,cAAC6C,EAAAA,EAAU,CACPC,QAASpB,GAAgB,WACzBqB,UAAU,IACV3C,UAAW4C,IAAW,QAAS9C,GAAkB,aAAc,OAAQ,mBAEtE,SACAsC,EACAjB,GAELvB,EAAAA,cAAC6C,EAAAA,EAAU,CACPC,QAASpB,GAAgB,WACzBqB,UAAU,IACV3C,UAAW4C,IAAW,QAAS9C,GAAkB,aAAc,OAAQ,mBAEtE,SACAwC,EACAnB,IAIbvB,EAAAA,cAAA,OAAKI,UAAW,OAAQuC,MAAO,CAAC3B,MAAM,SAClChB,EAAAA,cAAA,OAAKI,UAAW,6BACZJ,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5ClB,EAAc,CAAC5B,OAAQ,CAAC3B,MAAOiD,EAAc,KAAK,GAClD,MACJ9B,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5ClB,EAAc,CAAC5B,OAAQ,CAAC3B,MAAOiD,EAAc,IAAI,GACjD,KACJ9B,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5ClB,EAAc,CAAC5B,OAAQ,CAAC3B,MAAOiD,EAAc,IAAI,GACjD,KACJ9B,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5ClB,EAAc,CAAC5B,OAAQ,CAAC3B,MAAOiD,EAAc,KAAK,GAClD,OAER9B,EAAAA,cAAA,OAAKI,UAAW,6BACZJ,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5Cf,EAAc,CAAC/B,OAAQ,CAAC3B,MAAOoD,EAAc,KAAK,GAClD,MACJjC,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5Cf,EAAc,CAAC/B,OAAQ,CAAC3B,MAAOoD,EAAc,IAAI,GACjD,KACJjC,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5Cf,EAAc,CAAC/B,OAAQ,CAAC3B,MAAOoD,EAAc,IAAI,GACjD,KACJjC,EAAAA,cAACoD,EAAAA,GAAM,CAACC,KAAM,QAASxC,MAAO,QAASyC,QAASA,KAC5Cf,EAAc,CAAC/B,OAAQ,CAAC3B,MAAOoD,EAAc,KAAK,GAClD,QAGV,E,eE/Ld,MAAQnI,MAAOyJ,GAAiBC,GAC1B,cAAEC,EAAa,OAAE1J,GAAWwJ,EA+B5BG,EArB0BC,EAAGnF,QAAOoF,aAAYC,wBAClD,MAAMC,EAAWtF,IAAUqF,EAK3B,MAJc,QAAVrF,GAAmBoF,IAAeG,EAAWC,UAC7CxF,EAAQ,cAIRwB,EAAAA,cAAA,OACII,UAAW4C,IACP,kEACA,2BACAc,GAAY,kBACZA,EACM,iBACA,sEAGV9D,EAAAA,cAAA,QAAMI,UAAU,QAAQ5B,GACtB,EAGkC,IAE3CyF,EAAU,SAAVA,GAAU,OAAVA,EAAU,gBAAVA,EAAU,gBAAVA,CAAU,EAAVA,GAAU,IAKVF,EAAU,SAAVA,GAAU,OAAVA,EAAU,YAAVA,EAAU,sBAAVA,EAAU,cAAVA,EAAU,kBAAVA,CAAU,EAAVA,GAAU,IAOf,MAIMG,EAAkB,GAET,SAASC,GAAe,2BAACC,EAA0B,oBAAE7L,IAChE,MAAM,EAAE8L,IAAMC,EAAAA,EAAAA,IAAe,YACtBC,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,IACxCyC,EAA6BC,IAAkC1C,EAAAA,EAAAA,WAAS,IACxE6B,EAAmBc,IAAwB3C,EAAAA,EAAAA,UAAS,QACpD4C,EAAaC,IAAkB7C,EAAAA,EAAAA,UAAS,CAAC8C,QAAQ,EAAOC,SAAS,MAGjE,iBAAEC,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OACxDtB,EAAYuB,IAAiBnD,EAAAA,EAAAA,UAAS+B,EAAWqB,OACjDC,EAAYC,IAAiBtD,EAAAA,EAAAA,UAASiC,EAAWsB,SACjDC,EAAWC,IAAgBzD,EAAAA,EAAAA,UAAS,KACpC0D,EAAsBC,IAA2B3D,EAAAA,EAAAA,UAAS,EAAE,IAAM,OAClE4D,EAA0BC,IAA+B7D,EAAAA,EAAAA,UAAS,IAClE/K,EAAU6O,IAAe9D,EAAAA,EAAAA,UAAS,KAEzCG,EAAAA,EAAAA,YAAU,KACN,MAAM4D,EAAYvC,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAElEC,EAAgBH,EAAUI,gBAAgB,SAChDhB,EAAcpB,EAAWqB,MACzBE,EAAcrB,EAAWsB,QACzBE,EAAaS,EAAcE,cAAcZ,WACzCG,EAAwBO,EAAcE,cAAcC,8BAA8BC,UAAUC,WAC5FV,EAA4BK,EAAcE,cAAcC,8BAA8BrC,QAAQwC,oBAE9F,MAAMC,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EACxBT,EAAgCH,EAAcE,cAAcC,8BAClEA,EAA8BrC,QAAQwC,mBAAqBK,EAC3DX,EAAca,iBAAiB,CAACC,gBAAiBH,EAAcR,8BAA+BA,IAC9F1B,EAAqBnG,EAAM,OAInCuH,EAAUkB,cAAc,OAAQ,CAC5BC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,WAGrC,GACH,KAGHjF,EAAAA,EAAAA,YAAU,KACN,MAIM+D,EAJY1C,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAExCE,gBAAgB,SAC1CkB,EAAQ9O,EAAoB8B,OAAOiN,mBACnCC,EAAUhP,EAAoB8B,OAAOmN,qBACrCC,EAAUlP,EAAoB8B,OAAOqN,qBACrCC,EAAgB,GAiBtB,MAfA,CAACN,EAAOE,EAASE,GAASxM,SAAQhB,IAC9B1B,EAAoBqP,UAAU3N,GAAK,KAC/B,MAAMwM,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EACxBT,EAAgCH,EAAcE,cAAcC,8BAClEA,EAA8BrC,QAAQwC,mBAAqBK,EAC3DX,EAAca,iBAAiB,CAACC,gBAAiBH,EAAcR,8BAA+BA,IAC9F1B,EAAqBnG,EAAM,MAE/B,GAEP,IAGE,KACHmJ,EAAc1M,SAAQ4M,IAClBA,GAAO,GACT,CACL,GACF,KAGH1F,EAAAA,EAAAA,YAAU,KACN,MAIM+D,EAJY1C,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAExCE,gBAAgB,SAC1CkB,EAAQ9O,EAAoB8B,OAAOiN,mBACnCC,EAAUhP,EAAoB8B,OAAOmN,qBACrCC,EAAUlP,EAAoB8B,OAAOqN,qBACrCC,EAAgB,GAiBtB,MAfA,CAACN,EAAOE,EAASE,GAASxM,SAAQhB,IAC9B1B,EAAoBqP,UAAU3N,GAAK,KAC/B,MAAMwM,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EACxBT,EAAgCH,EAAcE,cAAcC,8BAClEA,EAA8BrC,QAAQwC,mBAAqBK,EAC3DX,EAAca,iBAAiB,CAACC,gBAAiBH,EAAcR,8BAA+BA,IAC9F1B,EAAqBnG,EAAM,MAE/B,GAEP,IAGE,KACHmJ,EAAc1M,SAAQ4M,IAClBA,GAAO,GACT,CACL,GACF,KAEH1F,EAAAA,EAAAA,YAAU,KAzHW2F,IAACC,EAAkBC,EA0HlBxE,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAExCE,gBAAgB,SAClCY,iBAAiB,CAC3BvB,UAAWA,EACXyC,gBAjIcF,EAiImB1C,EAjID2C,EAiIapE,EAhI9CoE,EAAO,WAAaD,GAiInB1B,8BAA+B,CAC3BC,UAAW,CACPC,UAAWb,GAEf1B,QAAS,CACLwC,mBAAoBZ,KAG9B,GACH,CAACJ,EAAWH,EAAYzB,EAAY8B,IA8EvC,OA5CAvD,EAAAA,EAAAA,YAAU,KACN,MAAM+F,EAAW9D,EAA2B4B,uBAAuBhB,GAC7De,EAAYvC,EAAAA,iBAAAA,wBACd0E,EAASlT,GACTkT,EAASjC,mBAEPkC,EAAiBD,EAASE,QAChCD,EAAeE,SAAW,CAACpO,EAAKwE,KACzByF,EAAgBjK,KACfkO,EAAeG,oBAAoBrO,EAAKiK,EAAgBjK,IACxDiK,EAAgBjK,GAAO,MAE3BiK,EAAgBjK,GAAOwE,EACvB0J,EAAetO,iBAAiBI,EAAKwE,EAAS,EAElD0J,EAAeI,YAAetO,IAC1BkO,EAAeG,oBAAoBrO,EAAKiK,EAAgBjK,IACxDiK,EAAgBjK,GAAO,IAAI,EAG5B2K,EAAYE,QACXiB,EAAUyC,eAAe,SACzBzC,EAAUkB,cAAc,YAAa,CACjCC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,YAIvCe,EAAeE,SAAStO,EAAO0O,YAAaxO,IA7DvByO,EAACzO,EAAK8K,KAE/B,GAA8B,IAA3B9K,EAAIE,OAAOgN,YAAmB,CAC7B,MAAMe,EAAW9D,EAA2B4B,uBAAuBhB,GAC7D2D,EAAc1O,EAAIE,OAAOyO,cAAcC,MACvCC,EAAYZ,EAASa,eACrBC,EAAQF,EAAUA,UAAUG,aAAaN,GAAalN,IAAIE,KAAKC,OAErEoN,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAC5BA,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAC5BA,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAE5B,MAAM,WAACE,EAAU,WAAEC,GAAcL,EACjC,GAAIM,EAAAA,UAAAA,sBAA8BJ,EAAOG,GAAa,CAClD,MAAME,EAAYF,EAAW,GACvBG,EAAYH,EAAW,GAAKA,EAAW,GAEvCtK,EACFqK,EAAWF,EAAM,GAAKM,EAAYN,EAAM,GAAKK,EAAYL,EAAM,IAE/DrD,EADAZ,EACwB,CAAClG,EAAO6G,EAAqB,IAE7B,CAACA,EAAqB,GAAI7G,GAE1D,CACJ,GAoCyD6J,CAAqBzO,EAAK2K,EAAYG,QAAQ,MAGnGgB,EAAUyC,eAAe,aACzBzC,EAAUkB,cAAc,QAAS,CAC7BC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,YAIvCe,EAAeI,YAAYxO,EAAO0O,YACtC,GACD,CAAC7D,EAAYE,OAAQF,EAAYG,UAGhC/E,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,2BAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,QAAMI,UAAU,kDACX,iBAELJ,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOwE,IAAepB,EAAWsB,OAAS,UAAY,YACtDjC,QAASA,KAAOgC,EAAcrB,EAAWsB,OAAO,GAClD,UACFvF,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOwE,IAAepB,EAAW0F,OAAS,UAAY,YACtDrG,QAASA,KAAOgC,EAAcrB,EAAW0F,OAAO,GAClD,WAGN3J,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO+C,IAAeG,EAAWqB,KAAO,UAAY,YACpD9B,QAASA,KAAO6B,EAAcpB,EAAWqB,KAAK,GAChD,QACFpF,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO+C,IAAeG,EAAWuC,UAAY,UAAY,YACzDhD,QAASA,KAAO6B,EAAcpB,EAAWuC,UAAU,GACrD,aACFtG,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO+C,IAAeG,EAAW6F,MAAQ,UAAY,YACrDtG,QAASA,KAAO6B,EAAcpB,EAAW6F,MAAM,GACjD,SACF5J,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO+C,IAAeG,EAAWC,QAAU,UAAY,YACvDV,QAASA,KAAO6B,EAAcpB,EAAWC,QAAQ,GACnD,YAENhE,EAAAA,cAAA,OAAKI,UAAU,gCACXJ,EAAAA,cAAA,OAAKI,UAAU,uCAAuC,UACtDJ,EAAAA,cAAC6J,EAAAA,EAAU,CACPzI,SAAU,EACVC,SAAU,IACVxC,MAAO2G,EACPnF,SAAWxB,IAAW4G,EAAa5G,EAAM,EACzCyC,KAAM,EACNE,mBAAmB,oBACnBC,eAAe,WACfvB,eAAe,yBACfqB,KAAK,QAGbvB,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJpF,GAAgCD,EAA4B,GAGhEzE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwByB,MAIpCzE,EAAAA,cAAA,QAAMI,UAAU,yCACX,2BAIPqE,GACEzE,EAAAA,cAAA,OAAKI,UAAU,YAAYuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC7D5C,EAAAA,cAAA,QAAMI,UAAU,kDACX,2BAELJ,EAAAA,cAAC+J,EAAAA,GAAQ,CACLC,MAAO/S,EACPgT,SAAUnD,GAAQpD,EAAiB,IAAIoD,EAAMlD,aAAYC,2BAOxED,IAAeG,EAAWuC,WACvBtG,EAAAA,cAAA,OAAKI,UAAU,+BAA+BuC,MAAO,CAACC,cAAc,SAAU5B,MAAM,SAChFhB,EAAAA,cAAA,OAAKI,UAAU,qCAAqCuC,MAAO,CAAC3B,MAAO,UACnEhB,EAAAA,cAAA,OAAKI,UAAU,sCAAsCuC,MAAO,CAAC3B,MAAM,SAC9D,oBAELhB,EAAAA,cAACiB,EAAc,CACXG,UAAW,IACXC,SAAU,IACVH,OAAQwE,EAAqB,GAC7BvE,OAAQuE,EAAqB,GAC7BrF,SAAUA,CAAC6J,EAAMC,KAAUxE,EAAwB,CAACuE,EAAMC,GAAM,EAChE7I,KAAM,EACNE,mBAAmB,2BACnBC,eAAe,SACfvB,eAAe,gCACfqB,KAAK,OAETvB,EAAAA,cAAA,OAAKI,UAAU,wDAAwDuC,MAAO,CAAC3B,MAAM,SAChF,6CAELhB,EAAAA,cAAA,OAAKI,UAAU,gDACXJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAMC,SAAS,GAAM,GAChE,WACF/E,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAMC,SAAS,GAAO,GACjE,YAGFH,EAAYE,QACR9E,EAAAA,cAACoD,EAAAA,GAAM,CACHC,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAOC,SAAS,GAAM,GAE9D,wBASjC/E,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CC3bA,MAkBMsD,EAlB0BC,EAAGnF,QAAO6F,EAAG+F,iBACzC,MAAMtG,EAAWtF,IAAU4L,EAE3B,OACIpK,EAAAA,cAAA,OACII,UAAW4C,IACP,kEACA,2BACAc,GAAY,kBACZA,EACM,iBACA,sEAGV9D,EAAAA,cAAA,QAAMI,UAAU,QAAQ5B,GACtB,EAGkC,IAE3C6L,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,0BAAjBA,EAAiB,4BAAjBA,CAAiB,EAAjBA,GAAiB,IAKP,SAASC,GAAwB,2BAAClG,EAA0B,oBAAE7L,IACzE,MAAM,EAAE8L,IAAMC,EAAAA,EAAAA,IAAe,YAEtBC,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,IACxCiG,EAAgBsC,IAAqBvI,EAAAA,EAAAA,UAASqI,EAAkBG,eAChE,iBAAExF,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OAExDjO,EAAU6O,IAAe9D,EAAAA,EAAAA,UAAS,KAClCyI,EAAsBC,IAA2B1I,EAAAA,EAAAA,WAAS,IAC1DoI,EAAYO,IAAiB3I,EAAAA,EAAAA,UAAS,OA8D7C,OA3DAG,EAAAA,EAAAA,YAAU,KACN,MAIMyI,EAJYpH,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEpCE,gBAAgB,iBAC9CkB,EAAQ9O,EAAoB8B,OAAOiN,mBACnCC,EAAUhP,EAAoB8B,OAAOmN,qBACrCC,EAAUlP,EAAoB8B,OAAOqN,qBACrCC,EAAgB,GAetB,MAbA,CAACN,EAAOE,EAASE,GAASxM,SAAQhB,IAC9B1B,EAAoBqP,UAAU3N,GAAK,KAC3B,MAAMwM,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EAC9B8D,EAAkB7D,iBAAiB,CAACC,gBAAiBH,IACrD8D,EAAcnM,EAAM,MAExB,GAEX,IAGE,KACHmJ,EAAc1M,SAAQ4M,IAClBA,GAAO,GACT,CACL,GACF,KAEH1F,EAAAA,EAAAA,YAAU,KACN,MAIM0I,EAJYrH,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEvCE,gBAAgB,iBACjDoE,EAAkBM,EAAezE,cAAc6B,gBAE/C,MAAMxB,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EAC9B6D,EAAcnM,GACdqM,EAAe9D,iBAAiB,CAACC,gBAAiBH,GAAc,MAEpE,GACL,KAEH1E,EAAAA,EAAAA,YAAU,KACYqB,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEvCE,gBAAgB,iBAClCY,iBAAiB,CAC5BkB,eAAgBA,GAClB,GACH,CAACA,IAGAjI,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,mCAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,QAEHJ,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOoH,IAAmBoC,EAAkBG,YAAc,UAAY,YACtElH,QAASA,KAAOiH,EAAkBF,EAAkBG,YAAY,GAClE,QACFxK,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOoH,IAAmBoC,EAAkBS,aAAe,UAAY,YACvExH,QAASA,KAAOiH,EAAkBF,EAAkBS,aAAa,GACnE,UAEN9K,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJY,GAAyBD,EAAqB,GAGlDzK,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwByH,MAIpCzK,EAAAA,cAAA,QAAMI,UAAU,yCACX,mBAIPqK,GACEzK,EAAAA,cAAA,OAAKI,UAAU,YAAYuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC7D5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,mBAEHJ,EAAAA,cAAC+J,EAAAA,GAAQ,CACLC,MAAO/S,EACPgT,SAAUnD,GAAQpD,EAAiB,IAAIoD,EAAMzC,IAAG+F,qBAQ5EpK,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CCxLe,SAAS2K,MACpB,MAAOxG,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,GAE/C,OACIhC,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,0BAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,oCAIXJ,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CC7BA,MAAQtG,MAAOyJ,GAAiBC,GACxBC,cAAa,EAAE1J,OAAMA,GAAKwJ,EAE5BW,EAAkB,GAET,SAAS8G,GAAuC,oBACHzS,EAAmB,2BACnB6L,EAA0B,gBAC1B6G,IAExD,MAAO1G,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,KACxC,iBAAEgD,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OAExDgG,EAAgBC,IAAqBnJ,EAAAA,EAAAA,UAAS,EAAE,IAAM,OACtDoJ,EAAmBC,IAAwBrJ,EAAAA,EAAAA,UAAS,IACpD4C,EAAaC,IAAkB7C,EAAAA,EAAAA,UAAS,CAAC8C,QAAQ,EAAOC,SAAS,KAGxE5C,EAAAA,EAAAA,YAAU,KACN,MAIMmJ,EAJY9H,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEjCE,gBAAgB,iCACvDkF,EAAqBC,EAAqBlF,cAAcmF,qBAAqB,GAC9E,KAEHpJ,EAAAA,EAAAA,YAAU,KACYqB,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAExCE,gBAAgB,iCAClCY,iBAAiB,CAC3BwE,qBAAsBH,IAE1B/T,QAAQmU,IAAI,oBAAqBJ,EAAkB,GACpD,CAACA,KA8BJjJ,EAAAA,EAAAA,YAAU,KACN,MAAM+F,EAAW9D,EAA2B4B,uBAAuBhB,GAC7De,EAAYvC,EAAAA,iBAAAA,wBACd0E,EAASlT,GACTkT,EAASjC,mBAEPkC,EAAiBD,EAASE,QAChCD,EAAeE,SAAW,CAACpO,EAAKwE,KACzByF,EAAgBjK,KACfkO,EAAeG,oBAAoBrO,EAAKiK,EAAgBjK,IACxDiK,EAAgBjK,GAAO,MAE3BiK,EAAgBjK,GAAOwE,EACvB0J,EAAetO,iBAAiBI,EAAKwE,EAAS,EAElD0J,EAAeI,YAAetO,IAC1BkO,EAAeG,oBAAoBrO,EAAKiK,EAAgBjK,IACxDiK,EAAgBjK,GAAO,IAAI,EAG5B2K,EAAYE,QACXiB,EAAUyC,eAAe,iCACzBzC,EAAUkB,cAAc,YAAa,CACjCC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,YAIvCe,EAAeE,SAAStO,EAAO0O,YAAaxO,IAzDvByO,EAACzO,EAAK8K,KAE/B,GAA8B,IAA3B9K,EAAIE,OAAOgN,YAAmB,CAC7B,MAAMe,EAAW9D,EAA2B4B,uBAAuBhB,GAC7D2D,EAAc1O,EAAIE,OAAOyO,cAAcC,MACvCC,EAAYZ,EAASa,eACrBC,EAAQF,EAAUA,UAAUG,aAAaN,GAAalN,IAAIE,KAAKC,OAErEoN,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAC5BA,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAC5BA,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAE5B,MAAM,WAACE,EAAU,WAAEC,GAAcL,EACjC,GAAIM,EAAAA,UAAAA,sBAA8BJ,EAAOG,GAAa,CAClD,MAAME,EAAYF,EAAW,GACvBG,EAAYH,EAAW,GAAKA,EAAW,GAEvCtK,EACFqK,EAAWF,EAAM,GAAKM,EAAYN,EAAM,GAAKK,EAAYL,EAAM,IAE/DmC,EADApG,EACkB,CAAClG,EAAOqM,EAAe,IAEvB,CAACA,EAAe,GAAIrM,GAE9C,CACJ,GAgCyD6J,CAAqBzO,EAAK2K,EAAYG,QAAQ,MAGnGgB,EAAUyC,eAAe,aACzBzC,EAAUkB,cAAc,gCAAiC,CACrDC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,YAIvCe,EAAeI,YAAYxO,EAAO0O,YACtC,GACD,CAAC7D,EAAYE,OAAQF,EAAYG,UAiEpC,OACI/E,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,mDAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,OAAKI,UAAU,+BAA+BuC,MAAO,CAACC,cAAc,SAAU5B,MAAM,SAChFhB,EAAAA,cAAA,OAAKI,UAAU,sCAAsCuC,MAAO,CAAC3B,MAAM,SAAU,oBAC7EhB,EAAAA,cAACiB,EAAc,CACXG,UAAW,IACXC,SAAU,IACVH,OAAQgK,EAAe,GACvB/J,OAAQ+J,EAAe,GACvB7K,SAAUA,CAAC6J,EAAMC,KAAUgB,EAAkB,CAACjB,EAAMC,GAAM,EAC1D7I,KAAM,EACNE,mBAAmB,2BACnBC,eAAe,SACfvB,eAAe,gCACfqB,KAAK,KAETvB,EAAAA,cAAA,OAAKI,UAAU,wDAAwDuC,MAAO,CAAC3B,MAAM,SAAU,6CAC/FhB,EAAAA,cAAA,OAAKI,UAAU,gDACXJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAMC,SAAS,GAAM,GAChE,WACF/E,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAMC,SAAS,GAAO,GACjE,YAGFH,EAAYE,QACR9E,EAAAA,cAACoD,EAAAA,GAAM,CACHC,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAOC,SAAS,GAAM,GAE9D,uBAKjB/E,EAAAA,cAAA,OAAKI,UAAU,+BAA+BuC,MAAO,CAAC3B,MAAM,OAAQ4B,cAAc,WAC9E5C,EAAAA,cAAA,OAAKI,UAAU,sCAAsCuC,MAAO,CAAC3B,MAAM,SAAU,sBAC7EhB,EAAAA,cAAC6J,EAAAA,EAAU,CACPzI,SAAU,EACVC,SAAU,IACVxC,MAAOuM,EACP/K,SAAWxB,IAAWwM,EAAqBxM,EAAM,EACjDyC,KAAM,EACNE,mBAAmB,2BACnBC,eAAe,SACfvB,eAAe,gCACfqB,KAAK,MAGbvB,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KArJZmI,MACrB,MACMC,EADStH,EAA2B4B,uBAAuBhB,GAAkB2G,YAE9ElQ,KAAKmQ,IAGF,MAAMC,EAAWD,EAAGE,aAAeF,EAAGG,IACtC,OAAOxS,EAAAA,MAAMC,UAAUqS,EAAS,IAGnClF,QAAQqF,KAASA,IAEhBC,EAAyBzI,EAAAA,WAAAA,UAAAA,iCAC3B,iCAGJ,IAAKyI,EACD,MAAM,IAAIlU,MAAM,2BAGpB,MAAMmU,EAAgBD,EAAuB,GAK7C,IAJmBzI,EAAAA,WAAAA,MAAAA,cACf0I,GAGa,OAGjB,MAAMC,EAAWT,EAAa/E,QAAOqF,GAAMA,EAAGvS,SAAS3B,SAAQ,GACzDsU,EAAqBV,EAAa/E,QAAOqF,IAAOA,EAAGvS,SAAS3B,SAAQ,GACpEuU,EAAgB9T,EAAoBmO,mBAE1ClD,EAAAA,UAAAA,aAAAA,mCACIyI,EACAG,EACA,CACI,CAAEE,OAAQH,EAAUI,MAAOrB,EAAe,GAAIsB,MAAOtB,EAAe,KAExE,CACIuB,mBAAoB,EACpBC,WAAW,EACXC,YAAa,EACb9F,aAAcwF,EAAc,GAAGO,oBAEtC,EAyGuCnB,EAAkB,GACpC,sBAENzL,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAjHhBuJ,MACjB,MAAMZ,EAAyBzI,EAAAA,WAAAA,UAAAA,iCAC3B,iCAGJ,IAAKyI,EACD,MAAM,IAAIlU,MAAM,2BAEpBV,QAAQmU,IAAI,0BAA2BS,GAEvC,MAAMC,EAAgBD,EAAuB,GAC7C5U,QAAQmU,IAAI,gBAAiBhI,EAAAA,WAAAA,OAC7BA,EAAAA,WAAAA,MAAAA,iBAA0C0I,GAC1C9H,EAA2B4B,uBAAuBhB,GAAkB8H,QAAQ,EAoGpCD,EAAc,GAChC,4BAId7M,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CCzRA,MAAQtG,MAAOyJ,GAAiBC,GACxBC,cAAa,EAAE1J,OAAMA,GAAKwJ,EAE5BW,EAAkB,GAET,SAAS6I,IAA+B,oBACnDxU,EAAmB,2BACnB6L,EAA0B,gBAC1B6G,IAEA,MAAO1G,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,KACxC,iBAAEgD,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OAExDgG,EAAgBC,IAAqBnJ,EAAAA,EAAAA,UAAS,EAAE,IAAM,OACtD4C,EAAaC,IAAkB7C,EAAAA,EAAAA,UAAS,CAAC8C,QAAQ,EAAOC,SAAS,KA8BxE5C,EAAAA,EAAAA,YAAU,KACN,MAAM+F,EAAW9D,EAA2B4B,uBAAuBhB,GAC7De,EAAYvC,EAAAA,iBAAAA,wBACd0E,EAASlT,GACTkT,EAASjC,mBAEPkC,EAAiBD,EAASE,QAChCD,EAAeE,SAAW,CAACpO,EAAKwE,KACzByF,EAAgBjK,KACfkO,EAAeG,oBAAoBrO,EAAKiK,EAAgBjK,IACxDiK,EAAgBjK,GAAO,MAE3BiK,EAAgBjK,GAAOwE,EACvB0J,EAAetO,iBAAiBI,EAAKwE,EAAS,EAElD0J,EAAeI,YAAetO,IAC1BkO,EAAeG,oBAAoBrO,EAAKiK,EAAgBjK,IACxDiK,EAAgBjK,GAAO,IAAI,EAG5B2K,EAAYE,QACXiB,EAAUyC,eAAe,yBACzBzC,EAAUkB,cAAc,YAAa,CACjCC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,YAIvCe,EAAeE,SAAStO,EAAO0O,YAAaxO,IAzDvByO,EAACzO,EAAK8K,KAE/B,GAA8B,IAA3B9K,EAAIE,OAAOgN,YAAmB,CAC7B,MAAMe,EAAW9D,EAA2B4B,uBAAuBhB,GAC7D2D,EAAc1O,EAAIE,OAAOyO,cAAcC,MACvCC,EAAYZ,EAASa,eACrBC,EAAQF,EAAUA,UAAUG,aAAaN,GAAalN,IAAIE,KAAKC,OAErEoN,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAC5BA,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAC5BA,EAAM,GAAKrN,KAAKC,MAAMoN,EAAM,IAE5B,MAAM,WAACE,EAAU,WAAEC,GAAcL,EACjC,GAAIM,EAAAA,UAAAA,sBAA8BJ,EAAOG,GAAa,CAClD,MAAME,EAAYF,EAAW,GACvBG,EAAYH,EAAW,GAAKA,EAAW,GAEvCtK,EACFqK,EAAWF,EAAM,GAAKM,EAAYN,EAAM,GAAKK,EAAYL,EAAM,IAE/DmC,EADApG,EACkB,CAAClG,EAAOqM,EAAe,IAEvB,CAACA,EAAe,GAAIrM,GAE9C,CACJ,GAgCyD6J,CAAqBzO,EAAK2K,EAAYG,QAAQ,MAGnGgB,EAAUyC,eAAe,aACzBzC,EAAUkB,cAAc,wBAAyB,CAC7CC,SAAU,CACN,CACIC,YAAa1D,EAAc2D,YAIvCe,EAAeI,YAAYxO,EAAO0O,YACtC,GACD,CAAC7D,EAAYE,OAAQF,EAAYG,UAmEpC,OACI/E,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,gDAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,OAAKI,UAAU,wCAAwCuC,MAAO,CAACC,cAAc,SAAU5B,MAAM,SACzFhB,EAAAA,cAAA,OAAKI,UAAU,+CAA+CuC,MAAO,CAAC3B,MAAM,SAAU,oBACtFhB,EAAAA,cAACiB,EAAc,CACXG,UAAW,IACXC,SAAU,IACVH,OAAQgK,EAAe,GACvB/J,OAAQ+J,EAAe,GACvB7K,SAAUA,CAAC6J,EAAMC,KAAUgB,EAAkB,CAACjB,EAAMC,GAAM,EAC1D7I,KAAM,EACNE,mBAAmB,oCACnBC,eAAe,SACfvB,eAAe,gCACfqB,KAAK,OAETvB,EAAAA,cAAA,OAAKI,UAAU,wDAAwDuC,MAAO,CAAC3B,MAAM,SAAU,6CAC/FhB,EAAAA,cAAA,OAAKI,UAAU,gDACXJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAMC,SAAS,GAAM,GAChE,WACF/E,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAMC,SAAS,GAAO,GACjE,YAGFH,EAAYE,QACR9E,EAAAA,cAACoD,EAAAA,GAAM,CACHC,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAAQuB,EAAe,CAACC,QAAQ,EAAOC,SAAS,GAAM,GAE9D,uBAKjB/E,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAzIZmI,MACrB,MACMC,EADStH,EAA2B4B,uBAAuBhB,GAAkB2G,YAE9ElQ,KAAKmQ,IAGF,MAAMC,EAAWD,EAAGE,aAAeF,EAAGG,IACtC,OAAOxS,EAAAA,MAAMC,UAAUqS,EAAS,IAGnClF,QAAQqF,KAASA,IAEhBC,EAAyBzI,EAAAA,WAAAA,UAAAA,iCAC3B,yBAGJ,IAAKyI,EACD,MAAM,IAAIlU,MAAM,2BAGpB,MAAMmU,EAAgBD,EAAuB,GAK7C,IAJmBzI,EAAAA,WAAAA,MAAAA,cACf0I,GAGa,OAGjB,MAAMC,EAAWT,EAAa/E,QAAOqF,GAAMA,EAAGvS,SAAS3B,SAAQ,GACzDsU,EAAqBV,EAAa/E,QAAOqF,IAAOA,EAAGvS,SAAS3B,SAAQ,GAEpEuU,EAAgB9T,EAAoBmO,mBAC1CrP,QAAQmU,IAAI,eAAgBa,GAE5B7I,EAAAA,UAAAA,aAAAA,mCACIyI,EACAG,EACA,CACI,CAAEE,OAAQH,EAAUI,MAAOrB,EAAe,GAAIsB,MAAOtB,EAAe,KAExE,CACIuB,mBAAoB,EACpBC,WAAW,EACXC,YAAa,EACb9F,aAAcwF,EAAc,GAAGO,oBAEtC,EA2FuCnB,EAAkB,GACpC,sBAENzL,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KAnGhBuJ,MACjB,MAAMZ,EAAyBzI,EAAAA,WAAAA,UAAAA,iCAC3B,yBAGJ,IAAKyI,EACD,MAAM,IAAIlU,MAAM,2BAEpBV,QAAQmU,IAAI,0BAA2BS,GAEvC,MAAMC,EAAgBD,EAAuB,GAC7C5U,QAAQmU,IAAI,gBAAiBhI,EAAAA,WAAAA,OAC7BA,EAAAA,WAAAA,MAAAA,iBAA0C0I,GAC1C9H,EAA2B4B,uBAAuBhB,GAAkB8H,QAAQ,EAsFpCD,EAAc,GAChC,4BAId7M,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CCvPA,MAkBMsD,GAlB0BC,EAAGnF,QAAO6F,EAAG+F,iBACzC,MAAMtG,EAAWtF,IAAU4L,EAE3B,OACIpK,EAAAA,cAAA,OACII,UAAW4C,IACP,kEACA,2BACAc,GAAY,kBACZA,EACM,iBACA,sEAGV9D,EAAAA,cAAA,QAAMI,UAAU,QAAQ5B,GACtB,EAGkC,IAE3CwO,GAAoB,SAApBA,GAAoB,OAApBA,EAAoB,0BAApBA,EAAoB,4BAApBA,CAAoB,EAApBA,IAAoB,IAKV,SAASC,IAA2B,2BAAC7I,EAA0B,oBAAE7L,IAC5E,MAAM,EAAE8L,IAAMC,EAAAA,EAAAA,IAAe,YAEtBC,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,IACxCiG,EAAgBsC,IAAqBvI,EAAAA,EAAAA,UAASgL,GAAqBxC,eACnE,iBAAExF,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OAExDjO,EAAU6O,IAAe9D,EAAAA,EAAAA,UAAS,KAClCyI,EAAsBC,IAA2B1I,EAAAA,EAAAA,WAAS,IAC1DoI,EAAYO,IAAiB3I,EAAAA,EAAAA,UAAS,OA8D7C,OA3DAG,EAAAA,EAAAA,YAAU,KACN,MAIM+K,EAJY1J,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEpCE,gBAAgB,oBAC9CkB,EAAQ9O,EAAoB8B,OAAOiN,mBACnCC,EAAUhP,EAAoB8B,OAAOmN,qBACrCC,EAAUlP,EAAoB8B,OAAOqN,qBACrCC,EAAgB,GAetB,MAbA,CAACN,EAAOE,EAASE,GAASxM,SAAQhB,IAC9B1B,EAAoBqP,UAAU3N,GAAK,KAC3B,MAAMwM,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EAC9BoG,EAAkBnG,iBAAiB,CAACC,gBAAiBH,IACrD8D,EAAcnM,EAAM,MAExB,GAEX,IAGE,KACHmJ,EAAc1M,SAAQ4M,IAClBA,GAAO,GACT,CACL,GACF,KAEH1F,EAAAA,EAAAA,YAAU,KACN,MAIMgL,EAJY3J,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEpCE,gBAAgB,oBACpDoE,EAAkB4C,EAAkB/G,cAAc6B,gBAElD,MAAMxB,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EAC9B6D,EAAcnM,GACd2O,EAAkBpG,iBAAiB,CAACC,gBAAiBH,GAAc,MAEvE,GACL,KAEH1E,EAAAA,EAAAA,YAAU,KACYqB,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEpCE,gBAAgB,oBAClCY,iBAAiB,CAC/BkB,eAAgBA,GAClB,GACH,CAACA,IAGAjI,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,kCAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,QAEHJ,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOoH,IAAmB+E,GAAqBxC,YAAc,UAAY,YACzElH,QAASA,KAAOiH,EAAkByC,GAAqBxC,YAAY,GACrE,QACFxK,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOoH,IAAmB+E,GAAqBlC,aAAe,UAAY,YAC1ExH,QAASA,KAAOiH,EAAkByC,GAAqBlC,aAAa,GACtE,UAEN9K,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJY,GAAyBD,EAAqB,GAGlDzK,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwByH,MAIpCzK,EAAAA,cAAA,QAAMI,UAAU,yCACX,mBAIPqK,GACEzK,EAAAA,cAAA,OAAKI,UAAU,YAAYuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC7D5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,mBAEHJ,EAAAA,cAAC+J,EAAAA,GAAQ,CACLC,MAAO/S,EACPgT,SAAUnD,GAAQpD,GAAiB,IAAIoD,EAAMzC,IAAG+F,qBAQ5EpK,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CCrLA,MAkBMsD,GAlB0BC,EAAGnF,QAAO6F,EAAG+F,iBACzC,MAAMtG,EAAWtF,IAAU4L,EAE3B,OACIpK,EAAAA,cAAA,OACII,UAAW4C,IACP,kEACA,2BACAc,GAAY,kBACZA,EACM,iBACA,sEAGV9D,EAAAA,cAAA,QAAMI,UAAU,QAAQ5B,GACtB,EAGkC,IAE3C4O,GAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,0BAAjBA,EAAiB,4BAAjBA,CAAiB,EAAjBA,IAAiB,IAKP,SAASC,IAAwB,2BAACjJ,EAA0B,oBAAE7L,IACzE,MAAM,EAAE8L,IAAMC,EAAAA,EAAAA,IAAe,YAEtBC,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,IACxCiG,EAAgBsC,IAAqBvI,EAAAA,EAAAA,UAASoL,GAAkB5C,eAChE,iBAAExF,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OAExDjO,EAAU6O,IAAe9D,EAAAA,EAAAA,UAAS,KAClCyI,EAAsBC,IAA2B1I,EAAAA,EAAAA,WAAS,IAC1DoI,EAAYO,IAAiB3I,EAAAA,EAAAA,UAAS,OA8D7C,OA3DAG,EAAAA,EAAAA,YAAU,KACN,MAIMmL,EAJY9J,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEpCE,gBAAgB,oBAC9CkB,EAAQ9O,EAAoB8B,OAAOiN,mBACnCC,EAAUhP,EAAoB8B,OAAOmN,qBACrCC,EAAUlP,EAAoB8B,OAAOqN,qBACrCC,EAAgB,GAetB,MAbA,CAACN,EAAOE,EAASE,GAASxM,SAAQhB,IAC9B1B,EAAoBqP,UAAU3N,GAAK,KAC3B,MAAMwM,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EAC9BwG,EAAkBvG,iBAAiB,CAACC,gBAAiBH,IACrD8D,EAAcnM,EAAM,MAExB,GAEX,IAGE,KACHmJ,EAAc1M,SAAQ4M,IAClBA,GAAO,GACT,CACL,GACF,KAEH1F,EAAAA,EAAAA,YAAU,KACN,MAIMoL,EAJY/J,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEvCE,gBAAgB,iBACjDoE,EAAkBgD,EAAenH,cAAc6B,gBAE/C,MAAMxB,EAAelO,EAAoBmO,mBAAmBC,QAAOC,GAAKA,EAAE9C,WAAU,GACpFgC,EAAY,CAAC,CAACtH,MAAO,MAAOqI,aAAc,MAAOJ,EAAaxP,SAAS0P,QAAOC,GAAKA,KAAInL,KAAImL,IAAa,IAAIA,EAAGtD,QAAUwD,IACjH,MAAM,MAACtI,EAAK,aAAEqI,GAAgBC,EAC9B6D,EAAcnM,GACd+O,EAAexG,iBAAiB,CAACC,gBAAiBH,GAAc,MAEpE,GACL,KAEH1E,EAAAA,EAAAA,YAAU,KACYqB,EAAAA,iBAAAA,wBACdY,EAA2B4B,uBAAuBhB,GAAkBhQ,GACpEoP,EAA2B4B,uBAAuBhB,GAAkBiB,mBAEvCE,gBAAgB,iBAClCY,iBAAiB,CAC5BkB,eAAgBA,GAClB,GACH,CAACA,IAGAjI,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASA,IAAMkB,GAAgBD,IAE/BvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,+BAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,qBAAqBuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WACtE5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,QAEHJ,EAAAA,cAAA,OACII,UAAU,iDACVuC,MAAO,CAAC6G,QAAQ,cAAeC,eAAe,iBAE9CzJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOoH,IAAmBmF,GAAkB5C,YAAc,UAAY,YACtElH,QAASA,KAAOiH,EAAkB6C,GAAkB5C,YAAY,GAClE,QACFxK,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAOoH,IAAmBmF,GAAkBtC,aAAe,UAAY,YACvExH,QAASA,KAAOiH,EAAkB6C,GAAkBtC,aAAa,GACnE,UAEN9K,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJY,GAAyBD,EAAqB,GAGlDzK,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwByH,MAIpCzK,EAAAA,cAAA,QAAMI,UAAU,yCACX,mBAIPqK,GACEzK,EAAAA,cAAA,OAAKI,UAAU,YAAYuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC7D5C,EAAAA,cAAA,QAAMI,UAAU,kDACb,mBAEHJ,EAAAA,cAAC+J,EAAAA,GAAQ,CACLC,MAAO/S,EACPgT,SAAUnD,GAAQpD,GAAiB,IAAIoD,EAAMzC,IAAG+F,qBAQ5EpK,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CCtLA,MAAQtG,MAAOyJ,IAAiBC,GACxBzJ,OAAMA,IAAKwJ,GAwBnB,MACMiK,GAA6B,IAvBnC,cAA0BC,MAGtBC,WAAAA,CAAYC,GACRC,QAAQ,KAHKD,eAAS,EAItBE,KAAKF,UAAYA,CACrB,CAEAG,IAAAA,IAAQC,GAEJ,MAAMC,EAAIJ,MAAME,QAAQC,GAGxB,GAAIF,KAAK/V,OAAS+V,KAAKF,UAAW,CAC9B,MAAMM,EAASJ,KAAK/V,OAAS+V,KAAKF,UAClCE,KAAKK,OAAO,EAAGD,EACnB,CAEA,OAAOD,CACX,GAGqB,IAGV,SAASG,IAAc,2BAAC/J,EAA0B,oBAAE7L,IAC/D,MAAM,EAAE8L,IAAMC,EAAAA,EAAAA,IAAe,YAEtBC,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,KACxC,iBAAEgD,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OACxDkJ,EAAmBC,IAAwBrM,EAAAA,EAAAA,UAASwL,GAA2B1V,SAEtFqK,EAAAA,EAAAA,YAAU,KACWiC,EAA2B4B,uBAAuBhB,GACnCoD,QAEjBvO,iBAAiBE,GAAOuU,YAAYrU,IAC/C,MAAMsU,EAAmBhW,EAAoBmO,mBAAmB,GAC1D8H,EAAiB,IAAIC,kBAAkBlW,EAAoBmW,kBAAkBH,EAAiBvZ,IAAI2Z,iBAhB3F,KAmBTnB,GAA2B1V,QAC3B0V,GAA2BoB,QAE/BpB,GAA2BM,KAAKU,GAChCH,EAAqBb,GAA2B1V,OAAO,GACzD,GACH,IAEH,MAAM+W,EAAiBC,IACnB,MACM3G,EADW/D,EAA2B4B,uBAAuBhB,GACnCoD,QAE1B2G,EAAkBvB,GAA2BsB,GACnD,IAAIC,EAAiB,OAErB,MAAMC,EAAgB,IAAIC,YAAY,iBAAkB,CACpD9U,OAAQ,CACJiO,QAASD,EACT+G,cAAeH,KAGvBI,OAAOC,cAAcJ,GACrBX,EAAqBS,EAAW,EAapC,OACI9O,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJtF,GAAgBD,EAAY,GAGhCvE,EAAAA,cAACuJ,EAAAA,EAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,4BAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,8BAA8BuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC/E5C,EAAAA,cAAA,OACII,UAAU,oEAEVJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QA3Cf+L,KACgB,IAAtBjB,GACHS,EAAcT,EAAoB,EAAE,GA0Cd,QACFpO,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QA5CfgM,KAjDQ,KAkDdlB,GACHS,EAAcT,EAAoB,EAAE,GA2Cd,UAIdpO,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CCjIA,MAAQtG,MAAOyJ,IAAiBC,GACxBzJ,OAAMA,IAAKwJ,IACXgM,MAAKA,IAAK/L,EAWZgM,GAAiB,CACnB,QACA,gBACA,YACA,gCACA,wBACA,mBACA,iBAGW,SAASC,IACpB,oBACIlX,EAAmB,eACnBmX,EAAc,iBACdC,EAAgB,2BAChBvL,EAA0B,gBAC1B6G,IAGJ,OAAO,iBAAEjG,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OACxD0K,EAAeC,IAAoB7N,EAAAA,EAAAA,UAAS,MAE7C8N,EAAsBA,KACxB,MAAMC,EAAaR,GAAMS,WAAWrJ,QAAOsJ,GAAgB,QAAVA,EAAGjb,KAAc,IAAIkb,YAClEH,GAAYF,EAAiB,MACjC,MAAMM,EAAkBtX,OAAOC,KAAKiX,GAAYtU,KAAI,SAAUiF,GAC1D,MAAO,CAACA,EAAKqP,EAAWrP,GAC5B,IACA,IAAIkP,GAAgB,EACpBO,EAAgBlV,SAAQ8M,IAEpB,GAAIyH,GAAeY,SAASrI,EAAK,KAET,WAAjBA,EAAK,GAAGC,KAGP,OAFA4H,GAAgB,OAChBC,EAAiB9H,EAAK,GAG9B,IAEA6H,GAAeC,EAAiB,KAAK,GAG7C1N,EAAAA,EAAAA,YAAU,KACN2N,GAAqB,GACvB,KAEF3N,EAAAA,EAAAA,YAAU,KACN,MAAM,YAAEkO,GAAgBX,EAAe9H,UACnC8H,EAAerV,OAAOiW,kBACtBR,GAGJ,MAAO,KACHO,GAAa,CAChB,GACF,CAACX,IA2CJ,OACI1P,EAAAA,cAAAA,EAAAA,SAAA,KACK4P,GACG5P,EAAAA,cAACmO,GAAY,CACT/J,2BAA4BA,EAC5B7L,oBAAqBA,IA9CZgY,MACrB,OAAQX,GACJ,IAAK,QACD,OAAO5P,EAAAA,cAACmE,EAAa,CACjBC,2BAA4BA,EAC5B7L,oBAAqBA,IAE7B,IAAK,gBACD,OAAOyH,EAAAA,cAACsK,EAAsB,CAC1BlG,2BAA4BA,EAC5B7L,oBAAqBA,IAE7B,IAAK,YACD,OAAOyH,EAAAA,cAAC+K,EAAiB,MAC7B,IAAK,gCACD,OAAO/K,EAAAA,cAACgL,EAAqC,CACzCzS,oBAAqBA,EACrB6L,2BAA4BA,EAC5B6G,gBAAiBA,IAEzB,IAAK,wBACD,OAAOjL,EAAAA,cAAC+M,GAA6B,CACjCxU,oBAAqBA,EACrB6L,2BAA4BA,EAC5B6G,gBAAiBA,IAEzB,IAAK,mBACD,OAAOjL,EAAAA,cAACiN,GAAyB,CAC7B7I,2BAA4BA,EAC5B7L,oBAAqBA,IAE7B,IAAK,gBACD,OAAOyH,EAAAA,cAACqN,GAAsB,CAC1BjJ,2BAA4BA,EAC5B7L,oBAAqBA,IAE7B,QACI,OAAO,KACf,EAWKgY,GAGb,C,gBCvHA,SAASC,IAAkC,oBAACjY,EAAmB,cAAE8T,IAC7D,MAAO9H,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,KACxC,iBAAEgD,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,MAgD/D,OACIlF,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJtF,GAAgBD,EAAY,GAGhCvE,EAAAA,cAACuJ,EAAAA,GAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,gCAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,8BAA8BuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC/E5C,EAAAA,cAAA,OACII,UAAU,oEAEVJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAzEAmN,KACxBpZ,QAAQmU,IAAI,iBAAkBa,GAC9B,MAAMqE,EAAQC,SAASC,cAAc,SACrCF,EAAMxU,KAAO,OACbwU,EAAMG,OAAS,mBACfH,EAAMI,SAAWC,IACb,MAAMC,EAAYvD,MAAMwD,KAAKP,EAAMQ,OAAO,GACpCC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAS/Q,GACrB,IACI,GAAmC,iBAAxBA,EAAME,OAAO8Q,OAAqB,CACzC,IAAI,IAAIpW,EAAI,EAAGA,EAAImR,EAAc,GAAGpV,SAASa,OAAQoD,IACjD3C,EAAoBgZ,cAAclF,EAAc,GAAGrX,GAAIkG,GAGvCsW,KAAKC,MAAMnR,EAAME,OAAO8Q,QAChCrW,SAAQyW,IAChB,GAAGA,EAAQ,CACP,MAAM,aAAC7K,GAAgB6K,EACvBnZ,EAAoBoZ,WAAWtF,EAAc,GAAGrX,GAAI,CAChD6R,aAAcA,EACdzJ,YAAagB,EAAUwT,IAAI5M,GAAkB9H,gBAAgBE,YAC7Da,WAAYyT,EACZG,UAAU,GAElB,IAER,MAEIxa,QAAQC,MAAM,yCAEtB,CAAE,MAAOA,GACLD,QAAQC,MAAM,sBAAuBA,EACzC,CACJ,EACA6Z,EAAOW,WAAWd,EAAU,EAEhCN,EAAMqB,OAAO,GAqCS,eACF/R,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QArFA0O,KACxB,MAAMC,EAAOT,KAAKU,UAAU7F,EAAc,GAAGpV,UACvCkb,EAAY,IAAIC,KAAK,CAACH,GAAO,CAAC/V,KAAM,8BAC1CmW,EAAAA,GAAAA,QAAOF,EAAW,8BAA8B,GAmF1B,iBAIdnS,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CAEAoQ,GAAkC8B,UAAY,CAC1CjG,cAAekG,IAAAA,MAAgBC,YAGnC,Y,+CClGA,SAASC,IAAyB,oBAACla,EAAmB,cAAE8T,EAAa,2BAAEjI,IAEnE,MAAOsO,EAAmBC,IAAwB3Q,EAAAA,EAAAA,WAAS,IACpD4Q,EAAwBC,IAA6B7Q,EAAAA,EAAAA,UAAS,IAC9DuC,EAAaC,IAAkBxC,EAAAA,EAAAA,WAAS,KACxC,iBAAEgD,EAAgB,UAAE5G,GAAa6G,IAAuBC,EAAAA,EAAAA,OAE/D/C,EAAAA,EAAAA,YAAU,KACHuQ,IACCG,EAA0B,GAC1BC,WAAWC,EAAoB,KACnC,GACD,CAACL,IAEJ,MAAMK,EAAqBA,KACvB,MAAMC,EAAiBza,EAAoBmW,kBAAkBrC,EAAc,GAAGrX,KACxE,WACFmU,EAAU,UACV8J,EAAS,WACT/J,GACA8J,EACEE,EAAgB7G,EAAc,GAAGpV,SACjCkc,EAA2BD,EAC5BzX,KAAI,CAACmL,EAAG1L,KAAO,GAAI0L,EAAG,OAAO1L,CAAC,IAC9ByL,QAAOzL,GAAKA,IACXF,EAAO,IAAIoY,YAAYlK,GAC7B7R,QAAQmU,IAAI,kCAIZ,MAAM6H,EAAmB,IAAI5F,MAAYtE,EAAW,GAAK,GACzD,IAAI,IAAImK,EAAU,EAAGA,EAAUtY,EAAKlD,OAAQwb,GAAYnK,EAAW,GAAKA,EAAW,GAAI,CACnF,MAAMoK,EAA0BD,GAAWnK,EAAW,GAAKA,EAAW,IAChEqK,EAAkB,IAAI/E,kBAAkBtF,EAAW,GAAKA,EAAW,GAAK,GACzEsK,KAAK,GACLhY,KAAI,CAACiY,EAAIxY,KAAeA,EAAI,GAAK,GAAM,EAAI,IAAMwY,IAChDC,EAAe3Y,EAAK4Y,MAAMN,EAASA,EAAWnK,EAAW,GAAKA,EAAW,IAE/EzQ,QAAQmb,WAAWV,EAAyB1X,KAAIqY,GAEpBA,IACbH,EACFlY,KAAI,CAACsY,EAAG7Y,KAAO,GAAS,IAAN6Y,GAAWA,IAAMD,EAAe,OAAO5Y,CAAC,IAC1DyL,QAAOzL,GAAW,IAANA,IAEd8Y,CAAeF,MACtBtX,MAAMyX,IAGNA,EAAchZ,SAAQ,CAACiZ,EAAShZ,KAC5B,MAAMiZ,EAAgBD,EAAQrV,MAE9B,GAA4B,IAAzBsV,EAAcrc,OAAa,CAC1B,MAAMsc,EAA8BjB,EAAyBjY,GACvDmZ,EAAgB,IAAInB,EAAckB,GAA6BvT,MAAO,KAC5EsT,EAAclZ,SAAQqZ,IAClBd,EAAiC,EAAjBc,GAAsBD,EAAc,GACpDb,EAAiC,EAAjBc,EAAqB,GAAKD,EAAc,GACxDb,EAAiC,EAAjBc,EAAqB,GAAKD,EAAc,EAAE,GAElE,KAMO,IAAI3b,SAAc,CAACC,EAASC,KAC/B,MAAM2b,EAAS5D,SAASC,cAAc,UAChC4D,EAAMD,EAAOE,WAAW,MAC9BF,EAAOvT,MAAQmI,EAAW,GAC1BoL,EAAOG,OAASvL,EAAW,GAC3B,MAAMwL,EAAU,IAAIC,UAAUpB,EAAiBrK,EAAW,GAAIA,EAAW,GAAI,CAAC0L,WAAY,SAC1FL,EAAIM,aAAaH,EAAS,EAAG,GAC7BJ,EAAOQ,QAAQC,IACRA,IACC3B,EAAiBE,GAA2ByB,EAC5Crc,IACJ,GACD,YAAY,IAGN6D,MAAK,KAClB,MAAMyY,EAAmB5B,EAAiB1M,QAAO+M,GAAcA,IAAK5b,OACpE+a,KAAiD,IAAnBoC,EAA0B9L,EAAW,IAAI,GACzE,GAEV,CAGW,IAAIzQ,SAAc,CAACC,EAASC,MAC/B,SAAUsc,IAEN,GADyB7B,EAAiB1M,QAAO+M,GAAcA,IAAK5b,SAC5CqR,EAAW,GAAI,OAAOxQ,IAE1Cma,WAAWoC,EAAc,IAChC,CALD,EAKI,IAGS1Y,MAAK,KACtB,MAAM2Y,EAAM,IAAIC,MAEhB/B,EAAiBpY,SAAQ,CAAC+Z,EAAMhM,KAC5BmM,EAAIE,KAAK,SAASrM,QAAagM,EAAK,IAIxC,MAAM/C,EAAOT,KAAKU,UAAU7F,EAAc,GAAGpV,SAAU,KAAM,MACvDkb,EAAY,IAAIC,KAAK,CAACH,GAAO,CAAC/V,KAAM,6BAC1CiZ,EAAIE,KAAK,iCAAkClD,GAG3C,MAAMmD,EAAW,IAAIlD,KAAK,CAAClJ,GAAa,CAAEhN,KAAM,6BAChDiZ,EAAIE,KAAK,iBAAkBC,GAE3BH,EAAII,cAAc,CAACrZ,KAAK,SAASM,MAAM2C,KACnCkT,EAAAA,GAAAA,QAAOlT,EAAS,oBAChBwT,GAAqB,EAAM,GAC7B,GACJ,EAmKN,OACI3S,EAAAA,cAAA,OAAKI,UAAU,+CACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACXJ,EAAAA,cAAA,OACII,UAAU,mCACVkD,QAASrJ,IACLA,EAAI6P,kBACJtF,GAAgBD,EAAY,GAGhCvE,EAAAA,cAACuJ,EAAAA,GAAI,CACD5M,KAAK,yBACLyD,UAAW4C,IACP,4DACA,CACI,uBAAwBuB,MAIpCvE,EAAAA,cAAA,QAAMI,UAAU,yCACX,uBAIPmE,GACEvE,EAAAA,cAAA,OAAKI,UAAU,8BAA8BuC,MAAO,CAAC6G,QAAQ,OAAQ5G,cAAc,WAC/E5C,EAAAA,cAAA,OAAKI,UAAU,6DACXJ,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAxESkS,KACjCne,QAAQmU,IAAI,iBAAkBa,GAE9B,IAAInE,EAAW9J,EAAUwT,IAAI5M,GACiB,WAA1CkD,EAAShL,gBAAgBC,eACzB+K,EAAWuF,MAAMwD,KAAK7S,EAAUqX,UAAUC,MAAKC,GAA0C,WAApCA,EAAGzY,gBAAgBC,eACxE9F,QAAQue,OAAO1N,EAAU,wDACzBjD,EAAoB4Q,oBAAoB3N,EAAS4N,aAErD,MACMC,EADgB3R,EAA2B4B,uBAAuBkC,EAAS4N,YAC9CnK,YACnCtU,QAAQue,OAAOG,GAAgBA,EAAaje,OAAQ,oDACpD,MAIMsU,EAJe2J,EAAata,KAAKmQ,IACnC,MAAMC,EAAWD,EAAGE,aAAeF,EAAGG,IACtC,OAAOxS,EAAAA,MAAMC,UAAUqS,EAAS,IAEIlF,QAAOqF,IAAOA,EAAGvS,SAAS3B,SAAQ,GACpEke,EAAiB5J,EAAmB6J,SACpCC,EAAyB9J,EAAmBuC,gBAG5C+B,EAAQC,SAASC,cAAc,SACrCF,EAAMxU,KAAO,OACbwU,EAAMG,OAAS,2BACfH,EAAMI,SAAW1Y,UACb,MAAMid,EAAO5H,MAAMwD,KAAKP,EAAMQ,OAAO,GAC/BC,EAAS,IAAIC,WACnBD,EAAOE,OAASjZ,eAAekI,GAC3B,MAAM6V,EAAgB,IAAIC,WAAW9V,EAAME,OAAO8Q,QAElD,IAAK,IAAIpW,EAAI,EAAGA,EAAIgb,EAAuBpe,OAAQoD,IAC/Cgb,EAAuBhb,GAAKib,EAAcjb,GAG9Cmb,EAAAA,aAAAA,0BAAAA,gCAA0EL,EAC9E,EACA7E,EAAOmF,kBAAkBjB,EAAK,EAElC3E,EAAMqB,OAAO,GAmCS,uBACF/R,EAAAA,cAACoD,EAAAA,GAAM,CACHsG,WAAW,EACXrG,KAAM,QACNxC,MAAO,YACPyC,QAASA,KACLqP,GAAqB,EACH,GAExB,wBAELD,GACG1S,EAAAA,cAAA,OAAKI,UAAW,mBACZJ,EAAAA,cAAA,KAAG2C,MAAO,CAAC9B,MAAM,UAAW,wBAC5Bb,EAAAA,cAACuW,GAAAA,EAAW,CACRnW,UAAW,kBACXoW,QAAS5D,EAAyB,IAAM,UAAY,UACpD6D,UAAW7D,EACX8D,mBAAoB,QACpBC,yBAA0B,aAM9C3W,EAAAA,cAAA,OAAKI,UAAU,uBAI/B,CAEAqS,GAAyBH,UAAY,CACjCjG,cAAekG,IAAAA,MAAgBC,YAGnC,YC5VMoE,GAAWpT,EAAAA,MAAAA,4BAA0CqT,SACrDC,GAAa,CACjB,CAACxY,EAAsByY,UAAWC,EAAAA,GAClC,CAAC1Y,EAAsB2Y,UAAWC,EAAAA,IAGrB,SAASC,IAAkB,gBACxC5hB,EAAe,gBACf0V,EAAe,iBACfzV,EAAgB,cAChB4Q,IAEA,OAAO,iBAAEpB,EAAgB,UAAE5G,KAAe8G,EAAAA,EAAAA,OACpC,oBACJ3M,EAAmB,oBACnB0M,EAAmB,gBACnB1G,EAAe,kBACf7G,EAAiB,2BACjB0M,EAA0B,uBAC1BgT,EAAsB,iBACtBzH,EAAgB,eAChBD,EAAc,sBACdzW,GACE1D,EAAgBoC,UAEd,EAAE0M,IAAMC,EAAAA,EAAAA,IAAe,sBAEtB+S,EAAwBC,IAA6BtV,EAAAA,EAAAA,UAAS,OAC9DuV,EAA0BC,IAA+BxV,EAAAA,EAAAA,UAAS,KAClEyV,EAA2BC,IAAgC1V,EAAAA,EAAAA,UAChEzJ,EAAoBof,qBAGftL,EAAeuL,IAAoB5V,EAAAA,EAAAA,WAAS,IAAMzJ,EAAoBmO,sBAEtEnC,EAAaC,IAAkBxC,EAAAA,EAAAA,UAAS,CAAC,IAEX6V,EAAAA,EAAAA,cACnC7iB,IACEwP,GAAesT,IAAa,IACvBA,EACH,CAAC9iB,IAAM8iB,EAAU9iB,MAChB,GAEL,CAACwP,KAIHrC,EAAAA,EAAAA,YAAU,KACR,MAAM4V,EAAqB1L,EAAcA,EAAcvU,OAAS,IAAI9C,GAChE+iB,GACFvT,GAAesT,IAAa,IACvBA,EACH,CAACC,IAAqB,KAE1B,GACC,CAAC1L,EAAe7H,KAEnBrC,EAAAA,EAAAA,YAAU,KAaR,MAAMkF,EAAQ9O,EAAoB8B,OAAOiN,mBACnCC,EAAUhP,EAAoB8B,OAAOmN,qBACrCC,EAAUlP,EAAoB8B,OAAOqN,qBACrCC,EAAgB,GAWtB,MATA,CAACN,EAAOE,EAASE,GAASxM,SAAQhB,IAChC,MAAM,YAAEoW,GAAgB9X,EAAoBqP,UAAU3N,GAAK,KACzD,MAAMoS,EAAgB9T,EAAoBmO,mBAC1CkR,EAAiBvL,GACjBqL,EAA6Bnf,EAAoBof,mBAAmB,IAEtEhQ,EAAcmG,KAAKuC,EAAY,IAG1B,KACL1I,EAAc1M,SAAQ4M,IACpBA,GAAO,GACP,CACH,GACA,KAIH1F,EAAAA,EAAAA,YAAU,KACR,MAAM6V,EAA6BlC,IACjC,MAAMmC,EAAiBhT,EAAoBiT,8BACzCpC,GAAc7Q,EAAoBkT,uBAGpC,IAAKF,EACH,OAGF,MAAM1hB,EACJ0hB,GAAgBG,MAAKC,IACnB,MAAMjiB,EAAasB,EAAkB4gB,mBAAmBD,GACxD,OAAOjiB,GAAYG,iBAAiB,MAChC,EAGNihB,EADEjhB,EAC0B,GAEA,gBAC9B,EAIFyhB,IAEA,MAAMO,EAActT,EAAoB5K,OAAOme,2BACzCC,EAAQxT,EAAoB5K,OAAOqe,gBAEnCC,EAAW,GACjB,CAACF,EAAOF,GAAatd,SAAQhB,IAC3B,MAAM,YAAEoW,GAAgBpL,EAAoB2C,UAAU3N,GAAK,EAAG6b,iBAC5DkC,EAA2BlC,EAAW,IAGxC6C,EAAS7K,KAAKuC,EAAY,IAG5B,MAAMuI,EAAcxU,EAA2B/J,OAAOwe,sBAEhDC,EAAW,GAUjB,MATA,CAACF,GAAa3d,SAAQhB,IACpB,MAAM,YAAEoW,GAAgBjM,EAA2BwD,UAAU3N,GAAK,KAChE+d,GAA4B,IAG9Bc,EAAShL,KAAKuC,EAAY,IAIrB,KACLsI,EAAS1d,SAAQ4M,GAASA,MAC1BiR,EAAS7d,SAAQ4M,GAASA,KAAQ,CACnC,GACA,IAEH,MAAMkR,EAAkB/C,GACDzd,EAAoBygB,gCAAgChD,GA2JrEiD,GAAgCpB,EAAAA,EAAAA,cACpC,CAAC7B,EAAgBtV,EAAK7B,KACpBtG,EAAoBwO,iBAAiB,CACnCiP,iBACA,CAACtV,GAAM7B,GACP,GAEJ,CAACtG,IA6GG2gB,EACJpC,GAAW1Q,GAAe+S,wBAA0BjC,EAAAA,GAChDkC,EAAkBhT,GAAeuL,WACjC0H,EACJjT,GAAekT,mBAAiE,mBAArClT,GAAekT,kBACtDlT,GAAekT,kBA/QKlhB,UACxB6S,EAAgBsO,WAAW,qCAAsC,CAC/DzD,WAAY7Q,EAAoBkT,uBAChC,EAgREqB,EAA8BA,KAClC,MAAMnB,EAAgBja,EAAUwT,IAAI5M,IAAmByU,uBAAuB,GAE9E,OADqBpN,EAAc1F,QAAO+S,GAAOA,EAAIljB,wBAA0B6hB,IAC3DvgB,OAAS,CAAC,EAgBhC,OACEkI,EAAAA,cAAAA,EAAAA,SAAA,OAbqE,aAAjE5B,EAAUwT,IAAI5M,GAAkB9H,gBAAgBC,eAClDlE,EAAsB8C,KAAK,CACzBC,MAAO,qBACPC,QAAS,oEACTC,KAAM,SAED,KASL8D,EAAAA,cAAA,OAAKI,UAAU,yCAEbJ,EAAAA,cAACyP,GAAY,CACTlX,oBAAqBA,EACrB6L,2BAA4BA,EAC5BuL,iBAAkBA,EAClBD,eAAgBA,EAChBzE,gBAAiBA,IAEpBuO,KACGxZ,EAAAA,cAACwQ,GAAiC,CAC9BjY,oBAAqBA,EACrB8T,cAAeA,IAIvBrM,EAAAA,cAACkZ,EAA+B,CAC9Bld,MAAOqI,EAAE,iBACTgI,cAAeA,EACfsN,eAAgBvT,EAAcuT,eAC9BC,qBAAsBvC,GAA0B,GAChDiC,kBAAmBD,EACnB9B,yBAA0BA,EAC1BsC,eAAgBT,EAChBU,oBA3TmB9D,IAC3Bzd,EAAoBwhB,kCAAkC/D,EAAgB5X,EAAUwT,IAAI5M,GAAkB9H,gBAAgBE,YAAY,EA2T1H4c,qBAxToBhE,IAC5Bzd,EAAoB0hB,OAAOjE,EAAe,EAwTlCkE,uBAhGqBlE,IAC7B/K,EAAgBsO,WAAW,uBAAwB,CACjDvD,kBACA,EA8FMmE,2BAhEyBnE,IACjC/K,EAAgBsO,WAAW,eAAgB,CACzCvD,kBACA,EA8DMoE,kBA5FgBhiB,UACxB,MAAMiiB,EAAc7kB,EAAiB8kB,sBAE/Bb,QAA+Bc,EAAAA,EAAAA,mBAAkB,CACrDhlB,kBACAilB,UAAWA,IACTvP,EAAgBsO,WAAW,oBAAqB,CAC9CvD,iBACAyE,WAAYJ,EAAY,KAE5BK,WAAY,iBAIVjB,IAIFlhB,EAAoB0hB,OAAOjE,GAE3B/Q,EAAoB0V,0BAA0B,CAC5C7E,WAAY7Q,EAAoBkT,sBAChCsB,2BAEJ,EAqEQmB,mBA7QiB5E,IACzB,MAAMvP,EAAelO,EAAoBC,gBAAgBwd,IACnD,MAAExX,GAAUiI,EAElBoU,EAAgBtc,EAAiBC,GAAO,CAACA,EAAOsc,KAChC,KAAVtc,GAIJjG,EAAoBwiB,wBAClB,CACE/lB,GAAIghB,EACJxX,UAEF,GACA,EACD,GACD,EA6PMwc,eAzTaA,CAAChF,EAAgBnP,KACtCtO,EAAoB0iB,iBAAiBjF,EAAgBnP,GAEhCkS,EAAgB/C,GAExB/a,SAAQmC,IAEnB7E,EAAoBwhB,kCAAkC/D,EAAgB5Y,GACtE7E,EAAoB2iB,oBAAoBlF,EAAgBnP,EAAczJ,EAAY,GAClF,EAiTM+d,cA9SYA,CAACnF,EAAgBnP,KACrC,MAEM6K,EAFenZ,EAAoBC,gBAAgBwd,GAE5B/e,SAAS4P,IAChC,MAAErI,GAAUkT,EAElBmJ,EAAgBtc,EAAiBC,GAAO,CAACA,EAAOsc,KAChC,KAAVtc,GAIJjG,EAAoB6iB,gBAAgBpF,EAAgBnP,EAAcrI,EAAM,GACxE,EAmSM6c,aAhSYrF,IACpB,MAAMsF,EAAsB/iB,EAAoBC,gBAAgBwd,GAChEzd,EAAoBoZ,WAAWqE,EAAgB,CAC7CnP,aAAcyU,EAAoBrkB,SAASa,OAC3CsF,YAAagB,EAAUwT,IAAI5M,GAAkB9H,gBAAgBE,YAC7Da,WAAY,CACVO,MAAO,gBAAgB8c,EAAoBC,aAAe,IAC1D1a,MAAO,CAAClF,KAAK6f,MAAsB,IAAhB7f,KAAK8f,UAAiB9f,KAAK6f,MAAsB,IAAhB7f,KAAK8f,UAAiB9f,KAAK6f,MAAsB,IAAhB7f,KAAK8f,WAC1FC,QAAS,IACTC,YAAY,EACZC,UAAU,EACV9W,QAAQ,IAEV,EAoRM+W,oBA7PkBA,CAAC7F,EAAgBnP,KAC3C,MAEM6K,EAFenZ,EAAoBC,gBAAgBwd,GAE5B/e,SAAS4P,IAChC,MAAEhG,EAAK,QAAE6a,GAAYhK,EAErB/Q,EAAY,CAChBqN,EAAGnN,EAAM,GACTib,EAAGjb,EAAM,GACTkb,EAAGlb,EAAM,GACTmb,EAAGN,EAAU,KAGfO,EAAsB1d,EAAiBoC,GAAW,CAACub,EAAcpB,KAC9C,WAAbA,GAIJviB,EAAoB4jB,oBAAoBnG,EAAgBnP,EAAc,CACpEqV,EAAalO,EACbkO,EAAaJ,EACbI,EAAaH,EACI,IAAjBG,EAAaF,GACb,GACF,EAsOMI,gBAnOcA,CAACpG,EAAgBnP,KACvCtO,EAAoBgZ,cAAcyE,EAAgBnP,EAAa,EAmOvDwV,0BA/NwBA,CAACrG,EAAgBnP,KACjD,MAEMyV,GAFe/jB,EAAoBC,gBAAgBwd,GACxB/e,SAAS4P,GACXyV,UACVvD,EAAgB/C,GAGxB/a,SAAQmC,IACnB7E,EAAoBgkB,qBAClBvG,EACAnP,EACAyV,EACAlf,EACD,GACD,EAkNMof,oBA/MkBA,CAACxG,EAAgBnP,KAC3CtO,EAAoBkkB,oBAAoBzG,EAAgBnP,EAAa,EA+M7D6V,+BA5M6B1G,IACrCzd,EAAoBokB,6BAA6B3G,GACjD,MAAMvP,EAAelO,EAAoBC,gBAAgBwd,GACnDsG,EAAY7V,EAAa6V,UACzBrlB,EAAWwP,EAAaxP,SAET8hB,EAAgB/C,GAExB/a,SAAQmC,IACnBnG,EAASgE,SAAQ,CAACyW,EAAS7K,KACzBtO,EAAoBgkB,qBAClBvG,EACAnP,EACAyV,EACAlf,EACD,GACD,GACF,EA4LMwf,mBAAmB,EACnBC,mBAAoB,CAAEC,cAAerF,GACrCsF,iBAAkBle,GAChBoa,EAA8B5B,EAAwB,gBAAiBxY,GAEzEme,wBAAyBne,GACvBoa,EAA8B5B,EAAwB,iBAAkBxY,GAE1Eoe,cAAepe,GACboa,EAA8B5B,EAAwB,aAAcxY,GAEtEqe,+BAAgCre,GAC9Boa,EAA8B5B,EAAwB,8BAA+BxY,GAEvFse,sBAAuBte,GACrBoa,EAA8B5B,EAAwB,qBAAsBxY,GAE9Eue,aAAcve,GACZoa,EAA8B5B,EAAwB,YAAaxY,GAErEwe,qBAAsBxe,GACpBoa,EAA8B5B,EAAwB,oBAAqBxY,KAG9E2a,KACCxZ,EAAAA,cAACyS,GAAwB,CACvBla,oBAAqBA,EACrB8T,cAAeA,EACfjI,2BAA4BA,IAI9BpE,EAAAA,cAACoD,EAAAA,GAAM,CACLhD,UAAW,kBACXkD,QAjNkCga,KAC5Clf,EAAUnD,SAAQ0a,IAEhB,GAAGA,EAAGG,aAAe9Q,EAAiB,CACpC,GAAuC,aAApC2Q,EAAGzY,gBAAgBC,aAMpB,YALAlE,EAAsB8C,KAAK,CACzBC,MAAO,sBACPC,QAAS,iEACTC,KAAM,UAKV7E,QAAQmU,IAAI,SAAUmK,GAEtBpd,EAAoBglB,gCAChB5H,EAAG8D,uBAAuB,GAC1B,CAAEjb,MAAO,gBAAgB6N,EAAcvU,OAAS,MAClD0E,MAAKghB,IACL,MAAM/W,EAAelO,EAAoBC,gBAAgBglB,GACzDnmB,QAAQmU,IAAI,uBAAwB/E,GACpClO,EAAoBklB,yCAChB9H,EAAGzY,gBAAgBE,YACnBogB,GACA,EACA5G,IACFpa,MAAK,KACLjE,EAAoBwhB,kCAChByD,EACA7H,EAAGzY,gBAAgBE,aAEvB7E,EAAoBoZ,WAAW6L,EAAO,CACpC3W,aAAc,EACdzJ,YAAauY,EAAGzY,gBAAgBE,YAChCa,WAAY,CACVO,MAAO,iBACPqC,MAAO,CAAC,IAAK,EAAG,GAChB6a,QAAS,IACTC,YAAY,EACZC,UAAU,EACV9W,QAAQ,KAIZzN,QAAQmU,IAAI,SAAUkE,EAAegO,iBAAiB,mBAAoB,CAAC,IAC3EhO,EAAeiO,oBAAoB,UAAW,CAC1C,mBACA,OACA,cACA,MACA,UACA,aACA,YACA,YACA,qBACF,GACF,GAGN,IACA,EAsJQhb,MAAO,CAACib,UAAU,QAClB,8CAOd,CAEAzG,GAAkB7E,UAAY,CAC5BrH,gBAAiBsH,IAAAA,MAAgB,CAC/BgH,WAAYhH,IAAAA,KAAeC,aAE7Bjd,gBAAiBgd,IAAAA,MAAgB,CAC/B5a,SAAU4a,IAAAA,MAAgB,CACxBha,oBAAqBga,IAAAA,MAAgB,CACnC/Z,gBAAiB+Z,IAAAA,KAAeC,WAChC9L,iBAAkB6L,IAAAA,KAAeC,WACjCmK,6BAA8BpK,IAAAA,KAAeC,WAC7C5K,UAAW2K,IAAAA,KAAeC,WAC1BnY,OAAQkY,IAAAA,OAAiBC,aACxBA,aACFA,aACFA,YC9iBL,MAyEA,GAzEuBqL,EACrB5S,kBACA1V,kBACAC,mBACA4Q,gBACApK,YAEA,MAAM,qBAAE8hB,GAAyBvoB,EAAgBoC,SAgDjD,MAAO,CACL,CACEgF,KAAM,oBACNohB,SAAU,mBACVC,UAAW,eACXxf,MAAO,eACPuE,UApD6BqD,IAC/B,MAAO6X,IAAaC,EAAAA,EAAAA,KAEpB,OACEle,EAAAA,cAACmX,GAAiB,CAChBlM,gBAAiBA,EACjB1V,gBAAiBA,EACjBC,iBAAkBA,EAClB4Q,cAAe,IACVA,EACHuT,eAAgBsE,EAAUtE,kBACvBmE,EAAqBlM,IAAI,wBAE9B,GAyCJ,CACEjV,KAAM,6BACNohB,SAAU,mBACVC,UAAW,eACXxf,MAAO,eACPuE,UA1CsCqD,IACxC,MAAO6X,IAAaC,EAAAA,EAAAA,KAEpB,OACEle,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACme,EAAAA,GAAO,CACNlT,gBAAiBA,EACjB1V,gBAAiBA,EACjBC,iBAAkBA,EAClB4oB,gBAAgB,sBAChBpiB,MAAM,qBACNoK,cAAe,IACVA,KAGPpG,EAAAA,cAACmX,GAAiB,CAChBlM,gBAAiBA,EACjB1V,gBAAiBA,EACjBC,iBAAkBA,EAClB4Q,cAAe,IACVA,EACHuT,eAAgBsE,EAAUtE,kBACvBmE,EAAqBlM,IAAI,yBAG/B,GAmBN,E,uCC3DHxZ,eAAeimB,IAAwC,WACrDvI,EAAU,OACVwI,EAAM,gBACN/oB,EAAe,WACfa,EAAU,kBACVmoB,EAAoB,OAQpB,MAAM,2BAAEna,EAA0B,oBAAE7L,EAAmB,oBAAE0M,GACvD1P,EAAgBoC,SAEZuQ,EAAWsW,GAAkB,CAAE1I,aAAY7Q,wBAC3CwZ,EAAmBvW,EAAShL,gBAAgB4Y,WAE5Cjf,EACJT,GAAYS,iCAAmCqR,GAAUuR,uBAAuB,GAE5EiF,EAAmBC,GAAmC,CAC1D7I,aACAvgB,kBACAa,eAKIwoB,EAA8BxmB,UAClC,MAAM4d,QAAuBsI,IAC7B/lB,EAAoBsmB,oBAAoB7I,EAAe,EAKnD8I,EAAerR,MAAMwD,KAAK1X,EAAAA,MAAMwlB,aAAajmB,QAAQsf,MAAKnC,GAC9DA,EAAS7F,SAASvZ,KAgEpB,OA7DA6nB,EAAiBzjB,SAAQ7C,UACvB8P,EAAShL,gBAAkB,IACtBgL,EAAShL,gBACZC,aAAuC,aAAzB/G,GAAYC,SAA0B,QAAU,SAC9D2oB,kBAAkB,GAEpB,MAAMlJ,EAAa5N,EAAS4N,WAGxBA,IAAe2I,IACjBvW,EAAShL,gBAAgB+hB,oBAAsB,CAC7CjW,MAAOuV,EACPW,SAAS,IAIb,MAAMC,EAAa/a,EAA2B4B,uBAAuB8P,GAC/DsJ,EAAaD,EAAWE,YAI9B,IAAKP,GAAwC,aAAxB1oB,EAAWC,WAA4Byf,IAAe2I,EAEzE,kBADMG,IAIR,MAAMU,EAAwClnB,UAC5C,MAAMmnB,EAAmCtlB,EAAIE,OAAOqlB,cAAc9J,MAAK+J,GACrEA,EAAG1T,IAAIqE,SAASvZ,KAMZ6oB,EAAiBtb,EAA2B4B,uBAAuB8P,GACzE4J,EAAeC,UAAUP,GAEzBM,EAAetX,QAAQE,oBACrBxO,EAAAA,MAAAA,OAAa8lB,2BACbN,GAGGC,GAKDzJ,IAAe2I,SACXG,GACR,EAGFO,EAAW/W,QAAQvO,iBACjBC,EAAAA,MAAAA,OAAa8lB,2BACbN,EACD,IAIHra,EAAoB4a,2BAA2BnB,IAExC,CACT,CAEA,MAAMF,GAAoBA,EAAG1I,aAAY7Q,0BACvC,MAAM,UAAE7G,EAAS,iBAAE4G,GAAqBC,EAAoB6a,WACtDrB,EAAmB3I,GAAc9Q,EAIvC,OAFiB5G,EAAUwT,IAAI6M,EAEhB,EAejB,SAASE,IAAmC,WAC1C7I,EAAU,gBACVvgB,EAAe,WACfa,IAEA,MAAM,uBAAEghB,EAAsB,kBAAE1f,EAAiB,oBAAEa,EAAmB,oBAAE0M,GACtE1P,EAAgBoC,UAEZ,UAAEyG,EAAS,wBAAE2hB,GAA4B9a,EAAoB6a,WAG7DrB,EADWD,GAAkB,CAAE1I,aAAY7Q,wBACf/H,gBAAgB4Y,WAE5C2D,EAAyBrb,EAAUwT,IAAI6M,GAAkBhF,uBAEzDuG,EACJ5pB,GAAYS,iCAAmC4iB,EAAuB,GAGlEwG,EADuBvoB,EAAkB4gB,mBAAmB0H,GACL1qB,UAAU,GAAG4qB,oBAEpExB,EAAmBtH,EAAuB+I,0BAC9C1B,EACAuB,EACAD,GA4BF,OAzBA3hB,EAAUnD,SAAQ,CAACiN,EAAU4N,KAC3B,GACE2I,IAAqB3I,GACrB4I,EAAiBhJ,MAAK3B,GAAKA,EAAE+B,aAAeA,IAE5C,OAGuBvd,EAAoB6nB,yBAC3ClY,EAASuR,uBACTwG,IAIAvB,EAAiB5Q,KAAK,CACpBgI,aACA2D,uBAAwBvR,EAASuR,uBACjCvc,gBAAiB,CACfC,aAAuC,aAAzB/G,GAAYC,SAA0B,QAAU,SAC9D2oB,kBAAkB,IAGxB,IAGKN,EAAiB/X,QAAOoN,GAAyC,aAApCA,EAAE7W,iBAAiBC,cACzD,CC/KA,MAAQsJ,aAAc4Z,IAAsBC,EAAAA,WAEtC,cAAEC,IAAkBjlB,EAAAA,QAAAA,MAGxBb,eACEC,cAAc,0BAAE8lB,GAAyB,qBAAEC,MAE3CjmB,EAAAA,aAGFC,eACEimB,MAAM,8BAAEC,MAERC,EAAAA,YAEE,kBAAEC,IAAsBC,EAAAA,QAic9B,GA/buBC,EACrBxrB,kBACAC,uBAEA,MAAM,sBACJyD,EAAqB,oBACrBV,EAAmB,gBACnBgG,EAAe,kBACf7G,EAAiB,oBACjBuN,EAAmB,iBACnB0K,EAAgB,2BAChBvL,GACE7O,EAAgBoC,SAEd6H,EAAU,CAadmf,mCAAkC,GAYlCqC,mCAAoC5oB,OAAS0d,iBAC3C,MAAM5N,EAAWsW,GAAkB,CAAE1I,aAAY7Q,wBAE3CzO,EAAwB0R,EAASuR,uBAAuB,GAExDrjB,EAAasB,EAAkB4gB,mBAAmB9hB,GAEnDJ,EAAWG,kBAShB8nB,GAAwC,CACtCvI,aACAvgB,kBACAa,aACAkoB,OAAQlmB,UACN,MAAM6oB,EAAuB1oB,EAAoBmO,mBAC3CsP,QAAuBzd,EAAoBglB,gCAC/C/mB,EACA,CAAEgI,MAAO,gBAAgByiB,EAAqBnpB,OAAS,MAGnDsF,EAAc8K,EAAShL,gBAAgBE,YAgB7C,aAdM7E,EAAoBklB,yCACxBrgB,EACA4Y,GAIFzd,EAAoBoZ,WAAWqE,EAAgB,CAC7C5Y,cACAyJ,aAAc,EACd5I,WAAY,CACVO,MAAO,eAIJwX,CAAc,IAnCvB/c,EAAsB8C,KAAK,CACzBC,MAAO,eACPC,QAAS,wEACTC,KAAM,SAkCR,EAYJglB,6BAA8B9oB,OAASiU,gBAAeyJ,iBACpDuI,GAAwC,CACtCvI,aACAvgB,kBACA+oB,OAAQlmB,UAEN,MAAM8P,EAAWsW,GAAkB,CAAE1I,aAAY7Q,wBAC3CzO,EAAwB0R,EAASuR,uBAAuB,GAExDhT,EAAe4F,EAAc,GAC7B2J,EAAiBvP,EAAazR,GAC9BwJ,EAAQiI,EAAajI,MACrBvH,EAAWwP,EAAaxP,SAS9B,UAPOwP,EAAaxP,eAEdsB,EAAoBglB,gCAAgC/mB,EAAuB,CAC/Ewf,iBACAxX,UAGEiI,EAAayC,WAAY,CACJ3Q,EAAoBmW,kBAAkBsH,GAC9C9M,WAAWiY,IAAI1a,EAAayC,WAC7C,CAEA3Q,EAAoBwiB,wBAAwBtU,GAE5C,MAAMrJ,EAAc8K,EAAShL,gBAAgBE,YA4B7C,aA3BM7E,EAAoBklB,yCACxBrgB,EACA4Y,GAGF/e,EAASgE,SAAQyW,IACC,OAAZA,GAGJnZ,EAAoBoZ,WAAWqE,EAAgB,CAC7CnP,aAAc6K,EAAQ7K,aACtBzJ,cACAa,WAAY,CACV4C,MAAO6Q,EAAQ7Q,MACfrC,MAAOkT,EAAQlT,MACfkd,QAAShK,EAAQgK,QACjBE,SAAUlK,EAAQkK,SAClBD,WAAYjK,EAAQ4K,UACpBxX,OAAQ2B,EAAamG,qBAAuB8E,EAAQ7K,eAEtD,IAGAJ,EAAa2a,cACf7oB,EAAoB8oB,aAAa5a,EAAazR,GAAIyR,EAAa2a,cAG1DpL,CAAc,GAEvB,EAcJsL,uCAAwClpB,OAAS0d,aAAYxY,kBAE3D,MAAMlH,EAAakH,EAAY,GACzBtF,EAAuBN,EAAkB4gB,mBAC7CliB,EAAWS,iCAGP0nB,EADWna,EAA2B4B,uBAAuB8P,GAChCyL,gBAEnClD,GAAwC,CACtCvI,aACAvgB,kBACAa,aACAkoB,OAAQlmB,UACN,MAAME,EAAgBlC,EAEhBorB,EACuB,QAA3BlpB,EAAcjC,SACV,qCACA,oCAEAorB,EAAUlpB,EAAoBipB,GAAiBE,KAAKnpB,GACpDyd,QAAuByL,EAAQnpB,EAAe,MAP7B,GAUvB,OAFqBC,EAAoBC,gBAAgBwd,GAC5C2L,YAAc,IAAI3pB,EAAqBlC,iBAAiBkC,EAAqBnC,oBACnFmgB,CAAc,EAEvBuI,qBACA,EAeJkC,qBAAsBA,EAAGzK,iBAAgB4L,UAAU,CAAC,MAClD,MAAMnb,EAAeob,EAAAA,aAAAA,MAAAA,gBAAmD7L,IAElE,mBAAE9d,GAAuBuO,EAAaqb,mBAAmBlL,SAEzDxK,EAAqB7S,EAAAA,MAAMC,UAAUwc,GAErCrf,EADmB4C,EAAAA,MAAMC,UAAUtB,GACC6pB,uBAEpCC,EAAcxB,GAA0BpU,GAG9C4V,EAAYC,SAAW,GAEI1pB,EAAoBC,gBAAgBwd,GAC5C/e,SAASgE,SAAQyW,IAElC,IAAKA,EACH,OAEF,MAAM7K,EAAe6K,EAAQ7K,cACvB,MAAErI,EAAK,MAAEqC,GAAU6Q,EAEnBrW,EAAgCC,EAAAA,QAAAA,KAAWC,OAAO2mB,aACtDrhB,EAAM+S,MAAM,EAAG,GAAGnY,KAAIoD,GAASA,EAAQ,OACvCpD,KAAIoD,GAASlD,KAAKC,MAAMiD,KAEpBsjB,EAAkB,CACtBC,cAAevb,EAAawb,WAC5BC,aAAc9jB,EACd+jB,qBAAsB7Q,GAAS8Q,eAAiB,SAChDC,qBAAsB/Q,GAASgR,eAAiB,aAChDrnB,gCACAsnB,sCAAuC,CACrCC,UAAW,UACXC,uBAAwB,MACxBC,YAAa,UAEfC,kCAAmC,CACjCH,UAAW,UACXC,uBAAwB,MACxBC,YAAa,WAGjBd,EAAYC,SAASpb,GAAgBsb,CAAe,IAUtD,OAP8B1B,GAC5B9pB,EACAqrB,EACApnB,EAAAA,SACAgnB,EAG0B,EAY9BoB,qBAAsBA,EAAGhN,qBACvB,MAAMiN,EAAqB1qB,EAAoBC,gBAAgBwd,GACzDkN,EAAwB1jB,EAAQihB,qBAAqB,CACzDzK,mBAGF6K,GAAkBqC,EAAsBC,QAAS,GAAGF,EAAmBzkB,QAAQ,EAcjF4b,kBAAmBhiB,OAAS4d,iBAAgByE,iBAC1C,MAAM2I,QAAqBC,EAAAA,EAAAA,0BAAyB9kB,EAAiB,CACnE/I,qBAGF,GAA4B,IAAxB4tB,EAAaxkB,QAAgBwkB,EAAavkB,MAC5C,OAGF,MAAM4H,EAAelO,EAAoBC,gBAAgBwd,GAEzD,IAAKvP,EACH,MAAM,IAAI1O,MAAM,yBAGlB,MAAM,MAAEyG,GAAUiI,EACZ5Q,EAAoButB,EAAavkB,OAASL,GAAS,0BAEnD8kB,EAAgB9jB,EAAQihB,qBAAqB,CACjDzK,iBACA4L,QAAS,CACP/rB,uBAIJ,IAAKytB,IAAkBA,EAAcH,QACnC,MAAM,IAAIprB,MAAM,wCAGlB,MAAQorB,QAASI,GAAsBD,EAavC,aAXM7I,EAAW+I,MAAMC,MAAMF,GAO7BA,EAAkBttB,SAAWwkB,EAAWiJ,YAAYztB,SAEpD0tB,EAAAA,mBAAmBC,aAAa,CAACL,IAAoB,GAE9CA,CAAiB,EAS1BM,aAAcA,EAAG7N,qBACf,MAAM3J,EAAgB9T,EAAoBC,gBAAgBwd,GACpD8N,EAAW,CACfC,wBAAuB,MACvBC,aAAY,WACZC,aAAYA,GAAAA,IAGRvD,EAAOC,GACXtU,EACA6X,EAAAA,QAAQC,iBACRR,EAAAA,mBACApqB,EAAAA,MACA6qB,EAAAA,MACAN,GAGF,IACE,MAAMO,EAAa9D,GAAcG,GAG3B4D,EAAYC,IAAIC,gBAAgBH,GACtClV,OAAOsV,SAASroB,OAAOkoB,EACzB,CAAE,MAAOjiB,GACPhL,QAAQqtB,KAAKriB,EACf,GAEFoD,aAAcA,EAAG5G,QAAO8lB,gBACtB,MAAMnf,EAAYlD,OAAOzD,GAEzB8Q,EAAiBoJ,mBAAmB9d,SAAQmC,IAChB,IAAtBunB,GAAW7sB,OACbuoB,GAAkBuE,yBAAyBxnB,EAAaoI,GAExDmf,GAAW1pB,SAAQ4pB,IACjBxE,GAAkBuE,yBAAyBxnB,EAAaoI,EAAWqf,EAAS,GAEhF,GACA,EAEJC,kBAAmBA,EACjBjmB,QACA8lB,YAAY,CAAC,yBAA0B,4BAEvChV,EAAiBoJ,mBAAmB9d,SAAQmC,IAC1C,MAAM2I,EAAY4J,EAAiBoV,aAAa3nB,GAChDunB,GAAW1pB,SAAQ4pB,IACjB9e,EAAUif,qBAAqBH,EAAU,CACvCxe,8BAA+B,CAC7BC,UAAW,CACTC,UAAW1H,KAGf,GACF,GACF,GAIAomB,EAAc,CAClBtG,mCAAoC,CAClCuG,UAAW1lB,EAAQmf,oCAErB2C,uCAAwC,CACtC4D,UAAW1lB,EAAQ8hB,wCAErBJ,6BAA8B,CAC5BgE,UAAW1lB,EAAQ0hB,8BAErBF,mCAAoC,CAClCkE,UAAW1lB,EAAQwhB,oCAErBP,qBAAsB,CACpByE,UAAW1lB,EAAQihB,sBAErBuC,qBAAsB,CACpBkC,UAAW1lB,EAAQwjB,sBAErB5I,kBAAmB,CACjB8K,UAAW1lB,EAAQ4a,mBAErByJ,aAAc,CACZqB,UAAW1lB,EAAQqkB,cAErBpe,aAAc,CACZyf,UAAW1lB,EAAQiG,cAErBqf,kBAAmB,CACjBI,UAAW1lB,EAAQslB,oBAIvB,MAAO,CACLtlB,UACAylB,cACAE,eAAgB,eACjB,E,2NC1dH,MAAMC,GAAYplB,EAAAA,MAAW,IACpB,iCAGHqlB,GAA6BC,GAE/BtlB,EAAAA,cAACA,EAAAA,SAAc,CAACulB,SAAUvlB,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAAColB,GAAcE,IA+CrB,GAvCkB,CAKhBtwB,GAAE,EAOF6oB,eAAc,GACd2H,kBAAiB,GACjBC,iBCtCK,UAA0B,gBAAElwB,IACjC,MAAM,oBAAEgD,EAAmB,eAAEmX,EAAc,iBAAEC,GAAqBpa,EAAgBoC,SAClF,MAAO,CACL,CACEgF,KAAM,oCACN+oB,SAAUA,EAAG5P,aAAY6P,SAAQhB,YAAWiB,mBAK1C,MAAMvZ,EAAgB9T,EAAoBmO,mBAC1C,IAAK2F,GAAevU,OAClB,MAAO,CACL+tB,UAAU,EACVzlB,UAAW,2CACXwlB,aAAcA,GAAgB,8BAIlC,MAAM7f,EAAY4J,EAAiBmW,wBAAwBhQ,GAE3D,IAAK/P,EACH,MAAO,CACL8f,UAAU,EACVzlB,UAAW,oCACXwlB,aAAcA,GAAgB,yCAIlC,MAAMf,EAAWnV,EAAeqW,qBAAqBJ,GAErD,IAAK5f,EAAUigB,QAAQnB,KAAcF,EACnC,MAAO,CACLkB,UAAU,EACVzlB,UAAW,oCACXwlB,aAAcA,GAAgB,yCAIlC,MAAMK,EAAkBtB,EACpBA,EAAUvU,SAASrK,EAAUmgB,mCAC7BngB,EAAUmgB,oCAAsCrB,EAEpD,MAAO,CACLgB,UAAU,EACVzlB,UAAW6lB,EACP,6FACA,6FAIJniB,SAAUmiB,EACX,GAIT,EDjBEE,kBAAiBA,EAAC,gBAAE5wB,EAAe,iBAAEC,EAAgB,gBAAEyV,KAY9C,CAAC,CAAEtO,KAAM,YAAaoG,UAXcuiB,GAEvCtlB,EAAAA,cAACqlB,GAA0Be,GAAA,CACzB7wB,gBAAiBA,EACjBC,iBAAkBA,EAClByV,gBAAiBA,GACbqa,MAaZe,yBAAwB,EACxBC,yBAAwBA,E","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/types/segmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../ui/src/components/DualInputRange/DualInputRange.tsx","webpack:///../../ui/src/components/DualInputRange/index.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/brushToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/cscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/paintFillToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIStartEndToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/sscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/undoToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/baseToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segConfigurationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segmentationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { CONSTANTS } from '@cornerstonejs/tools';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nconst loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(\n  segDisplaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({\n  extensionManager,\n  servicesManager,\n  segDisplaySet,\n  headers,\n}: withAppTypes) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  let usedRecommendedDisplayCIELabValue = true;\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = data.RecommendedDisplayCIELabValue;\n\n      if (data.rgba) {\n        data.rgba = dicomlabToRGB(data.rgba);\n      } else {\n        usedRecommendedDisplayCIELabValue = false;\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\n      }\n    }\n  });\n\n  if (results.overlappingSegments) {\n    uiNotificationService.show({\n      title: 'Overlapping Segments',\n      message:\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\n      type: 'warning',\n    });\n  }\n\n  if (!usedRecommendedDisplayCIELabValue) {\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\n    uiNotificationService.show({\n      title: 'DICOM SEG import',\n      message:\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\n      type: 'warning',\n      duration: 5000,\n    });\n  }\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService: AppTypes.SegmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","export enum SegmentationPanelMode {\n  Expanded = 'expanded',\n  Dropdown = 'dropdown',\n}\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React from 'react';\nimport { Dialog } from '@ohif/ui';\nimport { ChromePicker } from 'react-color';\n\nimport './colorPickerDialog.css';\n\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\n  const dialogId = 'pick-color';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.rgbaColor, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment Color',\n        value: { rgbaColor },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          const handleChange = color => {\n            setValue({ rgbaColor: color.rgb });\n          };\n\n          return (\n            <ChromePicker\n              color={value.rgbaColor}\n              onChange={handleChange}\n              presetColors={[]}\n              width={300}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callColorPickerDialog;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Typography from '../Typography';\nimport './DualInputRange.css';\nimport {Button} from \"@ohif/ui\";\n\n\n/**\n * React Range Input component\n * it has two props, value and onChange\n * value is a number value\n * onChange is a function that will be called when the range input is changed\n *\n *\n */\n\nconst DualInputRange: React.FC<{\n    value1: number;\n    value2: number;\n    onChange: (value1, value2) => void;\n    minValue: number;\n    maxValue: number;\n    step: number;\n    unit?: string;\n    containerClassName?: string;\n    inputClassName?: string;\n    labelClassName?: string;\n    labelVariant?: string;\n    showLabel?: boolean;\n    labelPosition?: string;\n    trackColor?: string;\n}> = ({\n                                value1,\n                                value2,\n                                onChange,\n                                minValue,\n                                maxValue,\n                                step = 1,\n                                unit = '',\n                                containerClassName,\n                                inputClassName,\n                                labelClassName,\n                                labelVariant,\n                                showLabel = true,\n                                labelPosition = '',\n                                trackColor,\n                            }) => {\n    const [rangeValue1, setRangeValue1] = useState(value1);\n    const [rangeValue2, setRangeValue2] = useState(value2);\n\n    useEffect(() => {\n        //Change value 1\n        if(value1 < minValue) return\n        setRangeValue1(value1);\n        // if (value1 >= rangeValue2) {\n        //     setRangeValue2(value1);\n        // }\n\n        //Change value 2\n        if(value2 > maxValue) return\n        setRangeValue2(value2);\n        // if (value2 <= rangeValue1) {\n        //     setRangeValue1(value2);\n        // }\n    }, [value1, value2])\n\n    const handleChange1 = (e) => {\n        const value = Number(e.target.value);\n        if(value < minValue) return\n        setRangeValue1(value);\n        // if (value >= rangeValue2) {\n        //     setRangeValue2(value);\n        // }\n        onChange(value, rangeValue2)\n    };\n\n    const handleChange2 = (e) => {\n        const value = Number(e.target.value);\n        if(value > maxValue) return\n        setRangeValue2(value);\n        // if (value <= rangeValue1) {\n        //     setRangeValue1(value);\n        // }\n        onChange(rangeValue1, value)\n    }\n\n    const rangeValuePercentage1 = ((rangeValue1 - minValue) / (maxValue - minValue)) * 100;\n    const rangeValuePercentage2 = ((rangeValue2 - minValue) / (maxValue - minValue)) * 100;\n\n    const rangeValueForStr1 = step >= 1 ? rangeValue1.toFixed(0) : rangeValue1.toFixed(1);\n    const rangeValueForStr2 = step >= 1 ? rangeValue2.toFixed(0) : rangeValue2.toFixed(1);\n\n    return (\n        <div\n            style={{flexDirection:'column'}}\n            className={`flex items-center cursor-pointer space-x-1 ${\n                containerClassName ? containerClassName : ''\n            }`}\n        >\n            {showLabel && labelPosition === 'left' && (\n                <>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\n                    >\n                        {rangeValueForStr1}\n                        {unit}\n                    </Typography>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\n                    >\n                        {rangeValueForStr2}\n                        {unit}\n                    </Typography>\n                </>\n            )}\n            <div style={{flexDirection:'row'}} className={'flex pb-[5px]'}>\n                <input\n                    type=\"range\"\n                    min={minValue}\n                    max={maxValue}\n                    value={rangeValue1}\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\n                        inputClassName ? inputClassName : ''\n                    }`}\n                    style={{background: '#3a3f99',}}\n                    onChange={handleChange1}\n                    id=\"myRange1\"\n                    step={step}\n                />\n                <input\n                    type=\"range\"\n                    min={minValue}\n                    max={maxValue}\n                    value={rangeValue2}\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\n                        inputClassName ? inputClassName : ''\n                    }`}\n                    style={{background: '#3a3f99',}}\n                    onChange={handleChange2}\n                    id=\"myRange2\"\n                    step={step}\n                />\n            </div>\n            {showLabel && (!labelPosition || labelPosition === 'right') && (\n                <div style={{flexDirection:'row', width:'100%'}} className={'flex pb-[5px]'}>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\n                    >\n                        {'Min : '}\n                        {rangeValueForStr1}\n                        {unit}\n                    </Typography>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\n                    >\n                        {'Max : '}\n                        {rangeValueForStr2}\n                        {unit}\n                    </Typography>\n                </div>\n            )}\n            <div className={'flex'} style={{width:'100%'}}>\n                <div className={'flex w-1/2 justify-center'}>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 - 10}})\n                    }}>{'--'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 - 1}})\n                    }}>{'-'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 + 1}})\n                    }}>{'+'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 + 10}})\n                    }}>{'++'}</Button>\n                </div>\n                <div className={'flex w-1/2 justify-center'}>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 - 10}})\n                    }}>{'--'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 - 1}})\n                    }}>{'-'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 + 1}})\n                    }}>{'+'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 + 10}})\n                    }}>{'++'}</Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DualInputRange;\n","import DualInputRange from './DualInputRange';\n\nexport default DualInputRange;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport InputRange from '../../../../../platform/ui/src/components/InputRange';\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport { useTranslation } from 'react-i18next';\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\nimport {\n    getEnabledElement,\n    VolumeViewport,\n    triggerEvent,\n    eventTarget,\n    utilities as csUtils,\n    utilities,\n} from '@cornerstonejs/core';\n\nconst DefaultListItemRenderer = ({ label, activeMode, eraseReplaceFocus }) => {\n    const isActive = label === eraseReplaceFocus;\n    if (label === 'All' && activeMode === Brush_Mode.REPLACE) {\n        label = 'Background';\n    }\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Brush_Tool {\n    CIRCLE      =   'CIRCLE',\n    SPHERE      =   'SPHERE'\n}\n\nenum Brush_Mode {\n    FILL        =   'FILL',\n    THRESHOLD   =   'THRESHOLD',\n    ERASE       =   'ERASE',\n    REPLACE     =   'REPLACE'\n}\n\nconst getBrushStrategy = (tool: Brush_Tool, mode: Brush_Mode) => {\n    return mode + '_INSIDE_' + tool;\n}\n\nconst EVENT_LISTENERS = []\n\nexport default function BrushToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [isEraseReplaceOnlyMinimized, setIsEraseReplaceOnlyMinimized] = useState(true);\n    const [eraseReplaceFocus, setEraseReplaceFocus] = useState('All')\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\n\n    // @ts-ignore\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n    const [activeMode, setActiveMode] = useState(Brush_Mode.FILL);\n    const [activeTool, setActiveTool] = useState(Brush_Tool.CIRCLE);\n    const [brushSize, setBrushSize] = useState(25)\n    const [circleThresholdValue, setCircleThresholdValue] = useState([-1000, 5000])\n    const [circleTargetSegmentIndex, setCircleTargetSegmentIndex] = useState(0)\n    const [segments, setSegments] = useState([])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        setActiveMode(Brush_Mode.FILL);\n        setActiveTool(Brush_Tool.CIRCLE);\n        setBrushSize(brushInstance.configuration.brushSize)\n        setCircleThresholdValue(brushInstance.configuration.strategySpecificConfiguration.THRESHOLD.threshold)\n        setCircleTargetSegmentIndex(brushInstance.configuration.strategySpecificConfiguration.REPLACE.targetSegmentIndex)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                const strategySpecificConfiguration = brushInstance.configuration.strategySpecificConfiguration;\n                strategySpecificConfiguration.REPLACE.targetSegmentIndex = segmentIndex;\n                brushInstance.setConfiguration({eraseFocusIndex: segmentIndex, strategySpecificConfiguration: strategySpecificConfiguration})\n                setEraseReplaceFocus(label)\n            }\n        }}))\n\n        toolGroup.setToolActive('Undo', {\n            bindings: [\n                {\n                    mouseButton: MouseBindings.Primary, // Left Click\n                },\n            ],\n        })\n    }, [])\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                        const {label, segmentIndex} = args\n                        const strategySpecificConfiguration = brushInstance.configuration.strategySpecificConfiguration;\n                        strategySpecificConfiguration.REPLACE.targetSegmentIndex = segmentIndex;\n                        brushInstance.setConfiguration({eraseFocusIndex: segmentIndex, strategySpecificConfiguration: strategySpecificConfiguration})\n                        setEraseReplaceFocus(label)\n                    }\n                }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    //Update list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                        const {label, segmentIndex} = args\n                        const strategySpecificConfiguration = brushInstance.configuration.strategySpecificConfiguration;\n                        strategySpecificConfiguration.REPLACE.targetSegmentIndex = segmentIndex;\n                        brushInstance.setConfiguration({eraseFocusIndex: segmentIndex, strategySpecificConfiguration: strategySpecificConfiguration})\n                        setEraseReplaceFocus(label)\n                    }\n                }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        brushInstance.setConfiguration({\n            brushSize: brushSize,\n            activeStrategy: getBrushStrategy(activeTool, activeMode),\n            strategySpecificConfiguration: {\n                THRESHOLD: {\n                    threshold: circleThresholdValue, // E.g. CT Fat // Only used during threshold strategies.\n                },\n                REPLACE: {\n                    targetSegmentIndex: circleTargetSegmentIndex, // E.g. Only used during replace strategies.\n                },\n            },\n        })\n    }, [brushSize, activeTool, activeMode, circleThresholdValue])\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n            const worldPoints = evt.detail.currentPoints.world\n            const imageData = viewport.getImageData()\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\n\n            index[0] = Math.round(index[0]);\n            index[1] = Math.round(index[1]);\n            index[2] = Math.round(index[2]);\n\n            const {scalarData, dimensions} = imageData\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value =\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setCircleThresholdValue([value, circleThresholdValue[1]])\n                } else {\n                    setCircleThresholdValue([circleThresholdValue[0], value])\n                }\n            }\n        }\n    }\n\n    //Create event listeners to catch mouse click for pipette threshold tool\n    //Active probe tool is pipette active to display HU values on screen\n    //Go back to brush tool if we deactivate pipette\n    //Wrapper around addEventListener to not have multiple listeners\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            viewport.id,\n            viewport.renderingEngineId\n        );\n        const currentElement = viewport.element\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n                EVENT_LISTENERS[evt] = null\n            }\n            EVENT_LISTENERS[evt] = callback\n            currentElement.addEventListener(evt, callback)\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n            EVENT_LISTENERS[evt] = null\n        }\n\n        if(pipetteMode.active){\n            toolGroup.setToolPassive('Brush')\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        }\n        else{\n            toolGroup.setToolPassive('DragProbe')\n            toolGroup.setToolActive('Brush', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.removeEvent(Events.MOUSE_DRAG)\n        }\n    }, [pipetteMode.active, pipetteMode.minimum])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Paint Brush Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                            {'Tool and mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeTool === Brush_Tool.CIRCLE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveTool(Brush_Tool.CIRCLE)}}\n                            >{'Circle'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeTool === Brush_Tool.SPHERE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveTool(Brush_Tool.SPHERE)}}\n                            >{'Sphere'}</Button>\n\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.FILL ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.FILL)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.THRESHOLD ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.THRESHOLD)}}\n                            >{'Threshold'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.ERASE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.ERASE)}}\n                            >{'Erase'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.REPLACE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.REPLACE)}}\n                            >{'Replace'}</Button>\n                        </div>\n                        <div className=\"flex items-center col-span-2\">\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\">{'Radius'}</div>\n                            <InputRange\n                                minValue={0}\n                                maxValue={100}\n                                value={brushSize}\n                                onChange={(value) => {setBrushSize(value)}}\n                                step={1}\n                                containerClassName=\"mt-[4px] mb-[4px]\"\n                                inputClassName=\"w-[64px]\"\n                                labelClassName=\"text-white text-[12px]\"\n                                unit=\"px\"\n                            />\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseReplaceOnlyMinimized(!isEraseReplaceOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseReplaceOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase/replace options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseReplaceOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                            {'Erase/replace focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, activeMode, eraseReplaceFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        {\n                            (activeMode === Brush_Mode.THRESHOLD && (\n                                <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\n                                    <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1\" style={{width: '100%'}}></div>\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>\n                                        {'Threshold values'}\n                                    </div>\n                                    <DualInputRange\n                                        minValue={-1000}\n                                        maxValue={5000}\n                                        value1={circleThresholdValue[0]}\n                                        value2={circleThresholdValue[1]}\n                                        onChange={(vmin, vmax) => {setCircleThresholdValue([vmin, vmax])}}\n                                        step={5}\n                                        containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                        inputClassName=\"w-full\"\n                                        labelClassName=\"text-white text-[12px] w-full\"\n                                        unit=\"HU\"\n                                    />\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>\n                                        {'Select threshold value with pipette for :'}\n                                    </div>\n                                    <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                        <Button\n                                            fullWidth={true}\n                                            size={'small'}\n                                            color={'secondary'}\n                                            onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                        >{'Minimum'}</Button>\n                                        <Button\n                                            fullWidth={true}\n                                            size={'small'}\n                                            color={'secondary'}\n                                            onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                        >{'Maximum'}</Button>\n                                    </div>\n                                    {\n                                        pipetteMode.active && (\n                                            <Button\n                                                size={'small'}\n                                                color={'secondary'}\n                                                onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                            >\n                                                {'Back to annotation'}\n                                            </Button>\n                                        )\n                                    }\n                                </div>\n                            ))\n                        }\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Circle_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function CircleScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Circle_Strategies.FILL_INSIDE)\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const cscissorsInstance = toolGroup.getToolInstance('CircleScissor');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                            const {label, segmentIndex} = args\n                            cscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                            setEraseFocus(label)\n                        }\n                    }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\n        setActiveStrategy(circleInstance.configuration.activeStrategy)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                setEraseFocus(label)\n                circleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n            }\n        }}))\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const CircleInstance = toolGroup.getToolInstance('CircleScissor');\n        CircleInstance.setConfiguration({\n            activeStrategy: activeStrategy,\n        })\n    }, [activeStrategy])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Circle Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Circle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Circle_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Circle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Circle_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\n\nexport default function PaintFillToolEdit ({}){\n    const [isMinimized, setIsMinimized] = useState(false);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Fill Holes Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'No configurations for this tool'}\n                        </span>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport InputRange from '../../../../../platform/ui/src/components/InputRange'\nimport {Button, useViewportGrid} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\n\nconst EVENT_LISTENERS = []\n\nexport default function RectangleROIStartEndThresholdToolEdit ({\n                                                            segmentationService,\n                                                            cornerstoneViewportService,\n                                                            commandsManager\n                                                       }){\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [thresholdValue, setThresholdValue] = useState([-1000, 5000])\n    const [slicesToPropagate, setSlicesToPropagate] = useState(0)\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\n\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\n        setSlicesToPropagate(rectangleROIInstance.configuration.numSlicesToPropagate)\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\n        brushInstance.setConfiguration({\n            numSlicesToPropagate: slicesToPropagate\n        })\n        console.log('SET CONFIGURATION', slicesToPropagate)\n    }, [slicesToPropagate])\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n            const worldPoints = evt.detail.currentPoints.world\n            const imageData = viewport.getImageData()\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\n\n            index[0] = Math.round(index[0]);\n            index[1] = Math.round(index[1]);\n            index[2] = Math.round(index[2]);\n\n            const {scalarData, dimensions} = imageData\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value =\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setThresholdValue([value, thresholdValue[1]])\n                } else {\n                    setThresholdValue([thresholdValue[0], value])\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            viewport.id,\n            viewport.renderingEngineId\n        );\n        const currentElement = viewport.element\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n                EVENT_LISTENERS[evt] = null\n            }\n            EVENT_LISTENERS[evt] = callback\n            currentElement.addEventListener(evt, callback)\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n            EVENT_LISTENERS[evt] = null\n        }\n\n        if(pipetteMode.active){\n            toolGroup.setToolPassive('RectangleROIStartEndThreshold')\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        }\n        else{\n            toolGroup.setToolPassive('DragProbe')\n            toolGroup.setToolActive('RectangleROIStartEndThreshold', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.removeEvent(Events.MOUSE_DRAG)\n        }\n    }, [pipetteMode.active, pipetteMode.minimum])\n\n    const computeThreshold = () => {\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors()\n        const imageVolumes = actors\n            .map((va) => {\n                // prefer the referenceUID if it is set, since it can be a derived actor\n                // and the uid does not necessarily match the volumeId\n                const actorUID = va.referenceId ?? va.uid;\n                return cache.getVolume(actorUID);\n            })\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\n            .filter((iv) => !!iv);\n\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIStartEndThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        const annotation = csTools.annotation.state.getAnnotation(\n            annotationUID\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIStartEndThresholdAnnotation;\n\n        if (!annotation) return\n\n        // Todo: this only works for volumeViewport\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        const segmentations = segmentationService.getSegmentations();\n\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n            selectedAnnotationUIDs,\n            segmentationVolume,\n            [\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\n            ],\n            {\n                numSlicesToProject: 0,\n                overwrite: false,\n                overlapType: 1,\n                segmentIndex: segmentations[0].activeSegmentIndex,\n            }\n        );\n    }\n\n    const deleteRegion = () => {\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIStartEndThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n        console.log('selected annotation uid', selectedAnnotationUIDs)\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        console.log('CSTOOLS STATE', csTools.annotation.state)\n        csTools.annotation.state.removeAnnotation(annotationUID)\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render()\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'3D Rectangle Threshold Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                            <DualInputRange\n                                minValue={-1000}\n                                maxValue={5000}\n                                value1={thresholdValue[0]}\n                                value2={thresholdValue[1]}\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\n                                step={5}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"\"\n                            />\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                >{'Minimum'}</Button>\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                >{'Maximum'}</Button>\n                            </div>\n                            {\n                                pipetteMode.active && (\n                                    <Button\n                                        size={'small'}\n                                        color={'secondary'}\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                    >\n                                        {'Back to annotation'}\n                                    </Button>\n                                )\n                            }\n                        </div>\n                        <div className=\"flex items-center col-span-2\" style={{width:'100%', flexDirection:'column'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Slices Propagation'}</div>\n                            <InputRange\n                                minValue={0}\n                                maxValue={200}\n                                value={slicesToPropagate}\n                                onChange={(value) => {setSlicesToPropagate(value)}}\n                                step={1}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"\"\n                            />\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {computeThreshold()}}\n                            >{'Compute Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {deleteRegion()}}\n                            >{'Delete selected region'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport {Button, useViewportGrid} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\n\nconst EVENT_LISTENERS = []\n\nexport default function RectangleROIThresholdToolEdit ({\n    segmentationService,\n    cornerstoneViewportService,\n    commandsManager\n}){\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [thresholdValue, setThresholdValue] = useState([-1000, 5000])\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n            const worldPoints = evt.detail.currentPoints.world\n            const imageData = viewport.getImageData()\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\n\n            index[0] = Math.round(index[0]);\n            index[1] = Math.round(index[1]);\n            index[2] = Math.round(index[2]);\n\n            const {scalarData, dimensions} = imageData\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value =\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setThresholdValue([value, thresholdValue[1]])\n                } else {\n                    setThresholdValue([thresholdValue[0], value])\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            viewport.id,\n            viewport.renderingEngineId\n        );\n        const currentElement = viewport.element\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n                EVENT_LISTENERS[evt] = null\n            }\n            EVENT_LISTENERS[evt] = callback\n            currentElement.addEventListener(evt, callback)\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n            EVENT_LISTENERS[evt] = null\n        }\n\n        if(pipetteMode.active){\n            toolGroup.setToolPassive('RectangleROIThreshold')\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        }\n        else{\n            toolGroup.setToolPassive('DragProbe')\n            toolGroup.setToolActive('RectangleROIThreshold', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.removeEvent(Events.MOUSE_DRAG)\n        }\n    }, [pipetteMode.active, pipetteMode.minimum])\n\n    const computeThreshold = () => {\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors()\n        const imageVolumes = actors\n            .map((va) => {\n                // prefer the referenceUID if it is set, since it can be a derived actor\n                // and the uid does not necessarily match the volumeId\n                const actorUID = va.referenceId ?? va.uid;\n                return cache.getVolume(actorUID);\n            })\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\n            .filter((iv) => !!iv);\n\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        const annotation = csTools.annotation.state.getAnnotation(\n            annotationUID\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIThresholdAnnotation;\n\n        if (!annotation) return\n\n        // Todo: this only works for volumeViewport\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n\n        const segmentations = segmentationService.getSegmentations();\n        console.log('SEGMENTATION', segmentations)\n\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n            selectedAnnotationUIDs,\n            segmentationVolume,\n            [\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\n            ],\n            {\n                numSlicesToProject: 0,\n                overwrite: false,\n                overlapType: 1,\n                segmentIndex: segmentations[0].activeSegmentIndex,\n            }\n        );\n    }\n\n    const deleteRegion = () => {\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n        console.log('selected annotation uid', selectedAnnotationUIDs)\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        console.log('CSTOOLS STATE', csTools.annotation.state)\n        csTools.annotation.state.removeAnnotation(annotationUID)\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render()\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Rectangle Threshold Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"flex items-center col-span-2 pb-[9px]\" style={{flexDirection:'column', width:'100%'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pb-[3px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                            <DualInputRange\n                                minValue={-1000}\n                                maxValue={5000}\n                                value1={thresholdValue[0]}\n                                value2={thresholdValue[1]}\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\n                                step={5}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full pb-[3px]\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"HU\"\n                            />\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                >{'Minimum'}</Button>\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                >{'Maximum'}</Button>\n                            </div>\n                            {\n                                pipetteMode.active && (\n                                    <Button\n                                        size={'small'}\n                                        color={'secondary'}\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                    >\n                                        {'Back to annotation'}\n                                    </Button>\n                                )\n                            }\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {computeThreshold()}}\n                            >{'Compute Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {deleteRegion()}}\n                            >{'Delete selected region'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Rectangle_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function RectangleScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Rectangle_Strategies.FILL_INSIDE)\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rscissorsInstance = toolGroup.getToolInstance('RectangleScissor');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                            const {label, segmentIndex} = args\n                            rscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                            setEraseFocus(label)\n                        }\n                    }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n        setActiveStrategy(rectangleInstance.configuration.activeStrategy)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                setEraseFocus(label)\n                rectangleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n            }\n        }}))\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n        rectangleInstance.setConfiguration({\n            activeStrategy: activeStrategy,\n        })\n    }, [activeStrategy])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Rectangle Scissors Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Rectangle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Rectangle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Sphere_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function SphereScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Sphere_Strategies.FILL_INSIDE)\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const sscissorsInstance = toolGroup.getToolInstance('RectangleScissor');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                            const {label, segmentIndex} = args\n                            sscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                            setEraseFocus(label)\n                        }\n                    }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n        setActiveStrategy(sphereInstance.configuration.activeStrategy)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                setEraseFocus(label)\n                sphereInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n            }\n        }}))\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n        sphereInstance.setConfiguration({\n            activeStrategy: activeStrategy,\n        })\n    }, [activeStrategy])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Sphere Scissors Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Sphere_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Sphere_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\nconst { Enums: csToolsEnums } = csTools\nconst { Events } = csToolsEnums\n\nclass CappedArray extends Array {\n    private readonly maxLength: number;\n\n    constructor(maxLength) {\n        super();\n        this.maxLength = maxLength;\n    }\n\n    push(...elements) {\n        // Appeler la méthode push de la classe Array parente\n        const r = super.push(...elements);\n\n        // Si la longueur dépasse maxLength, retirer les éléments les plus anciens\n        if (this.length > this.maxLength) {\n            const excess = this.length - this.maxLength;\n            this.splice(0, excess);\n        }\n\n        return r\n    }\n}\n\nconst MAX_CACHE_LENGTH = 10\nconst CACHE_SEGMENTATION_VOLUMES = new CappedArray(MAX_CACHE_LENGTH)\n\nexport default function UndoToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n    const [currentCacheIndex, setCurrentCacheIndex] = useState(CACHE_SEGMENTATION_VOLUMES.length)\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const currentElement = viewport.element\n        // Save previous segmentation states for \"undo\" functionality\n        currentElement.addEventListener(Events.MOUSE_DOWN, evt => {\n            const old_segmentation = segmentationService.getSegmentations()[0]\n            const old_seg_volume = new Uint8ClampedArray(segmentationService.getLabelmapVolume(old_segmentation.id).getScalarData())\n\n            //Add current segmentation volume in cache to save its state\n            if (CACHE_SEGMENTATION_VOLUMES.length === MAX_CACHE_LENGTH) {\n                CACHE_SEGMENTATION_VOLUMES.shift()\n            }\n            CACHE_SEGMENTATION_VOLUMES.push(old_seg_volume)\n            setCurrentCacheIndex(CACHE_SEGMENTATION_VOLUMES.length)\n        })\n    }, [])\n\n    const apply_replace = (cacheIndex) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const currentElement = viewport.element\n\n        const previous_volume = CACHE_SEGMENTATION_VOLUMES[cacheIndex]\n        if(!previous_volume) return\n\n        const replace_event = new CustomEvent('UNDO_REDO_TOOL', {\n            detail: {\n                element: currentElement,\n                oldScalarData: previous_volume\n            }\n        })\n        window.dispatchEvent(replace_event)\n        setCurrentCacheIndex(cacheIndex)\n    }\n\n    const undo = () => {\n        if(currentCacheIndex === 0) return\n        apply_replace(currentCacheIndex - 1)\n    }\n\n    const redo = () => {\n        if(currentCacheIndex === MAX_CACHE_LENGTH) return\n        apply_replace(currentCacheIndex + 1)\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Undo/redo Segmentation'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly inline-flex\"\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={undo}\n                            >{'Undo'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={redo}\n                            >{'Redo'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {useViewportGrid} from '@ohif/ui';\nimport { useToolbar } from '@ohif/core';\nimport * as csTools from '@cornerstonejs/tools';\nconst { Enums: csToolsEnums } = csTools\nconst { Events } = csToolsEnums\nconst { state } = csTools\n\nimport BrushToolEdit from \"./brushToolEdit\";\nimport CircleScissorsToolEdit from \"./cscissorsToolEdit\";\nimport PaintFillToolEdit from \"./paintFillToolEdit\";\nimport RectangleROIStartEndThresholdToolEdit from \"./rectangleROIStartEndToolEdit\";\nimport RectangleROIThresholdToolEdit from \"./rectangleROIToolEdit\";\nimport RectangleScissorsToolEdit from \"./rscissorsToolEdit\";\nimport SphereScissorsToolEdit from \"./sscissorsToolEdit\";\nimport UndoToolEdit from \"./undoToolEdit\";\n\nconst SEG_TOOL_NAMES = [\n    'Brush',\n    'CircleScissor',\n    'PaintFill',\n    'RectangleROIStartEndThreshold',\n    'RectangleROIThreshold',\n    'RectangleScissor',\n    'SphereScissor'\n]\n\nexport default function BaseToolEdit (\n    {\n        segmentationService,\n        toolbarService,\n        toolGroupService,\n        cornerstoneViewportService,\n        commandsManager\n    }){\n    // @ts-ignore\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n    const [activeSegTool, setActiveSegTool] = useState(null)\n\n    const searchActiveSegTool = () => {\n        const toolStates = state.toolGroups.filter(tg => tg.id === 'mpr')[0]?.toolOptions\n        if(!toolStates) setActiveSegTool(null)\n        const toolStatesArray = Object.keys(toolStates).map(function (key) {\n            return [key, toolStates[key]];\n        });\n        let activeSegTool = false\n        toolStatesArray.forEach(tool => {\n            //Check if tool is a segmentation tool\n            if (SEG_TOOL_NAMES.includes(tool[0])){\n                //Check if tool is active\n                if(tool[1].mode === 'Active'){\n                    activeSegTool = true\n                    setActiveSegTool(tool[0])\n                    return;\n                }\n            }\n        })\n        if(!activeSegTool) setActiveSegTool(null)\n    }\n\n    useEffect(() => {\n        searchActiveSegTool()\n    },[])\n\n    useEffect(() => {\n        const { unsubscribe } = toolbarService.subscribe(\n            toolbarService.EVENTS.TOOL_BAR_MODIFIED,\n            searchActiveSegTool\n        );\n\n        return () => {\n            unsubscribe();\n        };\n    }, [toolbarService]);\n\n    const renderActiveTool = () => {\n        switch (activeSegTool){\n            case 'Brush':\n                return <BrushToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'CircleScissor':\n                return <CircleScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'PaintFill':\n                return <PaintFillToolEdit />\n            case 'RectangleROIStartEndThreshold':\n                return <RectangleROIStartEndThresholdToolEdit\n                    segmentationService={segmentationService}\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    commandsManager={commandsManager}\n                />\n            case 'RectangleROIThreshold':\n                return <RectangleROIThresholdToolEdit\n                    segmentationService={segmentationService}\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    commandsManager={commandsManager}\n                />\n            case 'RectangleScissor':\n                return <RectangleScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'SphereScissor':\n                return <SphereScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            default:\n                return null\n        }\n    }\n\n    return (\n        <>\n            {activeSegTool && (\n                <UndoToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            )}\n            {renderActiveTool()}\n        </>\n    )\n}","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\nimport React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {Segmentation} from \"@ohif/extension-cornerstone/src/services/SegmentationService/SegmentationServiceTypes\";\nimport PropTypes from \"prop-types\";\nimport {saveAs, FileSaver} from 'file-saver'\nimport { segmentation as cstSegmentation } from '@cornerstonejs/tools';\n\nfunction SegmentsConfigurationImportExport({segmentationService, segmentations}) : React.JSX.Element {\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const exportConfiguration = () : void => {\n        const json = JSON.stringify(segmentations[0].segments)\n        const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n        saveAs(json_blob, 'segments_configuration.json')\n    }\n\n    const importConfiguration = () : void => {\n        console.log('SEGS AT IMPORT', segmentations)\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/json'\n        input.onchange = _ => {\n            const json_file = Array.from(input.files)[0];\n            const reader = new FileReader();\n            reader.onload = function(event) {\n                try {\n                    if (typeof event.target.result === \"string\") {\n                        for(let i = 1; i < segmentations[0].segments.length; i++){\n                            segmentationService.removeSegment(segmentations[0].id, i)\n                        }\n\n                        const jsonContent = JSON.parse(event.target.result);\n                        jsonContent.forEach(segment => {\n                            if(segment){\n                                const {segmentIndex} = segment\n                                segmentationService.addSegment(segmentations[0].id, {\n                                    segmentIndex: segmentIndex,\n                                    toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\n                                    properties: segment,\n                                    override: true\n                                });\n                            }\n                        })\n                    }\n                    else {\n                        console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\n                    }\n                } catch (error) {\n                    console.error(\"ERROR::JSON_READING\", error);\n                }\n            };\n            reader.readAsText(json_file);\n        };\n        input.click();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Segments Configuration I/O'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly inline-flex\"\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={importConfiguration}\n                            >{'Import File'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={exportConfiguration}\n                            >{'Export File'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}\n\nSegmentsConfigurationImportExport.propTypes = {\n    segmentations: PropTypes.array.isRequired\n}\n\nexport default SegmentsConfigurationImportExport\n","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\nimport React, {useEffect, useState} from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {saveAs, FileSaver} from 'file-saver'\nimport JSZip from \"jszip\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { segmentation as cstSegmentation, utilities as csToolsUtils } from '@cornerstonejs/tools';\nimport { cache } from '@cornerstonejs/core';\nimport FileLoaderService from '../../../../../platform/app/src/routes/Local/fileLoaderService.js'\nimport {loadPNGImage, cornerstoneDICOMImageLoader} from '@cornerstonejs/dicom-image-loader'\nimport ToolGroupService from \"extensions/cornerstone/src/services/ToolGroupService/ToolGroupService.js\";\nimport { toolGroupIds } from \"modes/tmtv/src/initToolGroups.js\";\n\nfunction SegmentationImportExport({segmentationService, segmentations, cornerstoneViewportService}) : React.JSX.Element {\n\n    const [isProcessingLayer, setIsProcessingLayer] = useState(false)\n    const [processingLayerPercent, setProcessingLayerPercent] = useState(0)\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    useEffect(() => {\n        if(isProcessingLayer){\n            setProcessingLayerPercent(0)\n            setTimeout(exportSegmentation, 500)\n        }\n    }, [isProcessingLayer])\n\n    const exportSegmentation = () => {\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id)\n        const {\n            dimensions,\n            direction,\n            scalarData\n        } = labelmapVolume\n        const segments_info = segmentations[0].segments\n        const existing_segment_indexes = segments_info\n            .map((s, i) => {if (s) return i})\n            .filter(i => i)\n        const data = new Uint32Array(scalarData)\n        console.log('START COMPUTING INDEX ARRAY...')\n\n        //Convert segmentation in PNG Images using JSON\n        //Iterate through one layer (one PNG image)\n        const all_layers_blobs = new Array<Blob>(dimensions[2] - 1)\n        for(let layer_i = 0; layer_i < data.length; layer_i += (dimensions[0] * dimensions[1])){\n            const current_processed_layer = layer_i / (dimensions[0] * dimensions[1])\n            const segmented_layer = new Uint8ClampedArray(dimensions[0] * dimensions[1] * 4)\n                .fill(0)\n                .map((el, i) => {return (i - 3) % 4 === 0 ? 255 : el})\n            const scalar_layer = data.slice(layer_i, layer_i + (dimensions[0] * dimensions[1]))\n            //Map through existing segment indexes\n            Promise.allSettled(existing_segment_indexes.map(segment_index => {\n                //Get indexes of values that matches the segment_index in parameter\n                const mapIndexSerial = (segment_index) => {\n                    return scalar_layer\n                        .map((v, i) => {if(v !== 0 && v === segment_index) return i})\n                        .filter(i => i !== 0)\n                }\n                return mapIndexSerial(segment_index)\n            })).then((indexes_array) => {\n                //List of arrays of indexes matching a segment index (length = number of segment indexes)\n\n                indexes_array.forEach((promise, i) => {\n                    const segment_array = promise.value\n                    //Fill segmented layer with corresponding segment color\n                    if(segment_array.length !== 0){\n                        const corresponding_segment_index = existing_segment_indexes[i]\n                        const color_to_fill = [...segments_info[corresponding_segment_index].color, 255]\n                        segment_array.forEach(index_to_color => {\n                            segmented_layer[index_to_color * 4] = color_to_fill[0]\n                            segmented_layer[index_to_color * 4 + 1] = color_to_fill[1]\n                            segmented_layer[index_to_color * 4 + 2] = color_to_fill[2]\n                        })\n                    }\n                })\n\n                // console.log(`SEGMENTED ${current_processed_layer}`, segmented_layer)\n\n                const fillingPromise = () => {\n                    return new Promise<void>((resolve, reject) => {\n                        const canvas = document.createElement('canvas')\n                        const ctx = canvas.getContext('2d')\n                        canvas.width = dimensions[0]\n                        canvas.height = dimensions[1]\n                        const imgData = new ImageData(segmented_layer, dimensions[0], dimensions[1], {colorSpace: \"srgb\"});\n                        ctx.putImageData(imgData, 0, 0)\n                        canvas.toBlob((blob) => {\n                            if(blob){\n                                all_layers_blobs[current_processed_layer] = blob\n                                resolve()\n                            }\n                        }, \"image/png\")\n                    })\n                }\n                fillingPromise().then(() => {\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length\n                    setProcessingLayerPercent(~~((completed_layers * 100) / dimensions[2]))\n                })\n            })\n        }\n\n        const waitUntilArrayDone = () => {\n            return new Promise<void>((resolve, reject) => {\n                (function waitForArray(){\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length\n                    if(completed_layers === dimensions[2]) return resolve();\n                    else {\n                        setTimeout(waitForArray, 500);}\n                })()\n            })\n        }\n        waitUntilArrayDone().then(() => {\n            const zip = new JSZip()\n            //Add layers in zip as PNG files\n            all_layers_blobs.forEach((blob, index) => {\n                zip.file(`layer_${index}.png`, blob)\n            })\n\n            //Add segments information as JSON File\n            const json = JSON.stringify(segmentations[0].segments, null, '\\t')\n            const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n            zip.file('segmentation_informations.json', json_blob)\n\n            //Add scalar data as binary file\n            const dataBlob = new Blob([scalarData], { type: 'application/octet-stream' })\n            zip.file('scalarData.bin', dataBlob);\n\n            zip.generateAsync({type:'blob'}).then((content) => {\n                saveAs(content, 'segmentation.zip')\n                setIsProcessingLayer(false)\n            })\n        })\n    }\n\n    const importConfiguration = (configurationFile) => {\n        const reader = new FileReader();\n        reader.onload = function(event) {\n            try {\n                if (typeof event.target.result === \"string\") {\n                    const jsonContent = JSON.parse(event.target.result);\n                    jsonContent.forEach(segment => {\n                        if(segment){\n                            const {segmentIndex} = segment\n                            segmentationService.addSegment(segmentations[0].id, {\n                                segmentIndex: segmentIndex,\n                                toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\n                                properties: segment,\n                                override: true\n                            });\n                        }\n                    })\n                    cstSegmentation.triggerSegmentationEvents.triggerSegmentationModified(segmentations[0].id);\n                } else {\n                    console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\n                }\n            } catch (error) {\n                console.error(\"ERROR::JSON_READING\", error);\n            }\n        };\n        reader.readAsText(configurationFile);\n    }\n\n    const _sortFiles = (files) => {\n        const indexedFiles = files.map(file => ({\n            file: file,\n            index: Number(file.name.slice(6, file.name.length - 4)),\n        }));\n        indexedFiles.sort((a, b) => a.index - b.index);\n        const sortedFiles = indexedFiles.map(item => item.file);\n\n        return sortedFiles;\n    }\n\n    const importSegmentationFromFolder = () => {\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\n        const {dimensions, scalarData} = labelmapVolume; //TODO\n        const layerSize = dimensions[0] * dimensions[1];\n        console.log('SEGS AT IMPORT', segmentations);\n\n        /*let viewport = viewports.get(activeViewportId);\n        if (viewport.viewportOptions.viewportType !== 'volume') {\n            viewport = viewports.find(vp => vp.viewportOptions.viewportType === 'volume');\n            console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\n            viewportGridService.setActiveViewportId(viewport.viewportId);\n        }\n        const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.id);\n        const actorEntries = cornerstoneVP.getActors();\n        console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\n        const imageVolumes = actorEntries.map((va) => {\n            const actorUID = va.referenceId ?? va.uid;\n            return cache.getVolume(actorUID);\n        });\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds)[0];\n        const segmentationId = segmentationVolume.volumeId;\n        const scalarData = segmentationVolume.getScalarData();*/\n\n        const segmentsHashes = {255: 0};\n        for (const segment of segmentations[0].segments) {\n            if (segment) {\n                const [r, g, b] = segment.color;\n                const rgbHash = (r << 24) + (g << 16) + (b << 8) + 255;\n                segmentsHashes[rgbHash] = segment.segmentIndex;\n            }\n        }\n\n        // Load binary file\n        const input = document.createElement('input');\n        input.type = 'file';\n        //input.accept = 'image/png';\n        input.webkitdirectory = true;\n        input.onchange = async _ => {\n            const files = Array.from(input.files);\n            const configurationFile = files.filter(filter => filter.type === 'application/json')[0];\n            importConfiguration(configurationFile);\n\n            let imageFiles = files.filter(file => file.type === 'image/png');\n            if (imageFiles.length != dimensions[2]) {\n                // TODO Error\n                return;\n            }\n            imageFiles = _sortFiles(imageFiles);\n            for (let index = 0; index < imageFiles.length; index++) {\n                const file = imageFiles[index];\n                const fileLoaderService = new FileLoaderService(file)\n                const imageId = fileLoaderService.addFile(file)\n                const img = await fileLoaderService.loadFile(file, imageId);\n                const dataset = await fileLoaderService.getDataset(img, imageId);\n                const newScalarData = new Uint32Array(dataset.PixelData[0]);\n                if (newScalarData.length * imageFiles.length != scalarData.length) {\n                    // TODO Error\n                    return;\n                }\n                newScalarData.map(value => segmentsHashes[value]);\n                const processedData = new Uint8Array(newScalarData);\n                // Replace values of current scalar data\n                //scalarData.set(processedData, index * layerSize)\n                const offset = index * layerSize;\n                for (let i = 0; i < processedData.length; i++) {\n                    scalarData[offset + i] = processedData[i];\n                }\n            }\n            /*segmentationService.addOrUpdateSegmentation(segmentations[0]);\n            const representation = segmentationService.getSegmentationRepresentationsForToolGroup(\"mpr\");\n            const segmentationRepresentationUID = representation[0].segmentationRepresentationUID;\n            const toolGroupId = viewports.get(activeViewportId).viewportOptions.toolGroupId;\n            console.log(cstSegmentation.state.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID))\n            segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n            csToolsUtils.segmentation.triggerSegmentationRender(toolGroupId);*/\n            cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentations[0].id);\n        };\n        input.click();\n    }\n\n    const importSegmentationFromBinary = () => {\n        console.log('SEGS AT IMPORT', segmentations);\n\n        let viewport = viewports.get(activeViewportId);\n        if (viewport.viewportOptions.viewportType !== 'volume') {\n            viewport = Array.from(viewports.values()).find(vp => vp.viewportOptions.viewportType === 'volume');\n            console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\n            viewportGridService.setActiveViewportId(viewport.viewportId);\n        }\n        const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.viewportId);\n        const actorEntries = cornerstoneVP.getActors();\n        console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\n        const imageVolumes = actorEntries.map((va) => {\n            const actorUID = va.referenceId ?? va.uid;\n            return cache.getVolume(actorUID);\n        });\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        const segmentationId = segmentationVolume.volumeId;\n        const segmentationScalarData = segmentationVolume.getScalarData();\n\n        // Load binary file\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/octet-stream';\n        input.onchange = async _ => {\n            const file = Array.from(input.files)[0];\n            const reader = new FileReader();\n            reader.onload = async function(event) {\n                const newScalarData = new Uint8Array(event.target.result as ArrayBuffer);\n                // Replace values of current scalar data\n                for (let i = 0; i < segmentationScalarData.length; i++) {\n                    segmentationScalarData[i] = newScalarData[i];\n                }\n                // Trigger rendering\n                cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentationId);\n            }\n            reader.readAsArrayBuffer(file);\n        };\n        input.click();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Segmentations I/O'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={importSegmentationFromBinary}\n                            >{'Import Segmentation'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {\n                                    setIsProcessingLayer(true);\n                                    exportSegmentation;\n                                }}\n                            >{'Export Segmentation'}</Button>\n                        </div>\n                        {isProcessingLayer &&\n                            <div className={'w-full mt-[9px]'}>\n                                <p style={{color:'white'}}>{'Processing layers...'}</p>\n                                <ProgressBar\n                                    className={'w-full mt-[3px]'}\n                                    bgColor={processingLayerPercent < 100 ? '#5ACCE6' : '#50C878'}\n                                    completed={processingLayerPercent}\n                                    transitionDuration={\"0.05s\"}\n                                    transitionTimingFunction={\"linear\"}\n                                />\n                            </div>\n                        }\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}\n\nSegmentationImportExport.propTypes = {\n    segmentations: PropTypes.array.isRequired\n}\n\nexport default SegmentationImportExport\n","import { createReportAsync } from '@ohif/extension-default';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport PropTypes, {element} from 'prop-types';\nimport {Button, SegmentationGroupTable, SegmentationGroupTableExpanded, useViewportGrid, ListMenu} from '@ohif/ui';\nimport { SegmentationPanelMode } from '../types/segmentation';\nimport callInputDialog from './callInputDialog';\nimport callColorPickerDialog from './colorPickerDialog';\nimport * as csTools from '@cornerstonejs/tools';\nimport BaseToolEdit from \"./segToolsEditSection/baseToolEdit\";\nimport SegmentsConfigurationImportExport from \"./segConfigurationIO\";\nimport SegmentationImportExport from \"./segmentationIO\";\nimport {useTranslation} from 'react-i18next';\n\n\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\nconst components = {\n  [SegmentationPanelMode.Expanded]: SegmentationGroupTableExpanded,\n  [SegmentationPanelMode.Dropdown]: SegmentationGroupTable,\n};\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n}: withAppTypes) {\n  const [{ activeViewportId, viewports }] = useViewportGrid();\n  const {\n    segmentationService,\n    viewportGridService,\n    uiDialogService,\n    displaySetService,\n    cornerstoneViewportService,\n    hangingProtocolService,\n    toolGroupService,\n    toolbarService,\n    uiNotificationService\n  } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSegmentation');\n\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [addSegmentationClassName, setAddSegmentationClassName] = useState('');\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n\n  const [isMinimized, setIsMinimized] = useState({});\n\n  const onToggleMinimizeSegmentation = useCallback(\n    id => {\n      setIsMinimized(prevState => ({\n        ...prevState,\n        [id]: !prevState[id],\n      }));\n    },\n    [setIsMinimized]\n  );\n\n  // Only expand the last segmentation added to the list and collapse the rest\n  useEffect(() => {\n    const lastSegmentationId = segmentations[segmentations.length - 1]?.id;\n    if (lastSegmentationId) {\n      setIsMinimized(prevState => ({\n        ...prevState,\n        [lastSegmentationId]: false,\n      }));\n    }\n  }, [segmentations, setIsMinimized]);\n\n  useEffect(() => {\n    /*// Change view to default\n    const state = viewportGridService.getState();\n    console.log('STATE', state);\n    console.log('HP', hangingProtocolService.getActiveProtocol());\n    if (hangingProtocolService.getActiveProtocol().protocol.id !== 'mprAnd3DVolumeViewport') {\n        commandsManager.runCommand('toggleHangingProtocol', {\n            protocolId: 'mprAnd3DVolumeViewport',\n            stageIndex: 0,\n        });\n    }*/\n\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  // temporary measure to not allow add segmentation when the selected viewport\n  // is stack viewport\n  useEffect(() => {\n    const handleActiveViewportChange = viewportId => {\n      const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\n        viewportId || viewportGridService.getActiveViewportId()\n      );\n\n      if (!displaySetUIDs) {\n        return;\n      }\n\n      const isReconstructable =\n        displaySetUIDs?.some(displaySetUID => {\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetUID);\n          return displaySet?.isReconstructable;\n        }) || false;\n\n      if (isReconstructable) {\n        setAddSegmentationClassName('');\n      } else {\n        setAddSegmentationClassName('ohif-disabled');\n      }\n    };\n\n    // Handle initial state\n    handleActiveViewportChange();\n\n    const changedGrid = viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED;\n    const ready = viewportGridService.EVENTS.VIEWPORTS_READY;\n\n    const subsGrid = [];\n    [ready, changedGrid].forEach(evt => {\n      const { unsubscribe } = viewportGridService.subscribe(evt, ({ viewportId }) => {\n        handleActiveViewportChange(viewportId);\n      });\n\n      subsGrid.push(unsubscribe);\n    });\n\n    const changedData = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\n\n    const subsData = [];\n    [changedData].forEach(evt => {\n      const { unsubscribe } = cornerstoneViewportService.subscribe(evt, () => {\n        handleActiveViewportChange();\n      });\n\n      subsData.push(unsubscribe);\n    });\n\n    // Clean up\n    return () => {\n      subsGrid.forEach(unsub => unsub());\n      subsData.forEach(unsub => unsub());\n    };\n  }, []);\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    return toolGroupIds;\n  };\n\n  const onSegmentationAdd = async () => {\n    commandsManager.runCommand('createEmptySegmentationForViewport', {\n      viewportId: viewportGridService.getActiveViewportId(),\n    });\n  };\n\n  const onSegmentationClick = (segmentationId: string) => {\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId, viewports.get(activeViewportId).viewportOptions.toolGroupId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    segmentationService.remove(segmentationId);\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      // const toolGroupId =\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n    });\n  };\n\n  const onSegmentAdd = (segmentationId) => {\n    const currentSegmentation = segmentationService.getSegmentation(segmentationId)\n    segmentationService.addSegment(segmentationId, {\n      segmentIndex: currentSegmentation.segments.length,\n      toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\n      properties: {\n        label: `Segmentation ${currentSegmentation.segmentCount + 1}`,\n        color: [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)],\n        opacity: 255,\n        visibility: true,\n        isLocked: false,\n        active: true\n      }\n    });\n  }\n\n  const onSegmentationEdit = segmentationId => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { color, opacity } = segment;\n\n    const rgbaColor = {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: opacity / 255.0,\n    };\n\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\n      if (actionId === 'cancel') {\n        return;\n      }\n\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\n        newRgbaColor.r,\n        newRgbaColor.g,\n        newRgbaColor.b,\n        newRgbaColor.a * 255.0,\n      ]);\n    });\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    segmentationService.removeSegment(segmentationId, segmentIndex);\n  };\n\n  // segment hide\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const isVisible = segmentation.isVisible;\n    const segments = segmentation.segments;\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      segments.forEach((segment, segmentIndex) => {\n        segmentationService.setSegmentVisibility(\n          segmentationId,\n          segmentIndex,\n          isVisible,\n          toolGroupId\n        );\n      });\n    });\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  const createSegmentationForSelectedViewport = () => {\n    viewports.forEach(vp => {\n      //Select chosen active viewport to create a segmentation on\n      if(vp.viewportId === activeViewportId){\n        if(vp.viewportOptions.viewportType === 'volume3d'){\n          uiNotificationService.show({\n            title: 'Create Segmentation',\n            message: 'Can\\'t create segmentation in viewport 3D, select a 2D viewport',\n            type: 'error',\n          });\n          return\n        }\n\n        console.log('SEG VP', vp)\n        //csTools.segmentation.state.removeColorLUT(0);\n        segmentationService.createSegmentationForDisplaySet(\n            vp.displaySetInstanceUIDs[0],\n            { label: `Segmentation ${segmentations.length + 1}` }\n        ).then(segId => {\n          const segmentation = segmentationService.getSegmentation(segId)\n          console.log('CREATED SEGMENTATION', segmentation)\n          segmentationService.addSegmentationRepresentationToToolGroup(\n              vp.viewportOptions.toolGroupId,\n              segId,\n              true,\n              LABELMAP\n          ).then(() => {\n            segmentationService.setActiveSegmentationForToolGroup(\n                segId,\n                vp.viewportOptions.toolGroupId\n            );\n            segmentationService.addSegment(segId, {\n              segmentIndex: 1,\n              toolGroupId: vp.viewportOptions.toolGroupId,\n              properties: {\n                label: `Segmentation 1`,\n                color: [255, 0, 0],\n                opacity: 255,\n                visibility: true,\n                isLocked: false,\n                active: true\n              }\n            });\n            //Add segmentation tools to toolbar\n            console.log('MTOOLS', toolbarService.getButtonSection('MeasurementTools', {}))\n            toolbarService.createButtonSection('primary', [\n                'MeasurementTools',\n                'Zoom',\n                'WindowLevel',\n                'Pan',\n                'Capture',\n                'Crosshairs',\n                'Panoramic',\n                'MoreTools',\n                'SegmentationTools'\n            ])\n          });\n\n        })\n      }\n    })\n  }\n\n  // useEffect(() => {\n  //   console.log('SEGMENTATIONS', segmentations)\n  // },)\n\n  const onSegmentationDownload = segmentationId => {\n    commandsManager.runCommand('downloadSegmentation', {\n      segmentationId,\n    });\n  };\n\n  const storeSegmentation = async segmentationId => {\n    const datasources = extensionManager.getActiveDataSource();\n\n    const displaySetInstanceUIDs = await createReportAsync({\n      servicesManager,\n      getReport: () =>\n        commandsManager.runCommand('storeSegmentation', {\n          segmentationId,\n          dataSource: datasources[0],\n        }),\n      reportType: 'Segmentation',\n    });\n\n    // Show the exported report in the active viewport as read only (similar to SR)\n    if (displaySetInstanceUIDs) {\n      // clear the segmentation that we exported, similar to the storeMeasurement\n      // where we remove the measurements and prompt again the user if they would like\n      // to re-read the measurements in a SR read only viewport\n      segmentationService.remove(segmentationId);\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: viewportGridService.getActiveViewportId(),\n        displaySetInstanceUIDs,\n      });\n    }\n  };\n\n  const onSegmentationDownloadRTSS = segmentationId => {\n    commandsManager.runCommand('downloadRTSS', {\n      segmentationId,\n    });\n  };\n\n  const SegmentationGroupTableComponent =\n    components[configuration?.segmentationPanelMode] || SegmentationGroupTable;\n  const allowAddSegment = configuration?.addSegment;\n  const onSegmentationAddWrapper =\n    configuration?.onSegmentationAdd && typeof configuration?.onSegmentationAdd === 'function'\n      ? configuration?.onSegmentationAdd\n      : onSegmentationAdd;\n\n\n  const isSegmentationForDisplaySet = () => {\n    const displaySetUID = viewports.get(activeViewportId)?.displaySetInstanceUIDs[0]\n    const matchingSegs = segmentations.filter(seg => seg.displaySetInstanceUID === displaySetUID)\n    return matchingSegs.length > 0;\n  }\n\n  const volume3dCheck = () => {\n    if (viewports.get(activeViewportId).viewportOptions.viewportType === 'volume3d') {\n      uiNotificationService.show({\n        title: 'Segmentation Panel',\n        message: 'Can\\'t use segmentation panel in viewport 3D, select a 2D viewport',\n        type: 'info',\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  return (\n    <>\n      { !volume3dCheck() && (\n        <div className=\"flex flex-col flex-auto min-h-0F mt-1\">\n          {/* Segmentation tool edition */}\n          <BaseToolEdit\n              segmentationService={segmentationService}\n              cornerstoneViewportService={cornerstoneViewportService}\n              toolGroupService={toolGroupService}\n              toolbarService={toolbarService}\n              commandsManager={commandsManager}\n          />\n          {isSegmentationForDisplaySet() && (\n              <SegmentsConfigurationImportExport\n                  segmentationService={segmentationService}\n                  segmentations={segmentations}\n              />\n          )}\n          {/* show segmentation table */}\n          <SegmentationGroupTableComponent\n            title={t('Segmentations')}\n            segmentations={segmentations}\n            disableEditing={configuration.disableEditing}\n            activeSegmentationId={selectedSegmentationId || ''}\n            onSegmentationAdd={onSegmentationAddWrapper}\n            addSegmentationClassName={addSegmentationClassName}\n            showAddSegment={allowAddSegment}\n            onSegmentationClick={onSegmentationClick}\n            onSegmentationDelete={onSegmentationDelete}\n            onSegmentationDownload={onSegmentationDownload}\n            onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\n            storeSegmentation={storeSegmentation}\n            onSegmentationEdit={onSegmentationEdit}\n            onSegmentClick={onSegmentClick}\n            onSegmentEdit={onSegmentEdit}\n            onSegmentAdd={onSegmentAdd}\n            onSegmentColorClick={onSegmentColorClick}\n            onSegmentDelete={onSegmentDelete}\n            onToggleSegmentVisibility={onToggleSegmentVisibility}\n            onToggleSegmentLock={onToggleSegmentLock}\n            onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n            showDeleteSegment={true}\n            segmentationConfig={{ initialConfig: segmentationConfiguration }}\n            setRenderOutline={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\n            }\n            setOutlineOpacityActive={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\n            }\n            setRenderFill={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\n            }\n            setRenderInactiveSegmentations={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'renderInactiveSegmentations', value)\n            }\n            setOutlineWidthActive={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\n            }\n            setFillAlpha={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\n            }\n            setFillAlphaInactive={value =>\n              _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\n            }\n          />\n          {isSegmentationForDisplaySet() && (\n            <SegmentationImportExport\n              segmentationService={segmentationService}\n              segmentations={segmentations}\n              cornerstoneViewportService={cornerstoneViewportService}\n            />\n          )}\n          {\n            <Button\n              className={'pt-1/10 pb-1/10'}\n              onClick={createSegmentationForSelectedViewport}\n              style={{marginTop:'10%'}}\n            >{\"Create Segmentation For Selected Viewport\"}\n            </Button>\n          }\n        </div>\n      )}\n    </>\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\n\nimport { useAppConfig } from '@state';\nimport { Toolbox } from '@ohif/ui';\nimport PanelSegmentation from './panels/PanelSegmentation';\n\nconst getPanelModule = ({\n  commandsManager,\n  servicesManager,\n  extensionManager,\n  configuration,\n  title,\n}: withAppTypes) => {\n  const { customizationService } = servicesManager.services;\n\n  const wrappedPanelSegmentation = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n          disableEditing: appConfig.disableEditing,\n          ...customizationService.get('segmentation.panel'),\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"segmentationToolbox\"\n          title=\"Segmentation Tools\"\n          configuration={{\n            ...configuration,\n          }}\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n            disableEditing: appConfig.disableEditing,\n            ...customizationService.get('segmentation.panel'),\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { Enums, cache } from '@cornerstonejs/core';\n\n/**\n * Updates the viewports in preparation for rendering segmentations.\n * Evaluates each viewport to determine which need modifications,\n * then for those viewports, changes them to a volume type and ensures\n * they are ready for segmentation rendering.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - ID of the viewport to be updated.\n * @param params.loadFn - Function to load the segmentation data.\n * @param params.servicesManager - The services manager.\n * @param params.displaySet -  the display set.\n * @param params.initialSliceIndex - The initial slice index.\n *\n * @returns Returns true upon successful update of viewports for segmentation rendering.\n */\nasync function updateViewportsForSegmentationRendering({\n  viewportId,\n  loadFn,\n  servicesManager,\n  displaySet,\n  initialSliceIndex = null,\n}: {\n  viewportId: string;\n  loadFn: () => Promise<string>;\n  servicesManager: AppTypes.ServicesManager;\n  displaySet?: any;\n  initialSliceIndex?: number;\n}) {\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const referencedDisplaySetInstanceUID =\n    displaySet?.referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\n\n  const updatedViewports = getUpdatedViewportsForSegmentation({\n    viewportId,\n    servicesManager,\n    displaySet,\n  });\n\n  // create Segmentation callback which needs to be waited until\n  // the volume is created (if coming from stack)\n  const createSegmentationForVolume = async () => {\n    const segmentationId = await loadFn();\n    segmentationService.hydrateSegmentation(segmentationId);\n  };\n\n  // the reference volume that is used to draw the segmentation. so check if the\n  // volume exists in the cache (the target Viewport is already a volume viewport)\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\n    volumeId.includes(referencedDisplaySetInstanceUID)\n  );\n\n  updatedViewports.forEach(async viewport => {\n    viewport.viewportOptions = {\n      ...viewport.viewportOptions,\n      viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\n      needsRerendering: true,\n    };\n    const viewportId = viewport.viewportId;\n\n    // maintain the prehydration slice on the target viewport only\n    if (viewportId === targetViewportId) {\n      viewport.viewportOptions.initialImageOptions = {\n        index: initialSliceIndex,\n        useOnce: true,\n      };\n    }\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const prevCamera = csViewport.getCamera();\n\n    // only run the createSegmentationForVolume for the targetViewportId\n    // since the rest will get handled by cornerstoneViewportService\n    if ((volumeExists || displaySet.Modality === 'RTSTRUCT') && viewportId === targetViewportId) {\n      await createSegmentationForVolume();\n      return;\n    }\n\n    const createNewSegmentationWhenVolumeMounts = async evt => {\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\n        ac.uid.includes(referencedDisplaySetInstanceUID)\n      );\n\n      // Note: make sure to re-grab the viewport since it might have changed\n      // during the time it took for the volume to be mounted, for instance\n      // the stack viewport has been changed to a volume viewport\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      volumeViewport.setCamera(prevCamera);\n\n      volumeViewport.element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        createNewSegmentationWhenVolumeMounts\n      );\n\n      if (!isTheActiveViewportVolumeMounted) {\n        // it means it is one of those other updated viewports so just update the camera\n        return;\n      }\n\n      if (viewportId === targetViewportId) {\n        await createSegmentationForVolume();\n      }\n    };\n\n    csViewport.element.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      createNewSegmentationWhenVolumeMounts\n    );\n  });\n\n  // Set the displaySets for the viewports that require to be updated\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\n/**\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n * This function evaluates viewports based on their compatibility with the provided segmentation's\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - the ID of the viewport to be updated.\n * @param params.servicesManager - The services manager\n * @param params.displaySet -  the display set.\n *\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n */\nfunction getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  displaySet,\n}: withAppTypes) {\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const { viewports, isHangingProtocolLayout } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\n\n  const referenceDisplaySetInstanceUID =\n    displaySet?.referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    referenceDisplaySetInstanceUID,\n    isHangingProtocolLayout\n  );\n\n  viewports.forEach((viewport, viewportId) => {\n    if (\n      targetViewportId === viewportId ||\n      updatedViewports.find(v => v.viewportId === viewportId)\n    ) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segmentationFrameOfReferenceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\n          needsRerendering: true,\n        },\n      });\n    }\n  });\n\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\n}\n\nexport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n};\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n  utilities,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nimport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n} from './utils/hydrationUtils';\nconst { segmentation: segmentationUtils } = utilities;\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    uiNotificationService,\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n    toolGroupService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  const actions = {\n    /**\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the ID of the viewport to be updated.\n     * @param params.servicesManager - The services manager\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n     *\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n     */\n    getUpdatedViewportsForSegmentation,\n    /**\n     * Creates an empty segmentation for a specified viewport.\n     * It first checks if the display set associated with the viewport is reconstructable.\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\n     * for the display set after handling the necessary steps for making the viewport\n     * a volume viewport first\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (!displaySet.isReconstructable) {\n        uiNotificationService.show({\n          title: 'Segmentation',\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\n          type: 'error',\n        });\n        return;\n      }\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        displaySet,\n        loadFn: async () => {\n          const currentSegmentations = segmentationService.getSegmentations();\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n            displaySetInstanceUID,\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\n          );\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          // Add only one segment for now\n          segmentationService.addSegment(segmentationId, {\n            toolGroupId,\n            segmentIndex: 1,\n            properties: {\n              label: 'Segment 1',\n            },\n          });\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          // Todo: handle adding more than one segmentation\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n          const segmentation = segmentations[0];\n          const segmentationId = segmentation.id;\n          const label = segmentation.label;\n          const segments = segmentation.segments;\n\n          delete segmentation.segments;\n\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\n            segmentationId,\n            label,\n          });\n\n          if (segmentation.scalarData) {\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n            labelmapVolume.scalarData.set(segmentation.scalarData);\n          }\n\n          segmentationService.addOrUpdateSegmentation(segmentation);\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          segments.forEach(segment => {\n            if (segment === null) {\n              return;\n            }\n            segmentationService.addSegment(segmentationId, {\n              segmentIndex: segment.segmentIndex,\n              toolGroupId,\n              properties: {\n                color: segment.color,\n                label: segment.label,\n                opacity: segment.opacity,\n                isLocked: segment.isLocked,\n                visibility: segment.isVisible,\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\n              },\n            });\n          });\n\n          if (segmentation.centroidsIJK) {\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\n          }\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentation display sets for a specified viewport.\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\n     * it chooses the appropriate service function to create\n     * the segmentation for the display set.\n     * The function then prepares the viewport for rendering segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\n     *\n     */\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\n      // Todo: handle adding more than one segmentation\n      const displaySet = displaySets[0];\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n        displaySet.referencedDisplaySetInstanceUID\n      );\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      const initialSliceIndex = viewport.getSliceIndex();\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        displaySet,\n        loadFn: async () => {\n          const segDisplaySet = displaySet;\n          const suppressEvents = false;\n          const serviceFunction =\n            segDisplaySet.Modality === 'SEG'\n              ? 'createSegmentationForSEGDisplaySet'\n              : 'createSegmentationForRTDisplaySet';\n\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\n          const segmentation = segmentationService.getSegmentation(segmentationId);\n          segmentation.description = `S${referencedDisplaySet.SeriesNumber}: ${referencedDisplaySet.SeriesDescription}`;\n          return segmentationId;\n        },\n        initialSliceIndex,\n      });\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\n\n      const segmentationVolume = cache.getVolume(segmentationId);\n      const referencedVolume = cache.getVolume(referencedVolumeId);\n      const referencedImages = referencedVolume.getCornerstoneImages();\n\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\n\n      // Generate fake metadata as an example\n      labelmapObj.metadata = [];\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      segmentationInOHIF.segments.forEach(segment => {\n        // segmentation service already has a color for each segment\n        if (!segment) {\n          return;\n        }\n        const segmentIndex = segment.segmentIndex;\n        const { label, color } = segment;\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmapObj,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\n        extensionManager,\n      });\n\n      if (promptResult.action !== 1 && promptResult.value) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n\n      const { label } = segmentation;\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      DicomMetadataStore.addInstances([naturalizedReport], true);\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n    setBrushSize: ({ value, toolNames }) => {\n      const brushSize = Number(value);\n\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        if (toolNames?.length === 0) {\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\n        } else {\n          toolNames?.forEach(toolName => {\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n          });\n        }\n      });\n    },\n    setThresholdRange: ({\n      value,\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n    }) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        toolNames?.forEach(toolName => {\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD: {\n                threshold: value,\n              },\n            },\n          });\n        });\n      });\n    },\n  };\n\n  const definitions = {\n    getUpdatedViewportsForSegmentation: {\n      commandFn: actions.getUpdatedViewportsForSegmentation,\n    },\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n    createEmptySegmentationForViewport: {\n      commandFn: actions.createEmptySegmentationForViewport,\n    },\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n    setBrushSize: {\n      commandFn: actions.setBrushSize,\n    },\n    setThresholdRange: {\n      commandFn: actions.setThresholdRange,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'SEGMENTATION',\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './commandsModule';\nimport { getToolbarModule } from './getToolbarModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  getCommandsModule,\n  getToolbarModule,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\n  return [\n    {\n      name: 'evaluate.cornerstone.segmentation',\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\n        // Todo: we need to pass in the button section Id since we are kind of\n        // forcing the button to have black background since initially\n        // it is designed for the toolbox not the toolbar on top\n        // we should then branch the buttonSectionId to have different styles\n        const segmentations = segmentationService.getSegmentations();\n        if (!segmentations?.length) {\n          return {\n            disabled: true,\n            className: '!text-common-bright !bg-black opacity-50',\n            disabledText: disabledText ?? 'No segmentations available',\n          };\n        }\n\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n        if (!toolGroup) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const toolName = toolbarService.getToolNameForButton(button);\n\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const isPrimaryActive = toolNames\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\n\n        return {\n          disabled: false,\n          className: isPrimaryActive\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\n          // Todo: isActive right now is used for nested buttons where the primary\n          // button needs to be fully rounded (vs partial rounded) when active\n          // otherwise it does not have any other use\n          isActive: isPrimaryActive,\n        };\n      },\n    },\n  ];\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","SegmentationPanelMode","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","DualInputRange","value1","value2","minValue","maxValue","step","unit","containerClassName","inputClassName","labelVariant","showLabel","labelPosition","trackColor","rangeValue1","setRangeValue1","useState","rangeValue2","setRangeValue2","useEffect","handleChange1","e","Number","handleChange2","rangeValueForStr1","toFixed","rangeValueForStr2","style","flexDirection","Typography","variant","component","classNames","min","max","background","Button","size","onClick","csToolsEnums","csTools","MouseBindings","listItemRenderer","DefaultListItemRenderer","activeMode","eraseReplaceFocus","isActive","Brush_Mode","REPLACE","Brush_Tool","EVENT_LISTENERS","BrushToolEdit","cornerstoneViewportService","t","useTranslation","isMinimized","setIsMinimized","isEraseReplaceOnlyMinimized","setIsEraseReplaceOnlyMinimized","setEraseReplaceFocus","pipetteMode","setPipetteMode","active","minimum","activeViewportId","viewportGridService","useViewportGrid","setActiveMode","FILL","activeTool","setActiveTool","CIRCLE","brushSize","setBrushSize","circleThresholdValue","setCircleThresholdValue","circleTargetSegmentIndex","setCircleTargetSegmentIndex","setSegments","toolGroup","getCornerstoneViewport","renderingEngineId","brushInstance","getToolInstance","configuration","strategySpecificConfiguration","THRESHOLD","threshold","targetSegmentIndex","segmentation","getSegmentations","filter","s","segmentIndex","args","setConfiguration","eraseFocusIndex","setToolActive","bindings","mouseButton","Primary","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","subscribe","unsub","getBrushStrategy","tool","mode","activeStrategy","viewport","currentElement","element","addEvent","removeEventListener","removeEvent","setToolPassive","MOUSE_DRAG","setThresholdCallback","worldPoints","currentPoints","world","imageData","getImageData","index","worldToIndex","scalarData","dimensions","csUtils","yMultiple","zMultiple","Icon","display","justifyContent","fullWidth","SPHERE","ERASE","InputRange","stopPropagation","ListMenu","items","renderer","vmin","vmax","eraseFocus","Circle_Strategies","CircleScissorsToolEdit","setActiveStrategy","FILL_INSIDE","isEraseOnlyMinimized","setIsEraseOnlyMinimized","setEraseFocus","cscissorsInstance","circleInstance","ERASE_INSIDE","PaintFillToolEdit","RectangleROIStartEndThresholdToolEdit","commandsManager","thresholdValue","setThresholdValue","slicesToPropagate","setSlicesToPropagate","rectangleROIInstance","numSlicesToPropagate","log","computeThreshold","imageVolumes","getActors","va","actorUID","referenceId","uid","iv","selectedAnnotationUIDs","annotationUID","ctVolume","segmentationVolume","segmentations","volume","lower","upper","numSlicesToProject","overwrite","overlapType","activeSegmentIndex","deleteRegion","render","RectangleROIThresholdToolEdit","Rectangle_Strategies","RectangleScissorsToolEdit","rscissorsInstance","rectangleInstance","Sphere_Strategies","SphereScissorsToolEdit","sscissorsInstance","sphereInstance","CACHE_SEGMENTATION_VOLUMES","Array","constructor","maxLength","super","this","push","elements","r","excess","splice","UndoToolEdit","currentCacheIndex","setCurrentCacheIndex","MOUSE_DOWN","old_segmentation","old_seg_volume","Uint8ClampedArray","getLabelmapVolume","getScalarData","shift","apply_replace","cacheIndex","previous_volume","replace_event","CustomEvent","oldScalarData","window","dispatchEvent","undo","redo","state","SEG_TOOL_NAMES","BaseToolEdit","toolbarService","toolGroupService","activeSegTool","setActiveSegTool","searchActiveSegTool","toolStates","toolGroups","tg","toolOptions","toolStatesArray","includes","unsubscribe","TOOL_BAR_MODIFIED","renderActiveTool","SegmentsConfigurationImportExport","importConfiguration","input","document","createElement","accept","onchange","_","json_file","from","files","reader","FileReader","onload","result","removeSegment","JSON","parse","segment","addSegment","get","override","readAsText","click","exportConfiguration","json","stringify","json_blob","Blob","saveAs","propTypes","PropTypes","isRequired","SegmentationImportExport","isProcessingLayer","setIsProcessingLayer","processingLayerPercent","setProcessingLayerPercent","setTimeout","exportSegmentation","labelmapVolume","direction","segments_info","existing_segment_indexes","Uint32Array","all_layers_blobs","layer_i","current_processed_layer","segmented_layer","fill","el","scalar_layer","slice","allSettled","segment_index","v","mapIndexSerial","indexes_array","promise","segment_array","corresponding_segment_index","color_to_fill","index_to_color","canvas","ctx","getContext","height","imgData","ImageData","colorSpace","putImageData","toBlob","blob","completed_layers","waitForArray","zip","JSZip","file","dataBlob","generateAsync","importSegmentationFromBinary","values","find","vp","assert","setActiveViewportId","viewportId","actorEntries","segmentationId","volumeId","segmentationScalarData","newScalarData","Uint8Array","cstSegmentation","readAsArrayBuffer","ProgressBar","bgColor","completed","transitionDuration","transitionTimingFunction","LABELMAP","Labelmap","components","Expanded","SegmentationGroupTableExpanded","Dropdown","SegmentationGroupTable","PanelSegmentation","hangingProtocolService","selectedSegmentationId","setSelectedSegmentationId","addSegmentationClassName","setAddSegmentationClassName","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","setSegmentations","useCallback","prevState","lastSegmentationId","handleActiveViewportChange","displaySetUIDs","getDisplaySetsUIDsForViewport","getActiveViewportId","some","displaySetUID","getDisplaySetByUID","changedGrid","ACTIVE_VIEWPORT_ID_CHANGED","ready","VIEWPORTS_READY","subsGrid","changedData","VIEWPORT_DATA_CHANGED","subsData","getToolGroupIds","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","SegmentationGroupTableComponent","segmentationPanelMode","allowAddSegment","onSegmentationAddWrapper","onSegmentationAdd","runCommand","isSegmentationForDisplaySet","displaySetInstanceUIDs","seg","disableEditing","activeSegmentationId","showAddSegment","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","onSegmentationEdit","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","setActiveSegment","jumpToSegmentCenter","onSegmentEdit","setSegmentLabel","onSegmentAdd","currentSegmentation","segmentCount","floor","random","opacity","visibility","isLocked","onSegmentColorClick","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","onSegmentDelete","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onToggleSegmentationVisibility","toggleSegmentationVisibility","showDeleteSegment","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","createSegmentationForSelectedViewport","createSegmentationForDisplaySet","segId","addSegmentationRepresentationToToolGroup","getButtonSection","createButtonSection","marginTop","getPanelModule","customizationService","iconName","iconLabel","appConfig","useAppConfig","Toolbox","buttonSectionId","updateViewportsForSegmentationRendering","loadFn","initialSliceIndex","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","_volumeCache","needsRerendering","initialImageOptions","useOnce","csViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","ac","volumeViewport","setCamera","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","getState","isHangingProtocolLayout","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","shouldRenderSegmentation","segmentationUtils","utilities","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","createEmptySegmentationForViewport","currentSegmentations","loadSegmentationsForViewport","set","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","getSliceIndex","serviceFunction","boundFn","bind","description","options","cornerstoneToolsSegmentation","representationData","getCornerstoneImages","labelmapObj","metadata","rgb2DICOMLAB","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","segmentationInOHIF","generatedSegmentation","dataset","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","location","warn","toolNames","setBrushSizeForToolGroup","toolName","setThresholdRange","getToolGroup","setToolConfiguration","definitions","commandFn","defaultContext","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","evaluate","button","disabledText","disabled","getToolGroupForViewport","getToolNameForButton","hasTool","isPrimaryActive","getActivePrimaryMouseButtonTool","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}