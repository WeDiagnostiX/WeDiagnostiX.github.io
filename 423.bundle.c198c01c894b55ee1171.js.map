{"version":3,"file":"423.bundle.c198c01c894b55ee1171.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../ui/src/components/DualInputRange/DualInputRange.tsx","webpack:///../../ui/src/components/DualInputRange/index.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/brushToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/cscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/paintFillToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIStartEndToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/sscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/undoToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/baseToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segConfigurationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segmentationExport/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-seg';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\r\n\r\nimport { utils } from '@ohif/core';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport dcmjs from 'dcmjs';\r\n\r\nconst { DicomMessage, DicomMetaDictionary } = dcmjs.data;\r\n\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\r\n\r\nlet loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'SEG',\r\n    loading: false,\r\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    segments: {},\r\n    sopClassUids,\r\n    instance,\r\n    instances: [instance],\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n  };\r\n\r\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n\r\n  if (!referencedSeriesSequence) {\r\n    throw new Error('ReferencedSeriesSequence is missing for the SEG');\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0];\r\n\r\n  displaySet.referencedImages =\r\n    instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n\r\n  displaySet.getReferenceDisplaySet = () => {\r\n    const { displaySetService } = servicesManager.services;\r\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n      displaySet.referencedSeriesInstanceUID\r\n    );\r\n\r\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\r\n      throw new Error('Referenced DisplaySet is missing for the SEG');\r\n    }\r\n\r\n    const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n    displaySet.referencedDisplaySetInstanceUID =\r\n      referencedDisplaySet.displaySetInstanceUID;\r\n\r\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\r\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\r\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\r\n    displaySet.referencedVolumeId = referencedVolumeId;\r\n\r\n    return referencedDisplaySet;\r\n  };\r\n\r\n  displaySet.load = async ({ headers }) =>\r\n    await _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(segDisplaySet, servicesManager, extensionManager, headers) {\r\n  const { SOPInstanceUID } = segDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n\r\n  if (\r\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    _segmentationExists(segDisplaySet, segmentationService)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  segDisplaySet.loading = true;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\r\n    if (\r\n      !segDisplaySet.segments ||\r\n      Object.keys(segDisplaySet.segments).length === 0\r\n    ) {\r\n      const segments = await _loadSegments(\r\n        extensionManager,\r\n        segDisplaySet,\r\n        headers\r\n      );\r\n\r\n      segDisplaySet.segments = segments;\r\n    }\r\n\r\n    const suppressEvents = true;\r\n    segmentationService\r\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\r\n      .then(() => {\r\n        segDisplaySet.loading = false;\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        segDisplaySet.loading = false;\r\n        reject(error);\r\n      });\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nasync function _loadSegments(extensionManager, segDisplaySet, headers) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n  const segArrayBuffer = await dicomLoaderService.findDicomDataPromise(\r\n    segDisplaySet,\r\n    null,\r\n    headers\r\n  );\r\n\r\n  const dicomData = DicomMessage.readFile(segArrayBuffer);\r\n  const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\r\n  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\r\n\r\n  if (!Array.isArray(dataset.SegmentSequence)) {\r\n    dataset.SegmentSequence = [dataset.SegmentSequence];\r\n  }\r\n\r\n  const segments = _getSegments(dataset);\r\n  return segments;\r\n}\r\n\r\nfunction _segmentationExists(segDisplaySet, segmentationService) {\r\n  // This should be abstracted with the CornerstoneCacheService\r\n  return segmentationService.getSegmentation(\r\n    segDisplaySet.displaySetInstanceUID\r\n  );\r\n}\r\n\r\nfunction _getPixelData(dataset, segments) {\r\n  let frameSize = Math.ceil((dataset.Rows * dataset.Columns) / 8);\r\n  let nextOffset = 0;\r\n\r\n  Object.keys(segments).forEach(segmentKey => {\r\n    const segment = segments[segmentKey];\r\n    segment.numberOfFrames = segment.functionalGroups.length;\r\n    segment.size = segment.numberOfFrames * frameSize;\r\n    segment.offset = nextOffset;\r\n    nextOffset = segment.offset + segment.size;\r\n    const packedSegment = dataset.PixelData[0].slice(\r\n      segment.offset,\r\n      nextOffset\r\n    );\r\n\r\n    segment.pixelData = dcmjs.data.BitArray.unpack(packedSegment);\r\n    segment.geometry = geometryFromFunctionalGroups(\r\n      dataset,\r\n      segment.functionalGroups\r\n    );\r\n  });\r\n\r\n  return segments;\r\n}\r\n\r\nfunction geometryFromFunctionalGroups(dataset, perFrame) {\r\n  let pixelMeasures =\r\n    dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence;\r\n  let planeOrientation =\r\n    dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence;\r\n  let planePosition = perFrame[0].PlanePositionSequence; // TODO: assume sorted frames!\r\n\r\n  const geometry = {};\r\n\r\n  // NB: DICOM PixelSpacing is defined as Row then Column,\r\n  // unlike ImageOrientationPatient\r\n  let spacingBetweenSlices = pixelMeasures.SpacingBetweenSlices;\r\n  if (!spacingBetweenSlices) {\r\n    if (pixelMeasures.SliceThickness) {\r\n      console.log('Using SliceThickness as SpacingBetweenSlices');\r\n      spacingBetweenSlices = pixelMeasures.SliceThickness;\r\n    }\r\n  }\r\n  geometry.spacing = [\r\n    pixelMeasures.PixelSpacing[1],\r\n    pixelMeasures.PixelSpacing[0],\r\n    spacingBetweenSlices,\r\n  ].map(Number);\r\n\r\n  geometry.dimensions = [dataset.Columns, dataset.Rows, perFrame.length].map(\r\n    Number\r\n  );\r\n\r\n  let orientation = planeOrientation.ImageOrientationPatient.map(Number);\r\n  const columnStepToPatient = orientation.slice(0, 3);\r\n  const rowStepToPatient = orientation.slice(3, 6);\r\n  geometry.planeNormal = [];\r\n  vtkMath.cross(columnStepToPatient, rowStepToPatient, geometry.planeNormal);\r\n\r\n  let firstPosition = perFrame[0].PlanePositionSequence.ImagePositionPatient.map(\r\n    Number\r\n  );\r\n  let lastPosition = perFrame[\r\n    perFrame.length - 1\r\n  ].PlanePositionSequence.ImagePositionPatient.map(Number);\r\n  geometry.sliceStep = [];\r\n  vtkMath.subtract(lastPosition, firstPosition, geometry.sliceStep);\r\n  vtkMath.normalize(geometry.sliceStep);\r\n  geometry.direction = columnStepToPatient\r\n    .concat(rowStepToPatient)\r\n    .concat(geometry.sliceStep);\r\n  geometry.origin = planePosition.ImagePositionPatient.map(Number);\r\n\r\n  return geometry;\r\n}\r\n\r\nfunction _getSegments(dataset) {\r\n  const segments = {};\r\n\r\n  dataset.SegmentSequence.forEach(segment => {\r\n    const cielab = segment.RecommendedDisplayCIELabValue;\r\n    const rgba = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x =>\r\n      Math.round(x * 255)\r\n    );\r\n\r\n    rgba.push(255);\r\n    const segmentNumber = segment.SegmentNumber;\r\n\r\n    segments[segmentNumber] = {\r\n      color: rgba,\r\n      functionalGroups: [],\r\n      offset: null,\r\n      size: null,\r\n      pixelData: null,\r\n      label: segment.SegmentLabel,\r\n    };\r\n  });\r\n\r\n  // make a list of functional groups per segment\r\n  dataset.PerFrameFunctionalGroupsSequence.forEach(functionalGroup => {\r\n    const segmentNumber =\r\n      functionalGroup.SegmentIdentificationSequence.ReferencedSegmentNumber;\r\n    segments[segmentNumber].functionalGroups.push(functionalGroup);\r\n  });\r\n\r\n  return _getPixelData(dataset, segments);\r\n}\r\n\r\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(\r\n      instances,\r\n      servicesManager,\r\n      extensionManager\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-seg',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import React from 'react';\r\nimport { Input, Dialog } from '@ohif/ui';\r\n\r\nfunction callInputDialog(uiDialogService, label, callback) {\r\n  const dialogId = 'enter-segment-label';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.label, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Segment',\r\n        value: { label },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\r\n          { id: 'save', text: 'Confirm', type: 'secondary' },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          return (\r\n            <Input\r\n              label=\"Enter the segment label\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              className=\"bg-black border-primary-main\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={event => {\r\n                event.persist();\r\n                setValue(value => ({ ...value, label: event.target.value }));\r\n              }}\r\n              onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  onSubmitHandler({ value, action: { id: 'save' } });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default callInputDialog;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport Typography from '../Typography';\r\nimport './DualInputRange.css';\r\nimport {Button} from \"@ohif/ui\";\r\n\r\n\r\n/**\r\n * React Range Input component\r\n * it has two props, value and onChange\r\n * value is a number value\r\n * onChange is a function that will be called when the range input is changed\r\n *\r\n *\r\n */\r\n\r\nconst DualInputRange: React.FC<{\r\n    value1: number;\r\n    value2: number;\r\n    onChange: (value1, value2) => void;\r\n    minValue: number;\r\n    maxValue: number;\r\n    step: number;\r\n    unit?: string;\r\n    containerClassName?: string;\r\n    inputClassName?: string;\r\n    labelClassName?: string;\r\n    labelVariant?: string;\r\n    showLabel?: boolean;\r\n    labelPosition?: string;\r\n    trackColor?: string;\r\n}> = ({\r\n                                value1,\r\n                                value2,\r\n                                onChange,\r\n                                minValue,\r\n                                maxValue,\r\n                                step = 1,\r\n                                unit = '',\r\n                                containerClassName,\r\n                                inputClassName,\r\n                                labelClassName,\r\n                                labelVariant,\r\n                                showLabel = true,\r\n                                labelPosition = '',\r\n                                trackColor,\r\n                            }) => {\r\n    const [rangeValue1, setRangeValue1] = useState(value1);\r\n    const [rangeValue2, setRangeValue2] = useState(value2);\r\n\r\n    useEffect(() => {\r\n        //Change value 1\r\n        if(value1 < minValue) return\r\n        setRangeValue1(value1);\r\n        // if (value1 >= rangeValue2) {\r\n        //     setRangeValue2(value1);\r\n        // }\r\n\r\n        //Change value 2\r\n        if(value2 > maxValue) return\r\n        setRangeValue2(value2);\r\n        // if (value2 <= rangeValue1) {\r\n        //     setRangeValue1(value2);\r\n        // }\r\n    }, [value1, value2])\r\n\r\n    const handleChange1 = (e) => {\r\n        const value = Number(e.target.value);\r\n        if(value < minValue) return\r\n        setRangeValue1(value);\r\n        // if (value >= rangeValue2) {\r\n        //     setRangeValue2(value);\r\n        // }\r\n        onChange(value, rangeValue2)\r\n    };\r\n\r\n    const handleChange2 = (e) => {\r\n        const value = Number(e.target.value);\r\n        if(value > maxValue) return\r\n        setRangeValue2(value);\r\n        // if (value <= rangeValue1) {\r\n        //     setRangeValue1(value);\r\n        // }\r\n        onChange(rangeValue1, value)\r\n    }\r\n\r\n    const rangeValuePercentage1 = ((rangeValue1 - minValue) / (maxValue - minValue)) * 100;\r\n    const rangeValuePercentage2 = ((rangeValue2 - minValue) / (maxValue - minValue)) * 100;\r\n\r\n    const rangeValueForStr1 = step >= 1 ? rangeValue1.toFixed(0) : rangeValue1.toFixed(1);\r\n    const rangeValueForStr2 = step >= 1 ? rangeValue2.toFixed(0) : rangeValue2.toFixed(1);\r\n\r\n    return (\r\n        <div\r\n            style={{flexDirection:'column'}}\r\n            className={`flex items-center cursor-pointer space-x-1 ${\r\n                containerClassName ? containerClassName : ''\r\n            }`}\r\n        >\r\n            {showLabel && labelPosition === 'left' && (\r\n                <>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\r\n                    >\r\n                        {rangeValueForStr1}\r\n                        {unit}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\r\n                    >\r\n                        {rangeValueForStr2}\r\n                        {unit}\r\n                    </Typography>\r\n                </>\r\n            )}\r\n            <div style={{flexDirection:'row'}} className={'flex pb-[5px]'}>\r\n                <input\r\n                    type=\"range\"\r\n                    min={minValue}\r\n                    max={maxValue}\r\n                    value={rangeValue1}\r\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\r\n                        inputClassName ? inputClassName : ''\r\n                    }`}\r\n                    style={{background: '#3a3f99',}}\r\n                    onChange={handleChange1}\r\n                    id=\"myRange1\"\r\n                    step={step}\r\n                />\r\n                <input\r\n                    type=\"range\"\r\n                    min={minValue}\r\n                    max={maxValue}\r\n                    value={rangeValue2}\r\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\r\n                        inputClassName ? inputClassName : ''\r\n                    }`}\r\n                    style={{background: '#3a3f99',}}\r\n                    onChange={handleChange2}\r\n                    id=\"myRange2\"\r\n                    step={step}\r\n                />\r\n            </div>\r\n            {showLabel && (!labelPosition || labelPosition === 'right') && (\r\n                <div style={{flexDirection:'row', width:'100%'}} className={'flex pb-[5px]'}>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\r\n                    >\r\n                        {'Min : '}\r\n                        {rangeValueForStr1}\r\n                        {unit}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\r\n                    >\r\n                        {'Max : '}\r\n                        {rangeValueForStr2}\r\n                        {unit}\r\n                    </Typography>\r\n                </div>\r\n            )}\r\n            <div className={'flex'} style={{width:'100%'}}>\r\n                <div className={'flex w-1/2 justify-center'}>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange1({target: {value: rangeValue1 - 10}})\r\n                    }}>{'--'}</Button>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange1({target: {value: rangeValue1 - 1}})\r\n                    }}>{'-'}</Button>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange1({target: {value: rangeValue1 + 1}})\r\n                    }}>{'+'}</Button>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange1({target: {value: rangeValue1 + 10}})\r\n                    }}>{'++'}</Button>\r\n                </div>\r\n                <div className={'flex w-1/2 justify-center'}>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange2({target: {value: rangeValue2 - 10}})\r\n                    }}>{'--'}</Button>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange2({target: {value: rangeValue2 - 1}})\r\n                    }}>{'-'}</Button>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange2({target: {value: rangeValue2 + 1}})\r\n                    }}>{'+'}</Button>\r\n                    <Button size={'small'} color={'black'} onClick={() => {\r\n                        handleChange2({target: {value: rangeValue2 + 10}})\r\n                    }}>{'++'}</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DualInputRange;\r\n","import DualInputRange from './DualInputRange';\r\n\r\nexport default DualInputRange;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport InputRange from '../../../../../platform/ui/src/components/InputRange';\r\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\r\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport { useTranslation } from 'react-i18next';\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { MouseBindings, Events } = csToolsEnums;\r\nimport {\r\n    getEnabledElement,\r\n    VolumeViewport,\r\n    triggerEvent,\r\n    eventTarget,\r\n    utilities as csUtils,\r\n    utilities,\r\n} from '@cornerstonejs/core';\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Brush_Strategies {\r\n    FILL_INSIDE_CIRCLE      =   'FILL_INSIDE_CIRCLE',\r\n    THRESHOLD_INSIDE_CIRCLE =   'THRESHOLD_INSIDE_CIRCLE',\r\n    THRESHOLD_INSIDE_SPHERE =   'THRESHOLD_INSIDE_SPHERE',\r\n    ERASE_INSIDE_CIRCLE     =   'ERASE_INSIDE_CIRCLE',\r\n    FILL_INSIDE_SPHERE      =   'FILL_INSIDE_SPHERE',\r\n    ERASE_INSIDE_SPHERE     =   'ERASE_INSIDE_SPHERE'\r\n}\r\n\r\nconst EVENT_LISTENERS = []\r\n\r\nexport default function BrushToolEdit ({cornerstoneViewportService, segmentationService}){\r\n    const { t } = useTranslation('Buttons');\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All')\r\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\r\n\r\n    // @ts-ignore\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n    const [activeStrategy, setActiveStrategy] = useState(Brush_Strategies.FILL_INSIDE_CIRCLE)\r\n    const [brushSize, setBrushSize] = useState(25)\r\n    const [circleThresholdValue, setCircleThresholdValue] = useState([-1000, 5000])\r\n    const [segments, setSegments] = useState([])\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const brushInstance = toolGroup.getToolInstance('Brush');\r\n        setActiveStrategy(brushInstance.configuration.activeStrategy)\r\n        setBrushSize(brushInstance.configuration.brushSize)\r\n        setCircleThresholdValue(brushInstance.configuration.strategySpecificConfiguration.THRESHOLD_INSIDE_CIRCLE.threshold)\r\n\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                    const {label, segmentIndex} = args\r\n                    setEraseFocus(label)\r\n                    brushInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n                }\r\n        }}))\r\n\r\n        toolGroup.setToolActive('Undo', {\r\n            bindings: [\r\n                {\r\n                    mouseButton: MouseBindings.Primary, // Left Click\r\n                },\r\n            ],\r\n        })\r\n    }, [])\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const brushInstance = toolGroup.getToolInstance('Brush');\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n                setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                        const {label, segmentIndex} = args\r\n                        brushInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n                        setEraseFocus(label)\r\n                    }\r\n                }}))\r\n                }\r\n            );\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const brushInstance = toolGroup.getToolInstance('Brush');\r\n        brushInstance.setConfiguration({\r\n            brushSize: brushSize,\r\n            activeStrategy: activeStrategy,\r\n            strategySpecificConfiguration: {\r\n                THRESHOLD_INSIDE_CIRCLE: {\r\n                    threshold: circleThresholdValue, // E.g. CT Fat // Only used during threshold strategies.\r\n                },\r\n            },\r\n        })\r\n    }, [brushSize, activeStrategy, circleThresholdValue])\r\n\r\n    const setThresholdCallback = (evt, minimum) => {\r\n        //If left click\r\n        if(evt.detail.mouseButton === 1) {\r\n            const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n            const worldPoints = evt.detail.currentPoints.world\r\n            const imageData = viewport.getImageData()\r\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\r\n\r\n            index[0] = Math.round(index[0]);\r\n            index[1] = Math.round(index[1]);\r\n            index[2] = Math.round(index[2]);\r\n\r\n            const {scalarData, dimensions} = imageData\r\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\r\n                const yMultiple = dimensions[0];\r\n                const zMultiple = dimensions[0] * dimensions[1];\r\n\r\n                const value =\r\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\r\n                if (minimum) {\r\n                    setCircleThresholdValue([value, circleThresholdValue[1]])\r\n                } else {\r\n                    setCircleThresholdValue([circleThresholdValue[0], value])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Create event listeners to catch mouse click for pipette threshold tool\r\n    //Activte probe tool is pipette active to display HU values on screen\r\n    //Go back to brush tool if we deactivate pipette\r\n    //Wrapper around addEventListener to not have multiple listeners\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            viewport.id,\r\n            viewport.renderingEngineId\r\n        );\r\n        const currentElement = viewport.element\r\n        currentElement.addEvent = (evt, callback) => {\r\n            if(EVENT_LISTENERS[evt]) {\r\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\r\n                EVENT_LISTENERS[evt] = null\r\n            }\r\n            EVENT_LISTENERS[evt] = callback\r\n            currentElement.addEventListener(evt, callback)\r\n        }\r\n        currentElement.removeEvent = (evt) => {\r\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\r\n            EVENT_LISTENERS[evt] = null\r\n        }\r\n\r\n        if(pipetteMode.active){\r\n            toolGroup.setToolPassive('Brush')\r\n            toolGroup.setToolActive('DragProbe', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            })\r\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\r\n        }\r\n        else{\r\n            toolGroup.setToolPassive('DragProbe')\r\n            toolGroup.setToolActive('Brush', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            })\r\n            currentElement.removeEvent(Events.MOUSE_DRAG)\r\n        }\r\n    }, [pipetteMode.active, pipetteMode.minimum])\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Paint Brush Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'Filling mode'}\r\n                        </span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Brush_Strategies.FILL_INSIDE_CIRCLE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Brush_Strategies.FILL_INSIDE_CIRCLE)}}\r\n                            >{'Circle'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_CIRCLE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Brush_Strategies.THRESHOLD_INSIDE_CIRCLE)}}\r\n                            >{'Circle Threshold'}</Button>\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Brush_Strategies.FILL_INSIDE_SPHERE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Brush_Strategies.FILL_INSIDE_SPHERE)}}\r\n                            >{'Sphere'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_SPHERE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Brush_Strategies.THRESHOLD_INSIDE_SPHERE)}}\r\n                            >{'Sphere Threshold'}</Button>\r\n                        </div>\r\n                        <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1\"></div>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'Erase mode'}\r\n                        </span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Brush_Strategies.ERASE_INSIDE_CIRCLE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Brush_Strategies.ERASE_INSIDE_CIRCLE)}}\r\n                            >{'Circle'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Brush_Strategies.ERASE_INSIDE_SPHERE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Brush_Strategies.ERASE_INSIDE_SPHERE)}}\r\n                            >{'Sphere'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                                        {'Erase Options'}\r\n                                    </span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\r\n                                          {'Erase focus on :'}\r\n                                        </span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1 mt-[8px]\"></div>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'Attributes'}\r\n                        </span>\r\n                        <div className=\"flex items-center col-span-2\">\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\">{'Radius'}</div>\r\n                            <InputRange\r\n                                minValue={0}\r\n                                maxValue={100}\r\n                                value={brushSize}\r\n                                onChange={(value) => {setBrushSize(value)}}\r\n                                step={1}\r\n                                containerClassName=\"mt-[4px] mb-[4px]\"\r\n                                inputClassName=\"w-[64px]\"\r\n                                labelClassName=\"text-white text-[12px]\"\r\n                                unit=\"px\"\r\n                            />\r\n                        </div>\r\n                        {\r\n                            (activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_CIRCLE\r\n                            || activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_SPHERE) && (\r\n                                <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\r\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\r\n                                    <DualInputRange\r\n                                        minValue={-1000}\r\n                                        maxValue={5000}\r\n                                        value1={circleThresholdValue[0]}\r\n                                        value2={circleThresholdValue[1]}\r\n                                        onChange={(vmin, vmax) => {setCircleThresholdValue([vmin, vmax])}}\r\n                                        step={5}\r\n                                        containerClassName=\"mt-[4px] mb-[4px] w-full\"\r\n                                        inputClassName=\"w-full\"\r\n                                        labelClassName=\"text-white text-[12px] w-full\"\r\n                                        unit=\"HU\"\r\n                                    />\r\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\r\n                                    <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\r\n                                        <Button\r\n                                            fullWidth={true}\r\n                                            size={'small'}\r\n                                            color={'secondary'}\r\n                                            onClick={() => { setPipetteMode({active: true, minimum: true})}}\r\n                                        >{'Minimum'}</Button>\r\n                                        <Button\r\n                                            fullWidth={true}\r\n                                            size={'small'}\r\n                                            color={'secondary'}\r\n                                            onClick={() => { setPipetteMode({active: true, minimum: false})}}\r\n                                        >{'Maximum'}</Button>\r\n                                    </div>\r\n                                    {\r\n                                        pipetteMode.active && (\r\n                                            <Button\r\n                                                size={'small'}\r\n                                                color={'secondary'}\r\n                                                onClick={() => { setPipetteMode({active: false, minimum: true})}}\r\n                                            >\r\n                                                {'Back to annotation'}\r\n                                            </Button>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            )\r\n\r\n                        }\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Circle_Strategies {\r\n    FILL_INSIDE = 'FILL_INSIDE',\r\n    ERASE_INSIDE = 'ERASE_INSIDE'\r\n}\r\n\r\nexport default function CircleScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [activeStrategy, setActiveStrategy] = useState(Circle_Strategies.FILL_INSIDE)\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const [segments, setSegments] = useState([])\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All')\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const cscissorsInstance = toolGroup.getToolInstance('CircleScissor');\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                            const {label, segmentIndex} = args\r\n                            cscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n                            setEraseFocus(label)\r\n                        }\r\n                    }}))\r\n                }\r\n            );\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\r\n        setActiveStrategy(circleInstance.configuration.activeStrategy)\r\n\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                const {label, segmentIndex} = args\r\n                setEraseFocus(label)\r\n                circleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n            }\r\n        }}))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const CircleInstance = toolGroup.getToolInstance('CircleScissor');\r\n        CircleInstance.setConfiguration({\r\n            activeStrategy: activeStrategy,\r\n        })\r\n    }, [activeStrategy])\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Circle Segmentation Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'Mode'}\r\n                        </span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Circle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Circle_Strategies.FILL_INSIDE)}}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Circle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Circle_Strategies.ERASE_INSIDE)}}\r\n                            >{'Erase'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                                        {'Erase Options'}\r\n                                    </span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\r\n                                          {'Erase focus on :'}\r\n                                        </span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\n\r\nexport default function PaintFillToolEdit ({}){\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Fill Holes Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'No configurations for this tool'}\r\n                        </span>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\r\nimport InputRange from '../../../../../platform/ui/src/components/InputRange'\r\nimport {Button, useViewportGrid} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\r\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\r\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { MouseBindings, Events } = csToolsEnums;\r\n\r\nconst EVENT_LISTENERS = []\r\n\r\nexport default function RectangleROIStartEndThresholdToolEdit ({\r\n                                                            segmentationService,\r\n                                                            cornerstoneViewportService,\r\n                                                            commandsManager\r\n                                                       }){\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const [thresholdValue, setThresholdValue] = useState([-1000, 5000])\r\n    const [slicesToPropagate, setSlicesToPropagate] = useState(0)\r\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\r\n\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\r\n        setSlicesToPropagate(rectangleROIInstance.configuration.numSlicesToPropagate)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const brushInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\r\n        brushInstance.setConfiguration({\r\n            numSlicesToPropagate: slicesToPropagate\r\n        })\r\n        console.log('SET CONFIGURATION', slicesToPropagate)\r\n    }, [slicesToPropagate])\r\n\r\n    const setThresholdCallback = (evt, minimum) => {\r\n        //If left click\r\n        if(evt.detail.mouseButton === 1) {\r\n            const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n            const worldPoints = evt.detail.currentPoints.world\r\n            const imageData = viewport.getImageData()\r\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\r\n\r\n            index[0] = Math.round(index[0]);\r\n            index[1] = Math.round(index[1]);\r\n            index[2] = Math.round(index[2]);\r\n\r\n            const {scalarData, dimensions} = imageData\r\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\r\n                const yMultiple = dimensions[0];\r\n                const zMultiple = dimensions[0] * dimensions[1];\r\n\r\n                const value =\r\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\r\n                if (minimum) {\r\n                    setThresholdValue([value, thresholdValue[1]])\r\n                } else {\r\n                    setThresholdValue([thresholdValue[0], value])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            viewport.id,\r\n            viewport.renderingEngineId\r\n        );\r\n        const currentElement = viewport.element\r\n        currentElement.addEvent = (evt, callback) => {\r\n            if(EVENT_LISTENERS[evt]) {\r\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\r\n                EVENT_LISTENERS[evt] = null\r\n            }\r\n            EVENT_LISTENERS[evt] = callback\r\n            currentElement.addEventListener(evt, callback)\r\n        }\r\n        currentElement.removeEvent = (evt) => {\r\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\r\n            EVENT_LISTENERS[evt] = null\r\n        }\r\n\r\n        if(pipetteMode.active){\r\n            toolGroup.setToolPassive('RectangleROIStartEndThreshold')\r\n            toolGroup.setToolActive('DragProbe', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            })\r\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\r\n        }\r\n        else{\r\n            toolGroup.setToolPassive('DragProbe')\r\n            toolGroup.setToolActive('RectangleROIStartEndThreshold', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            })\r\n            currentElement.removeEvent(Events.MOUSE_DRAG)\r\n        }\r\n    }, [pipetteMode.active, pipetteMode.minimum])\r\n\r\n    const computeThreshold = () => {\r\n        const actors = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).getActors()\r\n        const imageVolumes = actors\r\n            .map((va) => {\r\n                // prefer the referenceUID if it is set, since it can be a derived actor\r\n                // and the uid does not necessarily match the volumeId\r\n                const actorUID = va.referenceId ?? va.uid;\r\n                return cache.getVolume(actorUID);\r\n            })\r\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\r\n            .filter((iv) => !!iv);\r\n\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIStartEndThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        const annotation = csTools.annotation.state.getAnnotation(\r\n            annotationUID\r\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIStartEndThresholdAnnotation;\r\n\r\n        if (!annotation) return\r\n\r\n        // Todo: this only works for volumeViewport\r\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds)[0];\r\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds)[0];\r\n        const segmentations = segmentationService.getSegmentations();\r\n\r\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n            selectedAnnotationUIDs,\r\n            segmentationVolume,\r\n            [\r\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\r\n            ],\r\n            {\r\n                numSlicesToProject: 0,\r\n                overwrite: false,\r\n                overlapType: 1,\r\n                segmentIndex: segmentations[0].activeSegmentIndex,\r\n            }\r\n        );\r\n    }\r\n\r\n    const deleteRegion = () => {\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIStartEndThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n        console.log('selected annotation uid', selectedAnnotationUIDs)\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        console.log('CSTOOLS STATE', csTools.annotation.state)\r\n        csTools.annotation.state.removeAnnotation(annotationUID)\r\n        cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).render()\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'3D Rectangle Threshold Segmentation Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\r\n                            <DualInputRange\r\n                                minValue={-1000}\r\n                                maxValue={5000}\r\n                                value1={thresholdValue[0]}\r\n                                value2={thresholdValue[1]}\r\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\r\n                                step={5}\r\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\r\n                                inputClassName=\"w-full\"\r\n                                labelClassName=\"text-white text-[12px] w-full\"\r\n                                unit=\"\"\r\n                            />\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\r\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\r\n                                <Button\r\n                                    fullWidth={true}\r\n                                    size={'small'}\r\n                                    color={'secondary'}\r\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\r\n                                >{'Minimum'}</Button>\r\n                                <Button\r\n                                    fullWidth={true}\r\n                                    size={'small'}\r\n                                    color={'secondary'}\r\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\r\n                                >{'Maximum'}</Button>\r\n                            </div>\r\n                            {\r\n                                pipetteMode.active && (\r\n                                    <Button\r\n                                        size={'small'}\r\n                                        color={'secondary'}\r\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\r\n                                    >\r\n                                        {'Back to annotation'}\r\n                                    </Button>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div className=\"flex items-center col-span-2\" style={{width:'100%', flexDirection:'column'}}>\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Slices Propagation'}</div>\r\n                            <InputRange\r\n                                minValue={0}\r\n                                maxValue={200}\r\n                                value={slicesToPropagate}\r\n                                onChange={(value) => {setSlicesToPropagate(value)}}\r\n                                step={1}\r\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\r\n                                inputClassName=\"w-full\"\r\n                                labelClassName=\"text-white text-[12px] w-full\"\r\n                                unit=\"\"\r\n                            />\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={() => {computeThreshold()}}\r\n                            >{'Compute Threshold'}</Button>\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={() => {deleteRegion()}}\r\n                            >{'Delete selected region'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\r\nimport {Button, useViewportGrid} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\r\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\r\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { MouseBindings, Events } = csToolsEnums;\r\n\r\nconst EVENT_LISTENERS = []\r\n\r\nexport default function RectangleROIThresholdToolEdit ({\r\n    segmentationService,\r\n    cornerstoneViewportService,\r\n    commandsManager\r\n}){\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const [thresholdValue, setThresholdValue] = useState([-1000, 5000])\r\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\r\n\r\n    const setThresholdCallback = (evt, minimum) => {\r\n        //If left click\r\n        if(evt.detail.mouseButton === 1) {\r\n            const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n            const worldPoints = evt.detail.currentPoints.world\r\n            const imageData = viewport.getImageData()\r\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\r\n\r\n            index[0] = Math.round(index[0]);\r\n            index[1] = Math.round(index[1]);\r\n            index[2] = Math.round(index[2]);\r\n\r\n            const {scalarData, dimensions} = imageData\r\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\r\n                const yMultiple = dimensions[0];\r\n                const zMultiple = dimensions[0] * dimensions[1];\r\n\r\n                const value =\r\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\r\n                if (minimum) {\r\n                    setThresholdValue([value, thresholdValue[1]])\r\n                } else {\r\n                    setThresholdValue([thresholdValue[0], value])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            viewport.id,\r\n            viewport.renderingEngineId\r\n        );\r\n        const currentElement = viewport.element\r\n        currentElement.addEvent = (evt, callback) => {\r\n            if(EVENT_LISTENERS[evt]) {\r\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\r\n                EVENT_LISTENERS[evt] = null\r\n            }\r\n            EVENT_LISTENERS[evt] = callback\r\n            currentElement.addEventListener(evt, callback)\r\n        }\r\n        currentElement.removeEvent = (evt) => {\r\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\r\n            EVENT_LISTENERS[evt] = null\r\n        }\r\n\r\n        if(pipetteMode.active){\r\n            toolGroup.setToolPassive('RectangleROIThreshold')\r\n            toolGroup.setToolActive('DragProbe', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            })\r\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\r\n        }\r\n        else{\r\n            toolGroup.setToolPassive('DragProbe')\r\n            toolGroup.setToolActive('RectangleROIThreshold', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            })\r\n            currentElement.removeEvent(Events.MOUSE_DRAG)\r\n        }\r\n    }, [pipetteMode.active, pipetteMode.minimum])\r\n\r\n    const computeThreshold = () => {\r\n        const actors = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).getActors()\r\n        const imageVolumes = actors\r\n            .map((va) => {\r\n                // prefer the referenceUID if it is set, since it can be a derived actor\r\n                // and the uid does not necessarily match the volumeId\r\n                const actorUID = va.referenceId ?? va.uid;\r\n                return cache.getVolume(actorUID);\r\n            })\r\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\r\n            .filter((iv) => !!iv);\r\n\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        const annotation = csTools.annotation.state.getAnnotation(\r\n            annotationUID\r\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIThresholdAnnotation;\r\n\r\n        if (!annotation) return\r\n\r\n        // Todo: this only works for volumeViewport\r\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds)[0];\r\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds)[0];\r\n\r\n        const segmentations = segmentationService.getSegmentations();\r\n        console.log('SEGMENTATION', segmentations)\r\n\r\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n            selectedAnnotationUIDs,\r\n            segmentationVolume,\r\n            [\r\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\r\n            ],\r\n            {\r\n                numSlicesToProject: 0,\r\n                overwrite: false,\r\n                overlapType: 1,\r\n                segmentIndex: segmentations[0].activeSegmentIndex,\r\n            }\r\n        );\r\n    }\r\n\r\n    const deleteRegion = () => {\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n        console.log('selected annotation uid', selectedAnnotationUIDs)\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        console.log('CSTOOLS STATE', csTools.annotation.state)\r\n        csTools.annotation.state.removeAnnotation(annotationUID)\r\n        cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).render()\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Rectangle Threshold Segmentation Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div className=\"flex items-center col-span-2 pb-[9px]\" style={{flexDirection:'column', width:'100%'}}>\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pb-[3px]\" style={{width:'100%'}}>{'Threshold values'}</div>\r\n                            <DualInputRange\r\n                                minValue={-1000}\r\n                                maxValue={5000}\r\n                                value1={thresholdValue[0]}\r\n                                value2={thresholdValue[1]}\r\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\r\n                                step={5}\r\n                                containerClassName=\"mt-[4px] mb-[4px] w-full pb-[3px]\"\r\n                                inputClassName=\"w-full\"\r\n                                labelClassName=\"text-white text-[12px] w-full\"\r\n                                unit=\"HU\"\r\n                            />\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\r\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\r\n                                <Button\r\n                                    fullWidth={true}\r\n                                    size={'small'}\r\n                                    color={'secondary'}\r\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\r\n                                >{'Minimum'}</Button>\r\n                                <Button\r\n                                    fullWidth={true}\r\n                                    size={'small'}\r\n                                    color={'secondary'}\r\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\r\n                                >{'Maximum'}</Button>\r\n                            </div>\r\n                            {\r\n                                pipetteMode.active && (\r\n                                    <Button\r\n                                        size={'small'}\r\n                                        color={'secondary'}\r\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\r\n                                    >\r\n                                        {'Back to annotation'}\r\n                                    </Button>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={() => {computeThreshold()}}\r\n                            >{'Compute Threshold'}</Button>\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={() => {deleteRegion()}}\r\n                            >{'Delete selected region'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Rectangle_Strategies {\r\n    FILL_INSIDE = 'FILL_INSIDE',\r\n    ERASE_INSIDE = 'ERASE_INSIDE'\r\n}\r\n\r\nexport default function RectangleScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [activeStrategy, setActiveStrategy] = useState(Rectangle_Strategies.FILL_INSIDE)\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const [segments, setSegments] = useState([])\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All')\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const rscissorsInstance = toolGroup.getToolInstance('RectangleScissor');\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                            const {label, segmentIndex} = args\r\n                            rscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n                            setEraseFocus(label)\r\n                        }\r\n                    }}))\r\n                }\r\n            );\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\r\n        setActiveStrategy(rectangleInstance.configuration.activeStrategy)\r\n\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                const {label, segmentIndex} = args\r\n                setEraseFocus(label)\r\n                rectangleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n            }\r\n        }}))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\r\n        rectangleInstance.setConfiguration({\r\n            activeStrategy: activeStrategy,\r\n        })\r\n    }, [activeStrategy])\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Rectangle Scissors Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'Mode'}\r\n                        </span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Rectangle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.FILL_INSIDE)}}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Rectangle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.ERASE_INSIDE)}}\r\n                            >{'Erase'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                                        {'Erase Options'}\r\n                                    </span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\r\n                                          {'Erase focus on :'}\r\n                                        </span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Sphere_Strategies {\r\n    FILL_INSIDE = 'FILL_INSIDE',\r\n    ERASE_INSIDE = 'ERASE_INSIDE'\r\n}\r\n\r\nexport default function SphereScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [activeStrategy, setActiveStrategy] = useState(Sphere_Strategies.FILL_INSIDE)\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const [segments, setSegments] = useState([])\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All')\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const sscissorsInstance = toolGroup.getToolInstance('RectangleScissor');\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                            const {label, segmentIndex} = args\r\n                            sscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n                            setEraseFocus(label)\r\n                        }\r\n                    }}))\r\n                }\r\n            );\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\r\n        setActiveStrategy(sphereInstance.configuration.activeStrategy)\r\n\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\r\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\r\n                const {label, segmentIndex} = args\r\n                setEraseFocus(label)\r\n                sphereInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n            }\r\n        }}))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).id,\r\n            cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex).renderingEngineId\r\n        );\r\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\r\n        sphereInstance.setConfiguration({\r\n            activeStrategy: activeStrategy,\r\n        })\r\n    }, [activeStrategy])\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Sphere Scissors Tool Edit'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\r\n                          {'Mode'}\r\n                        </span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Sphere_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.FILL_INSIDE)}}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={activeStrategy === Sphere_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\r\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.ERASE_INSIDE)}}\r\n                            >{'Erase'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                                        {'Erase Options'}\r\n                                    </span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\r\n                                          {'Erase focus on :'}\r\n                                        </span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { Events } = csToolsEnums\r\n\r\nclass CappedArray extends Array {\r\n    private readonly maxLength: number;\r\n\r\n    constructor(maxLength) {\r\n        super();\r\n        this.maxLength = maxLength;\r\n    }\r\n\r\n    push(...elements) {\r\n        // Appeler la méthode push de la classe Array parente\r\n        const r = super.push(...elements);\r\n\r\n        // Si la longueur dépasse maxLength, retirer les éléments les plus anciens\r\n        if (this.length > this.maxLength) {\r\n            const excess = this.length - this.maxLength;\r\n            this.splice(0, excess);\r\n        }\r\n\r\n        return r\r\n    }\r\n}\r\n\r\nconst MAX_CACHE_LENGTH = 10\r\nconst CACHE_SEGMENTATION_VOLUMES = new CappedArray(MAX_CACHE_LENGTH)\r\n\r\nexport default function UndoToolEdit ({cornerstoneViewportService, segmentationService}){\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n    const [currentCacheIndex, setCurrentCacheIndex] = useState(CACHE_SEGMENTATION_VOLUMES.length)\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n        const currentElement = viewport.element\r\n        // Save previous segmentation states for \"undo\" functionality\r\n        currentElement.addEventListener(Events.MOUSE_DOWN, evt => {\r\n            const old_segmentation = segmentationService.getSegmentations()[0]\r\n            const old_seg_volume = new Uint8ClampedArray(segmentationService.getLabelmapVolume(old_segmentation.id).getScalarData())\r\n\r\n            //Add current segmentation volume in cache to save its state\r\n            CACHE_SEGMENTATION_VOLUMES.push(old_seg_volume)\r\n            setCurrentCacheIndex(CACHE_SEGMENTATION_VOLUMES.length)\r\n        })\r\n    }, [])\r\n\r\n    const apply_replace = (cacheIndex) => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewportByIndex(activeViewportIndex)\r\n        const currentElement = viewport.element\r\n\r\n        const previous_volume = CACHE_SEGMENTATION_VOLUMES[cacheIndex]\r\n        if(!previous_volume) return\r\n\r\n        const replace_event = new CustomEvent('UNDO_REDO_TOOL', {\r\n            detail: {\r\n                element: currentElement,\r\n                oldScalarData: previous_volume\r\n            }\r\n        })\r\n        window.dispatchEvent(replace_event)\r\n        setCurrentCacheIndex(cacheIndex)\r\n    }\r\n\r\n    const undo = () => {\r\n        if(currentCacheIndex === 0) return\r\n        apply_replace(currentCacheIndex - 1)\r\n    }\r\n\r\n    const redo = () => {\r\n        if(currentCacheIndex === MAX_CACHE_LENGTH) return\r\n        apply_replace(currentCacheIndex + 1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Undo / Redo Segmentation'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={undo}\r\n                            >{'Undo'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={redo}\r\n                            >{'Redo'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport {useViewportGrid} from '@ohif/ui';\r\nimport * as csTools from '@cornerstonejs/tools';\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { Events } = csToolsEnums\r\nconst { state } = csTools\r\n\r\nimport BrushToolEdit from \"./brushToolEdit\";\r\nimport CircleScissorsToolEdit from \"./cscissorsToolEdit\";\r\nimport PaintFillToolEdit from \"./paintFillToolEdit\";\r\nimport RectangleROIStartEndThresholdToolEdit from \"./rectangleROIStartEndToolEdit\";\r\nimport RectangleROIThresholdToolEdit from \"./rectangleROIToolEdit\";\r\nimport RectangleScissorsToolEdit from \"./rscissorsToolEdit\";\r\nimport SphereScissorsToolEdit from \"./sscissorsToolEdit\";\r\nimport UndoToolEdit from \"./undoToolEdit\";\r\n\r\nconst SEG_TOOL_NAMES = [\r\n    'Brush',\r\n    'CircleScissor',\r\n    'PaintFill',\r\n    'RectangleROIStartEndThreshold',\r\n    'RectangleROIThreshold',\r\n    'RectangleScissor',\r\n    'SphereScissor'\r\n]\r\n\r\nexport default function BaseToolEdit (\r\n    {\r\n        segmentationService,\r\n        toolbarService,\r\n        toolGroupService,\r\n        cornerstoneViewportService,\r\n        commandsManager\r\n    }){\r\n    // @ts-ignore\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n    const [activeSegTool, setActiveSegTool] = useState(null)\r\n\r\n    const searchActiveSegTool = () => {\r\n        const toolStates = state.toolGroups.filter(tg => tg.id === 'mpr')[0]?.toolOptions\r\n        if(!toolStates) setActiveSegTool(null)\r\n        const toolStatesArray = Object.keys(toolStates).map(function (key) {\r\n            return [key, toolStates[key]];\r\n        });\r\n        let activeSegTool = false\r\n        toolStatesArray.forEach(tool => {\r\n            //Check if tool is a segmentation tool\r\n            if (SEG_TOOL_NAMES.includes(tool[0])){\r\n                //Check if tool is active\r\n                if(tool[1].mode === 'Active'){\r\n                    activeSegTool = true\r\n                    setActiveSegTool(tool[0])\r\n                    return;\r\n                }\r\n            }\r\n        })\r\n        if(!activeSegTool) setActiveSegTool(null)\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchActiveSegTool()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const { unsubscribe } = toolbarService.subscribe(\r\n            toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\r\n            searchActiveSegTool\r\n        );\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [toolbarService]);\r\n\r\n    const renderActiveTool = () => {\r\n        switch (activeSegTool){\r\n            case 'Brush':\r\n                return <BrushToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'CircleScissor':\r\n                return <CircleScissorsToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'PaintFill':\r\n                return <PaintFillToolEdit />\r\n            case 'RectangleROIStartEndThreshold':\r\n                return <RectangleROIStartEndThresholdToolEdit\r\n                    segmentationService={segmentationService}\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    commandsManager={commandsManager}\r\n                />\r\n            case 'RectangleROIThreshold':\r\n                return <RectangleROIThresholdToolEdit\r\n                    segmentationService={segmentationService}\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    commandsManager={commandsManager}\r\n                />\r\n            case 'RectangleScissor':\r\n                return <RectangleScissorsToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'SphereScissor':\r\n                return <SphereScissorsToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                activeSegTool &&\r\n                <UndoToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            }\r\n            {renderActiveTool()}\r\n        </div>\r\n    )\r\n}","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\r\nimport React, {useState} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {Segmentation} from \"@ohif/extension-cornerstone/src/services/SegmentationService/SegmentationServiceTypes\";\r\nimport PropTypes from \"prop-types\";\r\nimport {saveAs, FileSaver} from 'file-saver'\r\n\r\nfunction SegmentsConfigurationImportExport({segmentationService, segmentations}) : React.JSX.Element {\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const exportConfiguration = () : void => {\r\n        const json = JSON.stringify(segmentations[0].segments)\r\n        const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(json_blob, 'segments_configuration.json')\r\n    }\r\n\r\n    const importConfiguration = () : void => {\r\n        console.log('SEGS AT IMPORT', segmentations)\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.accept = 'application/json'\r\n        input.onchange = _ => {\r\n            const json_file = Array.from(input.files)[0];\r\n            const reader = new FileReader();\r\n            reader.onload = function(event) {\r\n                try {\r\n                    if (typeof event.target.result === \"string\") {\r\n                        for(let i = 1; i < segmentations[0].segments.length; i++){\r\n                            segmentationService.removeSegment(segmentations[0].id, i)\r\n                        }\r\n\r\n                        const jsonContent = JSON.parse(event.target.result);\r\n                        jsonContent.forEach(segment => {\r\n                            if(segment){\r\n                                const {segmentIndex} = segment\r\n                                segmentationService.addSegment(\r\n                                    segmentations[0].id,\r\n                                    segmentIndex,\r\n                                    viewports[activeViewportIndex].viewportOptions.toolGroupId,\r\n                                    segment,\r\n                                    true\r\n                                )\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"ERROR::JSON_READING\", error);\r\n                }\r\n            };\r\n            reader.readAsText(json_file);\r\n        };\r\n        input.click();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                        {'Segments Configuration I/O'}\r\n                    </span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\"\r\n                        >\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={importConfiguration}\r\n                            >{'Import File'}</Button>\r\n                            <Button\r\n                                fullWidth={true}\r\n                                size={'small'}\r\n                                color={'secondary'}\r\n                                onClick={exportConfiguration}\r\n                            >{'Export File'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSegmentsConfigurationImportExport.propTypes = {\r\n    segmentations: PropTypes.array.isRequired\r\n}\r\n\r\nexport default SegmentsConfigurationImportExport","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\nimport {saveAs, FileSaver} from 'file-saver'\r\nimport JSZip from \"jszip\";\r\nimport ProgressBar from \"@ramonak/react-progress-bar\";\r\n\r\nfunction SegmentationExport({segmentationService, segmentations}) : React.JSX.Element {\r\n\r\n    const [isProcessingLayer, setIsProcessingLayer] = useState(false)\r\n    const [processingLayerPercent, setProcessingLayerPercent] = useState(0)\r\n\r\n    useEffect(() => {\r\n        if(isProcessingLayer){\r\n            setProcessingLayerPercent(0)\r\n            setTimeout(exportSegmentation, 500)\r\n        }\r\n    }, [isProcessingLayer])\r\n\r\n    const exportSegmentation = () => {\r\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id)\r\n        const {\r\n            dimensions,\r\n            direction,\r\n            scalarData\r\n        } = labelmapVolume\r\n        const segments_info = segmentations[0].segments\r\n        const existing_segment_indexes = segments_info\r\n            .map((s, i) => {if (s) return i})\r\n            .filter(i => i)\r\n        const data = new Uint32Array(scalarData)\r\n        console.log('START COMPUTING INDEX ARRAY...')\r\n\r\n        //Convert segmentation in PNG Images using JSON\r\n        //Iterate through one layer (one PNG image)\r\n        const all_layers_blobs = new Array<Blob>(dimensions[2] - 1)\r\n        for(let layer_i = 0; layer_i < data.length; layer_i += (dimensions[0] * dimensions[1])){\r\n            const current_processed_layer = layer_i / (dimensions[0] * dimensions[1])\r\n            const segmented_layer = new Uint8ClampedArray(dimensions[0] * dimensions[1] * 4)\r\n                .fill(0)\r\n                .map((el, i) => {return (i - 3) % 4 === 0 ? 255 : el})\r\n            const scalar_layer = data.slice(layer_i, layer_i + (dimensions[0] * dimensions[1]))\r\n            //Map through existing segment indexes\r\n            Promise.allSettled(existing_segment_indexes.map(segment_index => {\r\n                //Get indexes of values that matches the segment_index in parameter\r\n                const mapIndexSerial = (segment_index) => {\r\n                    return scalar_layer\r\n                        .map((v, i) => {if(v !== 0 && v === segment_index) return i})\r\n                        .filter(i => i !== 0)\r\n                }\r\n                return mapIndexSerial(segment_index)\r\n            })).then((indexes_array) => {\r\n                //List of arrays of indexes matching a segment index (length = number of segment indexes)\r\n\r\n                indexes_array.forEach((promise, i) => {\r\n                    const segment_array = promise.value\r\n                    //Fill segmented layer with corresponding segment color\r\n                    if(segment_array.length !== 0){\r\n                        const corresponding_segment_index = existing_segment_indexes[i]\r\n                        const color_to_fill = [...segments_info[corresponding_segment_index].color, 255]\r\n                        segment_array.forEach(index_to_color => {\r\n                            segmented_layer[index_to_color * 4] = color_to_fill[0]\r\n                            segmented_layer[index_to_color * 4 + 1] = color_to_fill[1]\r\n                            segmented_layer[index_to_color * 4 + 2] = color_to_fill[2]\r\n                        })\r\n                    }\r\n                })\r\n\r\n                // console.log(`SEGMENTED ${current_processed_layer}`, segmented_layer)\r\n\r\n                const fillingPromise = () => {\r\n                    return new Promise<void>((resolve, reject) => {\r\n                        const canvas = document.createElement('canvas')\r\n                        const ctx = canvas.getContext('2d')\r\n                        canvas.width = dimensions[0]\r\n                        canvas.height = dimensions[1]\r\n                        const imgData = new ImageData(segmented_layer, dimensions[0], dimensions[1]);\r\n                        ctx.putImageData(imgData, 0, 0)\r\n                        canvas.toBlob((blob) => {\r\n                            if(blob){\r\n                                all_layers_blobs[current_processed_layer] = blob\r\n                                resolve()\r\n                            }\r\n                        }, \"image/png\")\r\n                    })\r\n                }\r\n                fillingPromise().then(() => {\r\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length\r\n                    setProcessingLayerPercent(~~((completed_layers * 100) / dimensions[2]))\r\n                })\r\n            })\r\n        }\r\n\r\n        const waitUntilArrayDone = () => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                (function waitForArray(){\r\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length\r\n                    if(completed_layers === dimensions[2]) return resolve();\r\n                    else {\r\n                        setTimeout(waitForArray, 500);}\r\n                })()\r\n            })\r\n        }\r\n        waitUntilArrayDone().then(() => {\r\n            const zip = new JSZip()\r\n            //Add layers in zip as PNG files\r\n            all_layers_blobs.forEach((blob, index) => {\r\n                zip.file(`layer_${index}.png`, blob)\r\n            })\r\n\r\n            //Add segments information as JSON File\r\n            const json = JSON.stringify(segmentations[0].segments, null, '\\t')\r\n            const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\r\n            zip.file('segmentation_informations.json', json_blob)\r\n\r\n            zip.generateAsync({type:'blob'}).then((content) => {\r\n                saveAs(content, 'segmentation.zip')\r\n                setIsProcessingLayer(false)\r\n            })\r\n        })\r\n    }\r\n\r\n    return (<div className={'flex flex-col w-full h-74 justify-between'}>\r\n        <Button\r\n            className={'pt-1/10 pb-1/10 w-full'}\r\n            onClick={() => {setIsProcessingLayer(true)}}\r\n        >\r\n            {\"Export Segmentation\"}\r\n        </Button>\r\n        {isProcessingLayer &&\r\n            <div className={'w-full mt-[9px]'}>\r\n                <p style={{color:'white'}}>{'Processing layers...'}</p>\r\n                <ProgressBar\r\n                    className={'w-full mt-[3px]'}\r\n                    bgColor={processingLayerPercent < 100 ? '#5ACCE6' : '#50C878'}\r\n                    completed={processingLayerPercent}\r\n                    transitionDuration={\"0.05s\"}\r\n                    transitionTimingFunction={\"linear\"}\r\n                />\r\n            </div>\r\n        }\r\n    </div>)\r\n}\r\n\r\nSegmentationExport.propTypes = {\r\n    segmentations: PropTypes.array.isRequired\r\n}\r\n\r\nexport default SegmentationExport\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport PropTypes, {element} from 'prop-types';\r\nimport {Button, SegmentationGroupTable, useViewportGrid, ListMenu} from '@ohif/ui';\r\nimport callInputDialog from './callInputDialog';\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport BaseToolEdit from \"./segToolsEditSection/baseToolEdit\";\r\nimport SegmentsConfigurationImportExport from \"./segConfigurationIO\";\r\nimport SegmentationExport from \"./segmentationExport\";\r\nimport {useTranslation} from 'react-i18next';\r\n\r\n\r\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\r\n\r\nexport default function PanelSegmentation({\r\n  servicesManager,\r\n  commandsManager,\r\n}) {\r\n  const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\r\n  const {\r\n      segmentationService,\r\n      uiDialogService,\r\n      cornerstoneViewportService,\r\n      toolGroupService,\r\n      toolbarService,\r\n      uiNotificationService\r\n  } = servicesManager.services;\r\n\r\n  const { t } = useTranslation('PanelSegmentation');\r\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\r\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\r\n    segmentationService.getConfiguration()\r\n  );\r\n\r\n  const [segmentations, setSegmentations] = useState(() =>\r\n    segmentationService.getSegmentations()\r\n  );\r\n\r\n  const [isMinimized, setIsMinimized] = useState({});\r\n\r\n  const onToggleMinimizeSegmentation = useCallback(\r\n    id => {\r\n      setIsMinimized(prevState => ({\r\n        ...prevState,\r\n        [id]: !prevState[id],\r\n      }));\r\n    },\r\n    [setIsMinimized]\r\n  );\r\n\r\n  // Only expand the last segmentation added to the list and collapse the rest\r\n  useEffect(() => {\r\n    const lastSegmentationId = segmentations[segmentations.length - 1]?.id;\r\n    if (lastSegmentationId) {\r\n      setIsMinimized(prevState => ({\r\n        ...prevState,\r\n        [lastSegmentationId]: false,\r\n      }));\r\n    }\r\n  }, [segmentations, setIsMinimized]);\r\n\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n    const subscriptions = [];\r\n\r\n    [added, updated, removed].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const segmentations = segmentationService.getSegmentations();\r\n        setSegmentations(segmentations);\r\n        setSegmentationConfiguration(segmentationService.getConfiguration());\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  const onSegmentationClick = (segmentationId: string) => {\r\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\r\n  };\r\n\r\n  const onSegmentationDelete = (segmentationId: string) => {\r\n    segmentationService.remove(segmentationId);\r\n  };\r\n\r\n  const getToolGroupIds = segmentationId => {\r\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(\r\n      segmentationId\r\n    );\r\n\r\n    return toolGroupIds;\r\n  };\r\n\r\n  const onSegmentClick = (segmentationId, segmentIndex) => {\r\n    segmentationService.setActiveSegmentForSegmentation(\r\n      segmentationId,\r\n      segmentIndex\r\n    );\r\n\r\n    const toolGroupIds = getToolGroupIds(segmentationId);\r\n\r\n    toolGroupIds.forEach(toolGroupId => {\r\n      // const toolGroupId =\r\n      segmentationService.setActiveSegmentationForToolGroup(\r\n        segmentationId,\r\n        toolGroupId\r\n      );\r\n      segmentationService.jumpToSegmentCenter(\r\n        segmentationId,\r\n        segmentIndex,\r\n        toolGroupId\r\n      );\r\n    });\r\n  };\r\n\r\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n    const segment = segmentation.segments[segmentIndex];\r\n    const { label } = segment;\r\n\r\n    callInputDialog(uiDialogService, label, (label, actionId) => {\r\n      if (label === '') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.setSegmentLabelForSegmentation(\r\n        segmentationId,\r\n        segmentIndex,\r\n        label\r\n      );\r\n    });\r\n  };\r\n\r\n  const onSegmentAdd = (segmentationId) => {\r\n    const currentSegmentation = segmentationService.getSegmentation(segmentationId)\r\n    segmentationService.addSegment(\r\n        segmentationId,\r\n        currentSegmentation.segments.length,\r\n        viewports[activeViewportIndex].viewportOptions.toolGroupId,\r\n        {\r\n          label: `Segmentation ${currentSegmentation.segmentCount + 1}`,\r\n          color: [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)],\r\n          opacity: 255,\r\n          visibility: true,\r\n          isLocked: false,\r\n          active: true\r\n        }\r\n    )\r\n  }\r\n\r\n  const onSegmentationEdit = segmentationId => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const { label } = segmentation;\r\n\r\n    callInputDialog(uiDialogService, label, (label, actionId) => {\r\n      if (label === '') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.addOrUpdateSegmentation(\r\n        {\r\n          id: segmentationId,\r\n          label,\r\n        },\r\n        false, // suppress event\r\n        true // notYetUpdatedAtSource\r\n      );\r\n    });\r\n  };\r\n\r\n  const onSegmentColorChange = (segmentationId, segmentIndex, newColor) => {\r\n    segmentationService.setSegmentColor(\r\n        segmentationId,\r\n        segmentIndex,\r\n        newColor,\r\n        viewports[activeViewportIndex].viewportOptions.toolGroupId\r\n    )\r\n    return;\r\n  };\r\n\r\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\r\n    segmentationService.removeSegment(\r\n      segmentationId,\r\n      segmentIndex\r\n    );\r\n  };\r\n\r\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const segmentInfo = segmentation.segments[segmentIndex];\r\n    const isVisible = !segmentInfo.isVisible;\r\n    const toolGroupIds = getToolGroupIds(segmentationId);\r\n\r\n    // Todo: right now we apply the visibility to all tool groups\r\n    toolGroupIds.forEach(toolGroupId => {\r\n      segmentationService.setSegmentVisibility(\r\n        segmentationId,\r\n        segmentIndex,\r\n        isVisible,\r\n        toolGroupId\r\n      );\r\n    });\r\n  };\r\n\r\n  const onToggleSegmentationVisibility = segmentationId => {\r\n    segmentationService.toggleSegmentationVisibility(segmentationId);\r\n  };\r\n\r\n  const _setSegmentationConfiguration = useCallback(\r\n    (segmentationId, key, value) => {\r\n      segmentationService.setConfiguration({\r\n        segmentationId,\r\n        [key]: value,\r\n      });\r\n    },\r\n    [segmentationService]\r\n  );\r\n\r\n  const createSegmentationForSelectedViewport = () => {\r\n    viewports.forEach(vp => {\r\n      //Select chosen active viewport to create a segmentation on\r\n      if(vp.viewportIndex === activeViewportIndex){\r\n        if(vp.viewportOptions.viewportType === 'volume3d'){\r\n          uiNotificationService.show({\r\n            title: 'Create Segmentation',\r\n            message: 'Can\\'t create segmentation in viewport 3D, select a 2D viewport',\r\n            type: 'error',\r\n          });\r\n          return\r\n        }\r\n\r\n        console.log('SEG VP', vp)\r\n        segmentationService.createSegmentationForDisplaySet(\r\n            vp.displaySetInstanceUIDs[0]\r\n        ).then(segId => {\r\n          const segmentation = segmentationService.getSegmentation(segId)\r\n          console.log('CREATED SEGMENTATION', segmentation)\r\n          segmentationService.addSegmentationRepresentationToToolGroup(\r\n              vp.viewportOptions.toolGroupId,\r\n              segId,\r\n              true,\r\n              LABELMAP\r\n          ).then(() => {\r\n            segmentationService.setActiveSegmentationForToolGroup(\r\n                segId,\r\n                vp.viewportOptions.toolGroupId\r\n            );\r\n            segmentationService.addSegment(\r\n                segId,\r\n                1,\r\n                viewports[activeViewportIndex].viewportOptions.toolGroupId,\r\n                {\r\n                  label: `Segmentation 1`,\r\n                  color: [255, 0, 0],\r\n                  opacity: 255,\r\n                  visibility: true,\r\n                  isLocked: false,\r\n                  active: true\r\n                }\r\n            )\r\n            //Add segmentation tools to toolbar\r\n            console.log('MTOOLS', toolbarService.getButtonSection('MeasurementTools', {}))\r\n            toolbarService.createButtonSection('primary', [\r\n                'MeasurementTools',\r\n                'Zoom',\r\n                'WindowLevel',\r\n                'Pan',\r\n                'Capture',\r\n                'Crosshairs',\r\n                'MoreTools',\r\n                'SegmentationTools'\r\n            ])\r\n          });\r\n\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   console.log('SEGMENTATIONS', segmentations)\r\n  // },)\r\n\r\n  const isSegmentationForDisplaySet = () => {\r\n    const displaySetUID = viewports.filter(vp => vp.viewportIndex === activeViewportIndex)[0]?.displaySetInstanceUIDs[0]\r\n    const matchingSegs = segmentations.filter(seg => seg.displaySetInstanceUID === displaySetUID)\r\n    return matchingSegs.length > 0;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col flex-auto min-h-0F mt-1\">\r\n      {/* Segmentation tool edition */}\r\n      <BaseToolEdit\r\n          segmentationService={segmentationService}\r\n          cornerstoneViewportService={cornerstoneViewportService}\r\n          toolGroupService={toolGroupService}\r\n          toolbarService={toolbarService}\r\n          commandsManager={commandsManager}\r\n      />\r\n      {isSegmentationForDisplaySet() && (\r\n          <SegmentsConfigurationImportExport\r\n              segmentationService={segmentationService}\r\n              segmentations={segmentations}\r\n          />\r\n      )}\r\n      {/* show segmentation table */}\r\n      {isSegmentationForDisplaySet() ? (\r\n        <SegmentationGroupTable\r\n          title={t('Segmentations')}\r\n          showAddSegment={true}\r\n          segmentations={segmentations}\r\n          isMinimized={isMinimized}\r\n          activeSegmentationId={selectedSegmentationId || ''}\r\n          onSegmentationClick={onSegmentationClick}\r\n          onSegmentationDelete={onSegmentationDelete}\r\n          onSegmentationEdit={onSegmentationEdit}\r\n          onSegmentClick={onSegmentClick}\r\n          onSegmentEdit={onSegmentEdit}\r\n          onSegmentAdd={onSegmentAdd}\r\n          onSegmentColorChange={onSegmentColorChange}\r\n          onSegmentDelete={onSegmentDelete}\r\n          onToggleSegmentVisibility={onToggleSegmentVisibility}\r\n          onToggleSegmentationVisibility={onToggleSegmentationVisibility}\r\n          onToggleMinimizeSegmentation={onToggleMinimizeSegmentation}\r\n          segmentationConfig={{ initialConfig: segmentationConfiguration }}\r\n          setRenderOutline={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'renderOutline',\r\n              value\r\n            )\r\n          }\r\n          setOutlineOpacityActive={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'outlineOpacity',\r\n              value\r\n            )\r\n          }\r\n          setRenderFill={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'renderFill',\r\n              value\r\n            )\r\n          }\r\n          setRenderInactiveSegmentations={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'renderInactiveSegmentations',\r\n              value\r\n            )\r\n          }\r\n          setOutlineWidthActive={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'outlineWidthActive',\r\n              value\r\n            )\r\n          }\r\n          setFillAlpha={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'fillAlpha',\r\n              value\r\n            )\r\n          }\r\n          setFillAlphaInactive={value =>\r\n            _setSegmentationConfiguration(\r\n              selectedSegmentationId,\r\n              'fillAlphaInactive',\r\n              value\r\n            )\r\n          }\r\n        />\r\n      ) : null}\r\n      {isSegmentationForDisplaySet() ? (\r\n              <SegmentationExport segmentationService={segmentationService} segmentations={segmentations}/>\r\n          ) : segmentations.length === 0 && (\r\n          <Button\r\n              className={'pt-1/10 pb-1/10'}\r\n              onClick={createSegmentationForSelectedViewport}\r\n          >\r\n            {\"Create Segmentation For Selected Viewport\"}\r\n          </Button>\r\n          )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nPanelSegmentation.propTypes = {\r\n  commandsManager: PropTypes.shape({\r\n    runCommand: PropTypes.func.isRequired,\r\n  }),\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      segmentationService: PropTypes.shape({\r\n        getSegmentation: PropTypes.func.isRequired,\r\n        getSegmentations: PropTypes.func.isRequired,\r\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import { Types } from '@ohif/core';\r\n\r\nconst segProtocol: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/seg',\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  hasUpdatedPriorsInformation: false,\r\n  name: 'Segmentations',\r\n  // Just apply this one when specifically listed\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'segDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    segDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'SEG',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'Segmentations',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: { allowUnmatchedView: true },\r\n          displaySets: [\r\n            {\r\n              id: 'segDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: segProtocol.id,\r\n      protocol: segProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\nexport { segProtocol };\r\n","import { id } from './id';\r\nimport React from 'react';\r\n\r\nimport { Types } from '@ohif/core';\r\n\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport PanelSegmentation from './panels/PanelSegmentation';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(\r\n    /* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport'\r\n  );\r\n});\r\n\r\nconst OHIFCornerstoneSEGViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule: ({\r\n    servicesManager,\r\n    commandsManager,\r\n    extensionManager,\r\n  }): Types.Panel[] => {\r\n    const wrappedPanelSegmentation = () => {\r\n      return (\r\n        <PanelSegmentation\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [\r\n      {\r\n        name: 'panelSegmentation',\r\n        iconName: 'tab-segmentation',\r\n        iconLabel: 'Segmentation',\r\n        label: 'Segmentation',\r\n        component: wrappedPanelSegmentation,\r\n      },\r\n    ];\r\n  },\r\n\r\n  getViewportModule({ servicesManager, extensionManager }) {\r\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneSEGViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [\r\n      { name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport },\r\n    ];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n  getHangingProtocolModule,\r\n};\r\n\r\nexport default extension;"],"names":["id","packageJson","SOPClassHandlerId","DicomMessage","DicomMetaDictionary","dcmjs","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","Error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","dicomLoaderService","exports","segArrayBuffer","findDicomDataPromise","dicomData","readFile","dataset","naturalizeDataset","dict","_meta","namifyDataset","meta","Array","isArray","SegmentSequence","forEach","segment","cielab","RecommendedDisplayCIELabValue","rgba","Colors","dicomlab2RGB","map","x","Math","round","push","segmentNumber","SegmentNumber","color","functionalGroups","offset","size","pixelData","label","SegmentLabel","PerFrameFunctionalGroupsSequence","functionalGroup","SegmentIdentificationSequence","ReferencedSegmentNumber","frameSize","ceil","Rows","Columns","nextOffset","segmentKey","numberOfFrames","packedSegment","PixelData","slice","BitArray","unpack","geometry","perFrame","pixelMeasures","SharedFunctionalGroupsSequence","PixelMeasuresSequence","planeOrientation","PlaneOrientationSequence","planePosition","PlanePositionSequence","spacingBetweenSlices","SpacingBetweenSlices","SliceThickness","console","log","spacing","PixelSpacing","Number","dimensions","orientation","ImageOrientationPatient","columnStepToPatient","rowStepToPatient","planeNormal","vtkMath","firstPosition","ImagePositionPatient","lastPosition","sliceStep","direction","concat","origin","geometryFromFunctionalGroups","_getPixelData","_getSegments","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","error","_load","name","getDisplaySetsFromSeries","uiDialogService","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","onClose","actions","text","type","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","DualInputRange","value1","value2","minValue","maxValue","step","unit","containerClassName","inputClassName","labelVariant","showLabel","labelPosition","trackColor","rangeValue1","setRangeValue1","useState","rangeValue2","setRangeValue2","useEffect","handleChange1","e","handleChange2","rangeValueForStr1","toFixed","rangeValueForStr2","style","flexDirection","Typography","variant","component","classNames","min","max","background","width","Button","onClick","Enums","csToolsEnums","csTools","MouseBindings","Events","listItemRenderer","DefaultListItemRenderer","t","eraseFocus","isActive","Brush_Strategies","EVENT_LISTENERS","BrushToolEdit","cornerstoneViewportService","useTranslation","isMinimized","setIsMinimized","isEraseOnlyMinimized","setIsEraseOnlyMinimized","setEraseFocus","pipetteMode","setPipetteMode","active","minimum","activeViewportIndex","viewports","viewportGridService","useViewportGrid","activeStrategy","setActiveStrategy","FILL_INSIDE_CIRCLE","brushSize","setBrushSize","circleThresholdValue","setCircleThresholdValue","setSegments","toolGroup","getCornerstoneViewportByIndex","renderingEngineId","brushInstance","getToolInstance","configuration","strategySpecificConfiguration","THRESHOLD_INSIDE_CIRCLE","threshold","segmentation","getSegmentations","filter","s","segmentIndex","args","setConfiguration","eraseFocusIndex","setToolActive","bindings","mouseButton","Primary","added","EVENTS","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","evt","subscribe","unsub","viewport","currentElement","element","addEvent","removeEventListener","addEventListener","removeEvent","setToolPassive","MOUSE_DRAG","setThresholdCallback","detail","worldPoints","currentPoints","world","imageData","getImageData","index","worldToIndex","scalarData","csUtils","yMultiple","zMultiple","stopPropagation","Icon","display","justifyContent","fullWidth","FILL_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE","ERASE_INSIDE_CIRCLE","ERASE_INSIDE_SPHERE","ListMenu","items","renderer","InputRange","vmin","vmax","Circle_Strategies","CircleScissorsToolEdit","FILL_INSIDE","cscissorsInstance","circleInstance","ERASE_INSIDE","PaintFillToolEdit","RectangleROIStartEndThresholdToolEdit","commandsManager","thresholdValue","setThresholdValue","slicesToPropagate","setSlicesToPropagate","rectangleROIInstance","numSlicesToPropagate","computeThreshold","imageVolumes","getActors","va","actorUID","referenceId","uid","cache","getVolume","iv","selectedAnnotationUIDs","annotationUID","ctVolume","imageIds","segmentationVolume","segmentations","volume","lower","upper","numSlicesToProject","overwrite","overlapType","activeSegmentIndex","deleteRegion","render","RectangleROIThresholdToolEdit","Rectangle_Strategies","RectangleScissorsToolEdit","rscissorsInstance","rectangleInstance","Sphere_Strategies","SphereScissorsToolEdit","sscissorsInstance","sphereInstance","MAX_CACHE_LENGTH","CACHE_SEGMENTATION_VOLUMES","constructor","maxLength","super","this","elements","r","excess","splice","UndoToolEdit","currentCacheIndex","setCurrentCacheIndex","MOUSE_DOWN","old_segmentation","old_seg_volume","Uint8ClampedArray","getLabelmapVolume","getScalarData","apply_replace","cacheIndex","previous_volume","replace_event","CustomEvent","oldScalarData","window","dispatchEvent","undo","redo","state","SEG_TOOL_NAMES","BaseToolEdit","toolbarService","toolGroupService","activeSegTool","setActiveSegTool","searchActiveSegTool","toolStates","toolGroups","tg","toolOptions","toolStatesArray","tool","includes","mode","unsubscribe","TOOL_BAR_STATE_MODIFIED","renderActiveTool","SegmentsConfigurationImportExport","importConfiguration","input","document","createElement","accept","onchange","_","json_file","from","files","reader","FileReader","onload","result","i","removeSegment","JSON","parse","addSegment","viewportOptions","toolGroupId","readAsText","click","exportConfiguration","json","stringify","json_blob","Blob","saveAs","propTypes","PropTypes","isRequired","SegmentationExport","isProcessingLayer","setIsProcessingLayer","processingLayerPercent","setProcessingLayerPercent","setTimeout","exportSegmentation","labelmapVolume","segments_info","existing_segment_indexes","data","Uint32Array","all_layers_blobs","layer_i","current_processed_layer","segmented_layer","fill","el","scalar_layer","allSettled","segment_index","v","mapIndexSerial","indexes_array","promise","segment_array","corresponding_segment_index","color_to_fill","index_to_color","canvas","ctx","getContext","height","imgData","ImageData","putImageData","toBlob","blob","completed_layers","waitForArray","zip","JSZip","file","generateAsync","ProgressBar","bgColor","completed","transitionDuration","transitionTimingFunction","LABELMAP","Labelmap","PanelSegmentation","uiNotificationService","selectedSegmentationId","setSelectedSegmentationId","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","setSegmentations","onToggleMinimizeSegmentation","useCallback","prevState","lastSegmentationId","getToolGroupIds","segmentationId","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","isSegmentationForDisplaySet","displaySetUID","vp","viewportIndex","displaySetInstanceUIDs","seg","SegmentationGroupTable","showAddSegment","activeSegmentationId","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationEdit","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","setActiveSegmentForSegmentation","jumpToSegmentCenter","onSegmentEdit","setSegmentLabelForSegmentation","onSegmentAdd","currentSegmentation","segmentCount","floor","random","opacity","visibility","isLocked","onSegmentColorChange","newColor","setSegmentColor","onSegmentDelete","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentationVisibility","toggleSegmentationVisibility","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","createSegmentationForSelectedViewport","viewportType","show","message","createSegmentationForDisplaySet","segId","addSegmentationRepresentationToToolGroup","getButtonSection","createButtonSection","runCommand","segProtocol","hasUpdatedPriorsInformation","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","protocol","Component","OHIFCornerstoneSEGViewport","props","fallback","getPanelModule","iconName","iconLabel","wrappedPanelSegmentation","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}