{"version":3,"file":"150.bundle.2c77453379a31b5a4668.js","mappings":"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","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.js","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/segmentationEditHandler.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ExportReports.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdSegmentation.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/utils/getSOPInstanceAttributes.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/calculateSUVPeak.ts","webpack:///../../../extensions/tmtv/src/utils/calculateTMTV.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/measurements/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/measurements/AnnotationToPointData.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/RTSSReport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.js","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/index.tsx"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","const ctAXIAL = {\n  viewportOptions: {\n    viewportId: 'ctAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'ctToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ctSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'ctSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\nconst ctCORONAL = {\n  viewportOptions: {\n    viewportId: 'ctCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'ctToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: true,\n        target: true,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n  ],\n};\n\nconst ptAXIAL = {\n  viewportOptions: {\n    viewportId: 'ptAXIAL',\n    viewportType: 'volume',\n    background: [1, 1, 1],\n    orientation: 'axial',\n    toolGroupId: 'ptToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'ptSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst ptCORONAL = {\n  viewportOptions: {\n    viewportId: 'ptCORONAL',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    background: [1, 1, 1],\n    toolGroupId: 'ptToolGroup',\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      options: {\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst fusionAXIAL = {\n  viewportOptions: {\n    viewportId: 'fusionAXIAL',\n    viewportType: 'volume',\n    orientation: 'axial',\n    toolGroupId: 'fusionToolGroup',\n    initialImageOptions: {\n      // index: 5,\n      preset: 'first', // 'first', 'last', 'middle'\n    },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'axialSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacityMapping: [{ value: 0.1, opacity: 0.9 }],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst fusionSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'fusionSAGITTAL',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'sagittalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacityMapping: [{ value: 0.1, opacity: 0.9 }],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst fusionCORONAL = {\n  viewportOptions: {\n    viewportId: 'fusionCoronal',\n    viewportType: 'volume',\n    orientation: 'coronal',\n    toolGroupId: 'fusionToolGroup',\n    // initialImageOptions: {\n    //   index: 180,\n    //   preset: 'middle', // 'first', 'last', 'middle'\n    // },\n    syncGroups: [\n      {\n        type: 'cameraPosition',\n        id: 'coronalSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ctWLSync',\n        source: false,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'fusionWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: false,\n        target: true,\n      },\n    ],\n  },\n  displaySets: [\n    {\n      id: 'ctDisplaySet',\n    },\n    {\n      options: {\n        colormap: {\n          name: 'hsv',\n          opacityMapping: [{ value: 0.1, opacity: 0.9 }],\n        },\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nconst mipSAGITTAL = {\n  viewportOptions: {\n    viewportId: 'mipSagittal',\n    viewportType: 'volume',\n    orientation: 'sagittal',\n    background: [1, 1, 1],\n    toolGroupId: 'mipToolGroup',\n    syncGroups: [\n      {\n        type: 'voi',\n        id: 'ptWLSync',\n        source: true,\n        target: true,\n      },\n      {\n        type: 'voi',\n        id: 'ptFusionWLSync',\n        source: true,\n        target: false,\n      },\n    ],\n\n    // Custom props can be used to set custom properties which extensions\n    // can react on.\n    customViewportProps: {\n      // We use viewportDisplay to filter the viewports which are displayed\n      // in mip and we set the scrollbar according to their rotation index\n      // in the cornerstone extension.\n      hideOverlays: true,\n    },\n  },\n  displaySets: [\n    {\n      options: {\n        blendMode: 'MIP',\n        slabThickness: 'fullVolume',\n        voi: {\n          custom: 'getPTVOIRange',\n        },\n        voiInverted: true,\n      },\n      id: 'ptDisplaySet',\n    },\n  ],\n};\n\nexport {\n  ctAXIAL,\n  ctSAGITTAL,\n  ctCORONAL,\n  ptAXIAL,\n  ptSAGITTAL,\n  ptCORONAL,\n  fusionAXIAL,\n  fusionSAGITTAL,\n  fusionCORONAL,\n  mipSAGITTAL,\n};\n","import {\n  ctAXIAL,\n  ctCORONAL,\n  ctSAGITTAL,\n  fusionAXIAL,\n  fusionCORONAL,\n  fusionSAGITTAL,\n  mipSAGITTAL,\n  ptAXIAL,\n  ptCORONAL,\n  ptSAGITTAL,\n} from './utils/hpViewports';\n\n/**\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\n * also camera synchronizer for each orientation\n */\nconst stage1 = {\n  name: 'default',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 3,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 0,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 1 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 2 / 4,\n          y: 2 / 3,\n          width: 1 / 4,\n          height: 1 / 3,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ctAXIAL,\n    ctSAGITTAL,\n    ctCORONAL,\n    ptAXIAL,\n    ptSAGITTAL,\n    ptCORONAL,\n    fusionAXIAL,\n    fusionSAGITTAL,\n    fusionCORONAL,\n    mipSAGITTAL,\n  ],\n  createdDate: '2021-02-23T18:32:42.850Z',\n};\n\n/**\n * The layout displays CT axial image in the top-left viewport, fusion axial image\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\n */\nconst stage2 = {\n  name: 'Fusion 2x2',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 2,\n    },\n  },\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\n};\n\n/**\n * The top row displays CT images in axial, sagittal, and coronal orientations from\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\n * and coronal orientations from left to right, respectively.\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\n * It includes synchronizers as well.\n */\nconst stage3 = {\n  name: '2x3-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 3,\n    },\n  },\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\n};\n\n/**\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\n * orientations from left to right, respectively, followed by a MIP sagittal image\n * that spans both rows on the rightmost side. The bottom row displays fusion images\n * in coronal, sagittal, and axial orientations from left to right, respectively.\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\n * from the top row spans the full height of both rows.\n * It includes synchronizers as well.\n */\nconst stage4 = {\n  name: '2x4-layout',\n  viewportStructure: {\n    layoutType: 'grid',\n    properties: {\n      rows: 2,\n      columns: 4,\n      layoutOptions: [\n        {\n          x: 0,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 3 / 4,\n          y: 0,\n          width: 1 / 4,\n          height: 1,\n        },\n        {\n          x: 0,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 1 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n        {\n          x: 2 / 4,\n          y: 1 / 2,\n          width: 1 / 4,\n          height: 1 / 2,\n        },\n      ],\n    },\n  },\n  viewports: [\n    ptCORONAL,\n    ptSAGITTAL,\n    ptAXIAL,\n    mipSAGITTAL,\n    fusionCORONAL,\n    fusionSAGITTAL,\n    fusionAXIAL,\n  ],\n};\n\nconst ptCT = {\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\n  locked: true,\n  hasUpdatedPriorsInformation: false,\n  name: 'Default',\n  createdDate: '2021-02-23T19:22:08.894Z',\n  modifiedDate: '2022-10-04T19:22:08.894Z',\n  availableTo: {},\n  editableBy: {},\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\n  protocolMatchingRules: [\n    {\n      attribute: 'ModalitiesInStudy',\n      constraint: {\n        contains: ['CT', 'PT'],\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PETCT',\n      },\n    },\n    {\n      attribute: 'StudyDescription',\n      constraint: {\n        contains: 'PET/CT',\n      },\n    },\n  ],\n  displaySetSelectors: {\n    ctDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: {\n              value: 'CT',\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT',\n          },\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'CT WB',\n          },\n        },\n      ],\n    },\n    ptDisplaySet: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'PT',\n          },\n          required: true,\n        },\n        {\n          attribute: 'isReconstructable',\n          constraint: {\n            equals: {\n              value: true,\n            },\n          },\n          required: true,\n        },\n        {\n          attribute: 'SeriesDescription',\n          constraint: {\n            contains: 'Corrected',\n          },\n        },\n        {\n          weight: 2,\n          attribute: 'SeriesDescription',\n          constraint: {\n            doesNotContain: {\n              value: 'Uncorrected',\n            },\n          },\n        },\n      ],\n    },\n  },\n\n  stages: [stage1, stage2, stage3, stage4],\n  numberOfPriorsReferenced: -1,\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: ptCT.id,\n      protocol: ptCT,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from '@ohif/ui';\nimport { DicomMetadataStore, ServicesManager } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\n\nconst DEFAULT_MEATADATA = {\n  PatientWeight: null,\n  PatientSex: null,\n  SeriesTime: null,\n  RadiopharmaceuticalInformationSequence: {\n    RadionuclideTotalDose: null,\n    RadionuclideHalfLife: null,\n    RadiopharmaceuticalStartTime: null,\n  },\n};\n\n/*\n * PETSUV panel enables the user to modify the patient related information, such as\n * patient sex, patientWeight. This is allowed since\n * sometimes these metadata are missing or wrong. By changing them\n * @param param0\n * @returns\n */\nexport default function PanelPetSUV({ servicesManager, commandsManager }) {\n  const { t } = useTranslation('PanelSUV');\n  const {\n    displaySetService,\n    toolGroupService,\n    toolbarService,\n    hangingProtocolService,\n  } = (servicesManager as ServicesManager).services;\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\n\n  const handleMetadataChange = metadata => {\n    setMetadata(prevState => {\n      const newState = { ...prevState };\n      Object.keys(metadata).forEach(key => {\n        if (typeof metadata[key] === 'object') {\n          newState[key] = {\n            ...prevState[key],\n            ...metadata[key],\n          };\n        } else {\n          newState[key] = metadata[key];\n        }\n      });\n      return newState;\n    });\n  };\n\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\n      viewportMatchDetails,\n    });\n\n    if (!ptDisplaySet) {\n      return;\n    }\n\n    const metadata = commandsManager.runCommand('getPTMetadata', {\n      ptDisplaySet,\n    });\n\n    return {\n      ptDisplaySet,\n      metadata,\n    };\n  };\n\n  useEffect(() => {\n    const displaySets = displaySetService.getActiveDisplaySets();\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    if (!displaySets.length) {\n      return;\n    }\n\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n    if (!displaySetInfo) {\n      return;\n    }\n\n    const { ptDisplaySet, metadata } = displaySetInfo;\n    setPtDisplaySet(ptDisplaySet);\n    setMetadata(metadata);\n  }, []);\n\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\n  useEffect(() => {\n    const { unsubscribe } = hangingProtocolService.subscribe(\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\n      ({ viewportMatchDetails }) => {\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\n\n        if (!displaySetInfo) {\n          return;\n        }\n        const { ptDisplaySet, metadata } = displaySetInfo;\n        setPtDisplaySet(ptDisplaySet);\n        setMetadata(metadata);\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  function updateMetadata() {\n    if (!ptDisplaySet) {\n      throw new Error('No ptDisplaySet found');\n    }\n\n    const toolGroupIds = toolGroupService.getToolGroupIds();\n\n    // Todo: we don't have a proper way to perform a toggle command and update the\n    // state for the toolbar, so here, we manually toggle the toolbar\n\n    // Todo: Crosshairs have bugs for the camera reset currently, so we need to\n    // force turn it off before we update the metadata\n    toolGroupIds.forEach(toolGroupId => {\n      commandsManager.runCommand('toggleCrosshairs', {\n        toolGroupId,\n        toggledState: false,\n      });\n    });\n\n    toolbarService.state.toggles['Crosshairs'] = false;\n    toolbarService._broadcastEvent(\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED\n    );\n\n    // metadata should be dcmjs naturalized\n    DicomMetadataStore.updateMetadataForSeries(\n      ptDisplaySet.StudyInstanceUID,\n      ptDisplaySet.SeriesInstanceUID,\n      metadata\n    );\n\n    // update the displaySets\n    displaySetService.setDisplaySetMetadataInvalidated(\n      ptDisplaySet.displaySetInstanceUID\n    );\n  }\n  return (\n    <div className=\"overflow-x-hidden overflow-y-auto invisible-scrollbar\">\n      {\n        <div className=\"flex flex-col\">\n          <div className=\"flex flex-col p-4 space-y-4 bg-primary-dark\">\n            <Input\n              label={t('Patient Sex')}\n              labelClassName=\"text-white mb-2\"\n              className=\"mt-1\"\n              value={metadata.PatientSex || ''}\n              onChange={e => {\n                handleMetadataChange({\n                  PatientSex: e.target.value,\n                });\n              }}\n            />\n            <Input\n              label={t('Patient Weight (kg)')}\n              labelClassName=\"text-white mb-2\"\n              className=\"mt-1\"\n              value={metadata.PatientWeight || ''}\n              onChange={e => {\n                handleMetadataChange({\n                  PatientWeight: e.target.value,\n                });\n              }}\n            />\n            <Input\n              label={t('Total Dose (bq)')}\n              labelClassName=\"text-white mb-2\"\n              className=\"mt-1\"\n              value={\n                metadata.RadiopharmaceuticalInformationSequence\n                  .RadionuclideTotalDose || ''\n              }\n              onChange={e => {\n                handleMetadataChange({\n                  RadiopharmaceuticalInformationSequence: {\n                    RadionuclideTotalDose: e.target.value,\n                  },\n                });\n              }}\n            />\n            <Input\n              label={t('Half Life (s)')}\n              labelClassName=\"text-white mb-2\"\n              className=\"mt-1\"\n              value={\n                metadata.RadiopharmaceuticalInformationSequence\n                  .RadionuclideHalfLife || ''\n              }\n              onChange={e => {\n                handleMetadataChange({\n                  RadiopharmaceuticalInformationSequence: {\n                    RadionuclideHalfLife: e.target.value,\n                  },\n                });\n              }}\n            />\n            <Input\n              label={t('Injection Time (s)')}\n              labelClassName=\"text-white mb-2\"\n              className=\"mt-1\"\n              value={\n                metadata.RadiopharmaceuticalInformationSequence\n                  .RadiopharmaceuticalStartTime || ''\n              }\n              onChange={e => {\n                handleMetadataChange({\n                  RadiopharmaceuticalInformationSequence: {\n                    RadiopharmaceuticalStartTime: e.target.value,\n                  },\n                });\n              }}\n            />\n            <Input\n              label={t('Acquisition Time (s)')}\n              labelClassName=\"text-white mb-2\"\n              className=\"mt-1 mb-2\"\n              value={metadata.SeriesTime || ''}\n              onChange={() => {}}\n            />\n            <Button color=\"primary\" onClick={updateMetadata}>\n              Reload Data\n            </Button>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nPanelPetSUV.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      measurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Input, Dialog } from '@ohif/ui';\n\nfunction segmentationItemEditHandler({ id, servicesManager }) {\n  const { segmentationService, uiDialogService } = servicesManager.services;\n\n  const segmentation = segmentationService.getSegmentation(id);\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save': {\n        segmentationService.addOrUpdateSegmentation(\n          {\n            ...segmentation,\n            ...value,\n          },\n          false, // don't suppress event\n          true // it should update cornerstone\n        );\n      }\n    }\n    uiDialogService.dismiss({ id: 'enter-annotation' });\n  };\n\n  uiDialogService.create({\n    id: 'enter-annotation',\n    centralize: true,\n    isDraggable: false,\n    showOverlay: true,\n    content: Dialog,\n    contentProps: {\n      title: 'Enter your Segmentation',\n      noCloseButton: true,\n      value: { label: segmentation.label || '' },\n      body: ({ value, setValue }) => {\n        const onChangeHandler = event => {\n          event.persist();\n          setValue(value => ({ ...value, label: event.target.value }));\n        };\n\n        const onKeyPressHandler = event => {\n          if (event.key === 'Enter') {\n            onSubmitHandler({ value, action: { id: 'save' } });\n          }\n        };\n        return (\n          <div className=\"p-4 bg-primary-dark\">\n            <Input\n              autoFocus\n              className=\"mt-2 bg-black border-primary-main\"\n              type=\"text\"\n              containerClassName=\"mr-2\"\n              value={value.label}\n              onChange={onChangeHandler}\n              onKeyPress={onKeyPressHandler}\n            />\n          </div>\n        );\n      },\n      actions: [\n        // temp: swap button types until colors are updated\n        { id: 'cancel', text: 'Cancel', type: 'primary' },\n        { id: 'save', text: 'Save', type: 'secondary' },\n      ],\n      onSubmit: onSubmitHandler,\n    },\n  });\n}\n\nexport default segmentationItemEditHandler;\n","import React from 'react';\nimport { Button, ButtonGroup } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nfunction ExportReports({ segmentations, tmtvValue, config, commandsManager }) {\n  const { t } = useTranslation('PanelSUVExport');\n\n  return (\n    <>\n      {segmentations?.length ? (\n        <div className=\"flex justify-center mt-4 space-x-2\">\n          <ButtonGroup color=\"black\" size=\"inherit\">\n            <Button\n              className=\"px-2 py-2 text-base\"\n              disabled={tmtvValue === null}\n              onClick={() => {\n                commandsManager.runCommand('exportTMTVReportCSV', {\n                  segmentations,\n                  tmtv: tmtvValue,\n                  config,\n                });\n              }}\n            >\n              {t('Export CSV')}\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup color=\"black\" size=\"inherit\">\n            <Button\n              className=\"px-2 py-2 text-base\"\n              onClick={() => {\n                commandsManager.runCommand('createTMTVRTReport');\n              }}\n              disabled={tmtvValue === null}\n            >\n              {t('Create RT Report')}\n            </Button>\n          </ButtonGroup>\n        </div>\n      ) : null}\n    </>\n  );\n}\n\nexport default ExportReports;\n","import React from 'react';\nimport { Input, Label, Select, Button, ButtonGroup } from '@ohif/ui';\nimport { useTranslation } from 'react-i18next';\n\nexport const ROI_STAT = 'roi_stat';\nconst RANGE = 'range';\n\nconst options = [\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\n];\n\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\n  const { t } = useTranslation('ROIThresholdConfiguration');\n\n  return (\n    <div className=\"flex flex-col px-4 space-y-4 bg-primary-dark py-2\">\n      <div className=\"flex items-end space-x-2\">\n        <div className=\"flex flex-col w-1/2\">\n          <Select\n            label={t('Strategy')}\n            closeMenuOnSelect={true}\n            className=\"mr-2 bg-black border-primary-main text-white \"\n            options={options}\n            placeholder={\n              options.find(option => option.value === config.strategy)\n                .placeHolder\n            }\n            value={config.strategy}\n            onChange={({ value }) => {\n              dispatch({\n                type: 'setStrategy',\n                payload: {\n                  strategy: value,\n                },\n              });\n            }}\n          />\n        </div>\n        <div className=\"w-1/2\">\n          <ButtonGroup>\n            <Button\n              size=\"initial\"\n              className=\"px-2 py-2 text-base text-white\"\n              color=\"primaryLight\"\n              variant=\"outlined\"\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\n            >\n              {t('Start')}\n            </Button>\n            <Button\n              size=\"initial\"\n              color=\"primaryLight\"\n              variant=\"outlined\"\n              className=\"px-2 py-2 text-base text-white\"\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\n            >\n              {t('End')}\n            </Button>\n          </ButtonGroup>\n        </div>\n      </div>\n\n      {config.strategy === ROI_STAT && (\n        <Input\n          label={t('Percentage of Max SUV')}\n          labelClassName=\"text-white\"\n          className=\"mt-2 bg-black border-primary-main\"\n          type=\"text\"\n          containerClassName=\"mr-2\"\n          value={config.weight}\n          onChange={e => {\n            dispatch({\n              type: 'setWeight',\n              payload: {\n                weight: e.target.value,\n              },\n            });\n          }}\n        />\n      )}\n      {config.strategy !== ROI_STAT && (\n        <div className=\"text-sm mr-2\">\n          <table>\n            <tbody>\n              <tr className=\"mt-2\">\n                <td className=\"pr-4 pt-2\" colSpan=\"3\">\n                  <Label\n                    className=\"text-white\"\n                    text=\"Lower & Upper Ranges\"\n                  ></Label>\n                </td>\n              </tr>\n              <tr className=\"mt-2\">\n                <td className=\"text-center pr-4 pt-2\">\n                  <Label className=\"text-white\" text=\"CT\"></Label>\n                </td>\n                <td>\n                  <div className=\"flex justify-between\">\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"mt-2 bg-black border-primary-main\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ctLower}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ctLower: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"mt-2 bg-black border-primary-main\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ctUpper}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ctUpper: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                </td>\n              </tr>\n              <tr>\n                <td className=\"text-center pr-4 pt-2\">\n                  <Label className=\"text-white\" text=\"PT\"></Label>\n                </td>\n                <td>\n                  <div className=\"flex justify-between\">\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"mt-2 bg-black border-primary-main\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ptLower}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ptLower: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                    <Input\n                      label={t('')}\n                      labelClassName=\"text-white\"\n                      className=\"mt-2 bg-black border-primary-main\"\n                      type=\"text\"\n                      containerClassName=\"mr-2\"\n                      value={config.ptUpper}\n                      onChange={e => {\n                        dispatch({\n                          type: 'setThreshold',\n                          payload: {\n                            ptUpper: e.target.value,\n                          },\n                        });\n                      }}\n                    />\n                  </div>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ROIThresholdConfiguration;\n","import React, { useEffect, useState, useCallback, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { SegmentationTable, Button, Icon } from '@ohif/ui';\n\nimport { useTranslation } from 'react-i18next';\nimport segmentationEditHandler from './segmentationEditHandler';\nimport ExportReports from './ExportReports';\nimport ROIThresholdConfiguration, {\n  ROI_STAT,\n} from './ROIThresholdConfiguration';\n\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\nconst DEFAULT_STRATEGY = ROI_STAT;\n\nfunction reducer(state, action) {\n  const { payload } = action;\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\n\n  switch (action.type) {\n    case 'setStrategy':\n      return {\n        ...state,\n        strategy,\n      };\n    case 'setThreshold':\n      return {\n        ...state,\n        ctLower: ctLower ? ctLower : state.ctLower,\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\n        ptLower: ptLower ? ptLower : state.ptLower,\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\n      };\n    case 'setWeight':\n      return {\n        ...state,\n        weight,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default function PanelRoiThresholdSegmentation({\n  servicesManager,\n  commandsManager,\n}) {\n  const { segmentationService } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSUV');\n  const [showConfig, setShowConfig] = useState(false);\n  const [labelmapLoading, setLabelmapLoading] = useState(false);\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [segmentations, setSegmentations] = useState(() =>\n    segmentationService.getSegmentations()\n  );\n\n  const [config, dispatch] = useReducer(reducer, {\n    strategy: DEFAULT_STRATEGY,\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\n    weight: WEIGHT_DEFAULT,\n  });\n\n  const [tmtvValue, setTmtvValue] = useState(null);\n\n  const runCommand = useCallback(\n    (commandName, commandOptions = {}) => {\n      return commandsManager.runCommand(commandName, commandOptions);\n    },\n    [commandsManager]\n  );\n\n  const handleTMTVCalculation = useCallback(() => {\n    const tmtv = runCommand('calculateTMTV', { segmentations });\n\n    if (tmtv !== undefined) {\n      setTmtvValue(tmtv.toFixed(2));\n    }\n  }, [segmentations, runCommand]);\n\n  const handleROIThresholding = useCallback(() => {\n    const labelmap = runCommand('thresholdSegmentationByRectangleROITool', {\n      segmentationId: selectedSegmentationId,\n      config,\n    });\n\n    const lesionStats = runCommand('getLesionStats', { labelmap });\n    const suvPeak = runCommand('calculateSuvPeak', { labelmap });\n    const lesionGlyoclysisStats = lesionStats.volume * lesionStats.meanValue;\n\n    // update segDetails with the suv peak for the active segmentation\n    const segmentation = segmentationService.getSegmentation(\n      selectedSegmentationId\n    );\n\n    const cachedStats = {\n      lesionStats,\n      suvPeak,\n      lesionGlyoclysisStats,\n    };\n\n    const notYetUpdatedAtSource = true;\n    segmentationService.addOrUpdateSegmentation(\n      {\n        ...segmentation,\n        ...Object.assign(segmentation.cachedStats, cachedStats),\n        displayText: [`SUV Peak: ${suvPeak.suvPeak.toFixed(2)}`],\n      },\n      notYetUpdatedAtSource\n    );\n\n    handleTMTVCalculation();\n  }, [selectedSegmentationId, config]);\n\n  /**\n   * Update UI based on segmentation changes (added, removed, updated)\n   */\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const subscriptions = [];\n\n    [added, updated].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\n      () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n\n        if (segmentations.length > 0) {\n          setSelectedSegmentationId(segmentations[0].id);\n          handleTMTVCalculation();\n        } else {\n          setSelectedSegmentationId(null);\n          setTmtvValue(null);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  /**\n   * Whenever the segmentations change, update the TMTV calculations\n   */\n  useEffect(() => {\n    if (!selectedSegmentationId && segmentations.length > 0) {\n      setSelectedSegmentationId(segmentations[0].id);\n    }\n\n    handleTMTVCalculation();\n  }, [segmentations, selectedSegmentationId]);\n\n  return (\n    <>\n      <div className=\"flex flex-col\">\n        <div className=\"overflow-x-hidden overflow-y-auto invisible-scrollbar\">\n          <div className=\"flex mx-4 my-4 mb-4 space-x-4\">\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                setLabelmapLoading(true);\n                setTimeout(() => {\n                  runCommand('createNewLabelmapFromPT').then(segmentationId => {\n                    setLabelmapLoading(false);\n                    setSelectedSegmentationId(segmentationId);\n                  });\n                });\n              }}\n            >\n              {labelmapLoading ? 'loading ...' : 'New Label'}\n            </Button>\n            <Button color=\"primary\" onClick={handleROIThresholding}>\n              Run\n            </Button>\n          </div>\n          <div\n            className=\"flex items-center justify-around h-8 mb-2 border-t outline-none cursor-pointer select-none bg-secondary-dark first:border-0 border-secondary-light\"\n            onClick={() => {\n              setShowConfig(!showConfig);\n            }}\n          >\n            <div className=\"px-4 text-base text-white\">\n              {t('ROI Threshold Configuration')}\n            </div>\n          </div>\n          {showConfig && (\n            <ROIThresholdConfiguration\n              config={config}\n              dispatch={dispatch}\n              runCommand={runCommand}\n            />\n          )}\n          {/* show segmentation table */}\n          <div className=\"mt-4\">\n            {segmentations?.length ? (\n              <SegmentationTable\n                title={t('Segmentations')}\n                segmentations={segmentations}\n                activeSegmentationId={selectedSegmentationId}\n                onClick={id => {\n                  runCommand('setSegmentationActiveForToolGroups', {\n                    segmentationId: id,\n                  });\n                  setSelectedSegmentationId(id);\n                }}\n                onToggleVisibility={id => {\n                  segmentationService.toggleSegmentationVisibility(id);\n                }}\n                onToggleVisibilityAll={ids => {\n                  ids.map(id => {\n                    segmentationService.toggleSegmentationVisibility(id);\n                  });\n                }}\n                onDelete={id => {\n                  segmentationService.remove(id);\n                }}\n                onEdit={id => {\n                  segmentationEditHandler({\n                    id,\n                    servicesManager,\n                  });\n                }}\n              />\n            ) : null}\n          </div>\n          {tmtvValue !== null ? (\n            <div className=\"flex items-baseline justify-between px-2 py-1 mt-4 bg-secondary-dark\">\n              <span className=\"text-base font-bold tracking-widest text-white uppercase\">\n                {'TMTV:'}\n              </span>\n              <div className=\"text-white\">{`${tmtvValue} mL`}</div>\n            </div>\n          ) : null}\n          <ExportReports\n            segmentations={segmentations}\n            tmtvValue={tmtvValue}\n            config={config}\n            commandsManager={commandsManager}\n          />\n        </div>\n      </div>\n      <div\n        className=\"opacity-50 hover:opacity-80 flex items-center justify-center text-blue-400 mt-auto cursor-pointer mb-4\"\n        onClick={() => {\n          // navigate to a url in a new tab\n          window.open(\n            'https://github.com/OHIF/Viewers/blob/master/modes/tmtv/README.md',\n            '_blank'\n          );\n        }}\n      >\n        <Icon\n          width=\"15px\"\n          height=\"15px\"\n          name={'info'}\n          className={'text-primary-active ml-4 mr-3'}\n        />\n        <span>{'User Guide'}</span>\n      </div>\n    </>\n  );\n}\n\nPanelRoiThresholdSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import PanelROIThresholdSegmentation from './PanelROIThresholdSegmentation';\n\nexport default PanelROIThresholdSegmentation;\n","import React from 'react';\nimport { PanelPetSUV, PanelROIThresholdSegmentation } from './Panels';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nfunction getPanelModule({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}) {\n  const wrappedPanelPetSuv = () => {\n    return (\n      <PanelPetSUV\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  const wrappedROIThresholdSeg = () => {\n    return (\n      <PanelROIThresholdSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'petSUV',\n      iconName: 'tab-patient-info',\n      iconLabel: 'PET SUV',\n      label: 'PET SUV',\n      component: wrappedPanelPetSuv,\n    },\n    {\n      name: 'ROIThresholdSeg',\n      iconName: 'tab-roi-threshold',\n      iconLabel: 'ROI Threshold',\n      label: 'ROI Threshold',\n      component: wrappedROIThresholdSeg,\n    },\n  ];\n}\n\nexport default getPanelModule;\n","export default ['RectangleROIStartEndThreshold'];\n","import { metaData } from '@cornerstonejs/core';\n\nexport default function getSOPInstanceAttributes(imageId) {\n  if (imageId) {\n    return _getUIDFromImageID(imageId);\n  }\n}\n\nfunction _getUIDFromImageID(imageId) {\n  const instance = metaData.get('instance', imageId);\n\n  return {\n    SOPInstanceUID: instance.SOPInstanceUID,\n    SeriesInstanceUID: instance.SeriesInstanceUID,\n    StudyInstanceUID: instance.StudyInstanceUID,\n    frameNumber: instance.frameNumber || 1,\n  };\n}\n","import SUPPORTED_TOOLS from './constants/supportedTools';\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\n\nconst RectangleROIStartEndThreshold = {\n  toAnnotation: (measurement, definition) => {},\n\n  /**\n   * Maps cornerstone annotation event data to measurement service format.\n   *\n   * @param {Object} cornerstone Cornerstone event data\n   * @return {Measurement} Measurement instance\n   */\n  toMeasurement: (\n    csToolsEventDetail,\n    displaySetService,\n    cornerstoneViewportService\n  ) => {\n    const { annotation, viewportId } = csToolsEventDetail;\n    const { metadata, data, annotationUID } = annotation;\n\n    if (!metadata || !data) {\n      console.warn('Length tool: Missing metadata or data');\n      return null;\n    }\n\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\n\n    if (!validToolType) {\n      throw new Error('Tool not supported');\n    }\n\n    const {\n      SOPInstanceUID,\n      SeriesInstanceUID,\n      StudyInstanceUID,\n    } = getSOPInstanceAttributes(\n      referencedImageId,\n      cornerstoneViewportService,\n      viewportId\n    );\n\n    let displaySet;\n\n    if (SOPInstanceUID) {\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\n        SOPInstanceUID,\n        SeriesInstanceUID\n      );\n    } else {\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\n    }\n\n    const { cachedStats } = data;\n\n    return {\n      uid: annotationUID,\n      SOPInstanceUID,\n      FrameOfReferenceUID,\n      // points,\n      metadata,\n      referenceSeriesUID: SeriesInstanceUID,\n      referenceStudyUID: StudyInstanceUID,\n      toolName: metadata.toolName,\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\n      label: metadata.label,\n      // displayText: displayText,\n      data: data.cachedStats,\n      type: 'RectangleROIStartEndThreshold',\n      // getReport,\n    };\n  },\n};\n\nexport default RectangleROIStartEndThreshold;\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\n\nconst measurementServiceMappingsFactory = (\n  measurementService,\n  displaySetService,\n  cornerstoneViewportService\n) => {\n  return {\n    RectangleROIStartEndThreshold: {\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\n      toMeasurement: csToolsAnnotation =>\n        RectangleROIStartEndThreshold.toMeasurement(\n          csToolsAnnotation,\n          displaySetService,\n          cornerstoneViewportService\n        ),\n      matchingCriteria: [\n        {\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\n        },\n      ],\n    },\n  };\n};\n\nexport default measurementServiceMappingsFactory;\n","import {\n  addTool,\n  RectangleROIStartEndThresholdTool,\n} from '@cornerstonejs/tools';\nimport { utilities } from '@cornerstonejs/core';\n\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\nimport colormaps from './utils/colormaps';\n\nconst { registerColormap } = utilities.colormap;\n\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\n/**\n *\n * @param {Object} servicesManager\n * @param {Object} configuration\n * @param {Object|Array} configuration.csToolsConfig\n */\nexport default function init({ servicesManager, extensionManager }) {\n  const {\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  addTool(RectangleROIStartEndThresholdTool);\n\n  const { RectangleROIStartEndThreshold } = measurementServiceMappingsFactory(\n    measurementService,\n    displaySetService,\n    cornerstoneViewportService\n  );\n\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\n  );\n\n  measurementService.addMapping(\n    csTools3DVer1MeasurementSource,\n    'RectangleROIStartEndThreshold',\n    RectangleROIStartEndThreshold.matchingCriteria,\n    RectangleROIStartEndThreshold.toAnnotation,\n    RectangleROIStartEndThreshold.toMeasurement\n  );\n\n  colormaps.forEach(registerColormap);\n}\n","import * as csTools from '@cornerstonejs/tools';\n\nfunction getRoiStats(referencedVolume, annotations) {\n  // roiStats\n  const { imageData } = referencedVolume;\n  const values = imageData\n    .getPointData()\n    .getScalars()\n    .getData();\n\n  // Todo: add support for other strategies\n  const { fn, baseValue } = _getStrategyFn('max');\n  let value = baseValue;\n\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\n    annotations,\n    referencedVolume\n  );\n\n  const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n\n  for (let i = iMin; i <= iMax; i++) {\n    for (let j = jMin; j <= jMax; j++) {\n      for (let k = kMin; k <= kMax; k++) {\n        const offset = imageData.computeOffsetIndex([i, j, k]);\n        value = fn(values[offset], value);\n      }\n    }\n  }\n  return value;\n}\n\nfunction getThresholdValues(\n  annotationUIDs,\n  referencedVolumes,\n  config\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\n  if (config.strategy === 'range') {\n    return {\n      ptLower: Number(config.ptLower),\n      ptUpper: Number(config.ptUpper),\n      ctLower: Number(config.ctLower),\n      ctUpper: Number(config.ctUpper),\n    };\n  }\n\n  const { weight } = config;\n  const annotations = annotationUIDs.map(annotationUID =>\n    csTools.annotation.state.getAnnotation(annotationUID)\n  );\n\n  const ptValue = getRoiStats(referencedVolumes[0], annotations);\n\n  return {\n    ctLower: -Infinity,\n    ctUpper: +Infinity,\n    ptLower: weight * ptValue,\n    ptUpper: +Infinity,\n  };\n}\n\nfunction _getStrategyFn(\n  statistic\n): { fn: (a: number, b: number) => number; baseValue: number } {\n  const baseValue = -Infinity;\n  const fn = (number, maxValue) => {\n    if (number > maxValue) {\n      maxValue = number;\n    }\n    return maxValue;\n  };\n  return { fn, baseValue };\n}\n\nexport default getThresholdValues;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\nimport { vec3 } from 'gl-matrix';\n\ntype AnnotationsForThresholding = {\n  data: {\n    handles: {\n      points: Types.Point3[];\n    };\n    cachedStats?: {\n      projectionPoints?: Types.Point3[][];\n    };\n  };\n};\n\n/**\n * This method calculates the SUV peak on a segmented ROI from a reference PET\n * volume. If a rectangle annotation is provided, the peak is calculated within that\n * rectangle. Otherwise, the calculation is performed on the entire volume which\n * will be slower but same result.\n * @param viewport Viewport to use for the calculation\n * @param labelmap Labelmap from which the mask is taken\n * @param referenceVolume PET volume to use for SUV calculation\n * @param toolData [Optional] list of toolData to use for SUV calculation\n * @param segmentIndex The index of the segment to use for masking\n * @returns\n */\nfunction calculateSuvPeak(\n  labelmap: Types.IImageVolume,\n  referenceVolume: Types.IImageVolume,\n  annotations?: AnnotationsForThresholding[],\n  segmentIndex = 1\n): {\n  max: number;\n  maxIJK: Types.Point3;\n  maxLPS: Types.Point3;\n  mean: number;\n} {\n  if (referenceVolume.metadata.Modality !== 'PT') {\n    return;\n  }\n\n  if (labelmap.scalarData.length !== referenceVolume.scalarData.length) {\n    throw new Error(\n      'labelmap and referenceVolume must have the same number of pixels'\n    );\n  }\n\n  const {\n    scalarData: labelmapData,\n    dimensions,\n    imageData: labelmapImageData,\n  } = labelmap;\n\n  const {\n    scalarData: referenceVolumeData,\n    imageData: referenceVolumeImageData,\n  } = referenceVolume;\n\n  let boundsIJK;\n  // Todo: using the first annotation for now\n  if (annotations && annotations[0].data?.cachedStats) {\n    const { projectionPoints } = annotations[0].data.cachedStats;\n    const pointsToUse = [].concat(...projectionPoints); // cannot use flat() because of typescript compiler right now\n\n    const rectangleCornersIJK = pointsToUse.map(world => {\n      const ijk = vec3.fromValues(0, 0, 0);\n      referenceVolumeImageData.worldToIndex(world, ijk);\n      return ijk as Types.Point3;\n    });\n\n    boundsIJK = utilities.boundingBox.getBoundingBoxAroundShape(\n      rectangleCornersIJK,\n      dimensions\n    );\n  }\n\n  let max = 0;\n  let maxIJK = [0, 0, 0];\n  let maxLPS = [0, 0, 0];\n\n  const callback = ({ pointIJK, pointLPS }) => {\n    const offset = referenceVolumeImageData.computeOffsetIndex(pointIJK);\n    const value = labelmapData[offset];\n\n    if (value !== segmentIndex) {\n      return;\n    }\n\n    const referenceValue = referenceVolumeData[offset];\n\n    if (referenceValue > max) {\n      max = referenceValue;\n      maxIJK = pointIJK;\n      maxLPS = pointLPS;\n    }\n  };\n\n  utilities.pointInShapeCallback(\n    labelmapImageData,\n    () => true,\n    callback,\n    boundsIJK\n  );\n\n  const direction = labelmapImageData\n    .getDirection()\n    .slice(0, 3) as Types.Point3;\n\n  /**\n   * 2. Find the bottom and top of the great circle for the second sphere (1cc sphere)\n   * V = (4/3)πr3\n   */\n  const radius = Math.pow(1 / ((4 / 3) * Math.PI), 1 / 3) * 10;\n  const diameter = radius * 2;\n\n  const secondaryCircleWorld = vec3.create();\n  const bottomWorld = vec3.create();\n  const topWorld = vec3.create();\n  referenceVolumeImageData.indexToWorld(<vec3>maxIJK, secondaryCircleWorld);\n  vec3.scaleAndAdd(bottomWorld, secondaryCircleWorld, direction, -diameter / 2);\n  vec3.scaleAndAdd(topWorld, secondaryCircleWorld, direction, diameter / 2);\n  const suvPeakCirclePoints = [bottomWorld, topWorld] as [\n    Types.Point3,\n    Types.Point3\n  ];\n\n  /**\n   * 3. Find the Mean and Max of the 1cc sphere centered on the suv Max of the previous\n   * sphere\n   */\n  let count = 0;\n  let acc = 0;\n  const suvPeakMeanCallback = ({ value }) => {\n    acc += value;\n    count += 1;\n  };\n\n  utilities.pointInSurroundingSphereCallback(\n    referenceVolumeImageData,\n    suvPeakCirclePoints,\n    suvPeakMeanCallback\n  );\n\n  const mean = acc / count;\n\n  return {\n    max,\n    maxIJK,\n    maxLPS,\n    mean,\n  };\n}\n\nexport default calculateSuvPeak;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions),\n * and a referenceVolume, it calculates the total metabolic tumor volume (TMTV)\n * by flattening and rasterizing each segment into a single labelmap and summing\n * the total number of volume voxels. It should be noted that for this calculation\n * we do not double count voxels that are part of multiple labelmaps.\n * @param {} labelmaps\n * @param {number} segmentIndex\n * @returns {number} TMTV in ml\n */\nfunction calculateTMTV(\n  labelmaps: Array<Types.IImageVolume>,\n  segmentIndex = 1\n): number {\n  const volumeId = 'mergedLabelmap';\n\n  const mergedLabelmap = utilities.segmentation.createMergedLabelmapForIndex(\n    labelmaps,\n    segmentIndex,\n    volumeId\n  );\n\n  const { imageData, spacing } = mergedLabelmap;\n  const values = imageData\n    .getPointData()\n    .getScalars()\n    .getData();\n\n  // count non-zero values inside the outputData, this would\n  // consider the overlapping regions to be only counted once\n  const numVoxels = values.reduce((acc, curr) => {\n    if (curr > 0) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n\n  return 1e-3 * numVoxels * spacing[0] * spacing[1] * spacing[2];\n}\n\nexport default calculateTMTV;\n","// comment\nclass RectangleROIStartEndThreshold {\n  constructor() {}\n\n  static getContourSequence(toolData, metadataProvider) {\n    const { data } = toolData;\n    const { projectionPoints, projectionPointsImageIds } = data.cachedStats;\n\n    return projectionPoints.map((point, index) => {\n      const ContourData = getPointData(point);\n      const ContourImageSequence = getContourImageSequence(\n        projectionPointsImageIds[index],\n        metadataProvider\n      );\n\n      return {\n        NumberOfContourPoints: ContourData.length / 3,\n        ContourImageSequence,\n        ContourGeometricType: 'CLOSED_PLANAR',\n        ContourData,\n      };\n    });\n  }\n}\n\nRectangleROIStartEndThreshold.toolName = 'RectangleROIStartEndThreshold';\n\nfunction getPointData(points) {\n  // Since this is a closed contour, the order of the points is important.\n  // re-order the points to be in the correct order clockwise\n  // Spread to make sure Float32Arrays are converted to arrays\n  const orderedPoints = [\n    ...points[0],\n    ...points[1],\n    ...points[3],\n    ...points[2],\n  ];\n  const pointsArray = orderedPoints.flat();\n\n  // reduce the precision of the points to 2 decimal places\n  const pointsArrayWithPrecision = pointsArray.map(point => {\n    return point.toFixed(2);\n  });\n\n  return pointsArrayWithPrecision;\n}\n\nfunction getContourImageSequence(imageId, metadataProvider) {\n  const sopCommon = metadataProvider.get('sopCommonModule', imageId);\n\n  return {\n    ReferencedSOPClassUID: sopCommon.sopClassUID,\n    ReferencedSOPInstanceUID: sopCommon.sopInstanceUID,\n  };\n}\nexport default RectangleROIStartEndThreshold;\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\n\nfunction validateAnnotation(annotation) {\n  if (!annotation?.data) {\n    throw new Error('Tool data is empty');\n  }\n\n  if (!annotation.metadata || annotation.metadata.referenceImageId) {\n    throw new Error('Tool data is not associated with any imageId');\n  }\n}\n\nclass AnnotationToPointData {\n  constructor() {}\n\n  static convert(annotation, index, metadataProvider) {\n    validateAnnotation(annotation);\n\n    const { toolName } = annotation.metadata;\n    const toolClass = AnnotationToPointData.TOOL_NAMES[toolName];\n\n    if (!toolClass) {\n      throw new Error(\n        `Unknown tool type: ${toolName}, cannot convert to RTSSReport`\n      );\n    }\n\n    // Each toolData should become a list of contours, ContourSequence\n    // contains a list of contours with their pointData, their geometry\n    // type and their length.\n    const ContourSequence = toolClass.getContourSequence(\n      annotation,\n      metadataProvider\n    );\n\n    // Todo: random rgb color for now, options should be passed in\n    const color = [\n      Math.floor(Math.random() * 255),\n      Math.floor(Math.random() * 255),\n      Math.floor(Math.random() * 255),\n    ];\n\n    return {\n      ReferencedROINumber: index + 1,\n      ROIDisplayColor: color,\n      ContourSequence,\n    };\n  }\n\n  static register(toolClass) {\n    AnnotationToPointData.TOOL_NAMES[toolClass.toolName] = toolClass;\n  }\n}\n\nAnnotationToPointData.TOOL_NAMES = {};\nAnnotationToPointData.register(RectangleROIStartEndThreshold);\n\nexport default AnnotationToPointData;\n","import AnnotationToPointData from './measurements/AnnotationToPointData';\nimport dcmjs from 'dcmjs';\nimport { DicomMetadataStore } from '@ohif/core';\n\nconst { DicomMetaDictionary } = dcmjs.data;\n\nexport default class RTSSReport {\n  constructor() {}\n\n  /**\n   * Convert handles to RTSSReport report object containing the dcmjs dicom dataset.\n   *\n   * Note: The tool data needs to be formatted in a specific way, and currently\n   * it is limited to the RectangleROIStartEndTool in the Cornerstone.\n   *\n   * @param annotations Array of Cornerstone tool annotation data\n   * @param metadataProvider Metadata provider\n   * @param options report generation options\n   * @returns Report object containing the dataset\n   */\n  static generateReport(annotations, metadataProvider, options) {\n    let dataset = initializeDataset(annotations, metadataProvider);\n\n    annotations.forEach((annotation, index) => {\n      const ContourSequence = AnnotationToPointData.convert(\n        annotation,\n        index,\n        metadataProvider,\n        options\n      );\n\n      dataset.StructureSetROISequence.push(\n        getStructureSetModule(annotation, index, metadataProvider)\n      );\n\n      dataset.ROIContourSequence.push(ContourSequence);\n      dataset.RTROIObservationsSequence.push(\n        getRTROIObservationsSequence(annotation, index, metadataProvider)\n      );\n\n      // ReferencedSeriesSequence\n      // Todo: handle more than one series\n      dataset.ReferencedSeriesSequence = getReferencedSeriesSequence(\n        annotation,\n        index,\n        metadataProvider\n      );\n\n      // ReferencedFrameOfReferenceSequence\n      dataset.ReferencedFrameOfReferenceSequence = getReferencedFrameOfReferenceSequence(\n        annotation,\n        metadataProvider,\n        dataset\n      );\n    });\n\n    const fileMetaInformationVersionArray = new Uint8Array(2);\n    fileMetaInformationVersionArray[1] = 1;\n\n    const _meta = {\n      FileMetaInformationVersion: {\n        Value: [fileMetaInformationVersionArray.buffer],\n        vr: 'OB',\n      },\n      TransferSyntaxUID: {\n        Value: ['1.2.840.10008.1.2.1'],\n        vr: 'UI',\n      },\n      ImplementationClassUID: {\n        Value: [DicomMetaDictionary.uid()], // TODO: could be git hash or other valid id\n        vr: 'UI',\n      },\n      ImplementationVersionName: {\n        Value: ['dcmjs'],\n        vr: 'SH',\n      },\n    };\n\n    dataset._meta = _meta;\n\n    return dataset;\n  }\n\n  /**\n   * Generate Cornerstone tool state from dataset\n   * @param {object} dataset dataset\n   * @param {object} hooks\n   * @param {function} hooks.getToolClass Function to map dataset to a tool class\n   * @returns\n   */\n  static generateToolState(dataset, hooks = {}) {\n    // Todo\n    console.warn('RTSSReport.generateToolState not implemented');\n  }\n}\n\nfunction initializeDataset(annotations, metadataProvider) {\n  const rtSOPInstanceUID = DicomMetaDictionary.uid();\n\n  // get the first annotation data\n  const {\n    referencedImageId: imageId,\n    FrameOfReferenceUID,\n  } = annotations[0].metadata;\n\n  const { studyInstanceUID } = metadataProvider.get(\n    'generalSeriesModule',\n    imageId\n  );\n\n  const patientModule = getPatientModule(imageId, metadataProvider);\n  const rtSeriesModule = getRTSeriesModule(imageId, metadataProvider);\n\n  return {\n    StructureSetROISequence: [],\n    ROIContourSequence: [],\n    RTROIObservationsSequence: [],\n    ReferencedSeriesSequence: [],\n    ReferencedFrameOfReferenceSequence: [],\n    ...patientModule,\n    ...rtSeriesModule,\n    StudyInstanceUID: studyInstanceUID,\n    SOPClassUID: '1.2.840.10008.5.1.4.1.1.481.3', // RT Structure Set Storage\n    SOPInstanceUID: rtSOPInstanceUID,\n    Manufacturer: 'dcmjs',\n    Modality: 'RTSTRUCT',\n    FrameOfReferenceUID,\n    PositionReferenceIndicator: '',\n    StructureSetLabel: '',\n    StructureSetName: '',\n    ReferringPhysicianName: '',\n    OperatorsName: '',\n    StructureSetDate: DicomMetaDictionary.date(),\n    StructureSetTime: DicomMetaDictionary.time(),\n  };\n}\n\nfunction getPatientModule(imageId, metadataProvider) {\n  const generalSeriesModule = metadataProvider.get(\n    'generalSeriesModule',\n    imageId\n  );\n  const generalStudyModule = metadataProvider.get(\n    'generalStudyModule',\n    imageId\n  );\n  const patientStudyModule = metadataProvider.get(\n    'patientStudyModule',\n    imageId\n  );\n  const patientModule = metadataProvider.get('patientModule', imageId);\n  const patientDemographicModule = metadataProvider.get(\n    'patientDemographicModule',\n    imageId\n  );\n\n  return {\n    Modality: generalSeriesModule.modality,\n    PatientID: patientModule.patientId,\n    PatientName: patientModule.patientName,\n    PatientBirthDate: '',\n    PatientAge: patientStudyModule.patientAge,\n    PatientSex: patientDemographicModule.patientSex,\n    PatientWeight: patientStudyModule.patientWeight,\n    StudyDate: generalStudyModule.studyDate,\n    StudyTime: generalStudyModule.studyTime,\n    StudyID: 'ToDo',\n    AccessionNumber: generalStudyModule.accessionNumber,\n  };\n}\n\nfunction getReferencedFrameOfReferenceSequence(\n  toolData,\n  metadataProvider,\n  dataset\n) {\n  const { referencedImageId: imageId, FrameOfReferenceUID } = toolData.metadata;\n  const instance = metadataProvider.get('instance', imageId);\n  const { SeriesInstanceUID } = instance;\n\n  const { ReferencedSeriesSequence } = dataset;\n\n  return [\n    {\n      FrameOfReferenceUID,\n      RTReferencedStudySequence: [\n        {\n          ReferencedSOPClassUID: dataset.SOPClassUID,\n          ReferencedSOPInstanceUID: dataset.SOPInstanceUID,\n          RTReferencedSeriesSequence: [\n            {\n              SeriesInstanceUID,\n              ContourImageSequence: [\n                ...ReferencedSeriesSequence[0].ReferencedInstanceSequence,\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ];\n}\n\nfunction getReferencedSeriesSequence(toolData, index, metadataProvider) {\n  // grab imageId from toolData\n  const { referencedImageId: imageId } = toolData.metadata;\n  const instance = metadataProvider.get('instance', imageId);\n  const { SeriesInstanceUID, StudyInstanceUID } = instance;\n\n  const ReferencedSeriesSequence = [];\n  if (SeriesInstanceUID) {\n    const series = DicomMetadataStore.getSeries(\n      StudyInstanceUID,\n      SeriesInstanceUID\n    );\n\n    const ReferencedSeries = {\n      SeriesInstanceUID,\n      ReferencedInstanceSequence: [],\n    };\n\n    series.instances.forEach(instance => {\n      const { SOPInstanceUID, SOPClassUID } = instance;\n      ReferencedSeries.ReferencedInstanceSequence.push({\n        ReferencedSOPClassUID: SOPClassUID,\n        ReferencedSOPInstanceUID: SOPInstanceUID,\n      });\n    });\n\n    ReferencedSeriesSequence.push(ReferencedSeries);\n  }\n\n  return ReferencedSeriesSequence;\n}\n\nfunction getRTSeriesModule(imageId, metadataProvider) {\n  return {\n    SeriesInstanceUID: DicomMetaDictionary.uid(), // generate a new series instance uid\n    SeriesNumber: '99', // Todo:: what should be the series number?\n  };\n}\n\nfunction getStructureSetModule(toolData, index, metadataProvider) {\n  const { FrameOfReferenceUID } = toolData.metadata;\n\n  return {\n    ROINumber: index + 1,\n    ROIName: `Todo: name ${index + 1}`,\n    ROIDescription: `Todo: description ${index + 1}`,\n    ROIGenerationAlgorithm: 'Todo: algorithm',\n    ReferencedFrameOfReferenceUID: FrameOfReferenceUID,\n  };\n}\n\nfunction getRTROIObservationsSequence(toolData, index, metadataProvider) {\n  return {\n    ObservationNumber: index + 1,\n    ReferencedROINumber: index + 1,\n    RTROIInterpretedType: 'Todo: type',\n    ROIInterpreter: 'Todo: interpreter',\n  };\n}\n","import RTSSReport from './RTSSReport';\nimport dcmjs from 'dcmjs';\nimport { classes } from '@ohif/core';\n\nconst { datasetToBlob } = dcmjs.data;\nconst metadataProvider = classes.MetadataProvider;\n\nexport default function dicomRTAnnotationExport(annotations) {\n  const dataset = RTSSReport.generateReport(annotations, metadataProvider);\n  const reportBlob = datasetToBlob(dataset);\n\n  //Create a URL for the binary.\n  var objectUrl = URL.createObjectURL(reportBlob);\n  window.location.assign(objectUrl);\n}\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\n\nexport default dicomRTAnnotationExport;\n","import { vec3 } from 'gl-matrix';\nimport OHIF from '@ohif/core';\nimport * as cs from '@cornerstonejs/core';\nimport * as csTools from '@cornerstonejs/tools';\nimport { classes } from '@ohif/core';\nimport getThresholdValues from './utils/getThresholdValue';\nimport calculateSuvPeak from './utils/calculateSUVPeak';\nimport calculateTMTV from './utils/calculateTMTV';\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\n\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\n\nconst metadataProvider = classes.MetadataProvider;\nconst RECTANGLE_ROI_THRESHOLD_MANUAL = 'RectangleROIStartEndThreshold';\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\n\nconst commandsModule = ({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}) => {\n  const {\n    viewportGridService,\n    uiNotificationService,\n    displaySetService,\n    hangingProtocolService,\n    toolGroupService,\n    cornerstoneViewportService,\n    segmentationService,\n  } = servicesManager.services;\n\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { getEnabledElement } = utilityModule.exports;\n\n  function _getActiveViewportsEnabledElement() {\n    const { activeViewportIndex } = viewportGridService.getState();\n    const { element } = getEnabledElement(activeViewportIndex) || {};\n    const enabledElement = cs.getEnabledElement(element);\n    return enabledElement;\n  }\n\n  function _getMatchedViewportsToolGroupIds() {\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n    const toolGroupIds = [];\n    viewportMatchDetails.forEach((value, key) => {\n      const { viewportOptions } = value;\n      const { toolGroupId } = viewportOptions;\n      if (toolGroupIds.indexOf(toolGroupId) === -1) {\n        toolGroupIds.push(toolGroupId);\n      }\n    });\n\n    return toolGroupIds;\n  }\n\n  const actions = {\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\n      // Todo: this is assuming that the hanging protocol has successfully matched\n      // the correct PT. For future, we should have a way to filter out the PTs\n      // that are in the viewer layout (but then we have the problem of the attenuation\n      // corrected PT vs the non-attenuation correct PT)\n\n      let ptDisplaySet = null;\n      for (const [viewportIndex, viewportDetails] of viewportMatchDetails) {\n        const { displaySetsInfo } = viewportDetails;\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\n        );\n\n        if (!displaySets || displaySets.length === 0) {\n          continue;\n        }\n\n        ptDisplaySet = displaySets.find(\n          displaySet => displaySet.Modality === 'PT'\n        );\n\n        if (ptDisplaySet) {\n          break;\n        }\n      }\n\n      return ptDisplaySet;\n    },\n    getPTMetadata: ({ ptDisplaySet }) => {\n      const dataSource = extensionManager.getDataSources()[0];\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\n\n      const firstImageId = imageIds[0];\n      const instance = metadataProvider.get('instance', firstImageId);\n      if (instance.Modality !== 'PT') {\n        return;\n      }\n\n      const metadata = {\n        SeriesTime: instance.SeriesTime,\n        Modality: instance.Modality,\n        PatientSex: instance.PatientSex,\n        PatientWeight: instance.PatientWeight,\n        RadiopharmaceuticalInformationSequence: {\n          RadionuclideTotalDose:\n            instance.RadiopharmaceuticalInformationSequence[0]\n              .RadionuclideTotalDose,\n          RadionuclideHalfLife:\n            instance.RadiopharmaceuticalInformationSequence[0]\n              .RadionuclideHalfLife,\n          RadiopharmaceuticalStartTime:\n            instance.RadiopharmaceuticalInformationSequence[0]\n              .RadiopharmaceuticalStartTime,\n          RadiopharmaceuticalStartDateTime:\n            instance.RadiopharmaceuticalInformationSequence[0]\n              .RadiopharmaceuticalStartDateTime,\n        },\n      };\n\n      return metadata;\n    },\n    createNewLabelmapFromPT: async () => {\n      // Create a segmentation of the same resolution as the source data\n      // using volumeLoader.createAndCacheDerivedVolume.\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        uiNotificationService.error('No matching PT display set found');\n        return;\n      }\n\n      const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n        ptDisplaySet.displaySetInstanceUID\n      );\n\n      // Add Segmentation to all toolGroupIds in the viewer\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\n\n      const representationType = LABELMAP;\n\n      for (const toolGroupId of toolGroupIds) {\n        const hydrateSegmentation = true;\n        await segmentationService.addSegmentationRepresentationToToolGroup(\n          toolGroupId,\n          segmentationId,\n          hydrateSegmentation,\n          representationType\n        );\n\n        segmentationService.setActiveSegmentationForToolGroup(\n          segmentationId,\n          toolGroupId\n        );\n      }\n\n      return segmentationId;\n    },\n    setSegmentationActiveForToolGroups: ({ segmentationId }) => {\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\n\n      toolGroupIds.forEach(toolGroupId => {\n        segmentationService.setActiveSegmentationForToolGroup(\n          segmentationId,\n          toolGroupId\n        );\n      });\n    },\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config }) => {\n      const segmentation = csTools.segmentation.state.getSegmentation(\n        segmentationId\n      );\n\n      const { representationData } = segmentation;\n      const {\n        displaySetMatchDetails: matchDetails,\n      } = hangingProtocolService.getMatchDetails();\n      const volumeLoaderScheme = 'cornerstoneStreamingImageVolume'; // Loader id which defines which volume loader to use\n\n      const ctDisplaySet = matchDetails.get('ctDisplaySet');\n      const ctVolumeId = `${volumeLoaderScheme}:${ctDisplaySet.displaySetInstanceUID}`; // VolumeId with loader id + volume id\n\n      const { volumeId: segVolumeId } = representationData[LABELMAP];\n      const { referencedVolumeId } = cs.cache.getVolume(segVolumeId);\n\n      const labelmapVolume = cs.cache.getVolume(segmentationId);\n      const referencedVolume = cs.cache.getVolume(referencedVolumeId);\n      const ctReferencedVolume = cs.cache.getVolume(ctVolumeId);\n\n      if (!referencedVolume) {\n        throw new Error('No Reference volume found');\n      }\n\n      if (!labelmapVolume) {\n        throw new Error('No Reference labelmap found');\n      }\n\n      const annotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n        RECTANGLE_ROI_THRESHOLD_MANUAL\n      );\n\n      if (annotationUIDs.length === 0) {\n        uiNotificationService.show({\n          title: 'Commands Module',\n          message: 'No ROIThreshold Tool is Selected',\n          type: 'error',\n        });\n        return;\n      }\n\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\n        annotationUIDs,\n        [referencedVolume, ctReferencedVolume],\n        config\n      );\n\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n        annotationUIDs,\n        labelmapVolume,\n        [\n          { volume: referencedVolume, lower: ptLower, upper: ptUpper },\n          { volume: ctReferencedVolume, lower: ctLower, upper: ctUpper },\n        ],\n        { overwrite: true }\n      );\n    },\n    calculateSuvPeak: ({ labelmap }) => {\n      const { referencedVolumeId } = labelmap;\n\n      const referencedVolume = cs.cache.getVolume(referencedVolumeId);\n\n      const annotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n        RECTANGLE_ROI_THRESHOLD_MANUAL\n      );\n\n      const annotations = annotationUIDs.map(annotationUID =>\n        csTools.annotation.state.getAnnotation(annotationUID)\n      );\n\n      const suvPeak = calculateSuvPeak(labelmap, referencedVolume, annotations);\n      return {\n        suvPeak: suvPeak.mean,\n        suvMax: suvPeak.max,\n        suvMaxIJK: suvPeak.maxIJK,\n        suvMaxLPS: suvPeak.maxLPS,\n      };\n    },\n    getLesionStats: ({ labelmap, segmentIndex = 1 }) => {\n      const { scalarData, spacing } = labelmap;\n\n      const { scalarData: referencedScalarData } = cs.cache.getVolume(\n        labelmap.referencedVolumeId\n      );\n\n      let segmentationMax = -Infinity;\n      let segmentationMin = Infinity;\n      let segmentationValues = [];\n\n      let voxelCount = 0;\n      for (let i = 0; i < scalarData.length; i++) {\n        if (scalarData[i] === segmentIndex) {\n          const value = referencedScalarData[i];\n          segmentationValues.push(value);\n          if (value > segmentationMax) {\n            segmentationMax = value;\n          }\n          if (value < segmentationMin) {\n            segmentationMin = value;\n          }\n          voxelCount++;\n        }\n      }\n\n      const stats = {\n        minValue: segmentationMin,\n        maxValue: segmentationMax,\n        meanValue: segmentationValues.reduce((a, b) => a + b, 0) / voxelCount,\n        stdValue: Math.sqrt(\n          segmentationValues.reduce((a, b) => a + b * b, 0) / voxelCount -\n            segmentationValues.reduce((a, b) => a + b, 0) / voxelCount ** 2\n        ),\n        volume: voxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3,\n      };\n\n      return stats;\n    },\n    calculateLesionGlycolysis: ({ lesionStats }) => {\n      const { meanValue, volume } = lesionStats;\n\n      return {\n        lesionGlyoclysisStats: volume * meanValue,\n      };\n    },\n    calculateTMTV: ({ segmentations }) => {\n      const labelmaps = segmentations.map(s =>\n        segmentationService.getLabelmapVolume(s.id)\n      );\n\n      if (!labelmaps.length) {\n        return;\n      }\n\n      return calculateTMTV(labelmaps);\n    },\n    exportTMTVReportCSV: ({ segmentations, tmtv, config }) => {\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\n        segmentations,\n      });\n\n      const tlg = actions.getTotalLesionGlycolysis({ segmentations });\n      const additionalReportRows = [\n        { key: 'Total Metabolic Tumor Volume', value: { tmtv } },\n        { key: 'Total Lesion Glycolysis', value: { tlg: tlg.toFixed(4) } },\n        { key: 'Threshold Configuration', value: { ...config } },\n      ];\n\n      createAndDownloadTMTVReport(segReport, additionalReportRows);\n    },\n    getTotalLesionGlycolysis: ({ segmentations }) => {\n      const labelmapVolumes = segmentations.map(s =>\n        segmentationService.getLabelmapVolume(s.id)\n      );\n\n      let mergedLabelmap;\n      // merge labelmap will through an error if labels maps are not the same size\n      // or same direction or ....\n      try {\n        mergedLabelmap = csTools.utilities.segmentation.createMergedLabelmapForIndex(\n          labelmapVolumes\n        );\n      } catch (e) {\n        console.error('commandsModule::getTotalLesionGlycolysis', e);\n        return;\n      }\n\n      // grabbing the first labelmap referenceVolume since it will be the same for all\n      const { referencedVolumeId, spacing } = labelmapVolumes[0];\n\n      if (!referencedVolumeId) {\n        console.error(\n          'commandsModule::getTotalLesionGlycolysis:No referencedVolumeId found'\n        );\n      }\n\n      const ptVolume = cs.cache.getVolume(referencedVolumeId);\n      const mergedLabelData = mergedLabelmap.scalarData;\n\n      if (mergedLabelData.length !== ptVolume.scalarData.length) {\n        console.error(\n          'commandsModule::getTotalLesionGlycolysis:Labelmap and ptVolume are not the same size'\n        );\n      }\n\n      let suv = 0;\n      let totalLesionVoxelCount = 0;\n      for (let i = 0; i < mergedLabelData.length; i++) {\n        // if not background\n        if (mergedLabelData[i] !== 0) {\n          suv += ptVolume.scalarData[i];\n          totalLesionVoxelCount += 1;\n        }\n      }\n\n      // Average SUV for the merged labelmap\n      const averageSuv = suv / totalLesionVoxelCount;\n\n      // total Lesion Glycolysis [suv * ml]\n      return (\n        averageSuv *\n        totalLesionVoxelCount *\n        spacing[0] *\n        spacing[1] *\n        spacing[2] *\n        1e-3\n      );\n    },\n    setStartSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n      const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n        RECTANGLE_ROI_THRESHOLD_MANUAL\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      const { handles } = annotation.data;\n      const { points } = handles;\n\n      // get the current slice Index\n      const sliceIndex = viewport.getCurrentImageIdIndex();\n      annotation.data.startSlice = sliceIndex;\n\n      // distance between camera focal point and each point on the rectangle\n      const newPoints = points.map(point => {\n        const distance = vec3.create();\n        vec3.subtract(distance, focalPoint, point);\n        // distance in the direction of the viewPlaneNormal\n        const distanceInViewPlane = vec3.dot(distance, viewPlaneNormal);\n        // new point is current point minus distanceInViewPlane\n        const newPoint = vec3.create();\n        vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, distanceInViewPlane);\n\n        return newPoint;\n        //\n      });\n\n      handles.points = newPoints;\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n      viewport.render();\n    },\n    setEndSliceForROIThresholdTool: () => {\n      const { viewport } = _getActiveViewportsEnabledElement();\n\n      const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n        RECTANGLE_ROI_THRESHOLD_MANUAL\n      );\n\n      const annotationUID = selectedAnnotationUIDs[0];\n\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\n\n      // get the current slice Index\n      const sliceIndex = viewport.getCurrentImageIdIndex();\n      annotation.data.endSlice = sliceIndex;\n\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\n      // and re-calculate the projection points\n      annotation.invalidated = true;\n\n      viewport.render();\n    },\n    createTMTVRTReport: () => {\n      // get all Rectangle ROI annotation\n      const stateManager = csTools.annotation.state.getAnnotationManager();\n\n      const annotations = [];\n\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\n        const ROIAnnotations = forAnnotations[RECTANGLE_ROI_THRESHOLD_MANUAL];\n        annotations.push(...ROIAnnotations);\n      });\n\n      commandsManager.runCommand('exportRTReportForAnnotations', {\n        annotations,\n      });\n    },\n    getSegmentationCSVReport: ({ segmentations }) => {\n      if (!segmentations || !segmentations.length) {\n        segmentations = segmentationService.getSegmentations();\n      }\n\n      let report = {};\n\n      for (const segmentation of segmentations) {\n        const { id, label, cachedStats: data } = segmentation;\n\n        const segReport = { id, label };\n\n        if (!data) {\n          report[id] = segReport;\n          continue;\n        }\n\n        Object.keys(data).forEach(key => {\n          if (typeof data[key] !== 'object') {\n            segReport[key] = data[key];\n          } else {\n            Object.keys(data[key]).forEach(subKey => {\n              const newKey = `${key}_${subKey}`;\n              segReport[newKey] = data[key][subKey];\n            });\n          }\n        });\n\n        const labelmapVolume = segmentationService.getLabelmapVolume(id);\n\n        if (!labelmapVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const referencedVolumeId = labelmapVolume.referencedVolumeId;\n        segReport.referencedVolumeId = referencedVolumeId;\n\n        const referencedVolume = segmentationService.getLabelmapVolume(\n          referencedVolumeId\n        );\n\n        if (!referencedVolume) {\n          report[id] = segReport;\n          continue;\n        }\n\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\n          report[id] = segReport;\n          continue;\n        }\n\n        const firstImageId = referencedVolume.imageIds[0];\n        const instance = OHIF.classes.MetadataProvider.get(\n          'instance',\n          firstImageId\n        );\n\n        if (!instance) {\n          report[id] = segReport;\n          continue;\n        }\n\n        report[id] = {\n          ...segReport,\n          PatientID: instance.PatientID,\n          PatientName: instance.PatientName.Alphabetic,\n          StudyInstanceUID: instance.StudyInstanceUID,\n          SeriesInstanceUID: instance.SeriesInstanceUID,\n          StudyDate: instance.StudyDate,\n        };\n      }\n\n      return report;\n    },\n    exportRTReportForAnnotations: ({ annotations }) => {\n      dicomRTAnnotationExport(annotations);\n    },\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\n\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\n        viewportMatchDetails,\n      });\n\n      if (!ptDisplaySet) {\n        return;\n      }\n\n      const fusionViewportIds = toolGroup.getViewportIds();\n\n      let viewports = [];\n      fusionViewportIds.forEach(viewportId => {\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(\n          viewportId\n        );\n\n        const viewportIndex = viewportInfo.getViewportIndex();\n        commandsManager.runCommand('setViewportColormap', {\n          viewportIndex,\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\n          colormap,\n        });\n\n        viewports.push(\n          cornerstoneViewportService.getCornerstoneViewport(viewportId)\n        );\n      });\n\n      viewports.forEach(viewport => {\n        viewport.render();\n      });\n    },\n  };\n\n  const definitions = {\n    setEndSliceForROIThresholdTool: {\n      commandFn: actions.setEndSliceForROIThresholdTool,\n      storeContexts: [],\n      options: {},\n    },\n    setStartSliceForROIThresholdTool: {\n      commandFn: actions.setStartSliceForROIThresholdTool,\n      storeContexts: [],\n      options: {},\n    },\n    getMatchingPTDisplaySet: {\n      commandFn: actions.getMatchingPTDisplaySet,\n      storeContexts: [],\n      options: {},\n    },\n    getPTMetadata: {\n      commandFn: actions.getPTMetadata,\n      storeContexts: [],\n      options: {},\n    },\n    createNewLabelmapFromPT: {\n      commandFn: actions.createNewLabelmapFromPT,\n      storeContexts: [],\n      options: {},\n    },\n    setSegmentationActiveForToolGroups: {\n      commandFn: actions.setSegmentationActiveForToolGroups,\n      storeContexts: [],\n      options: {},\n    },\n    thresholdSegmentationByRectangleROITool: {\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\n      storeContexts: [],\n      options: {},\n    },\n    getTotalLesionGlycolysis: {\n      commandFn: actions.getTotalLesionGlycolysis,\n      storeContexts: [],\n      options: {},\n    },\n    calculateSuvPeak: {\n      commandFn: actions.calculateSuvPeak,\n      storeContexts: [],\n      options: {},\n    },\n    getLesionStats: {\n      commandFn: actions.getLesionStats,\n      storeContexts: [],\n      options: {},\n    },\n    calculateTMTV: {\n      commandFn: actions.calculateTMTV,\n      storeContexts: [],\n      options: {},\n    },\n    exportTMTVReportCSV: {\n      commandFn: actions.exportTMTVReportCSV,\n      storeContexts: [],\n      options: {},\n    },\n    createTMTVRTReport: {\n      commandFn: actions.createTMTVRTReport,\n      storeContexts: [],\n      options: {},\n    },\n    getSegmentationCSVReport: {\n      commandFn: actions.getSegmentationCSVReport,\n      storeContexts: [],\n      options: {},\n    },\n    exportRTReportForAnnotations: {\n      commandFn: actions.exportRTReportForAnnotations,\n      storeContexts: [],\n      options: {},\n    },\n    setFusionPTColormap: {\n      commandFn: actions.setFusionPTColormap,\n      storeContexts: [],\n      options: {},\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'TMTV:CORNERSTONE',\n  };\n};\n\nexport default commandsModule;\n","export default function createAndDownloadTMTVReport(\n  segReport,\n  additionalReportRows\n) {\n  const firstReport = segReport[Object.keys(segReport)[0]];\n  const columns = Object.keys(firstReport);\n  const csv = [columns.join(',')];\n\n  Object.values(segReport).forEach(segmentation => {\n    const row = [];\n    columns.forEach(column => {\n      // if it is array then we need to replace , with space to avoid csv parsing error\n      row.push(\n        Array.isArray(segmentation[column])\n          ? segmentation[column].join(' ')\n          : segmentation[column]\n      );\n    });\n    csv.push(row.join(','));\n  });\n\n  csv.push('');\n  csv.push('');\n  csv.push('');\n\n  csv.push(`Patient ID,${firstReport.PatientID}`);\n  csv.push(`Study Date,${firstReport.StudyDate}`);\n  csv.push('');\n  additionalReportRows.forEach(({ key, value: values }) => {\n    const temp = [];\n    temp.push(`${key}`);\n    Object.keys(values).forEach(k => {\n      temp.push(`${k}`);\n      temp.push(`${values[k]}`);\n    });\n\n    csv.push(temp.join(','));\n  });\n\n  const blob = new Blob([csv.join('\\n')], {\n    type: 'text/csv;charset=utf-8',\n  });\n\n  const url = URL.createObjectURL(blob);\n\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `${firstReport.PatientID}_tmtv.csv`;\n  a.click();\n}\n","import { id } from './id';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport init from './init';\nimport commandsModule from './commandsModule';\n\n/**\n *\n */\nconst tmtvExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n  preRegistration({\n    servicesManager,\n    commandsManager,\n    extensionManager,\n    configuration = {},\n  }) {\n    init({ servicesManager, commandsManager, extensionManager, configuration });\n  },\n  getPanelModule,\n  getHangingProtocolModule,\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\n    return commandsModule({\n      servicesManager,\n      commandsManager,\n      extensionManager,\n    });\n  },\n};\n\nexport default tmtvExtension;\n"],"names":["id","packageJson","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","type","source","target","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","options","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacityMapping","value","opacity","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","hasUpdatedPriorsInformation","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","PanelPetSUV","servicesManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","toolbarService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","React","className","Input","label","labelClassName","onChange","e","Button","color","onClick","Error","getToolGroupIds","toggledState","state","toggles","_broadcastEvent","TOOL_BAR_STATE_MODIFIED","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","segmentationService","uiDialogService","segmentation","getSegmentation","onSubmitHandler","action","addOrUpdateSegmentation","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","body","setValue","autoFocus","containerClassName","event","persist","onKeyPress","actions","text","onSubmit","segmentations","tmtvValue","config","ButtonGroup","size","disabled","tmtv","ROI_STAT","placeHolder","dispatch","Select","closeMenuOnSelect","placeholder","find","option","strategy","payload","variant","colSpan","Label","ctLower","ctUpper","ptLower","ptUpper","DEFAULT_STRATEGY","reducer","PanelRoiThresholdSegmentation","showConfig","setShowConfig","labelmapLoading","setLabelmapLoading","selectedSegmentationId","setSelectedSegmentationId","setSegmentations","getSegmentations","useReducer","setTmtvValue","useCallback","commandName","commandOptions","handleTMTVCalculation","undefined","toFixed","handleROIThresholding","labelmap","segmentationId","lesionStats","suvPeak","lesionGlyoclysisStats","volume","meanValue","cachedStats","assign","displayText","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","subscriptions","evt","push","unsub","SEGMENTATION_REMOVED","setTimeout","then","ROIThresholdConfiguration","SegmentationTable","activeSegmentationId","onToggleVisibility","toggleSegmentationVisibility","onToggleVisibilityAll","ids","map","onDelete","remove","onEdit","segmentationEditHandler","ExportReports","window","open","Icon","extensionManager","iconName","iconLabel","component","wrappedPanelPetSuv","wrappedROIThresholdSeg","PanelROIThresholdSegmentation","getSOPInstanceAttributes","imageId","instance","metaData","SOPInstanceUID","frameNumber","_getUIDFromImageID","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","registerColormap","utilities","getRoiStats","referencedVolume","annotations","imageData","values","getPointData","getScalars","getData","fn","baseValue","statistic","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","iMin","iMax","jMin","jMax","kMin","kMax","i","j","k","computeOffsetIndex","annotationUIDs","referencedVolumes","Number","referenceVolume","segmentIndex","Modality","scalarData","labelmapData","dimensions","labelmapImageData","referenceVolumeData","referenceVolumeImageData","projectionPoints","rectangleCornersIJK","concat","world","ijk","vec3","worldToIndex","max","maxIJK","maxLPS","callback","pointIJK","pointLPS","offset","referenceValue","direction","getDirection","slice","diameter","Math","pow","PI","secondaryCircleWorld","bottomWorld","topWorld","indexToWorld","suvPeakCirclePoints","count","acc","suvPeakMeanCallback","mean","labelmaps","mergedLabelmap","spacing","reduce","curr","constructor","getContourSequence","toolData","metadataProvider","projectionPointsImageIds","point","index","ContourData","points","orderedPoints","pointsArrayWithPrecision","flat","ContourImageSequence","sopCommon","get","ReferencedSOPClassUID","sopClassUID","ReferencedSOPInstanceUID","sopInstanceUID","getContourImageSequence","NumberOfContourPoints","ContourGeometricType","AnnotationToPointData","convert","referenceImageId","validateAnnotation","toolClass","TOOL_NAMES","ContourSequence","ReferencedROINumber","ROIDisplayColor","floor","random","register","DicomMetaDictionary","dcmjs","RTSSReport","generateReport","dataset","rtSOPInstanceUID","studyInstanceUID","patientModule","generalSeriesModule","generalStudyModule","patientStudyModule","patientDemographicModule","modality","PatientID","patientId","PatientName","patientName","PatientBirthDate","PatientAge","patientAge","patientSex","patientWeight","StudyDate","studyDate","StudyTime","studyTime","StudyID","AccessionNumber","accessionNumber","getPatientModule","rtSeriesModule","SeriesNumber","StructureSetROISequence","ROIContourSequence","RTROIObservationsSequence","ReferencedSeriesSequence","ReferencedFrameOfReferenceSequence","SOPClassUID","Manufacturer","PositionReferenceIndicator","StructureSetLabel","StructureSetName","ReferringPhysicianName","OperatorsName","StructureSetDate","date","StructureSetTime","time","initializeDataset","ROINumber","ROIName","ROIDescription","ROIGenerationAlgorithm","ReferencedFrameOfReferenceUID","getStructureSetModule","ObservationNumber","RTROIInterpretedType","ROIInterpreter","getRTROIObservationsSequence","series","getSeries","ReferencedSeries","ReferencedInstanceSequence","instances","getReferencedSeriesSequence","RTReferencedStudySequence","RTReferencedSeriesSequence","getReferencedFrameOfReferenceSequence","fileMetaInformationVersionArray","Uint8Array","_meta","FileMetaInformationVersion","Value","buffer","vr","TransferSyntaxUID","ImplementationClassUID","ImplementationVersionName","generateToolState","hooks","datasetToBlob","classes","MetadataProvider","reportBlob","objectUrl","URL","createObjectURL","location","RECTANGLE_ROI_THRESHOLD_MANUAL","LABELMAP","Labelmap","commandsModule","viewportGridService","uiNotificationService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportIndex","getState","element","cs","_getMatchedViewportsToolGroupIds","toolGroupIds","indexOf","viewportIndex","viewportDetails","displaySetsInfo","getDisplaySetByUID","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","async","error","createSegmentationForDisplaySet","representationType","hydrateSegmentation","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","setSegmentationActiveForToolGroups","thresholdSegmentationByRectangleROITool","representationData","displaySetMatchDetails","matchDetails","ctVolumeId","volumeId","segVolumeId","referencedVolumeId","getVolume","labelmapVolume","ctReferencedVolume","show","message","getThresholdValues","lower","upper","overwrite","calculateSuvPeak","suvMax","suvMaxIJK","suvMaxLPS","getLesionStats","referencedScalarData","segmentationMax","segmentationMin","segmentationValues","voxelCount","minValue","a","b","stdValue","sqrt","calculateLesionGlycolysis","calculateTMTV","s","getLabelmapVolume","exportTMTVReportCSV","segReport","additionalReportRows","firstReport","csv","join","row","column","Array","isArray","temp","blob","Blob","url","document","createElement","href","download","click","createAndDownloadTMTVReport","tlg","getTotalLesionGlycolysis","labelmapVolumes","ptVolume","mergedLabelData","suv","totalLesionVoxelCount","setStartSliceForROIThresholdTool","viewport","focalPoint","viewPlaneNormal","getCamera","handles","sliceIndex","getCurrentImageIdIndex","startSlice","newPoints","distance","distanceInViewPlane","newPoint","invalidated","render","setEndSliceForROIThresholdTool","endSlice","createTMTVRTReport","stateManager","frameOfReferenceUID","ROIAnnotations","getSegmentationCSVReport","report","subKey","imageIds","OHIF","Alphabetic","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getViewportInfo","getViewportIndex","getCornerstoneViewport","definitions","commandFn","storeContexts","defaultContext","tmtvExtension","preRegistration","configuration","addTool","RectangleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","colormaps","init","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}