{"version":3,"file":"552.bundle.87999c32ad28548bbb75.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/listComponentGenerator.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/ViewportOverlay/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/cleanDenaturalizedDataset.ts","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopyViewport.tsx","webpack:///../../../extensions/dicom-microscopy/src/utils/dicomWebClient.ts","webpack:///../../../extensions/dicom-microscopy/src/id.js","webpack:///../../../extensions/dicom-microscopy/src/utils/coordinateFormatScoord3d2Geometry.js","webpack:///../../../extensions/dicom-microscopy/src/utils/styles.js","webpack:///../../../extensions/dicom-microscopy/src/tools/viewerManager.js","webpack:///../../../extensions/dicom-microscopy/src/utils/RoiAnnotation.js","webpack:///../../../extensions/dicom-microscopy/src/utils/areaOfPolygon.js","webpack:///../../../extensions/dicom-microscopy/src/services/MicroscopyService.ts","webpack:///../../../extensions/dicom-microscopy/src/utils/callInputDialog.tsx","webpack:///../../../extensions/dicom-microscopy/src/components/MicroscopyPanel/MicroscopyPanel.tsx","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/dcmCodeValues.js","webpack:///../../../extensions/dicom-microscopy/src/utils/toArray.js","webpack:///../../../extensions/dicom-microscopy/src/utils/loadSR.ts","webpack:///../../../extensions/dicom-microscopy/src/DicomMicroscopySRSopClassHandler.js","webpack:///../../../extensions/dicom-microscopy/src/utils/getSourceDisplaySet.js","webpack:///../../../extensions/dicom-microscopy/src/index.tsx","webpack:///../../../extensions/dicom-microscopy/src/getPanelModule.tsx","webpack:///../../../extensions/dicom-microscopy/src/getCommandsModule.ts"],"sourcesContent":["const listComponentGenerator = props => {\n  const { list, itemGenerator } = props;\n  if (!list) {\n    return;\n  }\n  return list.map(item => {\n    if (!item) {\n      return;\n    }\n    const generator = item.generator || itemGenerator;\n    if (!generator) {\n      throw new Error(`No generator for ${item}`);\n    }\n    return generator({ ...props, item });\n  });\n};\n\nexport default listComponentGenerator;\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport listComponentGenerator from './listComponentGenerator';\nimport './ViewportOverlay.css';\nimport { formatDICOMDate, formatDICOMTime, formatNumberPrecision, formatPN } from './utils';\n\ninterface OverlayItem {\n  id: string;\n  title: string;\n  value?: (props: any) => string;\n  condition?: (props: any) => boolean;\n  contents?: (props: any) => { className: string; value: any };\n  generator?: (props: any) => any;\n}\n\n/**\n *\n * @param {*} config is a configuration object that defines four lists of elements,\n * one topLeft, topRight, bottomLeft, bottomRight contents.\n * @param {*} extensionManager is used to load the image data.\n * @returns\n */\nexport const generateFromConfig = ({\n  topLeft = [],\n  topRight = [],\n  bottomLeft = [],\n  bottomRight = [],\n  itemGenerator = () => {},\n}: {\n  topLeft?: OverlayItem[];\n  topRight?: OverlayItem[];\n  bottomLeft?: OverlayItem[];\n  bottomRight?: OverlayItem[];\n  itemGenerator?: (props: any) => any;\n}) => {\n  return (props: any) => {\n    const topLeftClass = 'top-viewport left-viewport text-primary-light';\n    const topRightClass = 'top-viewport right-viewport-scrollbar text-primary-light';\n    const bottomRightClass = 'bottom-viewport right-viewport-scrollbar text-primary-light';\n    const bottomLeftClass = 'bottom-viewport left-viewport text-primary-light';\n    const overlay = 'absolute pointer-events-none microscopy-viewport-overlay';\n\n    return (\n      <>\n        {topLeft && topLeft.length > 0 && (\n          <div data-cy={'viewport-overlay-top-left'} className={classnames(overlay, topLeftClass)}>\n            {listComponentGenerator({ ...props, list: topLeft, itemGenerator })}\n          </div>\n        )}\n        {topRight && topRight.length > 0 && (\n          <div\n            data-cy={'viewport-overlay-top-right'}\n            className={classnames(overlay, topRightClass)}\n          >\n            {listComponentGenerator({\n              ...props,\n              list: topRight,\n              itemGenerator,\n            })}\n          </div>\n        )}\n        {bottomRight && bottomRight.length > 0 && (\n          <div\n            data-cy={'viewport-overlay-bottom-right'}\n            className={classnames(overlay, bottomRightClass)}\n          >\n            {listComponentGenerator({\n              ...props,\n              list: bottomRight,\n              itemGenerator,\n            })}\n          </div>\n        )}\n        {bottomLeft && bottomLeft.length > 0 && (\n          <div\n            data-cy={'viewport-overlay-bottom-left'}\n            className={classnames(overlay, bottomLeftClass)}\n          >\n            {listComponentGenerator({\n              ...props,\n              list: bottomLeft,\n              itemGenerator,\n            })}\n          </div>\n        )}\n      </>\n    );\n  };\n};\n\nconst itemGenerator = (props: any) => {\n  const { item } = props;\n  const { title, value: valueFunc, condition, contents } = item;\n  props.image = { ...props.image, ...props.metadata };\n  props.formatDate = formatDICOMDate;\n  props.formatTime = formatDICOMTime;\n  props.formatPN = formatPN;\n  props.formatNumberPrecision = formatNumberPrecision;\n  if (condition && !condition(props)) {\n    return null;\n  }\n  if (!contents && !valueFunc) {\n    return null;\n  }\n  const value = valueFunc && valueFunc(props);\n  const contentsValue = (contents && contents(props)) || [\n    { className: 'mr-1', value: title },\n    { classname: 'mr-1 font-light', value },\n  ];\n\n  return (\n    <div key={item.id} className=\"flex flex-row\">\n      {contentsValue.map((content, idx) => (\n        <span key={idx} className={content.className}>\n          {content.value}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default generateFromConfig({});\n","import { dicomWebUtils } from '@ohif/extension-default';\n\nfunction isPrimitive(v: any) {\n  return !(typeof v == 'object' || Array.isArray(v));\n}\n\nconst vrNumerics = [\n  'DS',\n  'FL',\n  'FD',\n  'IS',\n  'OD',\n  'OF',\n  'OL',\n  'OV',\n  'SL',\n  'SS',\n  'SV',\n  'UL',\n  'US',\n  'UV',\n];\n\n/**\n * Specialized for DICOM JSON format dataset cleaning.\n * @param obj\n * @returns\n */\nexport default function cleanDenaturalizedDataset(\n  obj: any,\n  options: {\n    StudyInstanceUID: string;\n    SeriesInstanceUID: string;\n    dataSourceConfig: unknown;\n  }\n): any {\n  if (Array.isArray(obj)) {\n    const newAry = obj.map(o => (isPrimitive(o) ? o : cleanDenaturalizedDataset(o, options)));\n    return newAry;\n  } else if (isPrimitive(obj)) {\n    return obj;\n  } else {\n    Object.keys(obj).forEach(key => {\n      if (obj[key].Value === null && obj[key].vr) {\n        delete obj[key].Value;\n      } else if (Array.isArray(obj[key].Value) && obj[key].vr) {\n        if (obj[key].Value.length === 1 && obj[key].Value[0].BulkDataURI) {\n          dicomWebUtils.fixBulkDataURI(obj[key].Value[0], options, options.dataSourceConfig);\n\n          obj[key].BulkDataURI = obj[key].Value[0].BulkDataURI;\n\n          // prevent mixed-content blockage\n          if (window.location.protocol === 'https:' && obj[key].BulkDataURI.startsWith('http:')) {\n            obj[key].BulkDataURI = obj[key].BulkDataURI.replace('http:', 'https:');\n          }\n          delete obj[key].Value;\n        } else if (vrNumerics.includes(obj[key].vr)) {\n          obj[key].Value = obj[key].Value.map(v => +v);\n        } else {\n          obj[key].Value = obj[key].Value.map(entry => cleanDenaturalizedDataset(entry, options));\n        }\n      }\n    });\n    return obj;\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { LoadingIndicatorProgress } from '@ohif/ui';\n\nimport './DicomMicroscopyViewport.css';\nimport ViewportOverlay from './components/ViewportOverlay';\nimport getDicomWebClient from './utils/dicomWebClient';\nimport dcmjs from 'dcmjs';\nimport cleanDenaturalizedDataset from './utils/cleanDenaturalizedDataset';\nimport MicroscopyService from './services/MicroscopyService';\n\nclass DicomMicroscopyViewport extends Component {\n  state = {\n    error: null as any,\n    isLoaded: false,\n  };\n\n  microscopyService: MicroscopyService;\n  viewer: any = null; // dicom-microscopy-viewer instance\n  managedViewer: any = null; // managed wrapper of microscopy-dicom extension\n\n  container = React.createRef();\n  overlayElement = React.createRef();\n\n  constructor(props: any) {\n    super(props);\n\n    const { microscopyService } = this.props.servicesManager.services;\n    this.microscopyService = microscopyService;\n  }\n\n  static propTypes = {\n    viewportData: PropTypes.object,\n    activeViewportId: PropTypes.string,\n    setViewportActive: PropTypes.func,\n\n    // props from OHIF Viewport Grid\n    displaySets: PropTypes.array,\n    viewportId: PropTypes.string,\n    viewportLabel: PropTypes.string,\n    dataSource: PropTypes.object,\n    viewportOptions: PropTypes.object,\n    displaySetOptions: PropTypes.array,\n\n    // other props from wrapping component\n    servicesManager: PropTypes.object,\n    extensionManager: PropTypes.object,\n    commandsManager: PropTypes.object,\n    resizeRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: PropTypes.any })]),\n  };\n\n  /**\n   * Need to return this as a function to prevent webpack from munging it.\n   */\n  public static getImportPath() {\n    return '/dicom-microscopy-viewer/dicomMicroscopyViewer.min.js';\n  }\n\n\n  /**\n   * Get the nearest ROI from the mouse click point\n   *\n   * @param event\n   * @param autoselect\n   * @returns\n   */\n  getNearbyROI(event: Event, autoselect = true) {\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    const _drawingSource = symbols.find(p => p.description === 'drawingSource');\n    const _pyramid = symbols.find(p => p.description === 'pyramid');\n    const _map = symbols.find(p => p.description === 'map');\n    const _affine = symbols.find(p => p.description === 'affine');\n\n    const feature = this.viewer[_drawingSource].getClosestFeatureToCoordinate(\n      this.viewer[_map].getEventCoordinate(event)\n    );\n\n    if (!feature) {\n      return null;\n    }\n\n    const roiAnnotation = this.viewer._getROIFromFeature(\n      feature,\n      this.viewer[_pyramid].metadata,\n      this.viewer[_affine]\n    );\n    if (roiAnnotation && autoselect) {\n      this.microscopyService.selectAnnotation(roiAnnotation);\n    }\n    return roiAnnotation;\n  }\n\n  // install the microscopy renderer into the web page.\n  // you should only do this once.\n  async installOpenLayersRenderer(container, displaySet) {\n    const loadViewer = async metadata => {\n      await import(\n        /* webpackIgnore: true */ DicomMicroscopyViewport.getImportPath());\n      const { viewer: DicomMicroscopyViewer, metadata: metadataUtils } = (window as any).dicomMicroscopyViewer;\n\n      const microscopyViewer = DicomMicroscopyViewer.VolumeImageViewer;\n\n      const client = getDicomWebClient({\n        extensionManager: this.props.extensionManager,\n        servicesManager: this.props.servicesManager,\n      });\n\n      // Parse, format, and filter metadata\n      const volumeImages: any[] = [];\n\n      /**\n       * This block of code is the original way of loading DICOM into dicom-microscopy-viewer\n       * as in their documentation.\n       * But we have the metadata already loaded by our loaders.\n       * As the metadata for microscopy DIOM files tends to be big and we don't\n       * want to double load it, below we have the mechanism to reconstruct the\n       * DICOM JSON structure (denaturalized) from naturalized metadata.\n       * (NOTE: Our loaders cache only naturalized metadata, not the denaturalized.)\n       */\n      // {\n      //   const retrieveOptions = {\n      //     studyInstanceUID: metadata[0].StudyInstanceUID,\n      //     seriesInstanceUID: metadata[0].SeriesInstanceUID,\n      //   };\n      //   metadata = await client.retrieveSeriesMetadata(retrieveOptions);\n      //   // Parse, format, and filter metadata\n      //   metadata.forEach(m => {\n      //     if (\n      //       volumeImages.length > 0 &&\n      //       m['00200052'].Value[0] != volumeImages[0].FrameOfReferenceUID\n      //     ) {\n      //       console.warn(\n      //         'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n      //         m['00200052'].Value[0]\n      //       );\n      //       m['00200052'].Value[0] = volumeImages[0].FrameOfReferenceUID;\n      //     }\n      //     NOTE: depending on different data source, image.ImageType sometimes\n      //     is a string, not a string array.\n      //     m['00080008'] = transformImageTypeUnnaturalized(m['00080008']);\n\n      //     const image = new metadataUtils.VLWholeSlideMicroscopyImage({\n      //       metadata: m,\n      //     });\n      //     const imageFlavor = image.ImageType[2];\n      //     if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n      //       volumeImages.push(image);\n      //     }\n      //   });\n      // }\n\n      metadata.forEach(m => {\n        // NOTE: depending on different data source, image.ImageType sometimes\n        //    is a string, not a string array.\n        m.ImageType = typeof m.ImageType === 'string' ? m.ImageType.split('\\\\') : m.ImageType;\n\n        const inst = cleanDenaturalizedDataset(\n          dcmjs.data.DicomMetaDictionary.denaturalizeDataset(m),\n          {\n            StudyInstanceUID: m.StudyInstanceUID,\n            SeriesInstanceUID: m.SeriesInstanceUID,\n            dataSourceConfig: this.props.dataSource.getConfig(),\n          }\n        );\n        if (!inst['00480105']) {\n          // Optical Path Sequence, no OpticalPathIdentifier?\n          // NOTE: this is actually a not-well formatted DICOM VL Whole Slide Microscopy Image.\n          inst['00480105'] = {\n            vr: 'SQ',\n            Value: [\n              {\n                '00480106': {\n                  vr: 'SH',\n                  Value: ['1'],\n                },\n              },\n            ],\n          };\n        }\n        const image = new metadataUtils.VLWholeSlideMicroscopyImage({\n          metadata: inst,\n        });\n\n        const imageFlavor = image.ImageType[2];\n        if (imageFlavor === 'VOLUME' || imageFlavor === 'THUMBNAIL') {\n          volumeImages.push(image);\n        }\n      });\n\n      // format metadata for microscopy-viewer\n      const options = {\n        client,\n        metadata: volumeImages,\n        retrieveRendered: false,\n        controls: ['overview', 'position'],\n      };\n\n      this.viewer = new microscopyViewer(options);\n\n      if (this.overlayElement && this.overlayElement.current && this.viewer.addViewportOverlay) {\n        this.viewer.addViewportOverlay({\n          element: this.overlayElement.current,\n          coordinates: [0, 0], // TODO: dicom-microscopy-viewer documentation says this can be false to be automatically, but it is not.\n          navigate: true,\n          className: 'OpenLayersOverlay',\n        });\n      }\n\n      this.viewer.render({ container });\n\n      const { StudyInstanceUID, SeriesInstanceUID } = displaySet;\n\n      this.managedViewer = this.microscopyService.addViewer(\n        this.viewer,\n        this.props.viewportId,\n        container,\n        StudyInstanceUID,\n        SeriesInstanceUID\n      );\n\n      this.managedViewer.addContextMenuCallback((event: Event) => {\n        // TODO: refactor this after Bill's changes on ContextMenu feature get merged\n        // const roiAnnotationNearBy = this.getNearbyROI(event);\n      });\n    };\n\n    this.microscopyService.clearAnnotations();\n\n    let smDisplaySet = displaySet;\n    if (displaySet.Modality === 'SR') {\n      // for SR displaySet, let's load the actual image displaySet\n      smDisplaySet = displaySet.getSourceDisplaySet();\n    }\n    console.log('Loading viewer metadata', smDisplaySet);\n\n    await loadViewer(smDisplaySet.others);\n\n    if (displaySet.Modality === 'SR') {\n      displaySet.load(smDisplaySet);\n    }\n  }\n\n  componentDidMount() {\n    const { displaySets, viewportOptions } = this.props;\n    // Todo-rename: this is always getting the 0\n    const displaySet = displaySets[0];\n    this.installOpenLayersRenderer(this.container.current, displaySet).then(() => {\n      this.setState({ isLoaded: true });\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (this.managedViewer && prevProps.displaySets !== this.props.displaySets) {\n      const { displaySets } = this.props;\n      const displaySet = displaySets[0];\n\n      this.microscopyService.clearAnnotations();\n\n      // loading SR\n      if (displaySet.Modality === 'SR') {\n        const referencedDisplaySet = displaySet.getSourceDisplaySet();\n        displaySet.load(referencedDisplaySet);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.microscopyService.removeViewer(this.viewer);\n  }\n\n  setViewportActiveHandler = () => {\n    const { setViewportActive, viewportId, activeViewportId } = this.props;\n\n    if (viewportId !== activeViewportId) {\n      setViewportActive(viewportId);\n    }\n  };\n\n  render() {\n    const style = { width: '100%', height: '100%' };\n    const displaySet = this.props.displaySets[0];\n    const firstInstance = displaySet.firstInstance || displaySet.instance;\n\n    return (\n      <div\n        className={'DicomMicroscopyViewer'}\n        style={style}\n        onClick={this.setViewportActiveHandler}\n      >\n        <div style={{ ...style, display: 'none' }}>\n          <div style={{ ...style }} ref={this.overlayElement}>\n            <div style={{ position: 'relative', height: '100%', width: '100%' }}>\n              {displaySet && firstInstance.imageId && (\n                <ViewportOverlay\n                  displaySet={displaySet}\n                  instance={displaySet.instance}\n                  metadata={displaySet.metadata}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n        {this.state.error ? (\n          <h2>{JSON.stringify(this.state.error)}</h2>\n        ) : (\n          <div\n            style={style}\n            ref={(ref: any) => {\n              this.container.current = ref;\n              this.props.resizeRef.current = ref;\n            }}\n          />\n        )}\n        {this.state.isLoaded ? null : (\n          <LoadingIndicatorProgress className={'h-full w-full bg-black'} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default DicomMicroscopyViewport;\n","import { errorHandler, DicomMetadataStore } from '@ohif/core';\nimport { StaticWadoClient } from '@ohif/extension-default';\n\n/**\n * create a DICOMwebClient object to be used by Dicom Microscopy Viewer\n *\n * Referenced the code from `/extensions/default/src/DicomWebDataSource/index.js`\n *\n * @param param0\n * @returns\n */\nexport default function getDicomWebClient({ extensionManager, servicesManager }: withAppTypes) {\n  const dataSourceConfig = window.config.dataSources.find(\n    ds => ds.sourceName === extensionManager.activeDataSource\n  );\n  const { userAuthenticationService } = servicesManager.services;\n\n  const { wadoRoot, staticWado, singlepart } = dataSourceConfig.configuration;\n\n  const wadoConfig = {\n    url: wadoRoot || '/dicomlocal',\n    staticWado,\n    singlepart,\n    headers: userAuthenticationService.getAuthorizationHeader(),\n    errorInterceptor: errorHandler.getHTTPErrorHandler(),\n  };\n\n  const client = new StaticWadoClient(wadoConfig);\n  client.wadoURL = wadoConfig.url;\n\n  if (extensionManager.activeDataSource === 'dicomlocal') {\n    /**\n     * For local data source, override the retrieveInstanceFrames() method of the\n     * dicomweb-client to retrieve image data from memory cached metadata.\n     * Other methods of the client doesn't matter, as we are feeding the DMV\n     * with the series metadata already.\n     *\n     * @param {Object} options\n     * @param {String} options.studyInstanceUID - Study Instance UID\n     * @param {String} options.seriesInstanceUID - Series Instance UID\n     * @param {String} options.sopInstanceUID - SOP Instance UID\n     * @param {String} options.frameNumbers - One-based indices of Frame Items\n     * @param {Object} [options.queryParams] - HTTP query parameters\n     * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n     */\n    //\n    client.retrieveInstanceFrames = async options => {\n      if (!('studyInstanceUID' in options)) {\n        throw new Error('Study Instance UID is required for retrieval of instance frames');\n      }\n      if (!('seriesInstanceUID' in options)) {\n        throw new Error('Series Instance UID is required for retrieval of instance frames');\n      }\n      if (!('sopInstanceUID' in options)) {\n        throw new Error('SOP Instance UID is required for retrieval of instance frames');\n      }\n      if (!('frameNumbers' in options)) {\n        throw new Error('frame numbers are required for retrieval of instance frames');\n      }\n      console.log(\n        `retrieve frames ${options.frameNumbers.toString()} of instance ${options.sopInstanceUID}`\n      );\n\n      const instance = DicomMetadataStore.getInstance(\n        options.studyInstanceUID,\n        options.seriesInstanceUID,\n        options.sopInstanceUID\n      );\n\n      const frameNumbers = Array.isArray(options.frameNumbers)\n        ? options.frameNumbers\n        : options.frameNumbers.split(',');\n\n      return frameNumbers.map(fr =>\n        Array.isArray(instance.PixelData) ? instance.PixelData[+fr - 1] : instance.PixelData\n      );\n    };\n  }\n\n  return client;\n}\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n","import { inv, multiply } from 'mathjs';\n\n// TODO -> This is pulled out of some internal logic from Dicom Microscopy Viewer,\n// We should likely just expose this there.\n\nexport default function coordinateFormatScoord3d2Geometry(coordinates, pyramid) {\n  let transform = false;\n  if (!Array.isArray(coordinates[0])) {\n    coordinates = [coordinates];\n    transform = true;\n  }\n  const metadata = pyramid[pyramid.length - 1];\n  const orientation = metadata.ImageOrientationSlide;\n  const spacing = _getPixelSpacing(metadata);\n  const origin = metadata.TotalPixelMatrixOriginSequence[0];\n  const offset = [\n    Number(origin.XOffsetInSlideCoordinateSystem),\n    Number(origin.YOffsetInSlideCoordinateSystem),\n  ];\n\n  coordinates = coordinates.map(c => {\n    const slideCoord = [c[0], c[1]];\n    const pixelCoord = mapSlideCoord2PixelCoord({\n      offset,\n      orientation,\n      spacing,\n      point: slideCoord,\n    });\n    return [pixelCoord[0], -(pixelCoord[1] + 1), 0];\n  });\n  if (transform) {\n    return coordinates[0];\n  }\n  return coordinates;\n}\n\nfunction _getPixelSpacing(metadata) {\n  if (metadata.PixelSpacing) {\n    return metadata.PixelSpacing;\n  }\n  const functionalGroup = metadata.SharedFunctionalGroupsSequence[0];\n  const pixelMeasures = functionalGroup.PixelMeasuresSequence[0];\n  return pixelMeasures.PixelSpacing;\n}\n\nfunction mapSlideCoord2PixelCoord(options) {\n  // X and Y Offset in Slide Coordinate System\n  if (!('offset' in options)) {\n    throw new Error('Option \"offset\" is required.');\n  }\n  if (!Array.isArray(options.offset)) {\n    throw new Error('Option \"offset\" must be an array.');\n  }\n  if (options.offset.length !== 2) {\n    throw new Error('Option \"offset\" must be an array with 2 elements.');\n  }\n  const offset = options.offset;\n\n  // Image Orientation Slide with direction cosines for Row and Column direction\n  if (!('orientation' in options)) {\n    throw new Error('Option \"orientation\" is required.');\n  }\n  if (!Array.isArray(options.orientation)) {\n    throw new Error('Option \"orientation\" must be an array.');\n  }\n  if (options.orientation.length !== 6) {\n    throw new Error('Option \"orientation\" must be an array with 6 elements.');\n  }\n  const orientation = options.orientation;\n\n  // Pixel Spacing along the Row and Column direction\n  if (!('spacing' in options)) {\n    throw new Error('Option \"spacing\" is required.');\n  }\n  if (!Array.isArray(options.spacing)) {\n    throw new Error('Option \"spacing\" must be an array.');\n  }\n  if (options.spacing.length !== 2) {\n    throw new Error('Option \"spacing\" must be an array with 2 elements.');\n  }\n  const spacing = options.spacing;\n\n  // X and Y coordinate in the Slide Coordinate System\n  if (!('point' in options)) {\n    throw new Error('Option \"point\" is required.');\n  }\n  if (!Array.isArray(options.point)) {\n    throw new Error('Option \"point\" must be an array.');\n  }\n  if (options.point.length !== 2) {\n    throw new Error('Option \"point\" must be an array with 2 elements.');\n  }\n  const point = options.point;\n\n  const m = [\n    [orientation[0] * spacing[1], orientation[3] * spacing[0], offset[0]],\n    [orientation[1] * spacing[1], orientation[4] * spacing[0], offset[1]],\n    [0, 0, 1],\n  ];\n  const mInverted = inv(m);\n\n  const vSlide = [[point[0]], [point[1]], [1]];\n\n  const vImage = multiply(mInverted, vSlide);\n\n  const row = Number(vImage[1][0].toFixed(4));\n  const col = Number(vImage[0][0].toFixed(4));\n  return [col, row];\n}\n","const defaultFill = {\n  color: 'rgba(255,255,255,0.4)',\n};\n\nconst emptyFill = {\n  color: 'rgba(255,255,255,0.0)',\n};\n\nconst defaultStroke = {\n  color: 'rgb(0,255,0)',\n  width: 1.5,\n};\n\nconst activeStroke = {\n  color: 'rgb(255,255,0)',\n  width: 1.5,\n};\n\nconst defaultStyle = {\n  image: {\n    circle: {\n      fill: defaultFill,\n      stroke: activeStroke,\n      radius: 5,\n    },\n  },\n  fill: defaultFill,\n  stroke: activeStroke,\n};\n\nconst emptyStyle = {\n  image: {\n    circle: {\n      fill: emptyFill,\n      stroke: defaultStroke,\n      radius: 5,\n    },\n  },\n  fill: emptyFill,\n  stroke: defaultStroke,\n};\n\nconst styles = {\n  active: defaultStyle,\n  default: emptyStyle,\n};\n\nexport default styles;\n","import coordinateFormatScoord3d2Geometry from '../utils/coordinateFormatScoord3d2Geometry';\nimport styles from '../utils/styles';\n\nimport { PubSubService } from '@ohif/core';\n\n// Events from the third-party viewer\nconst ApiEvents = {\n  /** Triggered when a ROI was added. */\n  ROI_ADDED: 'dicommicroscopyviewer_roi_added',\n  /** Triggered when a ROI was modified. */\n  ROI_MODIFIED: 'dicommicroscopyviewer_roi_modified',\n  /** Triggered when a ROI was removed. */\n  ROI_REMOVED: 'dicommicroscopyviewer_roi_removed',\n  /** Triggered when a ROI was drawn. */\n  ROI_DRAWN: `dicommicroscopyviewer_roi_drawn`,\n  /** Triggered when a ROI was selected. */\n  ROI_SELECTED: `dicommicroscopyviewer_roi_selected`,\n  /** Triggered when a viewport move has started. */\n  MOVE_STARTED: `dicommicroscopyviewer_move_started`,\n  /** Triggered when a viewport move has ended. */\n  MOVE_ENDED: `dicommicroscopyviewer_move_ended`,\n  /** Triggered when a loading of data has started. */\n  LOADING_STARTED: `dicommicroscopyviewer_loading_started`,\n  /** Triggered when a loading of data has ended. */\n  LOADING_ENDED: `dicommicroscopyviewer_loading_ended`,\n  /** Triggered when an error occurs during loading of data. */\n  LOADING_ERROR: `dicommicroscopyviewer_loading_error`,\n  /* Triggered when the loading of an image tile has started. */\n  FRAME_LOADING_STARTED: `dicommicroscopyviewer_frame_loading_started`,\n  /* Triggered when the loading of an image tile has ended. */\n  FRAME_LOADING_ENDED: `dicommicroscopyviewer_frame_loading_ended`,\n  /* Triggered when the error occurs during loading of an image tile. */\n  FRAME_LOADING_ERROR: `dicommicroscopyviewer_frame_loading_ended`,\n};\n\nconst EVENTS = {\n  ADDED: 'added',\n  MODIFIED: 'modified',\n  REMOVED: 'removed',\n  UPDATED: 'updated',\n  SELECTED: 'selected',\n};\n\n/**\n * ViewerManager encapsulates the complexity of the third-party viewer and\n * expose only the features/behaviors that are relevant to the application\n */\nclass ViewerManager extends PubSubService {\n  constructor(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\n    super(EVENTS);\n    this.viewer = viewer;\n    this.viewportId = viewportId;\n    this.container = container;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n\n    this.onRoiAdded = this.roiAddedHandler.bind(this);\n    this.onRoiModified = this.roiModifiedHandler.bind(this);\n    this.onRoiRemoved = this.roiRemovedHandler.bind(this);\n    this.onRoiSelected = this.roiSelectedHandler.bind(this);\n    this.contextMenuCallback = () => {};\n\n    // init symbols\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    this._drawingSource = symbols.find(p => p.description === 'drawingSource');\n    this._pyramid = symbols.find(p => p.description === 'pyramid');\n    this._map = symbols.find(p => p.description === 'map');\n    this._affine = symbols.find(p => p.description === 'affine');\n\n    this.registerEvents();\n    this.activateDefaultInteractions();\n  }\n\n  addContextMenuCallback(callback) {\n    this.contextMenuCallback = callback;\n  }\n\n  /**\n   * Destroys this managed viewer instance, clearing all the event handlers\n   */\n  destroy() {\n    this.unregisterEvents();\n  }\n\n  /**\n   * This is to overrides the _broadcastEvent method of PubSubService and always\n   * send the ROI graphic object and this managed viewer instance.\n   * Due to the way that PubSubService is written, the same name override of the\n   * function doesn't work.\n   *\n   * @param {String} key key Subscription key\n   * @param {Object} roiGraphic ROI graphic object created by the third-party API\n   */\n  publish(key, roiGraphic) {\n    this._broadcastEvent(key, {\n      roiGraphic,\n      managedViewer: this,\n    });\n  }\n\n  /**\n   * Registers all the relevant event handlers for the third-party API\n   */\n  registerEvents() {\n    this.container.addEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.addEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\n    this.container.addEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\n    this.container.addEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\n  }\n\n  /**\n   * Clears all the relevant event handlers for the third-party API\n   */\n  unregisterEvents() {\n    this.container.removeEventListener(ApiEvents.ROI_ADDED, this.onRoiAdded);\n    this.container.removeEventListener(ApiEvents.ROI_MODIFIED, this.onRoiModified);\n    this.container.removeEventListener(ApiEvents.ROI_REMOVED, this.onRoiRemoved);\n    this.container.removeEventListener(ApiEvents.ROI_SELECTED, this.onRoiSelected);\n  }\n\n  /**\n   * Handles the ROI_ADDED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiAddedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.ADDED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_MODIFIED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiModifiedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.MODIFIED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_REMOVED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiRemovedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.REMOVED, roiGraphic);\n    this.publish(EVENTS.UPDATED, roiGraphic);\n  }\n\n  /**\n   * Handles the ROI_SELECTED event triggered by the third-party API\n   *\n   * @param {Event} event Event triggered by the third-party API\n   */\n  roiSelectedHandler(event) {\n    const roiGraphic = event.detail.payload;\n    this.publish(EVENTS.SELECTED, roiGraphic);\n  }\n\n  /**\n   * Run the given callback operation without triggering any events for this\n   * instance, so subscribers will not be affected\n   *\n   * @param {Function} callback Callback that will run sinlently\n   */\n  runSilently(callback) {\n    this.unregisterEvents();\n    callback();\n    this.registerEvents();\n  }\n\n  /**\n   * Removes all the ROI graphics from the third-party API\n   */\n  clearRoiGraphics() {\n    this.runSilently(() => this.viewer.removeAllROIs());\n  }\n\n  showROIs() {\n    this.viewer.showROIs();\n  }\n\n  hideROIs() {\n    this.viewer.hideROIs();\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added\n   */\n  addRoiGraphic(roiGraphic) {\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n  }\n\n  /**\n   * Adds the given ROI graphic into the third-party API, and also add a label.\n   * Used for importing from SR.\n   *\n   * @param {Object} roiGraphic ROI graphic object to be added.\n   * @param {String} label The label of the annotation.\n   */\n  addRoiGraphicWithLabel(roiGraphic, label) {\n    // NOTE: Dicom Microscopy Viewer will override styles for \"Text\" evaluations\n    // to hide all other geometries, we are not going to use its label.\n    // if (label) {\n    //   if (!roiGraphic.properties) roiGraphic.properties = {};\n    //   roiGraphic.properties.label = label;\n    // }\n    this.runSilently(() => this.viewer.addROI(roiGraphic, styles.default));\n\n    this._broadcastEvent(EVENTS.ADDED, {\n      roiGraphic,\n      managedViewer: this,\n      label,\n    });\n  }\n\n  /**\n   * Sets ROI style\n   *\n   * @param {String} uid ROI graphic UID to be styled\n   * @param {object} styleOptions - Style options\n   * @param {object} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.viewer.setROIStyle(uid, styleOptions);\n  }\n\n  /**\n   * Removes the ROI graphic with the given UID from the third-party API\n   *\n   * @param {String} uid ROI graphic UID to be removed\n   */\n  removeRoiGraphic(uid) {\n    this.viewer.removeROI(uid);\n  }\n\n  /**\n   * Update properties of regions of interest.\n   *\n   * @param {object} roi - ROI to be updated\n   * @param {string} roi.uid - Unique identifier of the region of interest\n   * @param {object} roi.properties - ROI properties\n   * @returns {void}\n   */\n  updateROIProperties({ uid, properties }) {\n    this.viewer.updateROI({ uid, properties });\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @returns {void}\n   */\n  toggleOverviewMap() {\n    this.viewer.toggleOverviewMap();\n  }\n\n  /**\n   * Activates the viewer default interactions\n   * @returns {void}\n   */\n  activateDefaultInteractions() {\n    /** Disable browser's native context menu inside the canvas */\n    document.querySelector('.DicomMicroscopyViewer').addEventListener(\n      'contextmenu',\n      event => {\n        event.preventDefault();\n        // comment out when context menu for microscopy is enabled\n        // if (typeof this.contextMenuCallback === 'function') {\n        //   this.contextMenuCallback(event);\n        // }\n      },\n      false\n    );\n    const defaultInteractions = [\n      [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ],\n      [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ],\n      ['modify', {}],\n    ];\n    this.activateInteractions(defaultInteractions);\n  }\n\n  /**\n   * Activates interactions\n   * @param {Array} interactions Interactions to be activated\n   * @returns {void}\n   */\n  activateInteractions(interactions) {\n    const interactionsMap = {\n      draw: activate => (activate ? 'activateDrawInteraction' : 'deactivateDrawInteraction'),\n      modify: activate => (activate ? 'activateModifyInteraction' : 'deactivateModifyInteraction'),\n      translate: activate =>\n        activate ? 'activateTranslateInteraction' : 'deactivateTranslateInteraction',\n      snap: activate => (activate ? 'activateSnapInteraction' : 'deactivateSnapInteraction'),\n      dragPan: activate =>\n        activate ? 'activateDragPanInteraction' : 'deactivateDragPanInteraction',\n      dragZoom: activate =>\n        activate ? 'activateDragZoomInteraction' : 'deactivateDragZoomInteraction',\n      select: activate => (activate ? 'activateSelectInteraction' : 'deactivateSelectInteraction'),\n    };\n\n    const availableInteractionsName = Object.keys(interactionsMap);\n    availableInteractionsName.forEach(availableInteractionName => {\n      const interaction = interactions.find(\n        interaction => interaction[0] === availableInteractionName\n      );\n      if (!interaction) {\n        const deactivateInteractionMethod = interactionsMap[availableInteractionName](false);\n        this.viewer[deactivateInteractionMethod]();\n      } else {\n        const [name, config] = interaction;\n        const activateInteractionMethod = interactionsMap[name](true);\n        this.viewer[activateInteractionMethod](config);\n      }\n    });\n  }\n\n  /**\n   * Accesses the internals of third-party API and returns the OpenLayers Map\n   *\n   * @returns {Object} OpenLayers Map component instance\n   */\n  _getMapView() {\n    const map = this._getMap();\n    return map.getView();\n  }\n\n  _getMap() {\n    const symbols = Object.getOwnPropertySymbols(this.viewer);\n    const _map = symbols.find(s => String(s) === 'Symbol(map)');\n    window['map'] = this.viewer[_map];\n    return this.viewer[_map];\n  }\n\n  /**\n   * Returns the current state for the OpenLayers View\n   *\n   * @returns {Object} Current view state\n   */\n  getViewState() {\n    const view = this._getMapView();\n    return {\n      center: view.getCenter(),\n      resolution: view.getResolution(),\n      zoom: view.getZoom(),\n    };\n  }\n\n  /**\n   * Sets the current state for the OpenLayers View\n   *\n   * @param {Object} viewState View state to be applied\n   */\n  setViewState(viewState) {\n    const view = this._getMapView();\n\n    view.setZoom(viewState.zoom);\n    view.setResolution(viewState.resolution);\n    view.setCenter(viewState.center);\n  }\n\n  setViewStateByExtent(roiAnnotation) {\n    const coordinates = roiAnnotation.getCoordinates();\n\n    if (Array.isArray(coordinates[0]) && !coordinates[2]) {\n      this._jumpToPolyline(coordinates);\n    } else if (Array.isArray(coordinates[0])) {\n      this._jumpToPolygonOrEllipse(coordinates);\n    } else {\n      this._jumpToPoint(coordinates);\n    }\n  }\n\n  _jumpToPoint(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    view.setCenter(mappedCoord);\n  }\n\n  _jumpToPolyline(coord) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    const mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n    const view = this._getMapView();\n\n    const x = mappedCoord[0];\n    const y = mappedCoord[1];\n\n    const xab = (x[0] + y[0]) / 2;\n    const yab = (x[1] + y[1]) / 2;\n    const midpoint = [xab, yab];\n\n    view.setCenter(midpoint);\n  }\n\n  _jumpToPolygonOrEllipse(coordinates) {\n    const pyramid = this.viewer[this._pyramid].metadata;\n\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    coordinates.forEach(coord => {\n      let mappedCoord = coordinateFormatScoord3d2Geometry(coord, pyramid);\n\n      const [x, y] = mappedCoord;\n      if (x < minX) {\n        minX = x;\n      } else if (x > maxX) {\n        maxX = x;\n      }\n\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n    });\n\n    const width = maxX - minX;\n    const height = maxY - minY;\n\n    minX -= 0.5 * width;\n    maxX += 0.5 * width;\n    minY -= 0.5 * height;\n    maxY += 0.5 * height;\n\n    const map = this._getMap();\n    map.getView().fit([minX, minY, maxX, maxY], map.getSize());\n  }\n}\n\nexport { EVENTS };\n\nexport default ViewerManager;\n","import areaOfPolygon from './areaOfPolygon';\n\nimport { PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  LABEL_UPDATED: 'labelUpdated',\n  GRAPHIC_UPDATED: 'graphicUpdated',\n  VIEW_UPDATED: 'viewUpdated',\n  REMOVED: 'removed',\n};\n\n/**\n * Represents a single annotation for the Microscopy Viewer\n */\nclass RoiAnnotation extends PubSubService {\n  constructor(roiGraphic, studyInstanceUID, seriesInstanceUID, label = '', viewState = null) {\n    super(EVENTS);\n    this.uid = roiGraphic.uid;\n    this.roiGraphic = roiGraphic;\n    this.studyInstanceUID = studyInstanceUID;\n    this.seriesInstanceUID = seriesInstanceUID;\n    this.label = label;\n    this.viewState = viewState;\n    this.setMeasurements(roiGraphic);\n  }\n\n  getScoord3d() {\n    const roiGraphic = this.roiGraphic;\n\n    const roiGraphicSymbols = Object.getOwnPropertySymbols(roiGraphic);\n    const _scoord3d = roiGraphicSymbols.find(s => String(s) === 'Symbol(scoord3d)');\n\n    return roiGraphic[_scoord3d];\n  }\n\n  getCoordinates() {\n    const scoord3d = this.getScoord3d();\n    const scoord3dSymbols = Object.getOwnPropertySymbols(scoord3d);\n\n    const _coordinates = scoord3dSymbols.find(s => String(s) === 'Symbol(coordinates)');\n\n    const coordinates = scoord3d[_coordinates];\n    return coordinates;\n  }\n\n  /**\n   * When called will trigger the REMOVED event\n   */\n  destroy() {\n    this._broadcastEvent(EVENTS.REMOVED, this);\n  }\n\n  /**\n   * Updates the ROI graphic for the annotation and triggers the GRAPHIC_UPDATED\n   * event\n   *\n   * @param {Object} roiGraphic\n   */\n  setRoiGraphic(roiGraphic) {\n    this.roiGraphic = roiGraphic;\n    this.setMeasurements();\n    this._broadcastEvent(EVENTS.GRAPHIC_UPDATED, this);\n  }\n\n  /**\n   * Update ROI measurement values based on its scoord3d coordinates.\n   *\n   * @returns {void}\n   */\n  setMeasurements() {\n    const type = this.roiGraphic.scoord3d.graphicType;\n    const coordinates = this.roiGraphic.scoord3d.graphicData;\n\n    switch (type) {\n      case 'ELLIPSE':\n        // This is a circle so only need one side\n        const point1 = coordinates[0];\n        const point2 = coordinates[1];\n\n        let xLength2 = point2[0] - point1[0];\n        let yLength2 = point2[1] - point1[1];\n\n        xLength2 *= xLength2;\n        yLength2 *= yLength2;\n\n        const length = Math.sqrt(xLength2 + yLength2);\n        const radius = length / 2;\n\n        const areaEllipse = Math.PI * radius * radius;\n        this._area = areaEllipse;\n        this._length = undefined;\n        break;\n\n      case 'POLYGON':\n        const areaPolygon = areaOfPolygon(coordinates);\n        this._area = areaPolygon;\n        this._length = undefined;\n        break;\n\n      case 'POINT':\n        this._area = undefined;\n        this._length = undefined;\n        break;\n\n      case 'POLYLINE':\n        let len = 0;\n        for (let i = 1; i < coordinates.length; i++) {\n          const p1 = coordinates[i - 1];\n          const p2 = coordinates[i];\n\n          let xLen = p2[0] - p1[0];\n          let yLen = p2[1] - p1[1];\n\n          xLen *= xLen;\n          yLen *= yLen;\n          len += Math.sqrt(xLen + yLen);\n        }\n\n        this._area = undefined;\n        this._length = len;\n        break;\n    }\n  }\n\n  /**\n   * Update the OpenLayer Map's view state for the annotation and triggers the\n   * VIEW_UPDATED event\n   *\n   * @param {Object} viewState The new view state for the annotation\n   */\n  setViewState(viewState) {\n    this.viewState = viewState;\n    this._broadcastEvent(EVENTS.VIEW_UPDATED, this);\n  }\n\n  /**\n   * Update the label for the annotation and triggers the LABEL_UPDATED event\n   *\n   * @param {String} label New label for the annotation\n   */\n  setLabel(label, finding) {\n    this.label = label || (finding && finding.CodeMeaning);\n    this.finding = finding || {\n      CodingSchemeDesignator: '@ohif/extension-dicom-microscopy',\n      CodeValue: label,\n      CodeMeaning: label,\n    };\n    this._broadcastEvent(EVENTS.LABEL_UPDATED, this);\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation.\n   * Difference with getDetailedLabel() is that this will return empty string for empty\n   * label.\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getLabel() {\n    const label = this.label ? `${this.label}` : '';\n    return label;\n  }\n\n  /**\n   * Returns the geometry type of the annotation concatenated with the label\n   * defined for the annotation\n   *\n   * @returns {String} Text with geometry type and label\n   */\n  getDetailedLabel() {\n    const label = this.label ? `${this.label}` : '(empty)';\n    return label;\n  }\n\n  getLength() {\n    return this._length;\n  }\n\n  getArea() {\n    return this._area;\n  }\n}\n\nexport { EVENTS };\n\nexport default RoiAnnotation;\n","export default function areaOfPolygon(coordinates) {\n  // Shoelace algorithm.\n  const n = coordinates.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area += (coordinates[j][0] + coordinates[i][0]) * (coordinates[j][1] - coordinates[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum\n  // (The value is halved as we are summing up triangles, not rectangles).\n  return Math.abs(area / 2.0);\n}\n","import ViewerManager, { EVENTS as ViewerEvents } from '../tools/viewerManager';\nimport RoiAnnotation, { EVENTS as AnnotationEvents } from '../utils/RoiAnnotation';\nimport styles from '../utils/styles';\nimport { DicomMetadataStore, PubSubService } from '@ohif/core';\n\nconst EVENTS = {\n  ANNOTATION_UPDATED: 'annotationUpdated',\n  ANNOTATION_SELECTED: 'annotationSelected',\n  ANNOTATION_REMOVED: 'annotationRemoved',\n  RELABEL: 'relabel',\n  DELETE: 'delete',\n};\n\n/**\n * MicroscopyService is responsible to manage multiple third-party API's\n * microscopy viewers expose methods to manage the interaction with these\n * viewers and handle their ROI graphics to create, remove and modify the\n * ROI annotations relevant to the application\n */\nexport default class MicroscopyService extends PubSubService {\n  public static REGISTRATION = servicesManager => {\n    return {\n      name: 'microscopyService',\n      altName: 'MicroscopyService',\n      create: ({ configuration = {} }) => {\n        return new MicroscopyService(servicesManager);\n      },\n    };\n  };\n\n  servicesManager: any;\n\n  managedViewers = new Set();\n  roiUids = new Set();\n  annotations = {};\n  selectedAnnotation = null;\n  pendingFocus = false;\n\n  constructor(servicesManager) {\n    super(EVENTS);\n    this.servicesManager = servicesManager;\n    this._onRoiAdded = this._onRoiAdded.bind(this);\n    this._onRoiModified = this._onRoiModified.bind(this);\n    this._onRoiRemoved = this._onRoiRemoved.bind(this);\n    this._onRoiUpdated = this._onRoiUpdated.bind(this);\n    this._onRoiSelected = this._onRoiSelected.bind(this);\n    this.isROIsVisible = true;\n  }\n\n  /**\n   * Clears all the annotations and managed viewers, setting the manager state\n   * to its initial state\n   */\n  clear() {\n    this.managedViewers.forEach(managedViewer => managedViewer.destroy());\n    this.managedViewers.clear();\n    for (const key in this.annotations) {\n      delete this.annotations[key];\n    }\n\n    this.roiUids.clear();\n    this.selectedAnnotation = null;\n    this.pendingFocus = false;\n  }\n\n  clearAnnotations() {\n    Object.keys(this.annotations).forEach(uid => {\n      this.removeAnnotation(this.annotations[uid]);\n    });\n  }\n\n  /**\n   * Observes when a ROI graphic is added, creating the correspondent annotation\n   * with the current graphic and view state.\n   * Creates a subscription for label updating for the created annotation and\n   * publishes an ANNOTATION_UPDATED event when it happens.\n   * Also triggers the relabel process after the graphic is placed.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiAdded(data) {\n    const { roiGraphic, managedViewer, label } = data;\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const viewState = managedViewer.getViewState();\n\n    const roiAnnotation = new RoiAnnotation(\n      roiGraphic,\n      studyInstanceUID,\n      seriesInstanceUID,\n      '',\n      viewState\n    );\n\n    this.roiUids.add(roiGraphic.uid);\n    this.annotations[roiGraphic.uid] = roiAnnotation;\n\n    roiAnnotation.subscribe(AnnotationEvents.LABEL_UPDATED, () => {\n      this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, roiAnnotation);\n    });\n\n    if (label !== undefined) {\n      roiAnnotation.setLabel(label);\n    } else {\n      const onRelabel = item =>\n        managedViewer.updateROIProperties({\n          uid: roiGraphic.uid,\n          properties: { label: item.label, finding: item.finding },\n        });\n      this.triggerRelabel(roiAnnotation, true, onRelabel);\n    }\n  }\n\n  /**\n   * Observes when a ROI graphic is modified, updating the correspondent\n   * annotation with the current graphic and view state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The modified ROI graphic object\n   */\n  _onRoiModified(data) {\n    const { roiGraphic, managedViewer } = data;\n    const roiAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (!roiAnnotation) {\n      return;\n    }\n    roiAnnotation.setRoiGraphic(roiGraphic);\n    roiAnnotation.setViewState(managedViewer.getViewState());\n  }\n\n  /**\n   * Observes when a ROI graphic is removed, reflecting the removal in the\n   * annotations' state.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The removed ROI graphic object\n   */\n  _onRoiRemoved(data) {\n    const { roiGraphic } = data;\n    this.roiUids.delete(roiGraphic.uid);\n    this.annotations[roiGraphic.uid].destroy();\n    delete this.annotations[roiGraphic.uid];\n    this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiGraphic);\n  }\n\n  /**\n   * Observes any changes on ROI graphics and synchronize all the managed\n   * viewers to reflect those changes.\n   * Also publishes an ANNOTATION_UPDATED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiUpdated(data) {\n    const { roiGraphic, managedViewer } = data;\n    this.synchronizeViewers(managedViewer);\n    this._broadcastEvent(EVENTS.ANNOTATION_UPDATED, this.getAnnotation(roiGraphic.uid));\n  }\n\n  /**\n   * Observes when an ROI is selected.\n   * Also publishes an ANNOTATION_SELECTED event to notify the subscribers.\n   *\n   * @param {Object} data The published data\n   * @param {Object} data.roiGraphic The added ROI graphic object\n   * @param {ViewerManager} data.managedViewer The origin viewer for the event\n   */\n  _onRoiSelected(data) {\n    const { roiGraphic } = data;\n    const selectedAnnotation = this.getAnnotation(roiGraphic.uid);\n    if (selectedAnnotation && selectedAnnotation !== this.getSelectedAnnotation()) {\n      if (this.selectedAnnotation) {\n        this.clearSelection();\n      }\n      this.selectedAnnotation = selectedAnnotation;\n      this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, selectedAnnotation);\n    }\n  }\n\n  /**\n   * Creates the subscriptions for the managed viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _addManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription = managedViewer.subscribe(\n      ViewerEvents.ADDED,\n      this._onRoiAdded\n    );\n    managedViewer._roiModifiedSubscription = managedViewer.subscribe(\n      ViewerEvents.MODIFIED,\n      this._onRoiModified\n    );\n    managedViewer._roiRemovedSubscription = managedViewer.subscribe(\n      ViewerEvents.REMOVED,\n      this._onRoiRemoved\n    );\n    managedViewer._roiUpdatedSubscription = managedViewer.subscribe(\n      ViewerEvents.UPDATED,\n      this._onRoiUpdated\n    );\n    managedViewer._roiSelectedSubscription = managedViewer.subscribe(\n      ViewerEvents.UPDATED,\n      this._onRoiSelected\n    );\n  }\n\n  /**\n   * Removes the subscriptions for the managed viewer being removed\n   *\n   * @param {ViewerManager} managedViewer The viewer being removed\n   */\n  _removeManagedViewerSubscriptions(managedViewer) {\n    managedViewer._roiAddedSubscription && managedViewer._roiAddedSubscription.unsubscribe();\n    managedViewer._roiModifiedSubscription && managedViewer._roiModifiedSubscription.unsubscribe();\n    managedViewer._roiRemovedSubscription && managedViewer._roiRemovedSubscription.unsubscribe();\n    managedViewer._roiUpdatedSubscription && managedViewer._roiUpdatedSubscription.unsubscribe();\n    managedViewer._roiSelectedSubscription && managedViewer._roiSelectedSubscription.unsubscribe();\n\n    managedViewer._roiAddedSubscription = null;\n    managedViewer._roiModifiedSubscription = null;\n    managedViewer._roiRemovedSubscription = null;\n    managedViewer._roiUpdatedSubscription = null;\n    managedViewer._roiSelectedSubscription = null;\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study and series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  _getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Returns the managed viewers that are displaying the image with the given\n   * study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   *\n   * @returns {Array} The managed viewers for the given series UID\n   */\n  getManagedViewersForStudy(studyInstanceUID) {\n    const filter = managedViewer => managedViewer.studyInstanceUID === studyInstanceUID;\n    return Array.from(this.managedViewers).filter(filter);\n  }\n\n  /**\n   * Restores the created annotations for the viewer being added\n   *\n   * @param {ViewerManager} managedViewer The viewer being added\n   */\n  _restoreAnnotations(managedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = managedViewer;\n    const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\n    annotations.forEach(roiAnnotation => {\n      managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n    });\n  }\n\n  /**\n   * Creates a managed viewer instance for the given third-party API's viewer.\n   * Restores existing annotations for the given study/series.\n   * Adds event subscriptions for the viewer being added.\n   * Focuses the selected annotation when the viewer is being loaded into the\n   * active viewport.\n   *\n   * @param viewer - Third-party viewer API's object to be managed\n   * @param viewportId - The viewport Id where the viewer will be loaded\n   * @param container - The DOM element where it will be rendered\n   * @param studyInstanceUID - The study UID of the loaded image\n   * @param seriesInstanceUID - The series UID of the loaded image\n   * @param displaySets - All displaySets related to the same StudyInstanceUID\n   *\n   * @returns {ViewerManager} managed viewer\n   */\n  addViewer(viewer, viewportId, container, studyInstanceUID, seriesInstanceUID) {\n    const managedViewer = new ViewerManager(\n      viewer,\n      viewportId,\n      container,\n      studyInstanceUID,\n      seriesInstanceUID\n    );\n\n    this._restoreAnnotations(managedViewer);\n    viewer._manager = managedViewer;\n    this.managedViewers.add(managedViewer);\n\n    // this._potentiallyLoadSR(studyInstanceUID, displaySets);\n    this._addManagedViewerSubscriptions(managedViewer);\n\n    if (this.pendingFocus) {\n      this.pendingFocus = false;\n      this.focusAnnotation(this.selectedAnnotation, viewportId);\n    }\n\n    return managedViewer;\n  }\n\n  _potentiallyLoadSR(StudyInstanceUID, displaySets) {\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    const { FrameOfReferenceUID, othersFrameOfReferenceUID } = smDisplaySet;\n\n    if (!studyMetadata) {\n      return;\n    }\n\n    let derivedDisplaySets = FrameOfReferenceUID\n      ? displaySets.filter(\n          ds =>\n            ds.ReferencedFrameOfReferenceUID === FrameOfReferenceUID ||\n            // sometimes each depth instance has the different FrameOfReferenceID\n            othersFrameOfReferenceUID.includes(ds.ReferencedFrameOfReferenceUID)\n        )\n      : [];\n\n    if (!derivedDisplaySets.length) {\n      return;\n    }\n\n    derivedDisplaySets = derivedDisplaySets.filter(ds => ds.Modality === 'SR');\n\n    if (derivedDisplaySets.some(ds => ds.isLoaded === true)) {\n      // Don't auto load\n      return;\n    }\n\n    // find most recent and load it.\n    let recentDateTime = 0;\n    let recentDisplaySet = derivedDisplaySets[0];\n\n    derivedDisplaySets.forEach(ds => {\n      const dateTime = Number(`${ds.SeriesDate}${ds.SeriesTime}`);\n      if (dateTime > recentDateTime) {\n        recentDateTime = dateTime;\n        recentDisplaySet = ds;\n      }\n    });\n\n    recentDisplaySet.isLoading = true;\n\n    recentDisplaySet.load(smDisplaySet);\n  }\n\n  /**\n   * Removes the given third-party viewer API's object from the managed viewers\n   * and clears all its event subscriptions\n   *\n   * @param {Object} viewer Third-party viewer API's object to be removed\n   */\n  removeViewer(viewer) {\n    const managedViewer = viewer._manager;\n\n    this._removeManagedViewerSubscriptions(managedViewer);\n    managedViewer.destroy();\n    this.managedViewers.delete(managedViewer);\n  }\n\n  /**\n   * Toggle ROIs visibility\n   */\n  toggleROIsVisibility() {\n    this.isROIsVisible ? this.hideROIs() : this.showROIs;\n    this.isROIsVisible = !this.isROIsVisible;\n  }\n\n  /**\n   * Hide all ROIs\n   */\n  hideROIs() {\n    this.managedViewers.forEach(mv => mv.hideROIs());\n  }\n\n  /** Show all ROIs */\n  showROIs() {\n    this.managedViewers.forEach(mv => mv.showROIs());\n  }\n\n  /**\n   * Returns a RoiAnnotation instance for the given ROI UID\n   *\n   * @param {String} uid UID of the annotation\n   *\n   * @returns {RoiAnnotation} The RoiAnnotation instance found for the given UID\n   */\n  getAnnotation(uid) {\n    return this.annotations[uid];\n  }\n\n  /**\n   * Returns all the RoiAnnotation instances being managed\n   *\n   * @returns {Array} All RoiAnnotation instances\n   */\n  getAnnotations() {\n    const annotations = [];\n    Object.keys(this.annotations).forEach(uid => {\n      annotations.push(this.getAnnotation(uid));\n    });\n    return annotations;\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study UID\n   *\n   * @param {String} studyInstanceUID UID for the study\n   */\n  getAnnotationsForStudy(studyInstanceUID) {\n    const filter = a => a.studyInstanceUID === studyInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the RoiAnnotation instances registered with the given study and\n   * series UIDs\n   *\n   * @param {String} studyInstanceUID UID for the study\n   * @param {String} seriesInstanceUID UID for the series\n   */\n  getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID) {\n    const filter = annotation =>\n      annotation.studyInstanceUID === studyInstanceUID &&\n      annotation.seriesInstanceUID === seriesInstanceUID;\n    return this.getAnnotations().filter(filter);\n  }\n\n  /**\n   * Returns the selected RoiAnnotation instance or null if none is selected\n   *\n   * @returns {RoiAnnotation} The selected RoiAnnotation instance\n   */\n  getSelectedAnnotation() {\n    return this.selectedAnnotation;\n  }\n\n  /**\n   * Clear current RoiAnnotation selection\n   */\n  clearSelection() {\n    if (this.selectedAnnotation) {\n      this.setROIStyle(this.selectedAnnotation.uid, {\n        stroke: {\n          color: '#00ff00',\n        },\n      });\n    }\n    this.selectedAnnotation = null;\n  }\n\n  /**\n   * Selects the given RoiAnnotation instance, publishing an ANNOTATION_SELECTED\n   * event to notify all the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be selected\n   */\n  selectAnnotation(roiAnnotation) {\n    if (this.selectedAnnotation) {\n      this.clearSelection();\n    }\n\n    this.selectedAnnotation = roiAnnotation;\n    this._broadcastEvent(EVENTS.ANNOTATION_SELECTED, roiAnnotation);\n    this.setROIStyle(roiAnnotation.uid, styles.active);\n  }\n\n  /**\n   * Toggles overview map\n   *\n   * @param viewportId The active viewport index\n   * @returns {void}\n   */\n  toggleOverviewMap(viewportId) {\n    const managedViewers = Array.from(this.managedViewers);\n    const managedViewer = managedViewers.find(mv => mv.viewportId === viewportId);\n    if (managedViewer) {\n      managedViewer.toggleOverviewMap();\n    }\n  }\n\n  /**\n   * Removes a RoiAnnotation instance from the managed annotations and reflects\n   * its removal on all third-party viewers being managed\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be removed\n   */\n  removeAnnotation(roiAnnotation) {\n    const { uid, studyInstanceUID, seriesInstanceUID } = roiAnnotation;\n    const filter = managedViewer =>\n      managedViewer.studyInstanceUID === studyInstanceUID &&\n      managedViewer.seriesInstanceUID === seriesInstanceUID;\n\n    const managedViewers = Array.from(this.managedViewers).filter(filter);\n\n    managedViewers.forEach(managedViewer => managedViewer.removeRoiGraphic(uid));\n\n    if (this.annotations[uid]) {\n      this.roiUids.delete(uid);\n      this.annotations[uid].destroy();\n      delete this.annotations[uid];\n\n      this._broadcastEvent(EVENTS.ANNOTATION_REMOVED, roiAnnotation);\n    }\n  }\n\n  /**\n   * Focus the given RoiAnnotation instance by changing the OpenLayers' Map view\n   * state of the managed viewer with the given viewport index.\n   * If the image for the given annotation is not yet loaded into the viewport,\n   * it will set a pendingFocus flag to true in order to perform the focus when\n   * the managed viewer instance is created.\n   *\n   * @param {RoiAnnotation} roiAnnotation RoiAnnotation instance to be focused\n   * @param {string} viewportId Index of the viewport to focus\n   */\n  focusAnnotation(roiAnnotation, viewportId) {\n    const filter = mv => mv.viewportId === viewportId;\n    const managedViewer = Array.from(this.managedViewers).find(filter);\n    if (managedViewer) {\n      managedViewer.setViewStateByExtent(roiAnnotation);\n    } else {\n      this.pendingFocus = true;\n    }\n  }\n\n  /**\n   * Synchronize the ROI graphics for all the managed viewers that has the same\n   * series UID of the given managed viewer\n   *\n   * @param {ViewerManager} baseManagedViewer Reference managed viewer\n   */\n  synchronizeViewers(baseManagedViewer) {\n    const { studyInstanceUID, seriesInstanceUID } = baseManagedViewer;\n    const managedViewers = this._getManagedViewersForSeries(studyInstanceUID, seriesInstanceUID);\n\n    // Prevent infinite loops arrising from updates.\n    managedViewers.forEach(managedViewer => this._removeManagedViewerSubscriptions(managedViewer));\n\n    managedViewers.forEach(managedViewer => {\n      if (managedViewer === baseManagedViewer) {\n        return;\n      }\n\n      const annotations = this.getAnnotationsForSeries(studyInstanceUID, seriesInstanceUID);\n      managedViewer.clearRoiGraphics();\n      annotations.forEach(roiAnnotation => {\n        managedViewer.addRoiGraphic(roiAnnotation.roiGraphic);\n      });\n    });\n\n    managedViewers.forEach(managedViewer => this._addManagedViewerSubscriptions(managedViewer));\n  }\n\n  /**\n   * Activates interactions across all the viewers being managed\n   *\n   * @param {Array} interactions interactions\n   */\n  activateInteractions(interactions) {\n    this.managedViewers.forEach(mv => mv.activateInteractions(interactions));\n    this.activeInteractions = interactions;\n  }\n\n  getActiveInteractions() {\n    return this.activeInteractions;\n  }\n\n  /**\n   * Triggers the relabelling process for the given RoiAnnotation instance, by\n   * publishing the RELABEL event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be relabelled\n   * @param {boolean} newAnnotation Whether the annotation is newly drawn (so it deletes on cancel).\n   */\n  triggerRelabel(roiAnnotation, newAnnotation = false, onRelabel) {\n    if (!onRelabel) {\n      onRelabel = ({ label }) =>\n        this.managedViewers.forEach(mv =>\n          mv.updateROIProperties({\n            uid: roiAnnotation.uid,\n            properties: { label },\n          })\n        );\n    }\n\n    this._broadcastEvent(EVENTS.RELABEL, {\n      roiAnnotation,\n      deleteCallback: () => this.removeAnnotation(roiAnnotation),\n      successCallback: onRelabel,\n      newAnnotation,\n    });\n  }\n\n  /**\n   * Triggers the deletion process for the given RoiAnnotation instance, by\n   * publishing the DELETE event to notify the subscribers\n   *\n   * @param {RoiAnnotation} roiAnnotation The instance to be deleted\n   */\n  triggerDelete(roiAnnotation) {\n    this._broadcastEvent(EVENTS.DELETE, roiAnnotation);\n  }\n\n  /**\n   * Set ROI style for all managed viewers\n   *\n   * @param {string} uid The ROI uid that will be styled\n   * @param {object} styleOptions - Style options\n   * @param {object*} styleOptions.stroke - Style options for the outline of the geometry\n   * @param {number[]} styleOptions.stroke.color - RGBA color of the outline\n   * @param {number} styleOptions.stroke.width - Width of the outline\n   * @param {object*} styleOptions.fill - Style options for body the geometry\n   * @param {number[]} styleOptions.fill.color - RGBA color of the body\n   * @param {object*} styleOptions.image - Style options for image\n   */\n  setROIStyle(uid, styleOptions) {\n    this.managedViewers.forEach(mv => mv.setROIStyle(uid, styleOptions));\n  }\n\n  /**\n   * Get all managed viewers\n   *\n   * @returns {Array} managedViewers\n   */\n  getAllManagedViewers() {\n    return Array.from(this.managedViewers);\n  }\n}\n\nexport { EVENTS };\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\n/**\n *\n * @param {*} data\n * @param {*} data.text\n * @param {*} data.label\n * @param {*} event\n * @param {func} callback\n * @param {*} isArrowAnnotateInputDialog\n */\nexport default function callInputDialog({\n  uiDialogService,\n  title = 'Annotation',\n  defaultValue = '',\n  callback = (value: string, action: string) => {},\n}) {\n  const dialogId = 'microscopy-input-dialog';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.value, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: title,\n        value: { value: defaultValue },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter your annotation\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.defaultValue}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, value: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ExtensionManager, CommandsManager, DicomMetadataStore } from '@ohif/core';\nimport { MeasurementTable } from '@ohif/ui';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { EVENTS as MicroscopyEvents } from '../../services/MicroscopyService';\nimport dcmjs from 'dcmjs';\nimport callInputDialog from '../../utils/callInputDialog';\nimport constructSR from '../../utils/constructSR';\nimport { saveByteArray } from '../../utils/saveByteArray';\n\nlet saving = false;\nconst { datasetToBuffer } = dcmjs.data;\n\nconst formatArea = area => {\n  let mult = 1;\n  let unit = 'mm';\n  if (area > 1000000) {\n    unit = 'm';\n    mult = 1 / 1000000;\n  } else if (area < 1) {\n    unit = 'μm';\n    mult = 1000000;\n  }\n  return `${(area * mult).toFixed(2)} ${unit}²`;\n};\n\nconst formatLength = (length, unit) => {\n  let mult = 1;\n  if (unit == 'km' || (!unit && length > 1000000)) {\n    unit = 'km';\n    mult = 1 / 1000000;\n  } else if (unit == 'm' || (!unit && length > 1000)) {\n    unit = 'm';\n    mult = 1 / 1000;\n  } else if (unit == 'μm' || (!unit && length < 1)) {\n    unit = 'μm';\n    mult = 1000;\n  } else if (unit && unit != 'mm') {\n    throw new Error(`Unknown length unit ${unit}`);\n  } else {\n    unit = 'mm';\n  }\n  return `${(length * mult).toFixed(2)} ${unit}`;\n};\n\ninterface IMicroscopyPanelProps extends WithTranslation {\n  viewports: PropTypes.array;\n  activeViewportId: PropTypes.string;\n\n  //\n  onSaveComplete?: PropTypes.func; // callback when successfully saved annotations\n  onRejectComplete?: PropTypes.func; // callback when rejected annotations\n\n  //\n  servicesManager: AppTypes.ServicesManager;\n  extensionManager: ExtensionManager;\n  commandsManager: CommandsManager;\n}\n\n/**\n * Microscopy Measurements Panel Component\n *\n * @param props\n * @returns\n */\nfunction MicroscopyPanel(props: IMicroscopyPanelProps) {\n  const { microscopyService } = props.servicesManager.services;\n\n  const [studyInstanceUID, setStudyInstanceUID] = useState(null as string | null);\n  const [roiAnnotations, setRoiAnnotations] = useState([] as any[]);\n  const [selectedAnnotation, setSelectedAnnotation] = useState(null as any);\n  const { servicesManager, extensionManager } = props;\n\n  const { uiDialogService, displaySetService } = servicesManager.services;\n\n  useEffect(() => {\n    const viewport = props.viewports.get(props.activeViewportId);\n    if (viewport?.displaySetInstanceUIDs[0]) {\n      const displaySet = displaySetService.getDisplaySetByUID(viewport.displaySetInstanceUIDs[0]);\n      if (displaySet) {\n        setStudyInstanceUID(displaySet.StudyInstanceUID);\n      }\n    }\n  }, [props.viewports, props.activeViewportId]);\n\n  useEffect(() => {\n    const onAnnotationUpdated = () => {\n      const roiAnnotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\n      setRoiAnnotations(roiAnnotations);\n    };\n\n    const onAnnotationSelected = () => {\n      const selectedAnnotation = microscopyService.getSelectedAnnotation();\n      setSelectedAnnotation(selectedAnnotation);\n    };\n\n    const onAnnotationRemoved = () => {\n      onAnnotationUpdated();\n    };\n\n    const { unsubscribe: unsubscribeAnnotationUpdated } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_UPDATED,\n      onAnnotationUpdated\n    );\n    const { unsubscribe: unsubscribeAnnotationSelected } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_SELECTED,\n      onAnnotationSelected\n    );\n    const { unsubscribe: unsubscribeAnnotationRemoved } = microscopyService.subscribe(\n      MicroscopyEvents.ANNOTATION_REMOVED,\n      onAnnotationRemoved\n    );\n    onAnnotationUpdated();\n    onAnnotationSelected();\n\n    // on unload unsubscribe from events\n    return () => {\n      unsubscribeAnnotationUpdated();\n      unsubscribeAnnotationSelected();\n      unsubscribeAnnotationRemoved();\n    };\n  }, [studyInstanceUID]);\n\n  /**\n   * On clicking \"Save Annotations\" button, prompt an input modal for the\n   * new series' description, and continue to save.\n   *\n   * @returns\n   */\n  const promptSave = () => {\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\n\n    if (!annotations || saving) {\n      return;\n    }\n\n    callInputDialog({\n      uiDialogService,\n      title: 'Enter description of the Series',\n      defaultValue: '',\n      callback: (value: string, action: string) => {\n        switch (action) {\n          case 'save': {\n            saveFunction(value);\n          }\n        }\n      },\n    });\n  };\n\n  const getAllDisplaySets = (studyMetadata: any) => {\n    let allDisplaySets = [] as any[];\n    studyMetadata.series.forEach((series: any) => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return allDisplaySets;\n  };\n\n  /**\n   * Save annotations as a series\n   *\n   * @param SeriesDescription - series description\n   * @returns\n   */\n  const saveFunction = async (SeriesDescription: string) => {\n    const dataSource = extensionManager.getActiveDataSource()[0];\n    const { onSaveComplete } = props;\n    const annotations = microscopyService.getAnnotationsForStudy(studyInstanceUID);\n\n    saving = true;\n\n    // There is only one viewer possible for one study,\n    // Since once study contains multiple resolution levels (series) of one whole\n    // Slide image.\n\n    const studyMetadata = DicomMetadataStore.getStudy(studyInstanceUID);\n    const displaySets = getAllDisplaySets(studyMetadata);\n    const smDisplaySet = displaySets.find(ds => ds.Modality === 'SM');\n\n    // Get the next available series number after 4700.\n\n    const dsWithMetadata = displaySets.filter(\n      ds => ds.metadata && ds.metadata.SeriesNumber && typeof ds.metadata.SeriesNumber === 'number'\n    );\n\n    // Generate next series number\n    const seriesNumbers = dsWithMetadata.map(ds => ds.metadata.SeriesNumber);\n    const maxSeriesNumber = Math.max(...seriesNumbers, 4700);\n    const SeriesNumber = maxSeriesNumber + 1;\n\n    const { instance: metadata } = smDisplaySet;\n\n    // construct SR dataset\n    const dataset = constructSR(metadata, { SeriesDescription, SeriesNumber }, annotations);\n\n    // Save in DICOM format\n    try {\n      if (dataSource) {\n        if (dataSource.wadoRoot == 'saveDicom') {\n          // download as DICOM file\n          const part10Buffer = datasetToBuffer(dataset);\n          saveByteArray(part10Buffer, `sr-microscopy.dcm`);\n        } else {\n          // Save into Web Data source\n          const { StudyInstanceUID } = dataset;\n          await dataSource.store.dicom(dataset);\n          if (StudyInstanceUID) {\n            dataSource.deleteStudyMetadataPromise(StudyInstanceUID);\n          }\n        }\n        onSaveComplete({\n          title: 'SR Saved',\n          message: 'Measurements downloaded successfully',\n          type: 'success',\n        });\n      } else {\n        console.error('Server unspecified');\n      }\n    } catch (error) {\n      onSaveComplete({\n        title: 'SR Save Failed',\n        message: error.message || error.toString(),\n        type: 'error',\n      });\n    } finally {\n      saving = false;\n    }\n  };\n\n  /**\n   * On clicking \"Reject annotations\" button\n   */\n  const onDeleteCurrentSRHandler = async () => {\n    try {\n      const activeViewport = props.viewports[props.activeViewportId];\n      const { StudyInstanceUID } = activeViewport;\n\n      // TODO: studies?\n      const study = DicomMetadataStore.getStudy(StudyInstanceUID);\n\n      const lastDerivedDisplaySet = study.derivedDisplaySets.sort((ds1: any, ds2: any) => {\n        const dateTime1 = Number(`${ds1.SeriesDate}${ds1.SeriesTime}`);\n        const dateTime2 = Number(`${ds2.SeriesDate}${ds2.SeriesTime}`);\n        return dateTime1 > dateTime2;\n      })[study.derivedDisplaySets.length - 1];\n\n      // TODO: use dataSource.reject.dicom()\n      // await DICOMSR.rejectMeasurements(\n      //   study.wadoRoot,\n      //   lastDerivedDisplaySet.StudyInstanceUID,\n      //   lastDerivedDisplaySet.SeriesInstanceUID\n      // );\n      props.onRejectComplete({\n        title: 'Report rejected',\n        message: 'Latest report rejected successfully',\n        type: 'success',\n      });\n    } catch (error) {\n      props.onRejectComplete({\n        title: 'Failed to reject report',\n        message: error.message,\n        type: 'error',\n      });\n    }\n  };\n\n  /**\n   * Handler for clicking event of an annotation item.\n   *\n   * @param param0\n   */\n  const onMeasurementItemClickHandler = ({ uid }: { uid: string }) => {\n    const roiAnnotation = microscopyService.getAnnotation(uid);\n    microscopyService.selectAnnotation(roiAnnotation);\n    microscopyService.focusAnnotation(roiAnnotation, props.activeViewportId);\n  };\n\n  /**\n   * Handler for \"Edit\" action of an annotation item\n   * @param param0\n   */\n  const onMeasurementItemEditHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\n    props.commandsManager.runCommand('setLabel', { uid }, 'MICROSCOPY');\n  };\n\n  const onMeasurementDeleteHandler = ({ uid, isActive }: { uid: string; isActive: boolean }) => {\n    const roiAnnotation = microscopyService.getAnnotation(uid);\n    microscopyService.removeAnnotation(roiAnnotation);\n  };\n\n  // Convert ROI annotations managed by microscopyService into our\n  // own format for display\n  const data = roiAnnotations.map((roiAnnotation, index) => {\n    const label = roiAnnotation.getDetailedLabel();\n    const area = roiAnnotation.getArea();\n    const length = roiAnnotation.getLength();\n    const shortAxisLength = roiAnnotation.roiGraphic.properties.shortAxisLength;\n    const isSelected: boolean = selectedAnnotation === roiAnnotation;\n\n    // other events\n    const { uid } = roiAnnotation;\n\n    // display text\n    const displayText = [];\n\n    if (area !== undefined) {\n      displayText.push(formatArea(area));\n    } else if (length !== undefined) {\n      displayText.push(\n        shortAxisLength\n          ? `${formatLength(length, 'μm')} x ${formatLength(shortAxisLength, 'μm')}`\n          : `${formatLength(length, 'μm')}`\n      );\n    }\n\n    // convert to measurementItem format compatible with <MeasurementTable /> component\n    return {\n      uid,\n      index,\n      label,\n      isActive: isSelected,\n      displayText,\n      roiAnnotation,\n    };\n  });\n\n  return (\n    <>\n      <div\n        className=\"ohif-scrollbar overflow-y-auto overflow-x-hidden\"\n        data-cy={'measurements-panel'}\n      >\n        <MeasurementTable\n          title=\"Measurements\"\n          servicesManager={props.servicesManager}\n          data={data}\n          onClick={onMeasurementItemClickHandler}\n          onEdit={onMeasurementItemEditHandler}\n          onDelete={onMeasurementDeleteHandler}\n        />\n      </div>\n    </>\n  );\n}\n\nconst connectedMicroscopyPanel = withTranslation(['MicroscopyTable', 'Common'])(MicroscopyPanel);\n\nexport default connectedMicroscopyPanel;\n","import OHIF from '@ohif/core';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE: '1.2.840.10008.5.1.4.1.1.77.1.6',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySopClassHandler';\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const instance = instances[0];\n\n  let singleFrameInstance = instance;\n  let currentFrames = +singleFrameInstance.NumberOfFrames || 1;\n  for (const instanceI of instances) {\n    const framesI = +instanceI.NumberOfFrames || 1;\n    if (framesI < currentFrames) {\n      singleFrameInstance = instanceI;\n      currentFrames = framesI;\n    }\n  }\n  let imageIdForThumbnail = null;\n  if (singleFrameInstance) {\n    if (currentFrames == 1) {\n      // Not all DICOM server implementations support thumbnail service,\n      // So if we have a single-frame image, we will prefer it.\n      imageIdForThumbnail = singleFrameInstance.imageId;\n    }\n    if (!imageIdForThumbnail) {\n      // use the thumbnail service provided by DICOM server\n      const dataSource = extensionManager.getActiveDataSource()[0];\n      imageIdForThumbnail = dataSource.getImageIdsForInstance({\n        instance: singleFrameInstance,\n        thumbnail: true,\n      });\n    }\n  }\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  instances = instances.map(inst => {\n    // NOTE: According to DICOM standard a series should have a FrameOfReferenceUID\n    // When the Microscopy file was built by certain tool from multiple image files,\n    // each instance's FrameOfReferenceUID is sometimes different.\n    // Even though this means the file was not well formatted DICOM VL Whole Slide Microscopy Image,\n    // the case is so often, so let's override this value manually here.\n    //\n    // https://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.4.html#sect_C.7.4.1.1.1\n\n    inst.FrameOfReferenceUID = instance.FrameOfReferenceUID;\n\n    return inst;\n  });\n\n  const othersFrameOfReferenceUID = instances\n    .filter(v => v)\n    .map(inst => inst.FrameOfReferenceUID)\n    .filter((value, index, array) => array.indexOf(value) === index);\n  if (othersFrameOfReferenceUID.length > 1) {\n    console.warn(\n      'Expected FrameOfReferenceUID of difference instances within a series to be the same, found multiple different values',\n      othersFrameOfReferenceUID\n    );\n  }\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SM',\n    altImageText: 'Microscopy',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    FrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription: SeriesDescription || 'Microscopy Data',\n    // Map ContentDate/Time to SeriesTime for series list sorting.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    firstInstance: singleFrameInstance, // top level instance in the image Pyramid\n    instance,\n    numImageFrames: 0,\n    numInstances: 1,\n    imageIdForThumbnail, // thumbnail image\n    others: instances, // all other level instances in the image Pyramid\n    othersFrameOfReferenceUID,\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySopClassHandler({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return {\n    name: 'DicomMicroscopySopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE_STORAGE],\n    getDisplaySetsFromSeries,\n  };\n}\n","const DCM_CODE_VALUES = {\n  IMAGING_MEASUREMENTS: '126010',\n  MEASUREMENT_GROUP: '125007',\n  IMAGE_REGION: '111030',\n  FINDING: '121071',\n  TRACKING_UNIQUE_IDENTIFIER: '112039',\n  LENGTH: '410668003',\n  AREA: '42798000',\n  SHORT_AXIS: 'G-A186',\n  LONG_AXIS: 'G-A185',\n  ELLIPSE_AREA: 'G-D7FE', // TODO: Remove this\n};\n\nexport default DCM_CODE_VALUES;\n","export default function toArray(item) {\n  return Array.isArray(item) ? item : [item];\n}\n","import dcmjs from 'dcmjs';\n\nimport DCM_CODE_VALUES from './dcmCodeValues';\nimport toArray from './toArray';\nimport DicomMicroscopyViewport from '../DicomMicroscopyViewport';\n\nconst MeasurementReport = dcmjs.adapters.DICOMMicroscopyViewer.MeasurementReport;\n\n// Define as async so that it returns a promise, expected by the ViewportGrid\nexport default async function loadSR(\n  microscopyService,\n  microscopySRDisplaySet,\n  referencedDisplaySet\n) {\n  const naturalizedDataset = microscopySRDisplaySet.metadata;\n\n  const { StudyInstanceUID, FrameOfReferenceUID } = referencedDisplaySet;\n\n  const managedViewers = microscopyService.getManagedViewersForStudy(StudyInstanceUID);\n\n  if (!managedViewers || !managedViewers.length) {\n    return;\n  }\n\n  microscopySRDisplaySet.isLoaded = true;\n\n  const { rois, labels } = await _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID);\n\n  const managedViewer = managedViewers[0];\n\n  for (let i = 0; i < rois.length; i++) {\n    // NOTE: When saving Microscopy SR, we are attaching identifier property\n    // to each ROI, and when read for display, it is coming in as \"TEXT\"\n    // evaluation.\n    // As the Dicom Microscopy Viewer will override styles for \"Text\" evaluations\n    // to hide all other geometries, we are going to manually remove that\n    // evaluation item.\n    const roi = rois[i];\n    const roiSymbols = Object.getOwnPropertySymbols(roi);\n    const _properties = roiSymbols.find(s => s.description === 'properties');\n    const properties = roi[_properties];\n    properties['evaluations'] = [];\n\n    managedViewer.addRoiGraphicWithLabel(roi, labels[i]);\n  }\n}\n\nasync function _getROIsFromToolState(naturalizedDataset, FrameOfReferenceUID) {\n  const toolState = MeasurementReport.generateToolState(naturalizedDataset);\n  const tools = Object.getOwnPropertyNames(toolState);\n  // Does a dynamic import to prevent webpack from rebuilding the library\n  await import(/* webpackIgnore: true */ DicomMicroscopyViewport.getImportPath());\n  const DICOMMicroscopyViewer = (window as any).dicomMicroscopyViewer;\n\n  const measurementGroupContentItems = _getMeasurementGroups(naturalizedDataset);\n\n  const rois = [];\n  const labels = [];\n\n  tools.forEach(t => {\n    const toolSpecificToolState = toolState[t];\n    let scoord3d;\n\n    const capsToolType = t.toUpperCase();\n\n    const measurementGroupContentItemsForTool = measurementGroupContentItems.filter(mg => {\n      const imageRegionContentItem = toArray(mg.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\n      );\n\n      return imageRegionContentItem.GraphicType === capsToolType;\n    });\n\n    toolSpecificToolState.forEach((coordinates, index) => {\n      const properties = {};\n\n      const options = {\n        coordinates,\n        frameOfReferenceUID: FrameOfReferenceUID,\n      };\n\n      if (t === 'Polygon') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polygon(options);\n      } else if (t === 'Polyline') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Polyline(options);\n      } else if (t === 'Point') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Point(options);\n      } else if (t === 'Ellipse') {\n        scoord3d = new DICOMMicroscopyViewer.scoord3d.Ellipse(options);\n      } else {\n        throw new Error('Unsupported tool type');\n      }\n\n      const measurementGroup = measurementGroupContentItemsForTool[index];\n      const findingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.FINDING\n      );\n\n      const trackingGroup = toArray(measurementGroup.ContentSequence).find(\n        ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER\n      );\n\n      /**\n       * Extract presentation state from tracking identifier.\n       * Currently is stored in SR but should be stored in its tags.\n       */\n      if (trackingGroup) {\n        const regExp = /\\(([^)]+)\\)/;\n        const matches = regExp.exec(trackingGroup.TextValue);\n        if (matches && matches[1]) {\n          properties.presentationState = JSON.parse(matches[1]);\n          properties.marker = properties.presentationState.marker;\n        }\n      }\n\n      let measurements = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [\n          DCM_CODE_VALUES.LENGTH,\n          DCM_CODE_VALUES.AREA,\n          DCM_CODE_VALUES.SHORT_AXIS,\n          DCM_CODE_VALUES.LONG_AXIS,\n          DCM_CODE_VALUES.ELLIPSE_AREA,\n        ].includes(ci.ConceptNameCodeSequence.CodeValue)\n      );\n\n      let evaluations = toArray(measurementGroup.ContentSequence).filter(ci =>\n        [DCM_CODE_VALUES.TRACKING_UNIQUE_IDENTIFIER].includes(ci.ConceptNameCodeSequence.CodeValue)\n      );\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      evaluations = evaluations.map(evaluation => {\n        const e = { ...evaluation };\n        e.ConceptNameCodeSequence = toArray(e.ConceptNameCodeSequence);\n        return e;\n      });\n\n      /**\n       * TODO: Resolve bug in DCMJS.\n       * ConceptNameCodeSequence should be a sequence with only one item.\n       */\n      measurements = measurements.map(measurement => {\n        const m = { ...measurement };\n        m.ConceptNameCodeSequence = toArray(m.ConceptNameCodeSequence);\n        return m;\n      });\n\n      if (measurements && measurements.length) {\n        properties.measurements = measurements;\n        console.log('[SR] retrieving measurements...', measurements);\n      }\n\n      if (evaluations && evaluations.length) {\n        properties.evaluations = evaluations;\n        console.log('[SR] retrieving evaluations...', evaluations);\n      }\n\n      const roi = new DICOMMicroscopyViewer.roi.ROI({ scoord3d, properties });\n      rois.push(roi);\n\n      if (findingGroup) {\n        labels.push(findingGroup.ConceptCodeSequence.CodeValue);\n      } else {\n        labels.push('');\n      }\n    });\n  });\n\n  return { rois, labels };\n}\n\nfunction _getMeasurementGroups(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const measurementGroupContentItems = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).filter(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\n\n  return measurementGroupContentItems;\n}\n","import OHIF, { DicomMetadataStore } from '@ohif/core';\nimport loadSR from './utils/loadSR';\nimport toArray from './utils/toArray';\nimport DCM_CODE_VALUES from './utils/dcmCodeValues';\nimport getSourceDisplaySet from './utils/getSourceDisplaySet';\n\nconst { utils } = OHIF;\n\nconst SOP_CLASS_UIDS = {\n  COMPREHENSIVE_3D_SR: '1.2.840.10008.5.1.4.1.1.88.34',\n};\n\nconst SOPClassHandlerId =\n  '@ohif/extension-dicom-microscopy.sopClassHandlerModule.DicomMicroscopySRSopClassHandler';\n\nfunction _getReferencedFrameOfReferenceUID(naturalizedDataset) {\n  const { ContentSequence } = naturalizedDataset;\n\n  const imagingMeasurementsContentItem = ContentSequence.find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGING_MEASUREMENTS\n  );\n\n  const firstMeasurementGroupContentItem = toArray(\n    imagingMeasurementsContentItem.ContentSequence\n  ).find(ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.MEASUREMENT_GROUP);\n\n  const imageRegionContentItem = toArray(firstMeasurementGroupContentItem.ContentSequence).find(\n    ci => ci.ConceptNameCodeSequence.CodeValue === DCM_CODE_VALUES.IMAGE_REGION\n  );\n\n  return imageRegionContentItem.ReferencedFrameOfReferenceUID;\n}\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  // If the series has no instances, stop here\n  if (!instances || !instances.length) {\n    throw new Error('No instances were provided');\n  }\n\n  const { displaySetService, microscopyService } = servicesManager.services;\n\n  const instance = instances[0];\n\n  // TODO ! Consumption of DICOMMicroscopySRSOPClassHandler to a derived dataset or normal dataset?\n  // TODO -> Easy to swap this to a \"non-derived\" displaySet, but unfortunately need to put it in a different extension.\n  const naturalizedDataset = DicomMetadataStore.getSeries(\n    instance.StudyInstanceUID,\n    instance.SeriesInstanceUID\n  ).instances[0];\n  const ReferencedFrameOfReferenceUID = _getReferencedFrameOfReferenceUID(naturalizedDataset);\n\n  const {\n    FrameOfReferenceUID,\n    SeriesDescription,\n    ContentDate,\n    ContentTime,\n    SeriesNumber,\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SOPClassUID,\n  } = instance;\n\n  const displaySet = {\n    plugin: 'microscopy',\n    Modality: 'SR',\n    altImageText: 'Microscopy SR',\n    displaySetInstanceUID: utils.guid(),\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    ReferencedFrameOfReferenceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    SeriesDescription,\n    // Map the content date/time to the series date/time, these are only used for filtering.\n    SeriesDate: ContentDate,\n    SeriesTime: ContentTime,\n    SeriesNumber,\n    instance,\n    metadata: naturalizedDataset,\n    isDerived: true,\n    isLoading: false,\n    isLoaded: false,\n    loadError: false,\n  };\n\n  displaySet.load = function (referencedDisplaySet) {\n    return loadSR(microscopyService, displaySet, referencedDisplaySet).catch(error => {\n      displaySet.isLoaded = false;\n      displaySet.loadError = true;\n      throw new Error(error);\n    });\n  };\n\n  displaySet.getSourceDisplaySet = function () {\n    let allDisplaySets = [];\n    const studyMetadata = DicomMetadataStore.getStudy(StudyInstanceUID);\n    studyMetadata.series.forEach(series => {\n      const displaySets = displaySetService.getDisplaySetsForSeries(series.SeriesInstanceUID);\n      allDisplaySets = allDisplaySets.concat(displaySets);\n    });\n    return getSourceDisplaySet(allDisplaySets, displaySet);\n  };\n\n  return [displaySet];\n}\n\nexport default function getDicomMicroscopySRSopClassHandler({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return {\n    name: 'DicomMicroscopySRSopClassHandler',\n    sopClassUids: [SOP_CLASS_UIDS.COMPREHENSIVE_3D_SR],\n    getDisplaySetsFromSeries,\n  };\n}\n","/**\n * Get referenced SM displaySet from SR displaySet\n *\n * @param {*} allDisplaySets\n * @param {*} microscopySRDisplaySet\n * @returns\n */\nexport default function getSourceDisplaySet(allDisplaySets, microscopySRDisplaySet) {\n  const { ReferencedFrameOfReferenceUID } = microscopySRDisplaySet;\n\n  const otherDisplaySets = allDisplaySets.filter(\n    ds => ds.displaySetInstanceUID !== microscopySRDisplaySet.displaySetInstanceUID\n  );\n  const referencedDisplaySet = otherDisplaySets.find(\n    displaySet =>\n      displaySet.Modality === 'SM' &&\n      (displaySet.FrameOfReferenceUID === ReferencedFrameOfReferenceUID ||\n        // sometimes each depth instance has the different FrameOfReferenceID\n        displaySet.othersFrameOfReferenceUID.includes(ReferencedFrameOfReferenceUID))\n  );\n\n  if (!referencedDisplaySet && otherDisplaySets.length >= 1) {\n    console.warn(\n      'No display set with FrameOfReferenceUID',\n      ReferencedFrameOfReferenceUID,\n      'single series, assuming data error, defaulting to only series.'\n    );\n    return otherDisplaySets.find(displaySet => displaySet.Modality === 'SM');\n  }\n\n  return referencedDisplaySet;\n}\n","import { id } from './id';\nimport React, { Suspense, useMemo } from 'react';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './getCommandsModule';\nimport { Types } from '@ohif/core';\n\nimport { useViewportGrid } from '@ohif/ui';\nimport getDicomMicroscopySopClassHandler from './DicomMicroscopySopClassHandler';\nimport getDicomMicroscopySRSopClassHandler from './DicomMicroscopySRSopClassHandler';\nimport MicroscopyService from './services/MicroscopyService';\nimport { useResizeDetector } from 'react-resize-detector';\nimport debounce from 'lodash.debounce';\n\nconst Component = React.lazy(() => {\n  return import('./DicomMicroscopyViewport');\n});\n\nconst MicroscopyViewport = props => {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension: Types.Extensions.Extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  async preRegistration({ servicesManager }) {\n    servicesManager.registerService(MicroscopyService.REGISTRATION(servicesManager));\n  },\n\n  /**\n   * ViewportModule should provide a list of viewports that will be available in OHIF\n   * for Modes to consume and use in the viewports. Each viewport is defined by\n   * {name, component} object. Example of a viewport module is the CornerstoneViewport\n   * that is provided by the Cornerstone extension in OHIF.\n   */\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    /**\n     *\n     * @param props {*}\n     * @param props.displaySets\n     * @param props.viewportId\n     * @param props.viewportLabel\n     * @param props.dataSource\n     * @param props.viewportOptions\n     * @param props.displaySetOptions\n     * @returns\n     */\n    const ExtendedMicroscopyViewport = props => {\n      const { viewportOptions } = props;\n\n      const [viewportGrid, viewportGridService] = useViewportGrid();\n      const { activeViewportId } = viewportGrid;\n\n      const displaySetsKey = useMemo(() => {\n        return props.displaySets.map(ds => ds.displaySetInstanceUID).join('-');\n      }, [props.displaySets]);\n\n      const onResize = debounce(() => {\n        const { microscopyService } = servicesManager.services;\n        const managedViewer = microscopyService.getAllManagedViewers();\n\n        if (managedViewer && managedViewer.length > 0) {\n          managedViewer[0].viewer.resize();\n        }\n      }, 100);\n\n      const { ref: resizeRef } = useResizeDetector({\n        onResize,\n        handleHeight: true,\n        handleWidth: true,\n      });\n\n      return (\n        <MicroscopyViewport\n          key={displaySetsKey}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          activeViewportId={activeViewportId}\n          setViewportActive={(viewportId: string) => {\n            viewportGridService.setActiveViewportId(viewportId);\n          }}\n          viewportData={viewportOptions}\n          resizeRef={resizeRef}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'microscopy-dicom',\n        component: ExtendedMicroscopyViewport,\n      },\n    ];\n  },\n\n  getToolbarModule({ servicesManager }) {\n    return [\n      {\n        name: 'evaluate.microscopyTool',\n        evaluate: ({ button }) => {\n          const { microscopyService } = servicesManager.services;\n\n          const activeInteractions = microscopyService.getActiveInteractions();\n          if (!activeInteractions) {\n            return false;\n          }\n          const isPrimaryActive = activeInteractions.find(interactions => {\n            const sameMouseButton = interactions[1].bindings.mouseButtons.includes('left');\n\n            if (!sameMouseButton) {\n              return false;\n            }\n\n            const notDraw = interactions[0] !== 'draw';\n\n            // there seems to be a custom logic for draw tool for some reason\n            return notDraw\n              ? interactions[0] === button.id\n              : interactions[1].geometryType === button.id;\n          });\n\n          return {\n            disabled: false,\n            className: isPrimaryActive\n              ? '!text-black bg-primary-light'\n              : '!text-common-bright hover:!bg-primary-dark hover:!text-primary-light',\n            // Todo: isActive right now is used for nested buttons where the primary\n            // button needs to be fully rounded (vs partial rounded) when active\n            // otherwise it does not have any other use\n            isActive: isPrimaryActive,\n          };\n        },\n      },\n    ];\n  },\n\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule({ servicesManager, commandsManager, extensionManager }) {\n    return [\n      getDicomMicroscopySopClassHandler({\n        servicesManager,\n        extensionManager,\n      }),\n      getDicomMicroscopySRSopClassHandler({\n        servicesManager,\n        extensionManager,\n      }),\n    ];\n  },\n\n  getPanelModule,\n\n  getCommandsModule,\n};\n\nexport default extension;\n","import React from 'react';\nimport { CommandsManager, ExtensionManager } from '@ohif/core';\nimport { useViewportGrid } from '@ohif/ui';\nimport MicroscopyPanel from './components/MicroscopyPanel/MicroscopyPanel';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\n\nexport default function getPanelModule({\n  commandsManager,\n  extensionManager,\n  servicesManager,\n}: {\n  servicesManager: AppTypes.ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const wrappedMeasurementPanel = () => {\n    const [{ activeViewportId, viewports }] = useViewportGrid();\n\n    return (\n      <MicroscopyPanel\n        viewports={viewports}\n        activeViewportId={activeViewportId}\n        onSaveComplete={() => {}}\n        onRejectComplete={() => {}}\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'measure',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: 'Measurements',\n      secondaryLabel: 'Measurements',\n      component: wrappedMeasurementPanel,\n    },\n  ];\n}\n","import { CommandsManager, ExtensionManager } from '@ohif/core';\nimport styles from './utils/styles';\nimport callInputDialog from './utils/callInputDialog';\n\nexport default function getCommandsModule({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n}: {\n  servicesManager: AppTypes.ServicesManager;\n  commandsManager: CommandsManager;\n  extensionManager: ExtensionManager;\n}) {\n  const { viewportGridService, uiDialogService, microscopyService } = servicesManager.services;\n\n  const actions = {\n    // Measurement tool commands:\n    deleteMeasurement: ({ uid }) => {\n      if (uid) {\n        const roiAnnotation = microscopyService.getAnnotation(uid);\n        if (roiAnnotation) {\n          microscopyService.removeAnnotation(roiAnnotation);\n        }\n      }\n    },\n\n    setLabel: ({ uid }) => {\n      const roiAnnotation = microscopyService.getAnnotation(uid);\n\n      callInputDialog({\n        uiDialogService,\n        defaultValue: '',\n        callback: (value: string, action: string) => {\n          switch (action) {\n            case 'save': {\n              roiAnnotation.setLabel(value);\n              microscopyService.triggerRelabel(roiAnnotation);\n            }\n          }\n        },\n      });\n    },\n\n    setToolActive: ({ toolName, toolGroupId = 'MICROSCOPY' }) => {\n      const dragPanOnMiddle = [\n        'dragPan',\n        {\n          bindings: {\n            mouseButtons: ['middle'],\n          },\n        },\n      ];\n      const dragZoomOnRight = [\n        'dragZoom',\n        {\n          bindings: {\n            mouseButtons: ['right'],\n          },\n        },\n      ];\n      if (\n        ['line', 'box', 'circle', 'point', 'polygon', 'freehandpolygon', 'freehandline'].indexOf(\n          toolName\n        ) >= 0\n      ) {\n        // TODO: read from configuration\n        const options = {\n          geometryType: toolName,\n          vertexEnabled: true,\n          styleOptions: styles.default,\n          bindings: {\n            mouseButtons: ['left'],\n          },\n        } as any;\n        if ('line' === toolName) {\n          options.minPoints = 2;\n          options.maxPoints = 2;\n        } else if ('point' === toolName) {\n          delete options.styleOptions;\n          delete options.vertexEnabled;\n        }\n\n        microscopyService.activateInteractions([\n          ['draw', options],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      } else if (toolName == 'dragPan') {\n        microscopyService.activateInteractions([\n          [\n            'dragPan',\n            {\n              bindings: {\n                mouseButtons: ['left', 'middle'],\n              },\n            },\n          ],\n          dragZoomOnRight,\n        ]);\n      } else {\n        microscopyService.activateInteractions([\n          [\n            toolName,\n            {\n              bindings: {\n                mouseButtons: ['left'],\n              },\n            },\n          ],\n          dragPanOnMiddle,\n          dragZoomOnRight,\n        ]);\n      }\n    },\n    toggleOverlays: () => {\n      // overlay\n      const overlays = document.getElementsByClassName('microscopy-viewport-overlay');\n      let onoff = false; // true if this will toggle on\n      for (let i = 0; i < overlays.length; i++) {\n        if (i === 0) {\n          onoff = overlays.item(0).classList.contains('hidden');\n        }\n        overlays.item(i).classList.toggle('hidden');\n      }\n\n      // overview\n      const { activeViewportId } = viewportGridService.getState();\n      microscopyService.toggleOverviewMap(activeViewportId);\n    },\n    toggleAnnotations: () => {\n      microscopyService.toggleROIsVisibility();\n    },\n  };\n\n  const definitions = {\n    deleteMeasurement: {\n      commandFn: actions.deleteMeasurement,\n    },\n    setLabel: {\n      commandFn: actions.setLabel,\n    },\n    setToolActive: {\n      commandFn: actions.setToolActive,\n    },\n    toggleOverlays: {\n      commandFn: actions.toggleOverlays,\n    },\n    toggleAnnotations: {\n      commandFn: actions.toggleAnnotations,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'MICROSCOPY',\n  };\n}\n"],"names":["props","list","itemGenerator","map","item","generator","Error","generateFromConfig","topLeft","topRight","bottomLeft","bottomRight","overlay","React","length","className","classnames","listComponentGenerator","isPrimitive","v","Array","isArray","vrNumerics","cleanDenaturalizedDataset","obj","options","o","Object","keys","forEach","key","Value","vr","BulkDataURI","dicomWebUtils","dataSourceConfig","window","location","protocol","startsWith","replace","includes","entry","DicomMicroscopyViewport","Component","constructor","super","state","error","isLoaded","microscopyService","viewer","managedViewer","container","overlayElement","setViewportActiveHandler","setViewportActive","viewportId","activeViewportId","this","servicesManager","services","getImportPath","getNearbyROI","event","autoselect","symbols","getOwnPropertySymbols","_drawingSource","find","p","description","_pyramid","_map","_affine","feature","getClosestFeatureToCoordinate","getEventCoordinate","roiAnnotation","_getROIFromFeature","metadata","selectAnnotation","installOpenLayersRenderer","displaySet","clearAnnotations","smDisplaySet","Modality","getSourceDisplaySet","console","log","async","import","DicomMicroscopyViewer","metadataUtils","dicomMicroscopyViewer","microscopyViewer","VolumeImageViewer","client","extensionManager","config","dataSources","ds","sourceName","activeDataSource","userAuthenticationService","wadoRoot","staticWado","singlepart","configuration","wadoConfig","url","headers","getAuthorizationHeader","errorInterceptor","errorHandler","getHTTPErrorHandler","StaticWadoClient","wadoURL","retrieveInstanceFrames","frameNumbers","toString","sopInstanceUID","instance","DicomMetadataStore","getInstance","studyInstanceUID","seriesInstanceUID","split","fr","PixelData","getDicomWebClient","volumeImages","m","ImageType","inst","dcmjs","DicomMetaDictionary","denaturalizeDataset","StudyInstanceUID","SeriesInstanceUID","dataSource","getConfig","image","VLWholeSlideMicroscopyImage","imageFlavor","push","retrieveRendered","controls","current","addViewportOverlay","element","coordinates","navigate","render","addViewer","addContextMenuCallback","loadViewer","others","load","componentDidMount","displaySets","viewportOptions","then","setState","componentDidUpdate","prevProps","prevState","snapshot","referencedDisplaySet","componentWillUnmount","removeViewer","style","width","height","firstInstance","onClick","display","ref","position","imageId","ViewportOverlay","JSON","stringify","resizeRef","LoadingIndicatorProgress","propTypes","viewportData","PropTypes","viewportLabel","displaySetOptions","commandsManager","id","packageJson","coordinateFormatScoord3d2Geometry","pyramid","transform","orientation","ImageOrientationSlide","spacing","PixelSpacing","functionalGroup","SharedFunctionalGroupsSequence","PixelMeasuresSequence","_getPixelSpacing","origin","TotalPixelMatrixOriginSequence","offset","Number","XOffsetInSlideCoordinateSystem","YOffsetInSlideCoordinateSystem","c","slideCoord","pixelCoord","point","mInverted","inv","vSlide","vImage","multiply","row","toFixed","mapSlideCoord2PixelCoord","defaultFill","color","emptyFill","defaultStroke","activeStroke","active","circle","fill","stroke","radius","default","ApiEvents","ROI_ADDED","ROI_MODIFIED","ROI_REMOVED","ROI_DRAWN","ROI_SELECTED","MOVE_STARTED","MOVE_ENDED","LOADING_STARTED","LOADING_ENDED","LOADING_ERROR","FRAME_LOADING_STARTED","FRAME_LOADING_ENDED","FRAME_LOADING_ERROR","EVENTS","ADDED","MODIFIED","REMOVED","UPDATED","SELECTED","ViewerManager","PubSubService","onRoiAdded","roiAddedHandler","bind","onRoiModified","roiModifiedHandler","onRoiRemoved","roiRemovedHandler","onRoiSelected","roiSelectedHandler","contextMenuCallback","registerEvents","activateDefaultInteractions","callback","destroy","unregisterEvents","publish","roiGraphic","_broadcastEvent","addEventListener","removeEventListener","detail","payload","runSilently","clearRoiGraphics","removeAllROIs","showROIs","hideROIs","addRoiGraphic","addROI","styles","addRoiGraphicWithLabel","label","setROIStyle","uid","styleOptions","removeRoiGraphic","removeROI","updateROIProperties","properties","updateROI","toggleOverviewMap","document","querySelector","preventDefault","activateInteractions","bindings","mouseButtons","interactions","interactionsMap","draw","activate","modify","translate","snap","dragPan","dragZoom","select","availableInteractionName","interaction","name","activateInteractionMethod","deactivateInteractionMethod","_getMapView","_getMap","getView","s","String","getViewState","view","center","getCenter","resolution","getResolution","zoom","getZoom","setViewState","viewState","setZoom","setResolution","setCenter","setViewStateByExtent","getCoordinates","_jumpToPolyline","_jumpToPolygonOrEllipse","_jumpToPoint","coord","mappedCoord","x","y","midpoint","minX","Infinity","maxX","minY","maxY","fit","getSize","LABEL_UPDATED","GRAPHIC_UPDATED","VIEW_UPDATED","RoiAnnotation","setMeasurements","getScoord3d","scoord3d","setRoiGraphic","type","graphicType","graphicData","point1","point2","xLength2","yLength2","Math","sqrt","areaEllipse","PI","_area","_length","undefined","areaPolygon","n","area","j","i","abs","areaOfPolygon","len","p1","p2","xLen","yLen","setLabel","finding","CodeMeaning","CodingSchemeDesignator","CodeValue","getLabel","getDetailedLabel","getLength","getArea","ANNOTATION_UPDATED","ANNOTATION_SELECTED","ANNOTATION_REMOVED","RELABEL","DELETE","MicroscopyService","managedViewers","Set","roiUids","annotations","selectedAnnotation","pendingFocus","_onRoiAdded","_onRoiModified","_onRoiRemoved","_onRoiUpdated","_onRoiSelected","isROIsVisible","clear","removeAnnotation","data","add","subscribe","AnnotationEvents","onRelabel","triggerRelabel","getAnnotation","delete","synchronizeViewers","getSelectedAnnotation","clearSelection","_addManagedViewerSubscriptions","_roiAddedSubscription","ViewerEvents","_roiModifiedSubscription","_roiRemovedSubscription","_roiUpdatedSubscription","_roiSelectedSubscription","_removeManagedViewerSubscriptions","unsubscribe","_getManagedViewersForSeries","from","filter","getManagedViewersForStudy","_restoreAnnotations","getAnnotationsForSeries","_manager","focusAnnotation","_potentiallyLoadSR","studyMetadata","getStudy","FrameOfReferenceUID","othersFrameOfReferenceUID","derivedDisplaySets","ReferencedFrameOfReferenceUID","some","recentDateTime","recentDisplaySet","dateTime","SeriesDate","SeriesTime","isLoading","toggleROIsVisibility","mv","getAnnotations","getAnnotationsForStudy","a","annotation","baseManagedViewer","activeInteractions","getActiveInteractions","newAnnotation","deleteCallback","successCallback","triggerDelete","getAllManagedViewers","_MicroscopyService","REGISTRATION","altName","create","callInputDialog","uiDialogService","title","defaultValue","value","action","dialogId","onSubmitHandler","dismiss","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","Input","labelClassName","autoFocus","onChange","persist","target","onKeyPress","datasetToBuffer","formatLength","unit","mult","connectedMicroscopyPanel","withTranslation","setStudyInstanceUID","useState","roiAnnotations","setRoiAnnotations","setSelectedAnnotation","displaySetService","useEffect","viewport","viewports","get","displaySetInstanceUIDs","getDisplaySetByUID","onAnnotationUpdated","onAnnotationSelected","unsubscribeAnnotationUpdated","MicroscopyEvents","unsubscribeAnnotationSelected","unsubscribeAnnotationRemoved","onAnnotationRemoved","index","shortAxisLength","isSelected","displayText","formatArea","isActive","MeasurementTable","onMeasurementItemClickHandler","onEdit","onMeasurementItemEditHandler","runCommand","onDelete","onMeasurementDeleteHandler","utils","OHIF","SOP_CLASS_UIDS","getDicomMicroscopySopClassHandler","sopClassUids","getDisplaySetsFromSeries","instances","singleFrameInstance","currentFrames","NumberOfFrames","instanceI","framesI","imageIdForThumbnail","getActiveDataSource","getImageIdsForInstance","thumbnail","SeriesDescription","ContentDate","ContentTime","SeriesNumber","SOPInstanceUID","SOPClassUID","array","indexOf","warn","plugin","altImageText","displaySetInstanceUID","guid","SOPClassHandlerId","numImageFrames","numInstances","_getDisplaySetsFromSeries","IMAGING_MEASUREMENTS","MEASUREMENT_GROUP","IMAGE_REGION","FINDING","TRACKING_UNIQUE_IDENTIFIER","LENGTH","AREA","SHORT_AXIS","LONG_AXIS","ELLIPSE_AREA","toArray","MeasurementReport","DICOMMicroscopyViewer","loadSR","microscopySRDisplaySet","naturalizedDataset","rois","labels","toolState","generateToolState","tools","getOwnPropertyNames","measurementGroupContentItems","ContentSequence","ci","ConceptNameCodeSequence","DCM_CODE_VALUES","_getMeasurementGroups","t","toolSpecificToolState","capsToolType","toUpperCase","measurementGroupContentItemsForTool","mg","GraphicType","frameOfReferenceUID","Polygon","Polyline","Point","Ellipse","measurementGroup","findingGroup","trackingGroup","matches","exec","TextValue","presentationState","parse","marker","measurements","evaluations","evaluation","e","measurement","roi","ROI","ConceptCodeSequence","_getROIsFromToolState","getSeries","firstMeasurementGroupContentItem","_getReferencedFrameOfReferenceUID","isDerived","loadError","catch","allDisplaySets","series","getDisplaySetsForSeries","concat","otherDisplaySets","getDicomMicroscopySRSopClassHandler","MicroscopyViewport","Suspense","fallback","extension","preRegistration","registerService","getViewportModule","component","viewportGrid","viewportGridService","useViewportGrid","displaySetsKey","useMemo","join","onResize","debounce","resize","useResizeDetector","handleHeight","handleWidth","_extends","setActiveViewportId","getToolbarModule","evaluate","button","isPrimaryActive","geometryType","disabled","getSopClassHandlerModule","getPanelModule","iconName","iconLabel","secondaryLabel","wrappedMeasurementPanel","MicroscopyPanel","onSaveComplete","onRejectComplete","getCommandsModule","deleteMeasurement","setToolActive","toolName","toolGroupId","dragPanOnMiddle","dragZoomOnRight","vertexEnabled","minPoints","maxPoints","toggleOverlays","overlays","getElementsByClassName","onoff","classList","contains","toggle","getState","toggleAnnotations","definitions","commandFn","defaultContext"],"sourceRoot":""}