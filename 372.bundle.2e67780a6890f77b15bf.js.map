{"version":3,"file":"372.bundle.2e67780a6890f77b15bf.js","mappings":"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","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.js","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdExport.tsx","webpack:///../../../extensions/tmtv/src/utils/handleROIThresholding.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/utils/getSOPInstanceAttributes.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/calculateTMTV.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.ts","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/RectangleROIOptions.tsx","webpack:///../../../extensions/tmtv/src/index.tsx","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/getToolbarModule.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","const ctAXIAL = {\r\n  viewportOptions: {\r\n    viewportId: 'ctAXIAL',\r\n    viewportType: 'volume',\r\n    orientation: 'axial',\r\n    toolGroupId: 'ctToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'axialSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ctSAGITTAL = {\r\n  viewportOptions: {\r\n    viewportId: 'ctSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    toolGroupId: 'ctToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'sagittalSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\nconst ctCORONAL = {\r\n  viewportOptions: {\r\n    viewportId: 'ctCORONAL',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    toolGroupId: 'ctToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'coronalSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptAXIAL = {\r\n  viewportOptions: {\r\n    viewportId: 'ptAXIAL',\r\n    viewportType: 'volume',\r\n    background: [1, 1, 1],\r\n    orientation: 'axial',\r\n    toolGroupId: 'ptToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'axialSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptSAGITTAL = {\r\n  viewportOptions: {\r\n    viewportId: 'ptSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'ptToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'sagittalSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptCORONAL = {\r\n  viewportOptions: {\r\n    viewportId: 'ptCORONAL',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'ptToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'coronalSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionAXIAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionAXIAL',\r\n    viewportType: 'volume',\r\n    orientation: 'axial',\r\n    toolGroupId: 'fusionToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'axialSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.9 },\r\n            { value: 1, opacity: 0.95 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionSAGITTAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    toolGroupId: 'fusionToolGroup',\r\n    // initialImageOptions: {\r\n    //   index: 180,\r\n    //   preset: 'middle', // 'first', 'last', 'middle'\r\n    // },\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'sagittalSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.9 },\r\n            { value: 1, opacity: 0.95 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionCORONAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionCoronal',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    toolGroupId: 'fusionToolGroup',\r\n    // initialImageOptions: {\r\n    //   index: 180,\r\n    //   preset: 'middle', // 'first', 'last', 'middle'\r\n    // },\r\n    syncGroups: [\r\n      {\r\n        type: 'cameraPosition',\r\n        id: 'coronalSync',\r\n        source: true,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.9 },\r\n            { value: 1, opacity: 0.95 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst mipSAGITTAL = {\r\n  viewportOptions: {\r\n    viewportId: 'mipSagittal',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'mipToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n        },\r\n      },\r\n    ],\r\n\r\n    // Custom props can be used to set custom properties which extensions\r\n    // can react on.\r\n    customViewportProps: {\r\n      // We use viewportDisplay to filter the viewports which are displayed\r\n      // in mip and we set the scrollbar according to their rotation index\r\n      // in the cornerstone extension.\r\n      hideOverlays: true,\r\n    },\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        blendMode: 'MIP',\r\n        slabThickness: 'fullVolume',\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nexport {\r\n  ctAXIAL,\r\n  ctSAGITTAL,\r\n  ctCORONAL,\r\n  ptAXIAL,\r\n  ptSAGITTAL,\r\n  ptCORONAL,\r\n  fusionAXIAL,\r\n  fusionSAGITTAL,\r\n  fusionCORONAL,\r\n  mipSAGITTAL,\r\n};\r\n","import {\r\n  ctAXIAL,\r\n  ctCORONAL,\r\n  ctSAGITTAL,\r\n  fusionAXIAL,\r\n  fusionCORONAL,\r\n  fusionSAGITTAL,\r\n  mipSAGITTAL,\r\n  ptAXIAL,\r\n  ptCORONAL,\r\n  ptSAGITTAL,\r\n} from './utils/hpViewports';\r\n\r\n/**\r\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\r\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\r\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\r\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\r\n * also camera synchronizer for each orientation\r\n */\r\nconst stage1 = {\r\n  name: 'default',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 3,\r\n      columns: 4,\r\n      layoutOptions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 3 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  viewports: [\r\n    ctAXIAL,\r\n    ctSAGITTAL,\r\n    ctCORONAL,\r\n    ptAXIAL,\r\n    ptSAGITTAL,\r\n    ptCORONAL,\r\n    fusionAXIAL,\r\n    fusionSAGITTAL,\r\n    fusionCORONAL,\r\n    mipSAGITTAL,\r\n  ],\r\n  createdDate: '2021-02-23T18:32:42.850Z',\r\n};\r\n\r\n/**\r\n * The layout displays CT axial image in the top-left viewport, fusion axial image\r\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\r\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\r\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\r\n */\r\nconst stage2 = {\r\n  name: 'Fusion 2x2',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 2,\r\n    },\r\n  },\r\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\r\n};\r\n\r\n/**\r\n * The top row displays CT images in axial, sagittal, and coronal orientations from\r\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\r\n * and coronal orientations from left to right, respectively.\r\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\r\n * It includes synchronizers as well.\r\n */\r\nconst stage3 = {\r\n  name: '2x3-layout',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 3,\r\n    },\r\n  },\r\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\r\n};\r\n\r\n/**\r\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\r\n * orientations from left to right, respectively, followed by a MIP sagittal image\r\n * that spans both rows on the rightmost side. The bottom row displays fusion images\r\n * in coronal, sagittal, and axial orientations from left to right, respectively.\r\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\r\n * from the top row spans the full height of both rows.\r\n * It includes synchronizers as well.\r\n */\r\nconst stage4 = {\r\n  name: '2x4-layout',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 4,\r\n      layoutOptions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 3 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  viewports: [\r\n    ptCORONAL,\r\n    ptSAGITTAL,\r\n    ptAXIAL,\r\n    mipSAGITTAL,\r\n    fusionCORONAL,\r\n    fusionSAGITTAL,\r\n    fusionAXIAL,\r\n  ],\r\n};\r\n\r\nconst ptCT = {\r\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\r\n  locked: true,\r\n  name: 'Default',\r\n  createdDate: '2021-02-23T19:22:08.894Z',\r\n  modifiedDate: '2022-10-04T19:22:08.894Z',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\r\n  protocolMatchingRules: [\r\n    {\r\n      attribute: 'ModalitiesInStudy',\r\n      constraint: {\r\n        contains: ['CT', 'PT'],\r\n      },\r\n    },\r\n    {\r\n      attribute: 'StudyDescription',\r\n      constraint: {\r\n        contains: 'PETCT',\r\n      },\r\n    },\r\n    {\r\n      attribute: 'StudyDescription',\r\n      constraint: {\r\n        contains: 'PET/CT',\r\n      },\r\n    },\r\n  ],\r\n  displaySetSelectors: {\r\n    ctDisplaySet: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'CT',\r\n          },\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'CT WB',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    ptDisplaySet: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'PT',\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'Corrected',\r\n          },\r\n        },\r\n        {\r\n          weight: 2,\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            doesNotContain: {\r\n              value: 'Uncorrected',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n\r\n  stages: [stage1, stage2, stage3, stage4],\r\n  numberOfPriorsReferenced: -1,\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: ptCT.id,\r\n      protocol: ptCT,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { PanelSection, Input, Button } from '@ohif/ui';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst DEFAULT_MEATADATA = {\r\n  PatientWeight: null,\r\n  PatientSex: null,\r\n  SeriesTime: null,\r\n  RadiopharmaceuticalInformationSequence: {\r\n    RadionuclideTotalDose: null,\r\n    RadionuclideHalfLife: null,\r\n    RadiopharmaceuticalStartTime: null,\r\n  },\r\n};\r\n\r\n/*\r\n * PETSUV panel enables the user to modify the patient related information, such as\r\n * patient sex, patientWeight. This is allowed since\r\n * sometimes these metadata are missing or wrong. By changing them\r\n * @param param0\r\n * @returns\r\n */\r\nexport default function PanelPetSUV({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { t } = useTranslation('PanelSUV');\r\n  const { displaySetService, toolGroupService, toolbarService, hangingProtocolService } =\r\n    servicesManager.services;\r\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\r\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\r\n\r\n  const handleMetadataChange = metadata => {\r\n    setMetadata(prevState => {\r\n      const newState = { ...prevState };\r\n      Object.keys(metadata).forEach(key => {\r\n        if (typeof metadata[key] === 'object') {\r\n          newState[key] = {\r\n            ...prevState[key],\r\n            ...metadata[key],\r\n          };\r\n        } else {\r\n          newState[key] = metadata[key];\r\n        }\r\n      });\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\r\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\r\n      viewportMatchDetails,\r\n    });\r\n\r\n    if (!ptDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const metadata = commandsManager.runCommand('getPTMetadata', {\r\n      ptDisplaySet,\r\n    });\r\n\r\n    return {\r\n      ptDisplaySet,\r\n      metadata,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const displaySets = displaySetService.getActiveDisplaySets();\r\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n    if (!displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\r\n\r\n    if (!displaySetInfo) {\r\n      return;\r\n    }\r\n\r\n    const { ptDisplaySet, metadata } = displaySetInfo;\r\n    setPtDisplaySet(ptDisplaySet);\r\n    setMetadata(metadata);\r\n  }, []);\r\n\r\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\r\n  useEffect(() => {\r\n    const { unsubscribe } = hangingProtocolService.subscribe(\r\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\r\n      ({ viewportMatchDetails }) => {\r\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\r\n\r\n        if (!displaySetInfo) {\r\n          return;\r\n        }\r\n        const { ptDisplaySet, metadata } = displaySetInfo;\r\n        setPtDisplaySet(ptDisplaySet);\r\n        setMetadata(metadata);\r\n      }\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  function updateMetadata() {\r\n    if (!ptDisplaySet) {\r\n      throw new Error('No ptDisplaySet found');\r\n    }\r\n\r\n    // metadata should be dcmjs naturalized\r\n    DicomMetadataStore.updateMetadataForSeries(\r\n      ptDisplaySet.StudyInstanceUID,\r\n      ptDisplaySet.SeriesInstanceUID,\r\n      metadata\r\n    );\r\n\r\n    // update the displaySets\r\n    displaySetService.setDisplaySetMetadataInvalidated(ptDisplaySet.displaySetInstanceUID);\r\n\r\n    // Crosshair position depends on the metadata values such as the positioning interaction\r\n    // between series, so when the metadata is updated, the crosshairs need to be reset.\r\n    setTimeout(() => {\r\n      commandsManager.runCommand('resetCrosshairs');\r\n    }, 0);\r\n  }\r\n  return (\r\n    <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\r\n      <div className=\"flex min-h-0 flex-1 flex-col bg-black text-[13px] font-[300]\">\r\n        <PanelSection title={t('Patient Information')}>\r\n          <div className=\"flex flex-col\">\r\n            <div className=\"bg-primary-dark flex flex-col gap-4 p-2\">\r\n              <Input\r\n                containerClassName={'!flex-row !justify-between items-center'}\r\n                label={t('Patient Sex')}\r\n                labelClassName=\"text-[13px] font-inter text-white\"\r\n                className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                value={metadata.PatientSex || ''}\r\n                onChange={e => {\r\n                  handleMetadataChange({\r\n                    PatientSex: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n              <Input\r\n                containerClassName={'!flex-row !justify-between items-center'}\r\n                label={t('Weight')}\r\n                labelChildren={<span className=\"text-aqua-pale\"> kg</span>}\r\n                labelClassName=\"text-[13px] font-inter text-white\"\r\n                className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                value={metadata.PatientWeight || ''}\r\n                onChange={e => {\r\n                  handleMetadataChange({\r\n                    PatientWeight: e.target.value,\r\n                  });\r\n                }}\r\n                id=\"weight-input\"\r\n              />\r\n              <Input\r\n                containerClassName={'!flex-row !justify-between items-center'}\r\n                label={t('Total Dose')}\r\n                labelChildren={<span className=\"text-aqua-pale\"> bq</span>}\r\n                labelClassName=\"text-[13px] font-inter text-white\"\r\n                className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideTotalDose || ''}\r\n                onChange={e => {\r\n                  handleMetadataChange({\r\n                    RadiopharmaceuticalInformationSequence: {\r\n                      RadionuclideTotalDose: e.target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n              <Input\r\n                containerClassName={'!flex-row !justify-between items-center'}\r\n                label={t('Half Life')}\r\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\r\n                labelClassName=\"text-[13px] font-inter text-white\"\r\n                className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideHalfLife || ''}\r\n                onChange={e => {\r\n                  handleMetadataChange({\r\n                    RadiopharmaceuticalInformationSequence: {\r\n                      RadionuclideHalfLife: e.target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n              <Input\r\n                containerClassName={'!flex-row !justify-between items-center'}\r\n                label={t('Injection Time')}\r\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\r\n                labelClassName=\"text-[13px] font-inter text-white\"\r\n                className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                value={\r\n                  metadata.RadiopharmaceuticalInformationSequence.RadiopharmaceuticalStartTime || ''\r\n                }\r\n                onChange={e => {\r\n                  handleMetadataChange({\r\n                    RadiopharmaceuticalInformationSequence: {\r\n                      RadiopharmaceuticalStartTime: e.target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n              <Input\r\n                containerClassName={'!flex-row !justify-between items-center'}\r\n                label={t('Acquisition Time')}\r\n                labelChildren={<span className=\"text-aqua-pale\"> s</span>}\r\n                labelClassName=\"text-[13px] font-inter text-white\"\r\n                className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                value={metadata.SeriesTime || ''}\r\n                onChange={() => {}}\r\n              />\r\n              <Button\r\n                className=\"!h-[26px] !w-[115px] self-end !p-0\"\r\n                onClick={updateMetadata}\r\n              >\r\n                Reload Data\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </PanelSection>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nPanelPetSUV.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, ActionButtons } from '@ohif/ui';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { eventTarget } from '@cornerstonejs/core';\r\nimport { Enums } from '@cornerstonejs/tools';\r\nimport { handleROIThresholding } from '../../utils/handleROIThresholding';\r\n\r\nexport default function PanelRoiThresholdSegmentation({\r\n  servicesManager,\r\n  commandsManager,\r\n}: withAppTypes) {\r\n  const { segmentationService, uiNotificationService } = servicesManager.services;\r\n  const { t } = useTranslation('PanelSUVExport');\r\n\r\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\r\n  const [activeSegmentation, setActiveSegmentation] = useState(null);\r\n\r\n  /**\r\n   * Update UI based on segmentation changes (added, removed, updated)\r\n   */\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n    const subscriptions = [];\r\n\r\n    [added, updated, removed].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const segmentations = segmentationService.getSegmentations();\r\n        setSegmentations(segmentations);\r\n\r\n        const activeSegmentation = segmentations.filter(seg => seg.isActive);\r\n        setActiveSegmentation(activeSegmentation[0]);\r\n      });\r\n\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const callback = async evt => {\r\n      const { detail } = evt;\r\n      const { segmentationId } = detail;\r\n\r\n      if (!segmentationId) {\r\n        return;\r\n      }\r\n\r\n      await handleROIThresholding({\r\n        segmentationId,\r\n        commandsManager,\r\n        segmentationService,\r\n      });\r\n\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      const { cachedStats } = segmentation;\r\n      if (!cachedStats) {\r\n        return;\r\n      }\r\n\r\n      // segment 1\r\n      const suvPeak = cachedStats?.['1']?.suvPeak?.suvPeak;\r\n\r\n      if (Number.isNaN(suvPeak)) {\r\n        uiNotificationService.show({\r\n          title: 'SUV Peak',\r\n          message: 'Segmented volume does not allow SUV Peak calculation',\r\n          type: 'warning',\r\n        });\r\n      }\r\n    };\r\n\r\n    eventTarget.addEventListenerDebounced(Enums.Events.SEGMENTATION_DATA_MODIFIED, callback, 250);\r\n\r\n    return () => {\r\n      eventTarget.removeEventListenerDebounced(Enums.Events.SEGMENTATION_DATA_MODIFIED, callback);\r\n    };\r\n  }, []);\r\n\r\n  if (!activeSegmentation) {\r\n    return null;\r\n  }\r\n\r\n  const tmtvValue = activeSegmentation.cachedStats?.tmtv?.value || null;\r\n  const config = activeSegmentation.cachedStats?.tmtv?.config || {};\r\n\r\n  const actions = [\r\n    {\r\n      label: 'Export CSV',\r\n      onClick: () => {\r\n        commandsManager.runCommand('exportTMTVReportCSV', {\r\n          segmentations,\r\n          tmtv: tmtvValue,\r\n          config,\r\n        });\r\n      },\r\n      disabled: tmtvValue === null,\r\n    },\r\n    {\r\n      label: 'Export RT Report',\r\n      onClick: () => {\r\n        commandsManager.runCommand('createTMTVRTReport');\r\n      },\r\n      disabled: tmtvValue === null,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mt-2 mb-10 flex flex-col\">\r\n        <div className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\">\r\n          {tmtvValue !== null ? (\r\n            <div className=\"bg-secondary-dark flex items-baseline justify-between px-2 py-1\">\r\n              <span className=\"text-base font-bold uppercase tracking-widest text-white\">\r\n                {'TMTV:'}\r\n              </span>\r\n              <div className=\"text-white\">{`${tmtvValue} mL`}</div>\r\n            </div>\r\n          ) : null}\r\n          <div className=\"mt-2 flex justify-center\">\r\n            <ActionButtons\r\n              actions={actions}\r\n              t={t}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"absolute bottom-1 left-[50px] flex cursor-pointer items-center justify-center text-blue-400 opacity-50 hover:opacity-80\"\r\n        onClick={() => {\r\n          // navigate to a url in a new tab\r\n          window.open('https://github.com/OHIF/Viewers/blob/master/modes/tmtv/README.md', '_blank');\r\n        }}\r\n      >\r\n        <Icon\r\n          width=\"15px\"\r\n          height=\"15px\"\r\n          name={'info'}\r\n          className={'text-primary-active ml-4 mr-3'}\r\n        />\r\n        <span>{'User Guide'}</span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelRoiThresholdSegmentation.propTypes = {\r\n  commandsManager: PropTypes.shape({\r\n    runCommand: PropTypes.func.isRequired,\r\n  }),\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      segmentationService: PropTypes.shape({\r\n        getSegmentation: PropTypes.func.isRequired,\r\n        getSegmentations: PropTypes.func.isRequired,\r\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import { cache } from '@cornerstonejs/core';\r\n\r\nexport const handleROIThresholding = async ({\r\n  segmentationId,\r\n  commandsManager,\r\n  segmentationService,\r\n  config = {},\r\n}) => {\r\n  const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n  // re-calculating the cached stats for the active segmentation\r\n  const updatedPerSegmentCachedStats = {};\r\n  segmentation.segments = await Promise.all(\r\n    segmentation.segments.map(async segment => {\r\n      if (!segment || !segment.segmentIndex) {\r\n        return segment;\r\n      }\r\n\r\n      const labelmap = cache.getVolume(segmentationId);\r\n\r\n      const segmentIndex = segment.segmentIndex;\r\n\r\n      const lesionStats = commandsManager.run('getLesionStats', { labelmap, segmentIndex });\r\n      const suvPeak = await commandsManager.run('calculateSuvPeak', { labelmap, segmentIndex });\r\n      const lesionGlyoclysisStats = lesionStats.volume * lesionStats.meanValue;\r\n\r\n      // update segDetails with the suv peak for the active segmentation\r\n      const cachedStats = {\r\n        lesionStats,\r\n        suvPeak,\r\n        lesionGlyoclysisStats,\r\n      };\r\n\r\n      segment.cachedStats = cachedStats;\r\n      segment.displayText = [\r\n        `SUV Peak: ${suvPeak.suvPeak.toFixed(2)}`,\r\n        `Volume: ${lesionStats.volume.toFixed(2)} mm3`,\r\n      ];\r\n      updatedPerSegmentCachedStats[segmentIndex] = cachedStats;\r\n\r\n      return segment;\r\n    })\r\n  );\r\n\r\n  const notYetUpdatedAtSource = true;\r\n\r\n  const segmentations = segmentationService.getSegmentations();\r\n  const tmtv = commandsManager.run('calculateTMTV', { segmentations });\r\n\r\n  segmentation.cachedStats = Object.assign(segmentation.cachedStats, updatedPerSegmentCachedStats, {\r\n    tmtv: {\r\n      value: tmtv.toFixed(3),\r\n      config: { ...config },\r\n    },\r\n  });\r\n\r\n  segmentationService.addOrUpdateSegmentation(\r\n    {\r\n      ...segmentation,\r\n    },\r\n    false, // don't suppress events\r\n    notYetUpdatedAtSource\r\n  );\r\n};\r\n","import PanelROIThresholdExport from './PanelROIThresholdExport';\r\n\r\nexport default PanelROIThresholdExport;\r\n","import React from 'react';\r\nimport { PanelPetSUV, PanelROIThresholdExport } from './Panels';\r\nimport { Toolbox } from '@ohif/ui';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\r\n  const wrappedPanelPetSuv = () => {\r\n    return (\r\n      <PanelPetSUV\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedROIThresholdToolbox = () => {\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          buttonSectionId=\"ROIThresholdToolbox\"\r\n          title=\"Threshold Tools\"\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const wrappedROIThresholdExport = () => {\r\n    return (\r\n      <>\r\n        <PanelROIThresholdExport\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'petSUV',\r\n      iconName: 'tab-patient-info',\r\n      iconLabel: 'Patient Info',\r\n      label: 'Patient Info',\r\n      component: wrappedPanelPetSuv,\r\n    },\r\n    {\r\n      name: 'tmtvBox',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation Toolbox',\r\n      component: wrappedROIThresholdToolbox,\r\n    },\r\n    {\r\n      name: 'tmtvExport',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation Export',\r\n      component: wrappedROIThresholdExport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","export default ['RectangleROIStartEndThreshold'];\r\n","import { metaData } from '@cornerstonejs/core';\r\n\r\nexport default function getSOPInstanceAttributes(imageId) {\r\n  if (imageId) {\r\n    return _getUIDFromImageID(imageId);\r\n  }\r\n}\r\n\r\nfunction _getUIDFromImageID(imageId) {\r\n  const instance = metaData.get('instance', imageId);\r\n\r\n  return {\r\n    SOPInstanceUID: instance.SOPInstanceUID,\r\n    SeriesInstanceUID: instance.SeriesInstanceUID,\r\n    StudyInstanceUID: instance.StudyInstanceUID,\r\n    frameNumber: instance.frameNumber || 1,\r\n  };\r\n}\r\n","import SUPPORTED_TOOLS from './constants/supportedTools';\r\nimport getSOPInstanceAttributes from './utils/getSOPInstanceAttributes';\r\n\r\nconst RectangleROIStartEndThreshold = {\r\n  toAnnotation: (measurement, definition) => {},\r\n\r\n  /**\r\n   * Maps cornerstone annotation event data to measurement service format.\r\n   *\r\n   * @param {Object} cornerstone Cornerstone event data\r\n   * @return {Measurement} Measurement instance\r\n   */\r\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\r\n    const { annotation, viewportId } = csToolsEventDetail;\r\n    const { metadata, data, annotationUID } = annotation;\r\n\r\n    if (!metadata || !data) {\r\n      console.warn('Length tool: Missing metadata or data');\r\n      return null;\r\n    }\r\n\r\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\r\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\r\n\r\n    if (!validToolType) {\r\n      throw new Error('Tool not supported');\r\n    }\r\n\r\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\r\n      referencedImageId,\r\n      cornerstoneViewportService,\r\n      viewportId\r\n    );\r\n\r\n    let displaySet;\r\n\r\n    if (SOPInstanceUID) {\r\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\r\n        SOPInstanceUID,\r\n        SeriesInstanceUID\r\n      );\r\n    } else {\r\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n    }\r\n\r\n    return {\r\n      uid: annotationUID,\r\n      SOPInstanceUID,\r\n      FrameOfReferenceUID,\r\n      // points,\r\n      metadata,\r\n      referenceSeriesUID: SeriesInstanceUID,\r\n      referenceStudyUID: StudyInstanceUID,\r\n      toolName: metadata.toolName,\r\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n      label: metadata.label,\r\n      data: data.cachedStats,\r\n      type: 'RectangleROIStartEndThreshold',\r\n    };\r\n  },\r\n};\r\n\r\nexport default RectangleROIStartEndThreshold;\r\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\r\n\r\nconst measurementServiceMappingsFactory = (\r\n  measurementService,\r\n  displaySetService,\r\n  cornerstoneViewportService\r\n) => {\r\n  return {\r\n    RectangleROIStartEndThreshold: {\r\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\r\n      toMeasurement: csToolsAnnotation =>\r\n        RectangleROIStartEndThreshold.toMeasurement(\r\n          csToolsAnnotation,\r\n          displaySetService,\r\n          cornerstoneViewportService\r\n        ),\r\n      matchingCriteria: [\r\n        {\r\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport default measurementServiceMappingsFactory;\r\n","import * as csTools from '@cornerstonejs/tools';\r\n\r\nfunction getRoiStats(referencedVolume, annotations) {\r\n  // roiStats\r\n  const { imageData } = referencedVolume;\r\n  const values = imageData.getPointData().getScalars().getData();\r\n\r\n  // Todo: add support for other strategies\r\n  const { fn, baseValue } = _getStrategyFn('max');\r\n  let value = baseValue;\r\n\r\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\r\n    annotations,\r\n    referencedVolume\r\n  );\r\n\r\n  const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\r\n\r\n  for (let i = iMin; i <= iMax; i++) {\r\n    for (let j = jMin; j <= jMax; j++) {\r\n      for (let k = kMin; k <= kMax; k++) {\r\n        const offset = imageData.computeOffsetIndex([i, j, k]);\r\n        value = fn(values[offset], value);\r\n      }\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction getThresholdValues(\r\n  annotationUIDs,\r\n  referencedVolumes,\r\n  config\r\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\r\n  if (config.strategy === 'range') {\r\n    return {\r\n      ptLower: Number(config.ptLower),\r\n      ptUpper: Number(config.ptUpper),\r\n      ctLower: Number(config.ctLower),\r\n      ctUpper: Number(config.ctUpper),\r\n    };\r\n  }\r\n\r\n  const { weight } = config;\r\n  const annotations = annotationUIDs.map(annotationUID =>\r\n    csTools.annotation.state.getAnnotation(annotationUID)\r\n  );\r\n\r\n  const ptValue = getRoiStats(referencedVolumes[0], annotations);\r\n\r\n  return {\r\n    ctLower: -Infinity,\r\n    ctUpper: +Infinity,\r\n    ptLower: weight * ptValue,\r\n    ptUpper: +Infinity,\r\n  };\r\n}\r\n\r\nfunction _getStrategyFn(statistic): {\r\n  fn: (a: number, b: number) => number;\r\n  baseValue: number;\r\n} {\r\n  const baseValue = -Infinity;\r\n  const fn = (number, maxValue) => {\r\n    if (number > maxValue) {\r\n      maxValue = number;\r\n    }\r\n    return maxValue;\r\n  };\r\n  return { fn, baseValue };\r\n}\r\n\r\nexport default getThresholdValues;\r\n","import { Types } from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\n\r\n/**\r\n * Given a list of labelmaps (with the possibility of overlapping regions),\r\n * and a referenceVolume, it calculates the total metabolic tumor volume (TMTV)\r\n * by flattening and rasterizing each segment into a single labelmap and summing\r\n * the total number of volume voxels. It should be noted that for this calculation\r\n * we do not double count voxels that are part of multiple labelmaps.\r\n * @param {} labelmaps\r\n * @param {number} segmentIndex\r\n * @returns {number} TMTV in ml\r\n */\r\nfunction calculateTMTV(labelmaps: Array<Types.IImageVolume>, segmentIndex = 1): number {\r\n  const volumeId = 'mergedLabelmap';\r\n\r\n  const mergedLabelmap = utilities.segmentation.createMergedLabelmapForIndex(\r\n    labelmaps,\r\n    segmentIndex,\r\n    volumeId\r\n  );\r\n\r\n  const { imageData, spacing } = mergedLabelmap;\r\n  const values = imageData.getPointData().getScalars().getData();\r\n\r\n  // count non-zero values inside the outputData, this would\r\n  // consider the overlapping regions to be only counted once\r\n  const numVoxels = values.reduce((acc, curr) => {\r\n    if (curr > 0) {\r\n      return acc + 1;\r\n    }\r\n    return acc;\r\n  }, 0);\r\n\r\n  return 1e-3 * numVoxels * spacing[0] * spacing[1] * spacing[2];\r\n}\r\n\r\nexport default calculateTMTV;\r\n","import dcmjs from 'dcmjs';\r\nimport { classes, DicomMetadataStore } from '@ohif/core';\r\nimport { adaptersRT } from '@cornerstonejs/adapters';\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\nconst metadataProvider = classes.MetadataProvider;\r\n\r\nexport default function dicomRTAnnotationExport(annotations) {\r\n  const dataset = adaptersRT.Cornerstone3D.RTSS.generateRTSSFromAnnotations(\r\n    annotations,\r\n    metadataProvider,\r\n    DicomMetadataStore\r\n  );\r\n  const reportBlob = datasetToBlob(dataset);\r\n\r\n  //Create a URL for the binary.\r\n  var objectUrl = URL.createObjectURL(reportBlob);\r\n  window.location.assign(objectUrl);\r\n}\r\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\r\n\r\nexport default dicomRTAnnotationExport;\r\n","import { vec3 } from 'gl-matrix';\r\nimport OHIF from '@ohif/core';\r\nimport * as cs from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport { classes } from '@ohif/core';\r\nimport getThresholdValues from './utils/getThresholdValue';\r\nimport calculateTMTV from './utils/calculateTMTV';\r\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\r\n\r\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\r\n\r\nimport { getWebWorkerManager } from '@cornerstonejs/core';\r\n\r\nconst metadataProvider = classes.MetadataProvider;\r\nconst RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS = [\r\n  'RectangleROIStartEndThreshold',\r\n  'RectangleROIThreshold',\r\n];\r\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\r\n\r\nconst workerManager = getWebWorkerManager();\r\n\r\nconst options = {\r\n  maxWorkerInstances: 1,\r\n  autoTerminateOnIdle: {\r\n    enabled: true,\r\n    idleTimeThreshold: 3000,\r\n  },\r\n};\r\n\r\n// Register the task\r\nconst workerFn = () => {\r\n  return new Worker(new URL('./utils/calculateSUVPeakWorker.js', import.meta.url), {\r\n    name: 'suv-peak-worker', // name used by the browser to name the worker\r\n  });\r\n};\r\n\r\nconst commandsModule = ({ servicesManager, commandsManager, extensionManager }: withAppTypes) => {\r\n  const {\r\n    viewportGridService,\r\n    uiNotificationService,\r\n    displaySetService,\r\n    hangingProtocolService,\r\n    toolGroupService,\r\n    cornerstoneViewportService,\r\n    segmentationService,\r\n  } = servicesManager.services;\r\n\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { getEnabledElement } = utilityModule.exports;\r\n\r\n  function _getActiveViewportsEnabledElement() {\r\n    const { activeViewportId } = viewportGridService.getState();\r\n    const { element } = getEnabledElement(activeViewportId) || {};\r\n    const enabledElement = cs.getEnabledElement(element);\r\n    return enabledElement;\r\n  }\r\n\r\n  function _getMatchedViewportsToolGroupIds() {\r\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n    const toolGroupIds = [];\r\n    viewportMatchDetails.forEach(viewport => {\r\n      const { viewportOptions } = viewport;\r\n      const { toolGroupId } = viewportOptions;\r\n      if (toolGroupIds.indexOf(toolGroupId) === -1) {\r\n        toolGroupIds.push(toolGroupId);\r\n      }\r\n    });\r\n\r\n    return toolGroupIds;\r\n  }\r\n\r\n  function _getAnnotationsSelectedByToolNames(toolNames) {\r\n    return toolNames.reduce((allAnnotationUIDs, toolName) => {\r\n      const annotationUIDs =\r\n        csTools.annotation.selection.getAnnotationsSelectedByToolName(toolName);\r\n\r\n      return allAnnotationUIDs.concat(annotationUIDs);\r\n    }, []);\r\n  }\r\n\r\n  const actions = {\r\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\r\n      // Todo: this is assuming that the hanging protocol has successfully matched\r\n      // the correct PT. For future, we should have a way to filter out the PTs\r\n      // that are in the viewer layout (but then we have the problem of the attenuation\r\n      // corrected PT vs the non-attenuation correct PT)\r\n\r\n      let ptDisplaySet = null;\r\n      for (const [viewportId, viewportDetails] of viewportMatchDetails) {\r\n        const { displaySetsInfo } = viewportDetails;\r\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\r\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\r\n        );\r\n\r\n        if (!displaySets || displaySets.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        ptDisplaySet = displaySets.find(displaySet => displaySet.Modality === 'PT');\r\n\r\n        if (ptDisplaySet) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return ptDisplaySet;\r\n    },\r\n    getPTMetadata: ({ ptDisplaySet }) => {\r\n      const dataSource = extensionManager.getDataSources()[0];\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\r\n\r\n      const firstImageId = imageIds[0];\r\n      const instance = metadataProvider.get('instance', firstImageId);\r\n      if (instance.Modality !== 'PT') {\r\n        return;\r\n      }\r\n\r\n      const metadata = {\r\n        SeriesTime: instance.SeriesTime,\r\n        Modality: instance.Modality,\r\n        PatientSex: instance.PatientSex,\r\n        PatientWeight: instance.PatientWeight,\r\n        RadiopharmaceuticalInformationSequence: {\r\n          RadionuclideTotalDose:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\r\n          RadionuclideHalfLife:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\r\n          RadiopharmaceuticalStartTime:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\r\n          RadiopharmaceuticalStartDateTime:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\r\n        },\r\n      };\r\n\r\n      return metadata;\r\n    },\r\n    createNewLabelmapFromPT: async ({ label }) => {\r\n      // Create a segmentation of the same resolution as the source data\r\n      // using volumeLoader.createAndCacheDerivedVolume.\r\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\r\n        viewportMatchDetails,\r\n      });\r\n\r\n      if (!ptDisplaySet) {\r\n        uiNotificationService.error('No matching PT display set found');\r\n        return;\r\n      }\r\n\r\n      const currentSegmentations = segmentationService.getSegmentations();\r\n\r\n      const segmentationId = await segmentationService.createSegmentationForDisplaySet(\r\n        ptDisplaySet.displaySetInstanceUID,\r\n        { label: `Segmentation ${currentSegmentations.length + 1}` }\r\n      );\r\n\r\n      // Add Segmentation to all toolGroupIds in the viewer\r\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\r\n      const representationType = LABELMAP;\r\n\r\n      for (const toolGroupId of toolGroupIds) {\r\n        const hydrateSegmentation = true;\r\n        await segmentationService.addSegmentationRepresentationToToolGroup(\r\n          toolGroupId,\r\n          segmentationId,\r\n          hydrateSegmentation,\r\n          representationType\r\n        );\r\n\r\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n      }\r\n\r\n      segmentationService.addSegment(segmentationId, {\r\n        segmentIndex: 1,\r\n        properties: {\r\n          label: 'Segment 1',\r\n        },\r\n      });\r\n      return segmentationId;\r\n    },\r\n    setSegmentationActiveForToolGroups: ({ segmentationId }) => {\r\n      const toolGroupIds = _getMatchedViewportsToolGroupIds();\r\n\r\n      toolGroupIds.forEach(toolGroupId => {\r\n        segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n      });\r\n    },\r\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config, segmentIndex }) => {\r\n      const segmentation = csTools.segmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { representationData } = segmentation;\r\n      const { displaySetMatchDetails: matchDetails } = hangingProtocolService.getMatchDetails();\r\n      const volumeLoaderScheme = 'cornerstoneStreamingImageVolume'; // Loader id which defines which volume loader to use\r\n\r\n      const ctDisplaySet = matchDetails.get('ctDisplaySet');\r\n      const ctVolumeId = `${volumeLoaderScheme}:${ctDisplaySet.displaySetInstanceUID}`; // VolumeId with loader id + volume id\r\n\r\n      const { volumeId: segVolumeId } = representationData[LABELMAP];\r\n      const { referencedVolumeId } = cs.cache.getVolume(segVolumeId);\r\n\r\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      if (annotationUIDs.length === 0) {\r\n        uiNotificationService.show({\r\n          title: 'Commands Module',\r\n          message: 'No ROIThreshold Tool is Selected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n\r\n      const labelmapVolume = cs.cache.getVolume(segmentationId);\r\n      let referencedVolume = cs.cache.getVolume(referencedVolumeId);\r\n      const ctReferencedVolume = cs.cache.getVolume(ctVolumeId);\r\n\r\n      // check if viewport is\r\n\r\n      if (!referencedVolume) {\r\n        throw new Error('No Reference volume found');\r\n      }\r\n\r\n      if (!labelmapVolume) {\r\n        throw new Error('No Reference labelmap found');\r\n      }\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUIDs[0]);\r\n\r\n      const {\r\n        metadata: {\r\n          enabledElement: { viewport },\r\n        },\r\n      } = annotation;\r\n\r\n      const showingReferenceVolume = viewport.hasVolumeId(referencedVolumeId);\r\n\r\n      if (!showingReferenceVolume) {\r\n        // if the reference volume is not being displayed, we can't\r\n        // rely on it for thresholding, we have couple of options here\r\n        // 1. We choose whatever volume is being displayed\r\n        // 2. We check if it is a fusion viewport, we pick the volume\r\n        // that matches the size and dimensions of the labelmap. This might\r\n        // happen if the 4D PT is converted to a computed volume and displayed\r\n        // and wants to threshold the labelmap\r\n        // 3. We throw an error\r\n        const displaySetInstanceUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\r\n          viewport.id\r\n        );\r\n\r\n        displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\r\n          const volume = cs.cache\r\n            .getVolumes()\r\n            .find(volume => volume.volumeId.includes(displaySetInstanceUID));\r\n\r\n          if (\r\n            cs.utilities.isEqual(volume.dimensions, labelmapVolume.dimensions) &&\r\n            cs.utilities.isEqual(volume.spacing, labelmapVolume.spacing)\r\n          ) {\r\n            referencedVolume = volume;\r\n          }\r\n        });\r\n      }\r\n\r\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\r\n        annotationUIDs,\r\n        [referencedVolume, ctReferencedVolume],\r\n        config\r\n      );\r\n\r\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n        annotationUIDs,\r\n        labelmapVolume,\r\n        [\r\n          { volume: referencedVolume, lower: ptLower, upper: ptUpper },\r\n          { volume: ctReferencedVolume, lower: ctLower, upper: ctUpper },\r\n        ],\r\n        { overwrite: true, segmentIndex }\r\n      );\r\n    },\r\n    calculateSuvPeak: async ({ labelmap, segmentIndex }) => {\r\n      // if we put it in the top, it will appear in other modes\r\n      workerManager.registerWorker('suv-peak-worker', workerFn, options);\r\n\r\n      const { referencedVolumeId } = labelmap;\r\n      const referencedVolume = cs.cache.getVolume(referencedVolumeId);\r\n\r\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotations = annotationUIDs.map(annotationUID =>\r\n        csTools.annotation.state.getAnnotation(annotationUID)\r\n      );\r\n\r\n      const labelmapProps = {\r\n        dimensions: labelmap.dimensions,\r\n        origin: labelmap.origin,\r\n        direction: labelmap.direction,\r\n        spacing: labelmap.spacing,\r\n        scalarData: labelmap.scalarData,\r\n        metadata: labelmap.metadata,\r\n      };\r\n\r\n      const referenceVolumeProps = {\r\n        dimensions: referencedVolume.dimensions,\r\n        origin: referencedVolume.origin,\r\n        direction: referencedVolume.direction,\r\n        spacing: referencedVolume.spacing,\r\n        scalarData: referencedVolume.scalarData,\r\n        metadata: referencedVolume.metadata,\r\n      };\r\n\r\n      // metadata in annotations has enabledElement which is not serializable\r\n      // we need to remove it\r\n      // Todo: we should probably have a sanitization function for this\r\n      const annotationsToSend = annotations.map(annotation => {\r\n        return {\r\n          ...annotation,\r\n          metadata: {\r\n            ...annotation.metadata,\r\n            enabledElement: {\r\n              ...annotation.metadata.enabledElement,\r\n              viewport: null,\r\n              renderingEngine: null,\r\n              element: null,\r\n            },\r\n          },\r\n        };\r\n      });\r\n\r\n      const suvPeak = await workerManager.executeTask('suv-peak-worker', 'calculateSuvPeak', {\r\n        labelmapProps,\r\n        referenceVolumeProps,\r\n        annotations: annotationsToSend,\r\n        segmentIndex,\r\n      });\r\n\r\n      return {\r\n        suvPeak: suvPeak.mean,\r\n        suvMax: suvPeak.max,\r\n        suvMaxIJK: suvPeak.maxIJK,\r\n        suvMaxLPS: suvPeak.maxLPS,\r\n      };\r\n    },\r\n    getLesionStats: ({ labelmap, segmentIndex = 1 }) => {\r\n      const { scalarData, spacing } = labelmap;\r\n      const referencedScalarData = cs.cache.getVolume(labelmap.referencedVolumeId).getScalarData();\r\n\r\n      let segmentationMax = -Infinity;\r\n      let segmentationMin = Infinity;\r\n      const segmentationValues = [];\r\n\r\n      let voxelCount = 0;\r\n      for (let i = 0; i < scalarData.length; i++) {\r\n        if (scalarData[i] === segmentIndex) {\r\n          const value = referencedScalarData[i];\r\n          segmentationValues.push(value);\r\n          if (value > segmentationMax) {\r\n            segmentationMax = value;\r\n          }\r\n          if (value < segmentationMin) {\r\n            segmentationMin = value;\r\n          }\r\n          voxelCount++;\r\n        }\r\n      }\r\n      const mean = segmentationValues.reduce((a, b) => a + b, 0) / voxelCount;\r\n\r\n      const stats = {\r\n        minValue: segmentationMin,\r\n        maxValue: segmentationMax,\r\n        meanValue: mean,\r\n        stdValue: Math.sqrt(\r\n          segmentationValues\r\n            .map((k) => (k - mean) ** 2)\r\n            .reduce((acc, curr) => acc + curr, 0) / voxelCount),\r\n        volume: voxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3,\r\n      };\r\n\r\n      return stats;\r\n    },\r\n    calculateLesionGlycolysis: ({ lesionStats }) => {\r\n      const { meanValue, volume } = lesionStats;\r\n\r\n      return {\r\n        lesionGlyoclysisStats: volume * meanValue,\r\n      };\r\n    },\r\n    calculateTMTV: ({ segmentations }) => {\r\n      const labelmaps = segmentations.map(s => segmentationService.getLabelmapVolume(s.id));\r\n\r\n      if (!labelmaps.length) {\r\n        return;\r\n      }\r\n\r\n      return calculateTMTV(labelmaps);\r\n    },\r\n    exportTMTVReportCSV: ({ segmentations, tmtv, config, options }) => {\r\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\r\n        segmentations,\r\n      });\r\n\r\n      const tlg = actions.getTotalLesionGlycolysis({ segmentations });\r\n      const additionalReportRows = [\r\n        { key: 'Total Lesion Glycolysis', value: { tlg: tlg.toFixed(4) } },\r\n        { key: 'Threshold Configuration', value: { ...config } },\r\n      ];\r\n\r\n      if (tmtv !== undefined) {\r\n        additionalReportRows.unshift({\r\n          key: 'Total Metabolic Tumor Volume',\r\n          value: { tmtv },\r\n        });\r\n      }\r\n\r\n      createAndDownloadTMTVReport(segReport, additionalReportRows, options);\r\n    },\r\n    getTotalLesionGlycolysis: ({ segmentations }) => {\r\n      const labelmapVolumes = segmentations.map(s => segmentationService.getLabelmapVolume(s.id));\r\n\r\n      let mergedLabelmap;\r\n      // merge labelmap will through an error if labels maps are not the same size\r\n      // or same direction or ....\r\n      try {\r\n        mergedLabelmap =\r\n          csTools.utilities.segmentation.createMergedLabelmapForIndex(labelmapVolumes);\r\n      } catch (e) {\r\n        console.error('commandsModule::getTotalLesionGlycolysis', e);\r\n        return;\r\n      }\r\n\r\n      // grabbing the first labelmap referenceVolume since it will be the same for all\r\n      const { referencedVolumeId, spacing } = labelmapVolumes[0];\r\n\r\n      if (!referencedVolumeId) {\r\n        console.error('commandsModule::getTotalLesionGlycolysis:No referencedVolumeId found');\r\n      }\r\n\r\n      const ptVolume = cs.cache.getVolume(referencedVolumeId);\r\n      const mergedLabelData = mergedLabelmap.getScalarData();\r\n\r\n      if (mergedLabelData.length !== ptVolume.getScalarData().length) {\r\n        console.error(\r\n          'commandsModule::getTotalLesionGlycolysis:Labelmap and ptVolume are not the same size'\r\n        );\r\n      }\r\n\r\n      let suv = 0;\r\n      let totalLesionVoxelCount = 0;\r\n      for (let i = 0; i < mergedLabelData.length; i++) {\r\n        // if not background\r\n        if (mergedLabelData[i] !== 0) {\r\n          suv += ptVolume.getScalarData()[i];\r\n          totalLesionVoxelCount += 1;\r\n        }\r\n      }\r\n\r\n      // Average SUV for the merged labelmap\r\n      const averageSuv = suv / totalLesionVoxelCount;\r\n\r\n      // total Lesion Glycolysis [suv * ml]\r\n      return averageSuv * totalLesionVoxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3;\r\n    },\r\n    setStartSliceForROIThresholdTool: () => {\r\n      const { viewport } = _getActiveViewportsEnabledElement();\r\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\r\n\r\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotationUID = selectedAnnotationUIDs[0];\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\r\n\r\n      const { handles } = annotation.data;\r\n      const { points } = handles;\r\n\r\n      // get the current slice Index\r\n      const sliceIndex = viewport.getCurrentImageIdIndex();\r\n      annotation.data.startSlice = sliceIndex;\r\n\r\n      // distance between camera focal point and each point on the rectangle\r\n      const newPoints = points.map(point => {\r\n        const distance = vec3.create();\r\n        vec3.subtract(distance, focalPoint, point);\r\n        // distance in the direction of the viewPlaneNormal\r\n        const distanceInViewPlane = vec3.dot(distance, viewPlaneNormal);\r\n        // new point is current point minus distanceInViewPlane\r\n        const newPoint = vec3.create();\r\n        vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, distanceInViewPlane);\r\n\r\n        return newPoint;\r\n        //\r\n      });\r\n\r\n      handles.points = newPoints;\r\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\r\n      // and re-calculate the projection points\r\n      annotation.invalidated = true;\r\n      viewport.render();\r\n    },\r\n    setEndSliceForROIThresholdTool: () => {\r\n      const { viewport } = _getActiveViewportsEnabledElement();\r\n\r\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotationUID = selectedAnnotationUIDs[0];\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\r\n\r\n      // get the current slice Index\r\n      const sliceIndex = viewport.getCurrentImageIdIndex();\r\n      annotation.data.endSlice = sliceIndex;\r\n\r\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\r\n      // and re-calculate the projection points\r\n      annotation.invalidated = true;\r\n\r\n      viewport.render();\r\n    },\r\n    createTMTVRTReport: () => {\r\n      // get all Rectangle ROI annotation\r\n      const stateManager = csTools.annotation.state.getAnnotationManager();\r\n\r\n      const annotations = [];\r\n\r\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\r\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\r\n        const ROIAnnotations = RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS.reduce(\r\n          (annotations, toolName) => [...annotations, ...(forAnnotations[toolName] ?? [])],\r\n          []\r\n        );\r\n\r\n        annotations.push(...ROIAnnotations);\r\n      });\r\n\r\n      commandsManager.runCommand('exportRTReportForAnnotations', {\r\n        annotations,\r\n      });\r\n    },\r\n    getSegmentationCSVReport: ({ segmentations }) => {\r\n      if (!segmentations || !segmentations.length) {\r\n        segmentations = segmentationService.getSegmentations();\r\n      }\r\n\r\n      const report = {};\r\n\r\n      for (const segmentation of segmentations) {\r\n        const { id, label, cachedStats: data } = segmentation;\r\n\r\n        const segReport = { id, label };\r\n\r\n        if (!data) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        Object.keys(data).forEach(key => {\r\n          if (typeof data[key] !== 'object') {\r\n            segReport[key] = data[key];\r\n          } else {\r\n            Object.keys(data[key]).forEach(subKey => {\r\n              const newKey = `${key}_${subKey}`;\r\n              segReport[newKey] = data[key][subKey];\r\n            });\r\n          }\r\n        });\r\n\r\n        const labelmapVolume = segmentationService.getLabelmapVolume(id);\r\n\r\n        if (!labelmapVolume) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const referencedVolumeId = labelmapVolume.referencedVolumeId;\r\n        segReport.referencedVolumeId = referencedVolumeId;\r\n\r\n        const referencedVolume = segmentationService.getLabelmapVolume(referencedVolumeId);\r\n\r\n        if (!referencedVolume) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const firstImageId = referencedVolume.imageIds[0];\r\n        const instance = OHIF.classes.MetadataProvider.get('instance', firstImageId);\r\n\r\n        if (!instance) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        report[id] = {\r\n          ...segReport,\r\n          PatientID: instance.PatientID ?? '000000',\r\n          PatientName: instance.PatientName.Alphabetic,\r\n          StudyInstanceUID: instance.StudyInstanceUID,\r\n          SeriesInstanceUID: instance.SeriesInstanceUID,\r\n          StudyDate: instance.StudyDate,\r\n        };\r\n      }\r\n\r\n      return report;\r\n    },\r\n    exportRTReportForAnnotations: ({ annotations }) => {\r\n      dicomRTAnnotationExport(annotations);\r\n    },\r\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\r\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\r\n        viewportMatchDetails,\r\n      });\r\n\r\n      if (!ptDisplaySet) {\r\n        return;\r\n      }\r\n\r\n      const fusionViewportIds = toolGroup.getViewportIds();\r\n\r\n      const viewports = [];\r\n      fusionViewportIds.forEach(viewportId => {\r\n        commandsManager.runCommand('setViewportColormap', {\r\n          viewportId,\r\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\r\n          colormap: {\r\n            name: colormap,\r\n          },\r\n        });\r\n\r\n        viewports.push(cornerstoneViewportService.getCornerstoneViewport(viewportId));\r\n      });\r\n\r\n      viewports.forEach(viewport => {\r\n        viewport.render();\r\n      });\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    setEndSliceForROIThresholdTool: {\r\n      commandFn: actions.setEndSliceForROIThresholdTool,\r\n    },\r\n    setStartSliceForROIThresholdTool: {\r\n      commandFn: actions.setStartSliceForROIThresholdTool,\r\n    },\r\n    getMatchingPTDisplaySet: {\r\n      commandFn: actions.getMatchingPTDisplaySet,\r\n    },\r\n    getPTMetadata: {\r\n      commandFn: actions.getPTMetadata,\r\n    },\r\n    createNewLabelmapFromPT: {\r\n      commandFn: actions.createNewLabelmapFromPT,\r\n    },\r\n    setSegmentationActiveForToolGroups: {\r\n      commandFn: actions.setSegmentationActiveForToolGroups,\r\n    },\r\n    thresholdSegmentationByRectangleROITool: {\r\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\r\n    },\r\n    getTotalLesionGlycolysis: {\r\n      commandFn: actions.getTotalLesionGlycolysis,\r\n    },\r\n    calculateSuvPeak: {\r\n      commandFn: actions.calculateSuvPeak,\r\n    },\r\n    getLesionStats: {\r\n      commandFn: actions.getLesionStats,\r\n    },\r\n    calculateTMTV: {\r\n      commandFn: actions.calculateTMTV,\r\n    },\r\n    exportTMTVReportCSV: {\r\n      commandFn: actions.exportTMTVReportCSV,\r\n    },\r\n    createTMTVRTReport: {\r\n      commandFn: actions.createTMTVRTReport,\r\n    },\r\n    getSegmentationCSVReport: {\r\n      commandFn: actions.getSegmentationCSVReport,\r\n    },\r\n    exportRTReportForAnnotations: {\r\n      commandFn: actions.exportRTReportForAnnotations,\r\n    },\r\n    setFusionPTColormap: {\r\n      commandFn: actions.setFusionPTColormap,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'TMTV:CORNERSTONE',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","export default function createAndDownloadTMTVReport(segReport, additionalReportRows, options = {}) {\r\n  const firstReport = segReport[Object.keys(segReport)[0]];\r\n  const columns = Object.keys(firstReport);\r\n  const csv = [columns.join(',')];\r\n\r\n  Object.values(segReport).forEach(segmentation => {\r\n    const row = [];\r\n    columns.forEach(column => {\r\n      // if it is array then we need to replace , with space to avoid csv parsing error\r\n      row.push(\r\n        Array.isArray(segmentation[column]) ? segmentation[column].join(' ') : segmentation[column]\r\n      );\r\n    });\r\n    csv.push(row.join(','));\r\n  });\r\n\r\n  csv.push('');\r\n  csv.push('');\r\n  csv.push('');\r\n\r\n  csv.push(`Patient ID,${firstReport.PatientID}`);\r\n  csv.push(`Study Date,${firstReport.StudyDate}`);\r\n  csv.push('');\r\n  additionalReportRows.forEach(({ key, value: values }) => {\r\n    const temp = [];\r\n    temp.push(`${key}`);\r\n    Object.keys(values).forEach(k => {\r\n      temp.push(`${k}`);\r\n      temp.push(`${values[k]}`);\r\n    });\r\n\r\n    csv.push(temp.join(','));\r\n  });\r\n\r\n  const blob = new Blob([csv.join('\\n')], {\r\n    type: 'text/csv;charset=utf-8',\r\n  });\r\n\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = options.filename ?? `${firstReport.PatientID}_tmtv.csv`;\r\n  a.click();\r\n}\r\n","import React from 'react';\r\nimport { Input, Label, Select, LegacyButton, LegacyButtonGroup } from '@ohif/ui';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const ROI_STAT = 'roi_stat';\r\nconst RANGE = 'range';\r\n\r\nconst options = [\r\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\r\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\r\n];\r\n\r\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\r\n  const { t } = useTranslation('ROIThresholdConfiguration');\r\n\r\n  return (\r\n    <div className=\"bg-primary-dark flex flex-col space-y-4\">\r\n      <div className=\"flex items-end space-x-2\">\r\n        <div className=\"flex w-1/2 flex-col\">\r\n          <Select\r\n            label={t('Strategy')}\r\n            closeMenuOnSelect={true}\r\n            className=\"border-primary-main mr-2 bg-black text-white \"\r\n            options={options}\r\n            placeholder={options.find(option => option.value === config.strategy).placeHolder}\r\n            value={config.strategy}\r\n            onChange={({ value }) => {\r\n              dispatch({\r\n                type: 'setStrategy',\r\n                payload: {\r\n                  strategy: value,\r\n                },\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"w-1/2\">\r\n          {/* TODO Revisit design of LegacyButtonGroup later - for now use LegacyButton for its children.*/}\r\n          <LegacyButtonGroup>\r\n            <LegacyButton\r\n              size=\"initial\"\r\n              className=\"px-2 py-2 text-base text-white\"\r\n              color=\"primaryLight\"\r\n              variant=\"outlined\"\r\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\r\n            >\r\n              {t('Start')}\r\n            </LegacyButton>\r\n            <LegacyButton\r\n              size=\"initial\"\r\n              color=\"primaryLight\"\r\n              variant=\"outlined\"\r\n              className=\"px-2 py-2 text-base text-white\"\r\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\r\n            >\r\n              {t('End')}\r\n            </LegacyButton>\r\n          </LegacyButtonGroup>\r\n        </div>\r\n      </div>\r\n\r\n      {config.strategy === ROI_STAT && (\r\n        <Input\r\n          label={t('Percentage of Max SUV')}\r\n          labelClassName=\"text-[13px] font-inter text-white\"\r\n          className=\"border-primary-main bg-black\"\r\n          type=\"text\"\r\n          containerClassName=\"mr-2\"\r\n          value={config.weight}\r\n          onChange={e => {\r\n            dispatch({\r\n              type: 'setWeight',\r\n              payload: {\r\n                weight: e.target.value,\r\n              },\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n      {config.strategy !== ROI_STAT && (\r\n        <div className=\"mr-2 text-sm\">\r\n          <table>\r\n            <tbody>\r\n              <tr className=\"mt-2\">\r\n                <td\r\n                  className=\"pr-4\"\r\n                  colSpan=\"3\"\r\n                >\r\n                  <Label\r\n                    className=\"font-inter text-[13px] text-white\"\r\n                    text=\"Lower & Upper Ranges\"\r\n                  ></Label>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"mt-2\">\r\n                <td className=\"pr-4 pt-2 text-center\">\r\n                  <Label\r\n                    className=\"text-white\"\r\n                    text=\"CT\"\r\n                  ></Label>\r\n                </td>\r\n                <td>\r\n                  <div className=\"flex justify-between\">\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ctLower}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ctLower: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ctUpper}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ctUpper: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"pr-4 pt-2 text-center\">\r\n                  <Label\r\n                    className=\"text-white\"\r\n                    text=\"PT\"\r\n                  ></Label>\r\n                </td>\r\n                <td>\r\n                  <div className=\"flex justify-between\">\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ptLower}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ptLower: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ptUpper}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ptUpper: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ROIThresholdConfiguration;\r\n","import React, { useState, useCallback, useReducer, useEffect } from 'react';\r\nimport { Button } from '@ohif/ui';\r\nimport ROIThresholdConfiguration, {\r\n  ROI_STAT,\r\n} from './PanelROIThresholdSegmentation/ROIThresholdConfiguration';\r\nimport * as cs3dTools from '@cornerstonejs/tools';\r\n\r\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\r\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\r\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\r\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\r\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\r\nconst DEFAULT_STRATEGY = ROI_STAT;\r\n\r\nfunction reducer(state, action) {\r\n  const { payload } = action;\r\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\r\n\r\n  switch (action.type) {\r\n    case 'setStrategy':\r\n      return {\r\n        ...state,\r\n        strategy,\r\n      };\r\n    case 'setThreshold':\r\n      return {\r\n        ...state,\r\n        ctLower: ctLower ? ctLower : state.ctLower,\r\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\r\n        ptLower: ptLower ? ptLower : state.ptLower,\r\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\r\n      };\r\n    case 'setWeight':\r\n      return {\r\n        ...state,\r\n        weight,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction RectangleROIOptions({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { segmentationService } = servicesManager.services;\r\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\r\n\r\n  const runCommand = useCallback(\r\n    (commandName, commandOptions = {}) => {\r\n      return commandsManager.runCommand(commandName, commandOptions);\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const [config, dispatch] = useReducer(reducer, {\r\n    strategy: DEFAULT_STRATEGY,\r\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\r\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\r\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\r\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\r\n    weight: WEIGHT_DEFAULT,\r\n  });\r\n\r\n  const handleROIThresholding = useCallback(() => {\r\n    const segmentationId = selectedSegmentationId;\r\n    const activeSegmentIndex =\r\n      cs3dTools.segmentation.segmentIndex.getActiveSegmentIndex(segmentationId);\r\n\r\n    // run the threshold based on the active segment index\r\n    // Todo: later find a way to associate each rectangle with a segment (e.g., maybe with color?)\r\n    runCommand('thresholdSegmentationByRectangleROITool', {\r\n      segmentationId,\r\n      config,\r\n      segmentIndex: activeSegmentIndex,\r\n    });\r\n  }, [selectedSegmentationId, config]);\r\n\r\n  useEffect(() => {\r\n    const segmentations = segmentationService.getSegmentations();\r\n\r\n    if (!segmentations.length) {\r\n      return;\r\n    }\r\n\r\n    const isActive = segmentations.find(seg => seg.isActive);\r\n    setSelectedSegmentationId(isActive.id);\r\n  }, []);\r\n\r\n  /**\r\n   * Update UI based on segmentation changes (added, removed, updated)\r\n   */\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n    const subscriptions = [];\r\n\r\n    [added, updated].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const segmentations = segmentationService.getSegmentations();\r\n\r\n        if (!segmentations.length) {\r\n          return;\r\n        }\r\n\r\n        const isActive = segmentations.find(seg => seg.isActive);\r\n        setSelectedSegmentationId(isActive.id);\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"invisible-scrollbar mb-2 flex flex-col overflow-y-auto overflow-x-hidden\">\r\n      <ROIThresholdConfiguration\r\n        config={config}\r\n        dispatch={dispatch}\r\n        runCommand={runCommand}\r\n      />\r\n      {selectedSegmentationId !== null && (\r\n        <Button\r\n          className=\"mt-2 !h-[26px] !w-[75px]\"\r\n          onClick={handleROIThresholding}\r\n        >\r\n          Run\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RectangleROIOptions;\r\n","import { id } from './id';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport init from './init';\r\nimport commandsModule from './commandsModule';\r\nimport getToolbarModule from './getToolbarModule';\r\n\r\n/**\r\n *\r\n */\r\nconst tmtvExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {\r\n    init({ servicesManager, commandsManager, extensionManager, configuration });\r\n  },\r\n  getToolbarModule,\r\n  getPanelModule,\r\n  getHangingProtocolModule,\r\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\r\n    return commandsModule({\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    });\r\n  },\r\n};\r\n\r\nexport default tmtvExtension;\r\n","import { addTool, RectangleROIStartEndThresholdTool } from '@cornerstonejs/tools';\r\n\r\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\r\n\r\nconst CORNERSTONE_3D_TOOLS_SOURCE_NAME = 'Cornerstone3DTools';\r\nconst CORNERSTONE_3D_TOOLS_SOURCE_VERSION = '0.1';\r\n/**\r\n *\r\n * @param {Object} servicesManager\r\n * @param {Object} configuration\r\n * @param {Object|Array} configuration.csToolsConfig\r\n */\r\nexport default function init({ servicesManager }) {\r\n  const { measurementService, displaySetService, cornerstoneViewportService } =\r\n    servicesManager.services;\r\n\r\n  addTool(RectangleROIStartEndThresholdTool);\r\n\r\n  const { RectangleROIStartEndThreshold } = measurementServiceMappingsFactory(\r\n    measurementService,\r\n    displaySetService,\r\n    cornerstoneViewportService\r\n  );\r\n\r\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\r\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n  );\r\n\r\n  measurementService.addMapping(\r\n    csTools3DVer1MeasurementSource,\r\n    'RectangleROIStartEndThreshold',\r\n    RectangleROIStartEndThreshold.matchingCriteria,\r\n    RectangleROIStartEndThreshold.toAnnotation,\r\n    RectangleROIStartEndThreshold.toMeasurement\r\n  );\r\n}\r\n","import RectangleROIOptions from './Panels/RectangleROIOptions';\r\n\r\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\r\n  return [\r\n    {\r\n      name: 'tmtv.RectangleROIThresholdOptions',\r\n      defaultComponent: () => RectangleROIOptions({ commandsManager, servicesManager }),\r\n    },\r\n  ];\r\n}\r\n"],"names":["id","packageJson","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","type","source","target","options","syncColormap","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacity","value","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","PanelPetSUV","servicesManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","toolbarService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","React","className","PanelSection","title","Input","containerClassName","label","labelClassName","onChange","e","labelChildren","Button","onClick","Error","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","setTimeout","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","PanelRoiThresholdSegmentation","segmentationService","uiNotificationService","segmentations","setSegmentations","getSegmentations","activeSegmentation","setActiveSegmentation","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","evt","filter","seg","isActive","push","unsub","callback","async","detail","segmentationId","config","segmentation","getSegmentation","updatedPerSegmentCachedStats","segments","Promise","all","map","segment","segmentIndex","labelmap","cache","getVolume","lesionStats","run","suvPeak","cachedStats","lesionGlyoclysisStats","volume","meanValue","displayText","toFixed","tmtv","assign","addOrUpdateSegmentation","handleROIThresholding","Number","isNaN","show","message","eventTarget","addEventListenerDebounced","Enums","SEGMENTATION_DATA_MODIFIED","removeEventListenerDebounced","tmtvValue","actions","disabled","ActionButtons","window","open","Icon","toggleSegmentationVisibility","extensionManager","iconName","iconLabel","component","wrappedPanelPetSuv","wrappedROIThresholdToolbox","Toolbox","buttonSectionId","wrappedROIThresholdExport","PanelROIThresholdExport","getSOPInstanceAttributes","imageId","instance","metaData","SOPInstanceUID","frameNumber","_getUIDFromImageID","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","getRoiStats","referencedVolume","annotations","imageData","values","getPointData","getScalars","getData","fn","baseValue","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","iMin","iMax","jMin","jMax","kMin","kMax","i","j","k","computeOffsetIndex","annotationUIDs","referencedVolumes","strategy","ptLower","ptUpper","ctLower","ctUpper","labelmaps","mergedLabelmap","utilities","spacing","reduce","acc","curr","datasetToBlob","dcmjs","metadataProvider","classes","MetadataProvider","dataset","adaptersRT","Cornerstone3D","RTSS","generateRTSSFromAnnotations","reportBlob","objectUrl","URL","createObjectURL","location","RECTANGLE_ROI_THRESHOLD_MANUAL_TOOL_IDS","LABELMAP","Labelmap","workerManager","getWebWorkerManager","maxWorkerInstances","autoTerminateOnIdle","enabled","idleTimeThreshold","workerFn","Worker","commandsModule","viewportGridService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportId","getState","element","cs","_getMatchedViewportsToolGroupIds","toolGroupIds","viewport","indexOf","_getAnnotationsSelectedByToolNames","toolNames","allAnnotationUIDs","concat","viewportDetails","displaySetsInfo","getDisplaySetByUID","find","Modality","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","get","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","error","currentSegmentations","createSegmentationForDisplaySet","representationType","hydrateSegmentation","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","addSegment","setSegmentationActiveForToolGroups","thresholdSegmentationByRectangleROITool","representationData","displaySetMatchDetails","matchDetails","ctVolumeId","volumeId","segVolumeId","referencedVolumeId","labelmapVolume","ctReferencedVolume","enabledElement","hasVolumeId","getDisplaySetsUIDsForViewport","getVolumes","dimensions","getThresholdValues","lower","upper","overwrite","calculateSuvPeak","registerWorker","labelmapProps","origin","direction","scalarData","referenceVolumeProps","annotationsToSend","renderingEngine","executeTask","mean","suvMax","max","suvMaxIJK","maxIJK","suvMaxLPS","maxLPS","getLesionStats","referencedScalarData","getScalarData","segmentationMax","segmentationMin","segmentationValues","voxelCount","a","b","minValue","stdValue","Math","sqrt","calculateLesionGlycolysis","calculateTMTV","s","getLabelmapVolume","exportTMTVReportCSV","segReport","additionalReportRows","tlg","getTotalLesionGlycolysis","undefined","unshift","firstReport","csv","join","row","column","Array","isArray","PatientID","StudyDate","temp","blob","Blob","url","document","createElement","href","download","filename","click","createAndDownloadTMTVReport","labelmapVolumes","ptVolume","mergedLabelData","suv","totalLesionVoxelCount","setStartSliceForROIThresholdTool","focalPoint","viewPlaneNormal","getCamera","handles","points","sliceIndex","getCurrentImageIdIndex","startSlice","newPoints","point","distance","vec3","distanceInViewPlane","newPoint","invalidated","render","setEndSliceForROIThresholdTool","endSlice","createTMTVRTReport","stateManager","frameOfReferenceUID","forAnnotations","ROIAnnotations","getSegmentationCSVReport","report","subKey","imageIds","OHIF","PatientName","Alphabetic","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getCornerstoneViewport","definitions","commandFn","defaultContext","ROI_STAT","placeHolder","dispatch","Select","closeMenuOnSelect","placeholder","option","payload","LegacyButtonGroup","LegacyButton","size","color","variant","colSpan","Label","text","DEFAULT_STRATEGY","reducer","state","action","selectedSegmentationId","setSelectedSegmentationId","useCallback","commandName","commandOptions","useReducer","activeSegmentIndex","cs3dTools","ROIThresholdConfiguration","tmtvExtension","preRegistration","configuration","addTool","RectangleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","init","getToolbarModule","defaultComponent","RectangleROIOptions","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}