{"version":3,"file":"239.bundle.5a8ac576bbec01f78a62.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-sr/src/viewports/OHIFCornerstoneSRViewport.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport OHIF, { utils, ServicesManager, ExtensionManager } from '@ohif/core';\r\n\r\nimport { setTrackingUniqueIdentifiersForElement } from '../tools/modules/dicomSRModule';\r\n\r\nimport { Icon, Tooltip, useViewportGrid, ViewportActionBar } from '@ohif/ui';\r\nimport hydrateStructuredReport from '../utils/hydrateStructuredReport';\r\n\r\nconst { formatDate } = utils;\r\n\r\nconst MEASUREMENT_TRACKING_EXTENSION_ID =\r\n  '@ohif/extension-measurement-tracking';\r\n\r\nconst SR_TOOLGROUP_BASE_NAME = 'SRToolGroup';\r\n\r\nfunction OHIFCornerstoneSRViewport(props) {\r\n  const {\r\n    children,\r\n    dataSource,\r\n    displaySets,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    viewportOptions,\r\n    servicesManager,\r\n    extensionManager,\r\n  } = props;\r\n\r\n  const {\r\n    displaySetService,\r\n    cornerstoneViewportService,\r\n    measurementService,\r\n  } = servicesManager.services;\r\n\r\n  // SR viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SR viewport should only have a single display set');\r\n  }\r\n\r\n  const srDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [measurementSelected, setMeasurementSelected] = useState(0);\r\n  const [measurementCount, setMeasurementCount] = useState(1);\r\n  const [activeImageDisplaySetData, setActiveImageDisplaySetData] = useState(\r\n    null\r\n  );\r\n  const [\r\n    referencedDisplaySetMetadata,\r\n    setReferencedDisplaySetMetadata,\r\n  ] = useState(null);\r\n  const [element, setElement] = useState(null);\r\n  const { viewports, activeViewportIndex } = viewportGrid;\r\n\r\n  // Optional hook into tracking extension, if present.\r\n  let trackedMeasurements;\r\n  let sendTrackedMeasurementsEvent;\r\n\r\n  const hasMeasurementTrackingExtension = extensionManager.registeredExtensionIds.includes(\r\n    MEASUREMENT_TRACKING_EXTENSION_ID\r\n  );\r\n\r\n  if (hasMeasurementTrackingExtension) {\r\n    const contextModule = extensionManager.getModuleEntry(\r\n      '@ohif/extension-measurement-tracking.contextModule.TrackedMeasurementsContext'\r\n    );\r\n\r\n    const tracked = useContext(contextModule.context);\r\n    trackedMeasurements = tracked?.[0];\r\n    sendTrackedMeasurementsEvent = tracked?.[1];\r\n  }\r\n  if (!sendTrackedMeasurementsEvent) {\r\n    // if no panels from measurement-tracking extension is used, this code will run\r\n    trackedMeasurements = null;\r\n    sendTrackedMeasurementsEvent = (eventName, { displaySetInstanceUID }) => {\r\n      measurementService.clearMeasurements();\r\n      const { SeriesInstanceUIDs } = hydrateStructuredReport(\r\n        { servicesManager, extensionManager },\r\n        displaySetInstanceUID\r\n      );\r\n      const displaySets = displaySetService.getDisplaySetsForSeries(\r\n        SeriesInstanceUIDs[0]\r\n      );\r\n      if (displaySets.length) {\r\n        viewportGridService.setDisplaySetsForViewports([\r\n          {\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUIDs: [displaySets[0].displaySetInstanceUID],\r\n          },\r\n        ]);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store the tracking identifiers per viewport in order to be able to\r\n   * show the SR measurements on the referenced image on the correct viewport,\r\n   * when multiple viewports are used.\r\n   */\r\n  const setTrackingIdentifiers = useCallback(\r\n    measurementSelected => {\r\n      const { measurements } = srDisplaySet;\r\n\r\n      setTrackingUniqueIdentifiersForElement(\r\n        element,\r\n        measurements.map(measurement => measurement.TrackingUniqueIdentifier),\r\n        measurementSelected\r\n      );\r\n    },\r\n    [element, measurementSelected, srDisplaySet]\r\n  );\r\n\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const updateViewport = useCallback(\r\n    newMeasurementSelected => {\r\n      const {\r\n        StudyInstanceUID,\r\n        displaySetInstanceUID,\r\n        sopClassUids,\r\n      } = srDisplaySet;\r\n\r\n      if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n        return;\r\n      }\r\n\r\n      if (sopClassUids && sopClassUids.length > 1) {\r\n        // Todo: what happens if there are multiple SOP Classes? Why we are\r\n        // not throwing an error?\r\n        console.warn(\r\n          'More than one SOPClassUID in the same series is not yet supported.'\r\n        );\r\n      }\r\n\r\n      _getViewportReferencedDisplaySetData(\r\n        srDisplaySet,\r\n        newMeasurementSelected,\r\n        displaySetService\r\n      ).then(({ referencedDisplaySet, referencedDisplaySetMetadata }) => {\r\n        setMeasurementSelected(newMeasurementSelected);\r\n        setActiveImageDisplaySetData(referencedDisplaySet);\r\n        setReferencedDisplaySetMetadata(referencedDisplaySetMetadata);\r\n\r\n        if (\r\n          referencedDisplaySet.displaySetInstanceUID ===\r\n          activeImageDisplaySetData?.displaySetInstanceUID\r\n        ) {\r\n          const { measurements } = srDisplaySet;\r\n\r\n          // it means that we have a new referenced display set, and the\r\n          // imageIdIndex will handle it by updating the viewport, but if they\r\n          // are the same we just need to use measurementService to jump to the\r\n          // new measurement\r\n          const viewportInfo = cornerstoneViewportService.getViewportInfoByIndex(\r\n            viewportIndex\r\n          );\r\n\r\n          const csViewport = cornerstoneViewportService.getCornerstoneViewport(\r\n            viewportInfo.getViewportId()\r\n          );\r\n\r\n          const imageIds = csViewport.getImageIds();\r\n\r\n          const imageIdIndex = imageIds.indexOf(\r\n            measurements[newMeasurementSelected].imageId\r\n          );\r\n\r\n          if (imageIdIndex !== -1) {\r\n            csViewport.setImageIdIndex(imageIdIndex);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    [dataSource, srDisplaySet, activeImageDisplaySetData, viewportIndex]\r\n  );\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    if (!activeImageDisplaySetData) {\r\n      return null;\r\n    }\r\n\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const { measurements } = srDisplaySet;\r\n    const measurement = measurements[measurementSelected];\r\n\r\n    if (!measurement) {\r\n      return null;\r\n    }\r\n\r\n    const initialImageIndex = activeImageDisplaySetData.images.findIndex(\r\n      image => image.imageId === measurement.imageId\r\n    );\r\n\r\n    return (\r\n      <Component\r\n        {...props}\r\n        // should be passed second since we don't want SR displaySet to\r\n        // override the activeImageDisplaySetData\r\n        displaySets={[activeImageDisplaySetData]}\r\n        // It is possible that there is a hanging protocol applying viewportOptions\r\n        // for the SR, so inherit the viewport options\r\n        // TODO: Ensure the viewport options are set correctly with respect to\r\n        // stack etc, in the incoming viewport options.\r\n        viewportOptions={{\r\n          ...viewportOptions,\r\n          toolGroupId: `${SR_TOOLGROUP_BASE_NAME}`,\r\n          // viewportType should not be required, as the stack type should be\r\n          // required already in order to view SR, but sometimes segmentation\r\n          // views set the viewport type without fixing the allowed display\r\n          viewportType: 'stack',\r\n          // The positionIds for the viewport aren't meaningful for the child display sets\r\n          positionIds: null,\r\n        }}\r\n        onElementEnabled={onElementEnabled}\r\n        initialImageIndex={initialImageIndex}\r\n      ></Component>\r\n    );\r\n  }, [activeImageDisplaySetData, viewportIndex, measurementSelected]);\r\n\r\n  const onMeasurementChange = useCallback(\r\n    direction => {\r\n      let newMeasurementSelected = measurementSelected;\r\n\r\n      if (direction === 'right') {\r\n        newMeasurementSelected++;\r\n\r\n        if (newMeasurementSelected >= measurementCount) {\r\n          newMeasurementSelected = 0;\r\n        }\r\n      } else {\r\n        newMeasurementSelected--;\r\n\r\n        if (newMeasurementSelected < 0) {\r\n          newMeasurementSelected = measurementCount - 1;\r\n        }\r\n      }\r\n\r\n      setTrackingIdentifiers(newMeasurementSelected);\r\n      updateViewport(newMeasurementSelected);\r\n    },\r\n    [\r\n      measurementSelected,\r\n      measurementCount,\r\n      updateViewport,\r\n      setTrackingIdentifiers,\r\n    ]\r\n  );\r\n\r\n  /**\r\n   Cleanup the SR viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports[activeViewportIndex];\r\n        if (\r\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\r\n        ) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Loading the measurements from the SR viewport, which goes through the\r\n   * isHydratable check, the outcome for the isHydrated state here is always FALSE\r\n   * since we don't do the hydration here. Todo: can't we just set it as false? why\r\n   * we are changing the state here? isHydrated is always false at this stage, and\r\n   * if it is hydrated we don't even use the SR viewport.\r\n   */\r\n  useEffect(() => {\r\n    if (!srDisplaySet.isLoaded) {\r\n      srDisplaySet.load();\r\n    }\r\n    const numMeasurements = srDisplaySet.measurements.length;\r\n    setMeasurementCount(numMeasurements);\r\n  }, [srDisplaySet]);\r\n\r\n  /**\r\n   * Hook to update the tracking identifiers when the selected measurement changes or\r\n   * the element changes\r\n   */\r\n  useEffect(() => {\r\n    if (!element || !srDisplaySet.isLoaded) {\r\n      return;\r\n    }\r\n    setTrackingIdentifiers(measurementSelected);\r\n  }, [measurementSelected, element, setTrackingIdentifiers, srDisplaySet]);\r\n\r\n  /**\r\n   * Todo: what is this, not sure what it does regarding the react aspect,\r\n   * it is updating a local variable? which is not state.\r\n   */\r\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  useEffect(() => {\r\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  }, [trackedMeasurements]);\r\n\r\n  /**\r\n   * Data fetching for the SR displaySet, which updates the measurements and\r\n   * also gets the referenced image displaySet that SR is based on.\r\n   */\r\n  useEffect(() => {\r\n    updateViewport(measurementSelected);\r\n  }, [dataSource, srDisplaySet]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (!activeImageDisplaySetData || !referencedDisplaySetMetadata) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n    SeriesNumber,\r\n  } = referencedDisplaySetMetadata;\r\n\r\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onArrowsClick={onMeasurementChange}\r\n        getStatusComponent={() =>\r\n          _getStatusComponent({\r\n            srDisplaySet,\r\n            viewportIndex,\r\n            isTracked: false,\r\n            isRehydratable: srDisplaySet.isRehydratable,\r\n            isLocked,\r\n            sendTrackedMeasurementsEvent,\r\n          })\r\n        }\r\n        studyData={{\r\n          label: viewportLabel,\r\n          useAltStyling: true,\r\n          studyDate: formatDate(StudyDate),\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: SeriesDescription || '',\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneSRViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  viewportLabel: PropTypes.string,\r\n  customProps: PropTypes.object,\r\n  viewportOptions: PropTypes.object,\r\n  viewportLabel: PropTypes.string,\r\n  servicesManager: PropTypes.instanceOf(ServicesManager).isRequired,\r\n  extensionManager: PropTypes.instanceOf(ExtensionManager).isRequired,\r\n};\r\n\r\nOHIFCornerstoneSRViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nasync function _getViewportReferencedDisplaySetData(\r\n  displaySet,\r\n  measurementSelected,\r\n  displaySetService\r\n) {\r\n  const { measurements } = displaySet;\r\n  const measurement = measurements[measurementSelected];\r\n\r\n  const { displaySetInstanceUID } = measurement;\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return { referencedDisplaySetMetadata, referencedDisplaySet };\r\n}\r\n\r\nfunction _getStatusComponent({\r\n  srDisplaySet,\r\n  viewportIndex,\r\n  isRehydratable,\r\n  isLocked,\r\n  sendTrackedMeasurementsEvent,\r\n}) {\r\n  const handleMouseUp = () => {\r\n    sendTrackedMeasurementsEvent('HYDRATE_SR', {\r\n      displaySetInstanceUID: srDisplaySet.displaySetInstanceUID,\r\n      viewportIndex,\r\n    });\r\n  };\r\n\r\n  const { t } = useTranslation('Common');\r\n  const loadStr = t('LOAD');\r\n\r\n  // 1 - Incompatible\r\n  // 2 - Locked\r\n  // 3 - Rehydratable / Open\r\n  const state =\r\n    isRehydratable && !isLocked ? 3 : isRehydratable && isLocked ? 2 : 1;\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (state) {\r\n    case 1:\r\n      StatusIcon = () => <Icon name=\"status-alert\" />;\r\n\r\n      ToolTipMessage = () => (\r\n        <div>\r\n          This structured report is not compatible\r\n          <br />\r\n          with this application.\r\n        </div>\r\n      );\r\n      break;\r\n    case 2:\r\n      StatusIcon = () => <Icon name=\"status-locked\" />;\r\n\r\n      ToolTipMessage = () => (\r\n        <div>\r\n          This structured report is currently read-only\r\n          <br />\r\n          because you are tracking measurements in\r\n          <br />\r\n          another viewport.\r\n        </div>\r\n      );\r\n      break;\r\n    case 3:\r\n      StatusIcon = () => <Icon name=\"status-untracked\" />;\r\n\r\n      ToolTipMessage = () => (\r\n        <div>{`Click ${loadStr} to restore measurements.`}</div>\r\n      );\r\n  }\r\n\r\n  const StatusArea = () => (\r\n    <div className=\"flex h-6 leading-6 cursor-default text-sm text-white\">\r\n      <div className=\"min-w-[45px] flex items-center p-1 rounded-l-xl rounded-r bg-customgray-100\">\r\n        <StatusIcon />\r\n        <span className=\"ml-1\">SR</span>\r\n      </div>\r\n      {state === 3 && (\r\n        <div\r\n          className=\"ml-1 px-1.5 rounded cursor-pointer hover:text-black bg-primary-main hover:bg-primary-light\"\r\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\r\n          onMouseUp={handleMouseUp}\r\n        >\r\n          {loadStr}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\r\n          <StatusArea />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusArea />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OHIFCornerstoneSRViewport;\r\n"],"names":["formatDate","utils","OHIFCornerstoneSRViewport","props","children","dataSource","displaySets","viewportIndex","viewportLabel","viewportOptions","servicesManager","extensionManager","displaySetService","cornerstoneViewportService","measurementService","services","length","Error","srDisplaySet","viewportGrid","viewportGridService","useViewportGrid","measurementSelected","setMeasurementSelected","useState","measurementCount","setMeasurementCount","activeImageDisplaySetData","setActiveImageDisplaySetData","referencedDisplaySetMetadata","setReferencedDisplaySetMetadata","element","setElement","viewports","activeViewportIndex","trackedMeasurements","sendTrackedMeasurementsEvent","registeredExtensionIds","includes","contextModule","getModuleEntry","tracked","useContext","context","eventName","displaySetInstanceUID","clearMeasurements","SeriesInstanceUIDs","hydrateStructuredReport","getDisplaySetsForSeries","setDisplaySetsForViewports","displaySetInstanceUIDs","setTrackingIdentifiers","useCallback","measurements","setTrackingUniqueIdentifiersForElement","map","measurement","TrackingUniqueIdentifier","onElementEnabled","evt","detail","updateViewport","newMeasurementSelected","StudyInstanceUID","sopClassUids","console","warn","async","displaySet","referencedDisplaySet","getDisplaySetByUID","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getViewportReferencedDisplaySetData","then","viewportInfo","getViewportInfoByIndex","csViewport","getCornerstoneViewport","getViewportId","imageIdIndex","getImageIds","indexOf","imageId","setImageIdIndex","component","Component","initialImageIndex","findIndex","image","React","_extends","toolGroupId","viewportType","positionIds","onMeasurementChange","direction","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","activeViewport","setDisplaySetsForViewport","unsubscribe","isLoaded","load","numMeasurements","isLocked","trackedSeries","childrenWithProps","child","index","key","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","isRehydratable","handleMouseUp","t","useTranslation","loadStr","state","ToolTipMessage","StatusIcon","Icon","name","StatusArea","className","onMouseUp","Tooltip","content","position","_getStatusComponent","isTracked","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","propTypes","PropTypes","isRequired","customProps","ServicesManager","ExtensionManager","defaultProps"],"sourceRoot":""}