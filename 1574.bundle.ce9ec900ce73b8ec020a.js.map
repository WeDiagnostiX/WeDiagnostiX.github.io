{"version":3,"file":"1574.bundle.ce9ec900ce73b8ec020a.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/utils.ts","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CustomizableViewportOverlay.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colormap.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresetsContent.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresets.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingQuality.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShift.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeLighting.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShade.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingOptions.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/getWindowLevelActionMenu.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums, Types, utilities } from '@cornerstonejs/core';\nimport { utilities as csToolsUtils } from '@cornerstonejs/tools';\nimport { ImageScrollbar } from '@ohif/ui';\nimport { ServicesManger } from '@ohif/core';\n\nfunction CornerstoneImageScrollbar({\n  viewportData,\n  viewportId,\n  element,\n  imageSliceData,\n  setImageSliceData,\n  scrollbarHeight,\n  servicesManager,\n}) {\n  const { cineService, cornerstoneViewportService } = (servicesManager as ServicesManger).services;\n\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    const { isCineEnabled } = cineService.getState();\n\n    if (isCineEnabled) {\n      // on image scrollbar change, stop the CINE if it is playing\n      cineService.stopClip(element, { viewportId });\n      cineService.setCine({ id: viewportId, isPlaying: false });\n    }\n\n    csToolsUtils.jumpToSlice(viewport.element, {\n      imageIndex,\n      debounceLoading: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!viewportData) {\n      return;\n    }\n\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n    if (!viewport) {\n      return;\n    }\n\n    if (viewportData.viewportType === Enums.ViewportType.STACK) {\n      const imageIndex = viewport.getCurrentImageIdIndex();\n\n      setImageSliceData({\n        imageIndex: imageIndex,\n        numberOfSlices: viewportData.data.imageIds.length,\n      });\n\n      return;\n    }\n\n    if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\n      const sliceData = utilities.getImageSliceDataForVolumeViewport(\n        viewport as Types.IVolumeViewport\n      );\n\n      if (!sliceData) {\n        return;\n      }\n\n      const { imageIndex, numberOfSlices } = sliceData;\n      setImageSliceData({ imageIndex, numberOfSlices });\n    }\n  }, [viewportId, viewportData]);\n\n  useEffect(() => {\n    if (viewportData?.viewportType !== Enums.ViewportType.STACK) {\n      return;\n    }\n\n    const updateStackIndex = event => {\n      const { newImageIdIndex } = event.detail;\n      // find the index of imageId in the imageIds\n      setImageSliceData({\n        imageIndex: newImageIdIndex,\n        numberOfSlices: viewportData.data.imageIds.length,\n      });\n    };\n\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, updateStackIndex);\n    };\n  }, [viewportData, element]);\n\n  useEffect(() => {\n    if (viewportData?.viewportType !== Enums.ViewportType.ORTHOGRAPHIC) {\n      return;\n    }\n\n    const updateVolumeIndex = event => {\n      const { imageIndex, numberOfSlices } = event.detail;\n      // find the index of imageId in the imageIds\n      setImageSliceData({ imageIndex, numberOfSlices });\n    };\n\n    element.addEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\n\n    return () => {\n      element.removeEventListener(Enums.Events.VOLUME_NEW_IMAGE, updateVolumeIndex);\n    };\n  }, [viewportData, element]);\n\n  return (\n    <ImageScrollbar\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\n      height={scrollbarHeight}\n      value={imageSliceData.imageIndex}\n    />\n  );\n}\n\nCornerstoneImageScrollbar.propTypes = {\n  viewportData: PropTypes.object,\n  viewportId: PropTypes.string.isRequired,\n  element: PropTypes.instanceOf(Element),\n  scrollbarHeight: PropTypes.string,\n  imageSliceData: PropTypes.object.isRequired,\n  setImageSliceData: PropTypes.func.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default CornerstoneImageScrollbar;\n","import moment from 'moment';\nimport { metaData } from '@cornerstonejs/core';\n\n/**\n * Checks if value is valid.\n *\n * @param {number} value\n * @returns {boolean} is valid.\n */\nexport function isValidNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Formats number precision.\n *\n * @param {number} number\n * @param {number} precision\n * @returns {number} formatted number.\n */\nexport function formatNumberPrecision(number, precision = 0) {\n  if (number !== null) {\n    return parseFloat(number).toFixed(precision);\n  }\n}\n\n/**\n * Formats DICOM date.\n *\n * @param {string} date\n * @param {string} strFormat\n * @returns {string} formatted date.\n */\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\n  return moment(date, 'YYYYMMDD').format(strFormat);\n}\n\n/**\n *    DICOM Time is stored as HHmmss.SSS, where:\n *      HH 24 hour time:\n *        m mm        0..59   Minutes\n *        s ss        0..59   Seconds\n *        S SS SSS    0..999  Fractional seconds\n *\n *        Goal: '24:12:12'\n *\n * @param {*} time\n * @param {string} strFormat\n * @returns {string} formatted name.\n */\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\n  return moment(time, 'HH:mm:ss').format(strFormat);\n}\n\n/**\n * Formats a patient name for display purposes\n *\n * @param {string} name\n * @returns {string} formatted name.\n */\nexport function formatPN(name) {\n  if (!name) {\n    return '';\n  }\n\n  const cleaned = name\n    .split('^')\n    .filter(s => !!s)\n    .join(', ')\n    .trim();\n  return cleaned === ',' || cleaned === '' ? '' : cleaned;\n}\n\n/**\n * Gets compression type\n *\n * @param {number} imageId\n * @returns {string} compression type.\n */\nexport function getCompression(imageId) {\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\n    generalImageModule;\n\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\n    return compressionMethod + compressionRatio + ' : 1';\n  }\n\n  return 'Lossless / Uncompressed';\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { vec3 } from 'gl-matrix';\nimport PropTypes from 'prop-types';\nimport { metaData, Enums, utilities } from '@cornerstonejs/core';\nimport { ImageSliceData } from '@cornerstonejs/core/dist/esm/types';\nimport { ViewportOverlay } from '@ohif/ui';\nimport { ServicesManager } from '@ohif/core';\nimport { InstanceMetadata } from '@ohif/core/src/types';\nimport { formatPN, formatDICOMDate, formatDICOMTime, formatNumberPrecision } from './utils';\nimport { StackViewportData, VolumeViewportData } from '../../types/CornerstoneCacheService';\n\nimport './CustomizableViewportOverlay.css';\n\nconst EPSILON = 1e-4;\n\ntype ViewportData = StackViewportData | VolumeViewportData;\n\ninterface OverlayItemProps {\n  element: HTMLElement;\n  viewportData: ViewportData;\n  imageSliceData: ImageSliceData;\n  servicesManager: ServicesManager;\n  viewportId: string;\n  instance: InstanceMetadata;\n  customization: any;\n  formatters: {\n    formatPN: (val) => string;\n    formatDate: (val) => string;\n    formatTime: (val) => string;\n    formatNumberPrecision: (val, number) => string;\n  };\n\n  // calculated values\n  voi: {\n    windowWidth: number;\n    windowCenter: number;\n  };\n  instanceNumber?: number;\n  scale?: number;\n}\n\nconst OverlayItemComponents = {\n  'ohif.overlayItem.windowLevel': VOIOverlayItem,\n  'ohif.overlayItem.zoomLevel': ZoomOverlayItem,\n  'ohif.overlayItem.instanceNumber': InstanceNumberOverlayItem,\n};\n\n/**\n * Customizable Viewport Overlay\n */\nfunction CustomizableViewportOverlay({\n  element,\n  viewportData,\n  imageSliceData,\n  viewportId,\n  servicesManager,\n}: {\n  element: HTMLElement;\n  viewportData: ViewportData;\n  imageSliceData: ImageSliceData;\n  viewportId: string;\n  servicesManager: ServicesManager;\n}) {\n  const { cornerstoneViewportService, customizationService, toolGroupService } =\n    servicesManager.services;\n  const [voi, setVOI] = useState({ windowCenter: null, windowWidth: null });\n  const [scale, setScale] = useState(1);\n  const { imageIndex } = imageSliceData;\n\n  const topLeftCustomization = customizationService.getModeCustomization(\n    'cornerstoneOverlayTopLeft'\n  );\n  const topRightCustomization = customizationService.getModeCustomization(\n    'cornerstoneOverlayTopRight'\n  );\n  const bottomLeftCustomization = customizationService.getModeCustomization(\n    'cornerstoneOverlayBottomLeft'\n  );\n  const bottomRightCustomization = customizationService.getModeCustomization(\n    'cornerstoneOverlayBottomRight'\n  );\n\n  const instances = useMemo(() => {\n    if (viewportData != null) {\n      return _getViewportInstances(viewportData);\n    } else {\n      return null;\n    }\n  }, [viewportData, imageIndex]);\n\n  const instanceNumber = useMemo(\n    () =>\n      viewportData\n        ? getInstanceNumber(viewportData, viewportId, imageIndex, cornerstoneViewportService)\n        : null,\n    [viewportData, viewportId, imageIndex, cornerstoneViewportService]\n  );\n\n  /**\n   * Updating the VOI when the viewport changes its voi\n   */\n  useEffect(() => {\n    const updateVOI = eventDetail => {\n      const { range } = eventDetail.detail;\n\n      if (!range) {\n        return;\n      }\n\n      const { lower, upper } = range;\n      const { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n\n      setVOI({ windowCenter, windowWidth });\n    };\n\n    element.addEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\n\n    return () => {\n      element.removeEventListener(Enums.Events.VOI_MODIFIED, updateVOI);\n    };\n  }, [viewportId, viewportData, voi, element]);\n\n  /**\n   * Updating the scale when the viewport changes its zoom\n   */\n  useEffect(() => {\n    const updateScale = eventDetail => {\n      const { previousCamera, camera } = eventDetail.detail;\n\n      if (\n        previousCamera.parallelScale !== camera.parallelScale ||\n        previousCamera.scale !== camera.scale\n      ) {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n        if (!viewport) {\n          return;\n        }\n\n        const imageData = viewport.getImageData();\n\n        if (!imageData) {\n          return;\n        }\n\n        if (camera.scale) {\n          setScale(camera.scale);\n          return;\n        }\n\n        const { spacing } = imageData;\n        // convert parallel scale to scale\n        const scale = (element.clientHeight * spacing[0] * 0.5) / camera.parallelScale;\n        setScale(scale);\n      }\n    };\n\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\n\n    return () => {\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, updateScale);\n    };\n  }, [viewportId, viewportData, cornerstoneViewportService, element]);\n\n  const _renderOverlayItem = useCallback(\n    item => {\n      const overlayItemProps = {\n        element,\n        viewportData: viewportData,\n        imageSliceData,\n        viewportId,\n        servicesManager,\n        customization: item,\n        formatters: {\n          formatPN,\n          formatDate: formatDICOMDate,\n          formatTime: formatDICOMTime,\n          formatNumberPrecision,\n        },\n        instance: instances ? instances[item?.instanceIndex] : null,\n        voi,\n        scale,\n        instanceNumber,\n      };\n\n      if (!item) {\n        return null;\n      }\n\n      const { customizationType } = item;\n      const OverlayItemComponent = OverlayItemComponents[customizationType];\n\n      if (OverlayItemComponent) {\n        return <OverlayItemComponent {...overlayItemProps} />;\n      } else {\n        const renderItem = customizationService.transform(item);\n\n        if (typeof renderItem.content === 'function') {\n          return renderItem.content(overlayItemProps);\n        }\n      }\n    },\n    [\n      element,\n      viewportData,\n      imageSliceData,\n      viewportId,\n      servicesManager,\n      customizationService,\n      instances,\n      voi,\n      scale,\n      instanceNumber,\n    ]\n  );\n\n  const getContent = useCallback(\n    (customization, defaultItems, keyPrefix) => {\n      const items = customization?.items ?? defaultItems;\n      return (\n        <>\n          {items.map((item, index) => (\n            <div key={`${keyPrefix}_${index}`}>\n              {item?.condition\n                ? item.condition({\n                    instance: instances ? instances[item?.instanceIndex] : null,\n                    formatters: { formatDate: formatDICOMDate },\n                  })\n                  ? _renderOverlayItem(item)\n                  : null\n                : _renderOverlayItem(item)}\n            </div>\n          ))}\n        </>\n      );\n    },\n    [_renderOverlayItem]\n  );\n\n  const studyDateItem = {\n    id: 'StudyDate',\n    customizationType: 'ohif.overlayItem',\n    label: '',\n    title: 'Study date',\n    condition: ({ instance }) => instance && instance.StudyDate,\n    contentF: ({ instance, formatters: { formatDate } }) => formatDate(instance.StudyDate),\n  };\n\n  const seriesDescriptionItem = {\n    id: 'SeriesDescription',\n    customizationType: 'ohif.overlayItem',\n    label: '',\n    title: 'Series description',\n    attribute: 'SeriesDescription',\n    condition: ({ instance }) => {\n      return instance && instance.SeriesDescription;\n    },\n  };\n\n  const topLeftItems = instances\n    ? instances\n        .map((instance, index) => {\n          return [\n            {\n              ...studyDateItem,\n              instanceIndex: index,\n            },\n            {\n              ...seriesDescriptionItem,\n              instanceIndex: index,\n            },\n          ];\n        })\n        .flat()\n    : [];\n\n  return (\n    <ViewportOverlay\n      topLeft={\n        /**\n         * Inline default overlay items for a more standard expansion\n         */\n        getContent(topLeftCustomization, [...topLeftItems], 'topLeftOverlayItem')\n      }\n      topRight={getContent(topRightCustomization, [], 'topRightOverlayItem')}\n      bottomLeft={getContent(\n        bottomLeftCustomization,\n        [\n          {\n            id: 'WindowLevel',\n            customizationType: 'ohif.overlayItem.windowLevel',\n          },\n          {\n            id: 'ZoomLevel',\n            customizationType: 'ohif.overlayItem.zoomLevel',\n            condition: () => {\n              const activeToolName = toolGroupService.getActiveToolForViewport(viewportId);\n              return activeToolName === 'Zoom';\n            },\n          },\n        ],\n        'bottomLeftOverlayItem'\n      )}\n      bottomRight={getContent(\n        bottomRightCustomization,\n        [\n          {\n            id: 'InstanceNumber',\n            customizationType: 'ohif.overlayItem.instanceNumber',\n          },\n        ],\n        'bottomRightOverlayItem'\n      )}\n    />\n  );\n}\n\nfunction _getViewportInstances(viewportData) {\n  const imageIds = [];\n  if (viewportData.viewportType === Enums.ViewportType.STACK) {\n    imageIds.push(viewportData.data.imageIds[0]);\n  } else if (viewportData.viewportType === Enums.ViewportType.ORTHOGRAPHIC) {\n    const volumes = viewportData.data;\n    volumes.forEach(volume => {\n      if (!volume?.imageIds || volume.imageIds.length === 0) {\n        return;\n      }\n      imageIds.push(volume.imageIds[0]);\n    });\n  }\n  const instances = [];\n\n  imageIds.forEach(imageId => {\n    const instance = metaData.get('instance', imageId) || {};\n    instances.push(instance);\n  });\n  return instances;\n}\n\nconst getInstanceNumber = (viewportData, viewportId, imageIndex, cornerstoneViewportService) => {\n  let instanceNumber;\n\n  switch (viewportData.viewportType) {\n    case Enums.ViewportType.STACK:\n      instanceNumber = _getInstanceNumberFromStack(viewportData, imageIndex);\n      break;\n    case Enums.ViewportType.ORTHOGRAPHIC:\n      instanceNumber = _getInstanceNumberFromVolume(\n        viewportData,\n        viewportId,\n        cornerstoneViewportService,\n        imageIndex\n      );\n      break;\n  }\n\n  return Number.isNaN(instanceNumber) ? null : instanceNumber ?? null;\n};\n\nfunction _getInstanceNumberFromStack(viewportData, imageIndex) {\n  const imageIds = viewportData.data.imageIds;\n  const imageId = imageIds[imageIndex];\n\n  if (!imageId) {\n    return;\n  }\n\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\n  const { instanceNumber } = generalImageModule;\n\n  const stackSize = imageIds.length;\n\n  if (stackSize <= 1) {\n    return;\n  }\n\n  return parseInt(instanceNumber);\n}\n\n// Since volume viewports can be in any view direction, they can render\n// a reconstructed image which don't have imageIds; therefore, no instance and instanceNumber\n// Here we check if viewport is in the acquisition direction and if so, we get the instanceNumber\nfunction _getInstanceNumberFromVolume(\n  viewportData,\n  viewportId,\n  cornerstoneViewportService,\n  imageIndex\n) {\n  const volumes = viewportData.data;\n\n  if (!volumes) {\n    return;\n  }\n\n  // Todo: support fusion of acquisition plane which has instanceNumber\n  const { volume } = volumes[0];\n  const { direction, imageIds } = volume;\n\n  const cornerstoneViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n  if (!cornerstoneViewport) {\n    return;\n  }\n\n  const camera = cornerstoneViewport.getCamera();\n  const { viewPlaneNormal } = camera;\n  // checking if camera is looking at the acquisition plane (defined by the direction on the volume)\n\n  const scanAxisNormal = direction.slice(6, 9);\n\n  // check if viewPlaneNormal is parallel to scanAxisNormal\n  const cross = vec3.cross(vec3.create(), viewPlaneNormal, scanAxisNormal);\n  const isAcquisitionPlane = vec3.length(cross) < EPSILON;\n\n  if (isAcquisitionPlane) {\n    const imageId = imageIds[imageIndex];\n\n    if (!imageId) {\n      return {};\n    }\n\n    const { instanceNumber } = metaData.get('generalImageModule', imageId) || {};\n    return parseInt(instanceNumber);\n  }\n}\n\n/**\n * Window Level / Center Overlay item\n */\nfunction VOIOverlayItem({ voi, customization }: OverlayItemProps) {\n  const { windowWidth, windowCenter } = voi;\n  if (typeof windowCenter !== 'number' || typeof windowWidth !== 'number') {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color: (customization && customization.color) || undefined }}\n    >\n      <span className=\"mr-1 shrink-0\">W:</span>\n      <span className=\"ml-1 mr-2 shrink-0\">{windowWidth.toFixed(0)}</span>\n      <span className=\"mr-1 shrink-0\">L:</span>\n      <span className=\"ml-1 shrink-0\">{windowCenter.toFixed(0)}</span>\n    </div>\n  );\n}\n\n/**\n * Zoom Level Overlay item\n */\nfunction ZoomOverlayItem({ scale, customization }: OverlayItemProps) {\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color: (customization && customization.color) || undefined }}\n    >\n      <span className=\"mr-1 shrink-0\">Zoom:</span>\n      <span>{scale.toFixed(2)}x</span>\n    </div>\n  );\n}\n\n/**\n * Instance Number Overlay Item\n */\nfunction InstanceNumberOverlayItem({\n  instanceNumber,\n  imageSliceData,\n  customization,\n}: OverlayItemProps) {\n  const { imageIndex, numberOfSlices } = imageSliceData;\n\n  return (\n    <div\n      className=\"overlay-item flex flex-row\"\n      style={{ color: (customization && customization.color) || undefined }}\n    >\n      <span>\n        {instanceNumber !== undefined && instanceNumber !== null ? (\n          <>\n            <span className=\"mr-1 shrink-0\">I:</span>\n            <span>{`${instanceNumber} (${imageIndex + 1}/${numberOfSlices})`}</span>\n          </>\n        ) : (\n          `${imageIndex + 1}/${numberOfSlices}`\n        )}\n      </span>\n    </div>\n  );\n}\n\nCustomizableViewportOverlay.propTypes = {\n  viewportData: PropTypes.object,\n  imageIndex: PropTypes.number,\n  viewportId: PropTypes.string,\n};\n\nexport default CustomizableViewportOverlay;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport classNames from 'classnames';\nimport {\n  metaData,\n  Enums,\n  Types,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/tools';\nimport PropTypes from 'prop-types';\nimport { vec3 } from 'gl-matrix';\n\nimport './ViewportOrientationMarkers.css';\n\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\n\nfunction ViewportOrientationMarkers({\n  element,\n  viewportData,\n  imageSliceData,\n  viewportId,\n  servicesManager,\n  orientationMarkers = ['top', 'left'],\n}) {\n  // Rotation is in degrees\n  const [rotation, setRotation] = useState(0);\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\n  const [flipVertical, setFlipVertical] = useState(false);\n  const { cornerstoneViewportService } = servicesManager.services;\n\n  useEffect(() => {\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\n      const { rotation, previousCamera, camera } = evt.detail;\n\n      if (rotation !== undefined) {\n        setRotation(rotation);\n      }\n\n      if (\n        camera.flipHorizontal !== undefined &&\n        previousCamera.flipHorizontal !== camera.flipHorizontal\n      ) {\n        setFlipHorizontal(camera.flipHorizontal);\n      }\n\n      if (\n        camera.flipVertical !== undefined &&\n        previousCamera.flipVertical !== camera.flipVertical\n      ) {\n        setFlipVertical(camera.flipVertical);\n      }\n    };\n\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n\n    return () => {\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\n    };\n  }, []);\n\n  const markers = useMemo(() => {\n    if (!viewportData) {\n      return '';\n    }\n\n    let rowCosines, columnCosines;\n    if (viewportData.viewportType === 'stack') {\n      const imageIndex = imageSliceData.imageIndex;\n      const imageId = viewportData.data.imageIds?.[imageIndex];\n\n      // Workaround for below TODO stub\n      if (!imageId) {\n        return false;\n      }\n\n      ({ rowCosines, columnCosines } = metaData.get('imagePlaneModule', imageId) || {});\n    } else {\n      if (!element || !getEnabledElement(element)) {\n        return '';\n      }\n\n      const { viewport } = getEnabledElement(element);\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n      const viewRight = vec3.create();\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\n      rowCosines = viewRight;\n    }\n\n    if (!rowCosines || !columnCosines || rotation === undefined) {\n      return '';\n    }\n\n    const markers = _getOrientationMarkers(\n      rowCosines,\n      columnCosines,\n      rotation,\n      flipVertical,\n      flipHorizontal\n    );\n\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (!ohifViewport) {\n      console.log('ViewportOrientationMarkers::No viewport');\n      return null;\n    }\n\n    return orientationMarkers.map((m, index) => (\n      <div\n        className={classNames(\n          'overlay-text',\n          `${m}-mid orientation-marker`,\n          'text-aqua-pale',\n          'text-[13px]',\n          'leading-5'\n        )}\n        key={`${m}-mid orientation-marker`}\n      >\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\n      </div>\n    ));\n  }, [\n    viewportData,\n    imageSliceData,\n    rotation,\n    flipVertical,\n    flipHorizontal,\n    orientationMarkers,\n    element,\n  ]);\n\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\n}\n\nViewportOrientationMarkers.propTypes = {\n  percentComplete: PropTypes.number,\n  error: PropTypes.object,\n};\n\nViewportOrientationMarkers.defaultProps = {\n  percentComplete: 0,\n  error: null,\n};\n\n/**\n *\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\n *\n * @param {*} rowCosines\n * @param {*} columnCosines\n * @param {*} rotation in degrees\n * @returns\n */\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\n  const rowString = getOrientationStringLPS(rowCosines);\n  const columnString = getOrientationStringLPS(columnCosines);\n  const oppositeRowString = invertOrientationStringLPS(rowString);\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\n\n  const markers = {\n    top: oppositeColumnString,\n    left: oppositeRowString,\n    right: rowString,\n    bottom: columnString,\n  };\n\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\n  // the rotation applications\n  if (flipVertical) {\n    markers.top = invertOrientationStringLPS(markers.top);\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\n  }\n\n  if (flipHorizontal) {\n    markers.left = invertOrientationStringLPS(markers.left);\n    markers.right = invertOrientationStringLPS(markers.right);\n  }\n\n  // Swap the labels accordingly if the viewport has been rotated\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\n  if (rotation === 90 || rotation === -270) {\n    return {\n      top: markers.left,\n      left: invertOrientationStringLPS(markers.top),\n      right: invertOrientationStringLPS(markers.bottom),\n      bottom: markers.right, // left\n    };\n  } else if (rotation === -90 || rotation === 270) {\n    return {\n      top: invertOrientationStringLPS(markers.left),\n      left: markers.top,\n      bottom: markers.left,\n      right: markers.bottom,\n    };\n  } else if (rotation === 180 || rotation === -180) {\n    return {\n      top: invertOrientationStringLPS(markers.top),\n      left: invertOrientationStringLPS(markers.left),\n      bottom: invertOrientationStringLPS(markers.bottom),\n      right: invertOrientationStringLPS(markers.right),\n    };\n  }\n\n  return markers;\n}\n\nexport default ViewportOrientationMarkers;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Enums } from '@cornerstonejs/core';\n\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const loadIndicatorRef = useRef(null);\n  const imageIdToBeLoaded = useRef(null);\n\n  const setLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    loadIndicatorRef.current = setTimeout(() => {\n      setLoading(true);\n    }, 50);\n  };\n\n  const setFinishLoadingState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    setLoading(false);\n  };\n\n  const setErrorState = evt => {\n    clearTimeout(loadIndicatorRef.current);\n\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\n      setError(evt.detail.error);\n      imageIdToBeLoaded.current = null;\n    }\n  };\n\n  useEffect(() => {\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n    return () => {\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\n\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\n\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\n    };\n  }, [element, viewportData]);\n\n  if (error) {\n    return (\n      <>\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\n            <p className=\"text-primary-light text-xl font-light\">\n              <h4>Error Loading Image</h4>\n              <p>An error has occurred.</p>\n              <p>{error}</p>\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (loading) {\n    return (\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nViewportImageSliceLoadingIndicator.propTypes = {\n  percentComplete: PropTypes.number,\n  error: PropTypes.object,\n  element: PropTypes.object,\n};\n\nViewportImageSliceLoadingIndicator.defaultProps = {\n  percentComplete: 0,\n  error: null,\n};\n\nexport default ViewportImageSliceLoadingIndicator;\n","import React, { useEffect, useState } from 'react';\n\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\n\nfunction CornerstoneOverlays(props) {\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\n  const { cornerstoneViewportService } = servicesManager.services;\n  const [imageSliceData, setImageSliceData] = useState({\n    imageIndex: 0,\n    numberOfSlices: 0,\n  });\n  const [viewportData, setViewportData] = useState(null);\n\n  useEffect(() => {\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\n      props => {\n        if (props.viewportId !== viewportId) {\n          return;\n        }\n\n        setViewportData(props.viewportData);\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  if (!element) {\n    return null;\n  }\n\n  if (viewportData) {\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\n      return null;\n    }\n  }\n\n  return (\n    <div className=\"noselect\">\n      <ViewportImageScrollbar\n        viewportId={viewportId}\n        viewportData={viewportData}\n        element={element}\n        imageSliceData={imageSliceData}\n        setImageSliceData={setImageSliceData}\n        scrollbarHeight={scrollbarHeight}\n        servicesManager={servicesManager}\n      />\n\n      <CustomizableViewportOverlay\n        imageSliceData={imageSliceData}\n        viewportData={viewportData}\n        viewportId={viewportId}\n        servicesManager={servicesManager}\n        element={element}\n      />\n\n      <ViewportImageSliceLoadingIndicator\n        viewportData={viewportData}\n        element={element}\n      />\n\n      <ViewportOrientationMarkers\n        imageSliceData={imageSliceData}\n        element={element}\n        viewportData={viewportData}\n        servicesManager={servicesManager}\n        viewportId={viewportId}\n      />\n    </div>\n  );\n}\n\nexport default CornerstoneOverlays;\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\nimport { CinePlayer, useCine } from '@ohif/ui';\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\nimport { Enums as StreamingEnums } from '@cornerstonejs/streaming-image-volume-loader';\nimport { useAppConfig } from '@state';\n\nfunction WrappedCinePlayer({ enabledVPElement, viewportId, servicesManager }) {\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\n  const [{ isCineEnabled, cines }, cineService] = useCine();\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\n  const [dynamicInfo, setDynamicInfo] = useState(null);\n  const [appConfig] = useAppConfig();\n  const isMountedRef = useRef(null);\n\n  const cineHandler = () => {\n    if (!cines?.[viewportId] || !enabledVPElement) {\n      return;\n    }\n\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\n    const validFrameRate = Math.max(frameRate, 1);\n\n    return isPlaying\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\n      : cineService.stopClip(enabledVPElement);\n  };\n\n  const newDisplaySetHandler = useCallback(() => {\n    if (!enabledVPElement || !isCineEnabled) {\n      return;\n    }\n\n    const { viewports } = viewportGridService.getState();\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\n    let frameRate = 24;\n    let isPlaying = cines[viewportId]?.isPlaying || false;\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (displaySet.FrameRate) {\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\n        // So a bit of math to get the actual frame rate.\n        frameRate = Math.round(1000 / displaySet.FrameRate);\n        isPlaying ||= !!appConfig.autoPlayCine;\n      }\n\n      // check if the displaySet is dynamic and set the dynamic info\n      if (displaySet.isDynamicVolume) {\n        const { dynamicVolumeInfo } = displaySet;\n        const numTimePoints = dynamicVolumeInfo.timePoints.length;\n        const label = dynamicVolumeInfo.splittingTag;\n        const timePointIndex = dynamicVolumeInfo.timePointIndex || 0;\n        setDynamicInfo({\n          volumeId: displaySet.displaySetInstanceUID,\n          timePointIndex,\n          numTimePoints,\n          label,\n        });\n      } else {\n        setDynamicInfo(null);\n      }\n    });\n\n    if (isPlaying) {\n      cineService.setIsCineEnabled(isPlaying);\n    }\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\n    setNewStackFrameRate(frameRate);\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\n\n  useEffect(() => {\n    isMountedRef.current = true;\n\n    newDisplaySetHandler();\n\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, [isCineEnabled, newDisplaySetHandler]);\n\n  useEffect(() => {\n    if (!isCineEnabled) {\n      return;\n    }\n\n    cineHandler();\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\n\n  /**\n   * Use effect for handling new display set\n   */\n  useEffect(() => {\n    if (!enabledVPElement) {\n      return;\n    }\n\n    eventTarget.addEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\n    // this doesn't makes sense that we are listening to this event on viewport element\n    enabledVPElement.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      newDisplaySetHandler\n    );\n\n    return () => {\n      cineService.setCine({ id: viewportId, isPlaying: false });\n\n      eventTarget.removeEventListener(Enums.Events.STACK_VIEWPORT_NEW_STACK, newDisplaySetHandler);\n      enabledVPElement.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        newDisplaySetHandler\n      );\n    };\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\n\n  useEffect(() => {\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\n      return;\n    }\n\n    cineHandler();\n\n    return () => {\n      cineService.stopClip(enabledVPElement, { viewportId });\n    };\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\n\n  if (!isCineEnabled) {\n    return null;\n  }\n\n  const cine = cines[viewportId];\n  const isPlaying = cine?.isPlaying || false;\n\n  return (\n    <RenderCinePlayer\n      viewportId={viewportId}\n      cineService={cineService}\n      newStackFrameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      dynamicInfo={dynamicInfo}\n      customizationService={customizationService}\n    />\n  );\n}\n\nfunction RenderCinePlayer({\n  viewportId,\n  cineService,\n  newStackFrameRate,\n  isPlaying,\n  dynamicInfo: dynamicInfoProp,\n  customizationService,\n}) {\n  const { component: CinePlayerComponent = CinePlayer } =\n    customizationService.get('cinePlayer') ?? {};\n\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\n\n  useEffect(() => {\n    setDynamicInfo(dynamicInfoProp);\n  }, [dynamicInfoProp]);\n\n  /**\n   * Use effect for handling 4D time index changed\n   */\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const handleTimePointIndexChange = evt => {\n      const { volumeId, timePointIndex, numTimePoints, splittingTag } = evt.detail;\n      setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\n    };\n\n    eventTarget.addEventListener(\n      StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n      handleTimePointIndexChange\n    );\n\n    return () => {\n      eventTarget.removeEventListener(\n        StreamingEnums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n        handleTimePointIndexChange\n      );\n    };\n  }, [dynamicInfo]);\n\n  useEffect(() => {\n    if (!dynamicInfo) {\n      return;\n    }\n\n    const { volumeId, timePointIndex, numTimePoints, splittingTag } = dynamicInfo || {};\n    const volume = cache.getVolume(volumeId);\n    volume.timePointIndex = timePointIndex;\n\n    setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\n  }, []);\n\n  const updateDynamicInfo = useCallback(props => {\n    const { volumeId, timePointIndex } = props;\n    const volume = cache.getVolume(volumeId);\n    volume.timePointIndex = timePointIndex;\n  }, []);\n\n  return (\n    <CinePlayerComponent\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\n      frameRate={newStackFrameRate}\n      isPlaying={isPlaying}\n      onClose={() => {\n        // also stop the clip\n        cineService.setCine({\n          id: viewportId,\n          isPlaying: false,\n        });\n        cineService.setIsCineEnabled(false);\n      }}\n      onPlayPauseChange={isPlaying => {\n        cineService.setCine({\n          id: viewportId,\n          isPlaying,\n        });\n      }}\n      onFrameRateChange={frameRate =>\n        cineService.setCine({\n          id: viewportId,\n          frameRate,\n        })\n      }\n      dynamicInfo={dynamicInfo}\n      updateDynamicInfo={updateDynamicInfo}\n    />\n  );\n}\n\nexport default WrappedCinePlayer;\n","import CinePlayer from './CinePlayer';\n\nexport default CinePlayer;\n","import React from 'react';\nimport { useViewportActionCornersContext } from '../contextProviders/ViewportActionCornersProvider';\nimport { ViewportActionCorners } from '@ohif/ui';\n\nexport type OHIFViewportActionCornersProps = {\n  viewportId: string;\n};\n\nfunction OHIFViewportActionCorners({ viewportId }: OHIFViewportActionCornersProps) {\n  const [viewportActionCornersState] = useViewportActionCornersContext();\n\n  if (!viewportActionCornersState[viewportId]) {\n    return null;\n  }\n\n  return (\n    <ViewportActionCorners\n      cornerComponents={viewportActionCornersState[viewportId]}\n    ></ViewportActionCorners>\n  );\n}\n\nexport default OHIFViewportActionCorners;\n","import React, { ReactElement, useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport { AllInOneMenu, ButtonGroup, SwitchButton } from '@ohif/ui';\nimport { StackViewport } from '@cornerstonejs/core';\nimport { ColormapProps } from '../../types/Colormap';\n\nexport function Colormap({\n  colormaps,\n  viewportId,\n  displaySets,\n  commandsManager,\n  serviceManager,\n}: ColormapProps): ReactElement {\n  const { cornerstoneViewportService } = serviceManager.services;\n\n  const [activeDisplaySet, setActiveDisplaySet] = useState(displaySets[0]);\n\n  const [showPreview, setShowPreview] = useState(false);\n  const [prePreviewColormap, setPrePreviewColormap] = useState(null);\n\n  const showPreviewRef = useRef(showPreview);\n  showPreviewRef.current = showPreview;\n  const prePreviewColormapRef = useRef(prePreviewColormap);\n  prePreviewColormapRef.current = prePreviewColormap;\n  const activeDisplaySetRef = useRef(activeDisplaySet);\n  activeDisplaySetRef.current = activeDisplaySet;\n\n  const onSetColorLUT = useCallback(\n    props => {\n      // TODO: Better way to check if it's a fusion\n      const oneOpacityColormaps = ['Grayscale', 'X Ray'];\n      const opacity =\n        displaySets.length > 1 && !oneOpacityColormaps.includes(props.colormap.name) ? 0.5 : 1;\n      commandsManager.run({\n        commandName: 'setViewportColormap',\n        commandOptions: {\n          ...props,\n          opacity,\n          immediate: true,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager]\n  );\n\n  const getViewportColormap = (viewportId, displaySet) => {\n    const { displaySetInstanceUID } = displaySet;\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (viewport instanceof StackViewport) {\n      const { colormap } = viewport.getProperties();\n      if (!colormap) {\n        return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\n      }\n      return colormap;\n    }\n    const actorEntries = viewport.getActors();\n    const actorEntry = actorEntries.find(entry => entry.uid.includes(displaySetInstanceUID));\n    const { colormap } = viewport.getProperties(actorEntry.uid);\n    if (!colormap) {\n      return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\n    }\n    return colormap;\n  };\n\n  const buttons = useMemo(() => {\n    return displaySets.map((displaySet, index) => ({\n      children: displaySet.Modality,\n      key: index,\n      style: {\n        minWidth: `calc(100% / ${displaySets.length})`,\n        fontSize: '0.8rem',\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }));\n  }, [displaySets]);\n\n  useEffect(() => {\n    setActiveDisplaySet(displaySets[displaySets.length - 1]);\n  }, [displaySets]);\n\n  return (\n    <>\n      {buttons.length > 1 && (\n        <div className=\"all-in-one-menu-item flex w-full justify-center\">\n          <ButtonGroup\n            onActiveIndexChange={index => {\n              setActiveDisplaySet(displaySets[index]);\n              setPrePreviewColormap(null);\n            }}\n            activeIndex={\n              displaySets.findIndex(\n                ds => ds.displaySetInstanceUID === activeDisplaySetRef.current.displaySetInstanceUID\n              ) || 1\n            }\n            className=\"w-[70%] text-[10px]\"\n          >\n            {buttons.map(({ children, key, style }) => (\n              <div\n                key={key}\n                style={style}\n              >\n                {children}\n              </div>\n            ))}\n          </ButtonGroup>\n        </div>\n      )}\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\n        <SwitchButton\n          label=\"Preview in viewport\"\n          checked={showPreview}\n          onChange={checked => {\n            setShowPreview(checked);\n          }}\n        />\n      </div>\n      <AllInOneMenu.DividerItem />\n      <AllInOneMenu.ItemPanel>\n        {colormaps.map((colormap, index) => (\n          <AllInOneMenu.Item\n            key={index}\n            label={colormap.description}\n            onClick={() => {\n              onSetColorLUT({\n                viewportId,\n                colormap,\n                displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n              });\n              setPrePreviewColormap(null);\n            }}\n            onMouseEnter={() => {\n              if (showPreviewRef.current) {\n                setPrePreviewColormap(getViewportColormap(viewportId, activeDisplaySetRef.current));\n                onSetColorLUT({\n                  viewportId,\n                  colormap,\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n                });\n              }\n            }}\n            onMouseLeave={() => {\n              if (showPreviewRef.current && prePreviewColormapRef.current) {\n                onSetColorLUT({\n                  viewportId,\n                  colormap: prePreviewColormapRef.current,\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\n                });\n              }\n            }}\n          ></AllInOneMenu.Item>\n        ))}\n      </AllInOneMenu.ItemPanel>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { SwitchButton } from '@ohif/ui';\nimport { StackViewport, VolumeViewport } from '@cornerstonejs/core';\nimport { ColorbarProps } from '../../types/Colorbar';\nimport { utilities } from '@cornerstonejs/core';\n\nexport function setViewportColorbar(\n  viewportId,\n  displaySets,\n  commandsManager,\n  serviceManager,\n  colorbarOptions\n) {\n  const { cornerstoneViewportService } = serviceManager.services;\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const backgroundColor = viewportInfo.getViewportOptions().background;\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\n\n  if (isLight) {\n    colorbarOptions.ticks = {\n      position: 'left',\n      style: {\n        font: '12px Arial',\n        color: '#000000',\n        maxNumTicks: 8,\n        tickSize: 5,\n        tickWidth: 1,\n        labelMargin: 3,\n      },\n    };\n  }\n\n  const displaySetInstanceUIDs = [];\n\n  if (viewport instanceof StackViewport) {\n    displaySetInstanceUIDs.push(viewportId);\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    displaySets.forEach(ds => {\n      displaySetInstanceUIDs.push(ds.displaySetInstanceUID);\n    });\n  }\n\n  commandsManager.run({\n    commandName: 'toggleViewportColorbar',\n    commandOptions: {\n      viewportId,\n      options: colorbarOptions,\n      displaySetInstanceUIDs,\n    },\n    context: 'CORNERSTONE',\n  });\n}\n\nexport function Colorbar({\n  viewportId,\n  displaySets,\n  commandsManager,\n  serviceManager,\n  colorbarProperties,\n}: ColorbarProps): ReactElement {\n  const { colorbarService } = serviceManager.services;\n  const {\n    width: colorbarWidth,\n    colorbarTickPosition,\n    colorbarContainerPosition,\n    colormaps,\n    colorbarInitialColormap,\n  } = colorbarProperties;\n  const [showColorbar, setShowColorbar] = useState(colorbarService.hasColorbar(viewportId));\n\n  const onSetColorbar = useCallback(() => {\n    setViewportColorbar(viewportId, displaySets, commandsManager, serviceManager, {\n      viewportId,\n      colormaps,\n      ticks: {\n        position: colorbarTickPosition,\n      },\n      width: colorbarWidth,\n      position: colorbarContainerPosition,\n      activeColormapName: colorbarInitialColormap,\n    });\n  }, [commandsManager]);\n\n  useEffect(() => {\n    const updateColorbarState = () => {\n      setShowColorbar(colorbarService.hasColorbar(viewportId));\n    };\n\n    const { unsubscribe } = colorbarService.subscribe(\n      colorbarService.EVENTS.STATE_CHANGED,\n      updateColorbarState\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  return (\n    <div className=\"all-in-one-menu-item flex w-full justify-center\">\n      <div className=\"mr-2 w-[28px]\"></div>\n      <SwitchButton\n        label=\"Display Color bar\"\n        checked={showColorbar}\n        onChange={() => {\n          onSetColorbar();\n        }}\n      />\n    </div>\n  );\n}\n","import React, { ReactElement, useCallback } from 'react';\nimport { AllInOneMenu } from '@ohif/ui';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\nimport { CommandsManager } from '@ohif/core';\nimport { useTranslation } from 'react-i18next';\n\nexport type WindowLevelProps = {\n  viewportId: string;\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\n  commandsManager: CommandsManager;\n};\n\nexport function WindowLevel({\n  viewportId,\n  commandsManager,\n  presets,\n}: WindowLevelProps): ReactElement {\n  const { t } = useTranslation('WindowLevelActionMenu');\n\n  const onSetWindowLevel = useCallback(\n    props => {\n      commandsManager.run({\n        commandName: 'setViewportWindowLevel',\n        commandOptions: {\n          ...props,\n          viewportId,\n        },\n        context: 'CORNERSTONE',\n      });\n    },\n    [commandsManager, viewportId]\n  );\n\n  return (\n    <AllInOneMenu.ItemPanel>\n      {presets.map((modalityPresets, modalityIndex) => (\n        <React.Fragment key={modalityIndex}>\n          {Object.entries(modalityPresets).map(([modality, presetsArray]) => (\n            <React.Fragment key={modality}>\n              <AllInOneMenu.HeaderItem>\n                {t('Modality Presets', { modality })}\n              </AllInOneMenu.HeaderItem>\n              {presetsArray.map((preset, index) => (\n                <AllInOneMenu.Item\n                  key={`${modality}-${index}`}\n                  label={preset.description}\n                  secondaryLabel={`${preset.window} / ${preset.level}`}\n                  onClick={() => onSetWindowLevel(preset)}\n                />\n              ))}\n            </React.Fragment>\n          ))}\n        </React.Fragment>\n      ))}\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import { Icon } from '@ohif/ui';\nimport { ButtonEnums } from '@ohif/ui';\nimport React, { ReactElement, useState, useCallback } from 'react';\nimport { Button, InputFilterText } from '@ohif/ui';\nimport { ViewportPreset, VolumeRenderingPresetsContentProps } from '../../types/ViewportPresets';\n\nexport function VolumeRenderingPresetsContent({\n  presets,\n  viewportId,\n  commandsManager,\n  onClose,\n}: VolumeRenderingPresetsContentProps): ReactElement {\n  const [filteredPresets, setFilteredPresets] = useState(presets);\n  const [searchValue, setSearchValue] = useState('');\n  const [selectedPreset, setSelectedPreset] = useState<ViewportPreset | null>(null);\n\n  const handleSearchChange = useCallback(\n    (value: string) => {\n      setSearchValue(value);\n      const filtered = value\n        ? presets.filter(preset => preset.name.toLowerCase().includes(value.toLowerCase()))\n        : presets;\n      setFilteredPresets(filtered);\n    },\n    [presets]\n  );\n\n  const handleApply = useCallback(\n    props => {\n      commandsManager.runCommand('setViewportPreset', {\n        ...props,\n      });\n    },\n    [commandsManager]\n  );\n\n  const formatLabel = (label: string, maxChars: number) => {\n    return label.length > maxChars ? `${label.slice(0, maxChars)}...` : label;\n  };\n\n  return (\n    <div className=\"flex min-h-full w-full flex-col justify-between\">\n      <div className=\"border-secondary-light h-[433px] w-full overflow-hidden rounded border bg-black px-2.5\">\n        <div className=\"flex h-[46px] w-full items-center justify-start\">\n          <div className=\"h-[26px] w-[200px]\">\n            <InputFilterText\n              value={searchValue}\n              onDebounceChange={handleSearchChange}\n              placeholder={'Search all'}\n            />\n          </div>\n        </div>\n        <div className=\"ohif-scrollbar overflow h-[385px] w-full overflow-y-auto\">\n          <div className=\"grid grid-cols-4 gap-3 pt-2 pr-3\">\n            {filteredPresets.map((preset, index) => (\n              <div\n                key={index}\n                className=\"flex cursor-pointer flex-col items-start\"\n                onClick={() => {\n                  setSelectedPreset(preset);\n                  handleApply({ preset: preset.name, viewportId });\n                }}\n              >\n                <Icon\n                  name={preset.name}\n                  className={\n                    selectedPreset?.name === preset.name\n                      ? 'border-primary-light h-[75px] w-[95px] max-w-none rounded border-2'\n                      : 'hover:border-primary-light h-[75px] w-[95px] max-w-none rounded border-2 border-black'\n                  }\n                />\n                <label className=\"text-aqua-pale mt-2 text-left text-xs\">\n                  {formatLabel(preset.name, 11)}\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <footer className=\"flex h-[60px] w-full items-center justify-end\">\n        <div className=\"flex\">\n          <Button\n            name=\"Cancel\"\n            size={ButtonEnums.size.medium}\n            type={ButtonEnums.type.secondary}\n            onClick={onClose}\n          >\n            {' '}\n            Cancel{' '}\n          </Button>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","import { AllInOneMenu, Icon } from '@ohif/ui';\nimport React, { ReactElement } from 'react';\nimport { VolumeRenderingPresetsProps } from '../../types/ViewportPresets';\nimport { VolumeRenderingPresetsContent } from './VolumeRenderingPresetsContent';\n\nexport function VolumeRenderingPresets({\n  viewportId,\n  serviceManager,\n  commandsManager,\n  volumeRenderingPresets,\n}: VolumeRenderingPresetsProps): ReactElement {\n  const { uiModalService } = serviceManager.services;\n\n  const onClickPresets = () => {\n    uiModalService.show({\n      content: VolumeRenderingPresetsContent,\n      title: 'Rendering Presets',\n      movable: true,\n      contentProps: {\n        onClose: uiModalService.hide,\n        presets: volumeRenderingPresets,\n        viewportId,\n        commandsManager,\n      },\n      containerDimensions: 'h-[543px] w-[460px]',\n      contentDimensions: 'h-[493px] w-[460px]  pl-[12px] pr-[12px]',\n    });\n  };\n\n  return (\n    <AllInOneMenu.Item\n      label=\"Rendering Presets\"\n      icon={<Icon name=\"VolumeRendering\" />}\n      rightIcon={<Icon name=\"action-new-dialog\" />}\n      onClick={onClickPresets}\n    />\n  );\n}\n","import React, { ReactElement, useCallback, useState, useEffect } from 'react';\nimport { VolumeRenderingQualityProps } from '../../types/ViewportPresets';\n\nexport function VolumeRenderingQuality({\n  volumeRenderingQualityRange,\n  commandsManager,\n  serviceManager,\n  viewportId,\n}: VolumeRenderingQualityProps): ReactElement {\n  const { cornerstoneViewportService } = serviceManager.services;\n  const { min, max, step } = volumeRenderingQualityRange;\n  const [quality, setQuality] = useState(null);\n\n  const onChange = useCallback(\n    (value: number) => {\n      commandsManager.runCommand('setVolumeRenderingQulaity', {\n        viewportId,\n        volumeQuality: value,\n      });\n      setQuality(value);\n    },\n    [commandsManager, viewportId]\n  );\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const mapper = actor.getMapper();\n    const image = mapper.getInputData();\n    const spacing = image.getSpacing();\n    const sampleDistance = mapper.getSampleDistance();\n    const averageSpacing = spacing.reduce((a, b) => a + b) / 3.0;\n    if (sampleDistance === averageSpacing) {\n      setQuality(1);\n    } else {\n      setQuality(Math.sqrt(averageSpacing / (sampleDistance * 0.5)));\n    }\n  }, [cornerstoneViewportService, viewportId]);\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block text-white\"\n          htmlFor=\"volume\"\n        >\n          Quality\n        </label>\n        {quality !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={quality}\n            id=\"volume\"\n            max={max}\n            min={min}\n            type=\"range\"\n            step={step}\n            onChange={e => onChange(parseInt(e.target.value, 10))}\n            style={{\n              background: calculateBackground((quality - min) / (max - min)),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState, useRef } from 'react';\nimport { VolumeShiftProps } from '../../types/ViewportPresets';\n\nexport function VolumeShift({\n  viewportId,\n  commandsManager,\n  serviceManager,\n}: VolumeShiftProps): ReactElement {\n  const { cornerstoneViewportService } = serviceManager.services;\n  const [minShift, setMinShift] = useState<number | null>(null);\n  const [maxShift, setMaxShift] = useState<number | null>(null);\n  const [shift, setShift] = useState<number | null>(\n    cornerstoneViewportService.getCornerstoneViewport(viewportId)?.shiftedBy || 0\n  );\n  const [step, setStep] = useState<number | null>(null);\n  const [isBlocking, setIsBlocking] = useState(false);\n\n  const prevShiftRef = useRef<number>(shift);\n\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const { actor } = viewport.getActors()[0];\n  const ofun = actor.getProperty().getScalarOpacity(0);\n\n  useEffect(() => {\n    if (isBlocking) {\n      return;\n    }\n    const range = ofun.getRange();\n\n    const transferFunctionWidth = range[1] - range[0];\n\n    const minShift = -transferFunctionWidth;\n    const maxShift = transferFunctionWidth;\n\n    setMinShift(minShift);\n    setMaxShift(maxShift);\n    setStep(Math.pow(10, Math.floor(Math.log10(transferFunctionWidth / 500))));\n  }, [cornerstoneViewportService, viewportId, actor, ofun, isBlocking]);\n\n  const onChangeRange = useCallback(\n    newShift => {\n      const shiftDifference = newShift - prevShiftRef.current;\n      prevShiftRef.current = newShift;\n      viewport.shiftedBy = newShift;\n      commandsManager.runCommand('shiftVolumeOpacityPoints', {\n        viewportId,\n        shift: shiftDifference,\n      });\n    },\n    [commandsManager, viewportId, viewport]\n  );\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"shift\"\n        >\n          Shift\n        </label>\n        {step !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={shift}\n            onChange={e => {\n              const shiftValue = parseInt(e.target.value, 10);\n              setShift(shiftValue);\n              onChangeRange(shiftValue);\n            }}\n            id=\"shift\"\n            onMouseDown={() => setIsBlocking(true)}\n            onMouseUp={() => setIsBlocking(false)}\n            max={maxShift}\n            min={minShift}\n            type=\"range\"\n            step={step}\n            style={{\n              background: calculateBackground((shift - minShift) / (maxShift - minShift)),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useState, useEffect, useCallback } from 'react';\nimport { VolumeLightingProps } from '../../types/ViewportPresets';\n\nexport function VolumeLighting({\n  serviceManager,\n  commandsManager,\n  viewportId,\n}: VolumeLightingProps): ReactElement {\n  const { cornerstoneViewportService } = serviceManager.services;\n  const [ambient, setAmbient] = useState(null);\n  const [diffuse, setDiffuse] = useState(null);\n  const [specular, setSpecular] = useState(null);\n\n  const onAmbientChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { ambient } });\n  }, [ambient, commandsManager, viewportId]);\n\n  const onDiffuseChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { diffuse } });\n  }, [diffuse, commandsManager, viewportId]);\n\n  const onSpecularChange = useCallback(() => {\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { specular } });\n  }, [specular, commandsManager, viewportId]);\n\n  const calculateBackground = value => {\n    const percentage = ((value - 0) / (1 - 0)) * 100;\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\n  };\n\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const ambient = actor.getProperty().getAmbient();\n    const diffuse = actor.getProperty().getDiffuse();\n    const specular = actor.getProperty().getSpecular();\n    setAmbient(ambient);\n    setDiffuse(diffuse);\n    setSpecular(specular);\n  }, [viewportId, cornerstoneViewportService]);\n  return (\n    <>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"ambient\"\n        >\n          Ambient\n        </label>\n        {ambient !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={ambient}\n            onChange={e => {\n              setAmbient(e.target.value);\n              onAmbientChange();\n            }}\n            id=\"ambient\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(ambient),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"diffuse\"\n        >\n          Diffuse\n        </label>\n        {diffuse !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={diffuse}\n            onChange={e => {\n              setDiffuse(e.target.value);\n              onDiffuseChange();\n            }}\n            id=\"diffuse\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(diffuse),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\n        <label\n          className=\"block  text-white\"\n          htmlFor=\"specular\"\n        >\n          Specular\n        </label>\n        {specular !== null && (\n          <input\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\n            value={specular}\n            onChange={e => {\n              setSpecular(e.target.value);\n              onSpecularChange();\n            }}\n            id=\"specular\"\n            max={1}\n            min={0}\n            type=\"range\"\n            step={0.1}\n            style={{\n              background: calculateBackground(specular),\n              '--thumb-inner-color': '#5acce6',\n              '--thumb-outer-color': '#090c29',\n            }}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { SwitchButton } from '@ohif/ui';\nimport { VolumeShadeProps } from '../../types/ViewportPresets';\n\nexport function VolumeShade({\n  commandsManager,\n  viewportId,\n  serviceManager,\n}: VolumeShadeProps): ReactElement {\n  const { cornerstoneViewportService } = serviceManager.services;\n  const [shade, setShade] = useState(true);\n  const [key, setKey] = useState(0);\n\n  const onShadeChange = useCallback(\n    (checked: boolean) => {\n      commandsManager.runCommand('setVolumeLighting', { viewportId, options: { shade: checked } });\n    },\n    [commandsManager, viewportId]\n  );\n  useEffect(() => {\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const { actor } = viewport.getActors()[0];\n    const shade = actor.getProperty().getShade();\n    setShade(shade);\n    setKey(key + 1);\n  }, [viewportId, cornerstoneViewportService]);\n\n  return (\n    <SwitchButton\n      key={key}\n      label=\"Shade\"\n      checked={shade}\n      onChange={() => {\n        setShade(!shade);\n        onShadeChange(!shade);\n      }}\n    />\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { AllInOneMenu } from '@ohif/ui';\nimport { VolumeRenderingOptionsProps } from '../../types/ViewportPresets';\nimport { VolumeRenderingQuality } from './VolumeRenderingQuality';\nimport { VolumeShift } from './VolumeShift';\nimport { VolumeLighting } from './VolumeLighting';\nimport { VolumeShade } from './VolumeShade';\nexport function VolumeRenderingOptions({\n  viewportId,\n  commandsManager,\n  volumeRenderingQualityRange,\n  serviceManager,\n}: VolumeRenderingOptionsProps): ReactElement {\n  return (\n    <AllInOneMenu.ItemPanel>\n      <VolumeRenderingQuality\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        serviceManager={serviceManager}\n        volumeRenderingQualityRange={volumeRenderingQualityRange}\n      />\n\n      <VolumeShift\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        serviceManager={serviceManager}\n      />\n      <div className=\"all-in-one-menu-item mt-2 flex !h-[20px] w-full justify-start\">\n        <div className=\"text-aqua-pale text-[13px]\">LIGHTING</div>\n      </div>\n      <div className=\"bg-primary-dark mt-1 mb-1 h-[2px] w-full\"></div>\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\n        <VolumeShade\n          commandsManager={commandsManager}\n          serviceManager={serviceManager}\n          viewportId={viewportId}\n        />\n      </div>\n      <VolumeLighting\n        viewportId={viewportId}\n        commandsManager={commandsManager}\n        serviceManager={serviceManager}\n      />\n    </AllInOneMenu.ItemPanel>\n  );\n}\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport { AllInOneMenu, useViewportGrid } from '@ohif/ui';\nimport { CommandsManager, ServicesManager } from '@ohif/core';\nimport { Colormap } from './Colormap';\nimport { Colorbar } from './Colorbar';\nimport { setViewportColorbar } from './Colorbar';\nimport { WindowLevelPreset } from '../../types/WindowLevel';\nimport { ColorbarProperties } from '../../types/Colorbar';\nimport { VolumeRenderingQualityRange } from '../../types/ViewportPresets';\nimport { WindowLevel } from './WindowLevel';\nimport { VolumeRenderingPresets } from './VolumeRenderingPresets';\nimport { VolumeRenderingOptions } from './VolumeRenderingOptions';\nimport { ViewportPreset } from '../../types/ViewportPresets';\nimport { VolumeViewport3D } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\n\nexport type WindowLevelActionMenuProps = {\n  viewportId: string;\n  element: HTMLElement;\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\n  verticalDirection: AllInOneMenu.VerticalDirection;\n  horizontalDirection: AllInOneMenu.HorizontalDirection;\n  commandsManager: CommandsManager;\n  serviceManager: ServicesManager;\n  colorbarProperties: ColorbarProperties;\n  displaySets: Array<any>;\n  volumeRenderingPresets: Array<ViewportPreset>;\n  volumeRenderingQualityRange: VolumeRenderingQualityRange;\n};\n\nexport function WindowLevelActionMenu({\n  viewportId,\n  element,\n  presets,\n  verticalDirection,\n  horizontalDirection,\n  commandsManager,\n  serviceManager,\n  colorbarProperties,\n  displaySets,\n  volumeRenderingPresets,\n  volumeRenderingQualityRange,\n}: WindowLevelActionMenuProps): ReactElement {\n  const {\n    colormaps,\n    colorbarContainerPosition,\n    colorbarInitialColormap,\n    colorbarTickPosition,\n    width: colorbarWidth,\n  } = colorbarProperties;\n  const { colorbarService, cornerstoneViewportService } = serviceManager.services;\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n  const backgroundColor = viewportInfo.getViewportOptions().background;\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\n\n  const nonImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\n\n  const { t } = useTranslation('WindowLevelActionMenu');\n\n  const [viewportGrid] = useViewportGrid();\n  const { activeViewportId } = viewportGrid;\n\n  const [vpHeight, setVpHeight] = useState(element?.clientHeight);\n  const [menuKey, setMenuKey] = useState(0);\n  const [is3DVolume, setIs3DVolume] = useState(false);\n\n  const onSetColorbar = useCallback(() => {\n    setViewportColorbar(viewportId, displaySets, commandsManager, serviceManager, {\n      colormaps,\n      ticks: {\n        position: colorbarTickPosition,\n      },\n      width: colorbarWidth,\n      position: colorbarContainerPosition,\n      activeColormapName: colorbarInitialColormap,\n    });\n  }, [commandsManager]);\n\n  useEffect(() => {\n    const newVpHeight = element?.clientHeight;\n    if (vpHeight !== newVpHeight) {\n      setVpHeight(newVpHeight);\n    }\n  }, [element, vpHeight]);\n\n  useEffect(() => {\n    if (!colorbarService.hasColorbar(viewportId)) {\n      return;\n    }\n    window.setTimeout(() => {\n      colorbarService.removeColorbar(viewportId);\n      onSetColorbar();\n    }, 0);\n  }, [viewportId, displaySets, viewport]);\n\n  useEffect(() => {\n    setMenuKey(menuKey + 1);\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    if (viewport instanceof VolumeViewport3D) {\n      setIs3DVolume(true);\n    } else {\n      setIs3DVolume(false);\n    }\n  }, [\n    displaySets,\n    viewportId,\n    presets,\n    volumeRenderingQualityRange,\n    volumeRenderingPresets,\n    colorbarProperties,\n    activeViewportId,\n    viewportGrid,\n  ]);\n\n  return (\n    <AllInOneMenu.IconMenu\n      icon=\"viewport-window-level\"\n      verticalDirection={verticalDirection}\n      horizontalDirection={horizontalDirection}\n      iconClassName={classNames(\n        // Visible on hover and for the active viewport\n        activeViewportId === viewportId ? 'visible' : 'invisible group-hover:visible',\n        'flex shrink-0 cursor-pointer rounded active:text-white text-primary-light',\n        isLight ? ' hover:bg-secondary-dark' : 'hover:bg-secondary-light/60'\n      )}\n      menuStyle={{ maxHeight: vpHeight - 32, minWidth: 218 }}\n      onVisibilityChange={() => {\n        setVpHeight(element.clientHeight);\n      }}\n      menuKey={menuKey}\n    >\n      <AllInOneMenu.ItemPanel>\n        {!is3DVolume && (\n          <Colorbar\n            viewportId={viewportId}\n            displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\n            commandsManager={commandsManager}\n            serviceManager={serviceManager}\n            colorbarProperties={colorbarProperties}\n          />\n        )}\n\n        {colormaps && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"colorLUTPresets\"\n            itemLabel=\"Color LUT\"\n            itemIcon=\"icon-color-lut\"\n          >\n            <Colormap\n              colormaps={colormaps}\n              viewportId={viewportId}\n              displaySets={displaySets.filter(ds => !nonImageModalities.includes(ds.Modality))}\n              commandsManager={commandsManager}\n              serviceManager={serviceManager}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {presets && presets.length > 0 && !is3DVolume && (\n          <AllInOneMenu.SubMenu\n            key=\"windowLevelPresets\"\n            itemLabel={t('Modality Window Presets')}\n            itemIcon=\"viewport-window-level\"\n          >\n            <WindowLevel\n              viewportId={viewportId}\n              commandsManager={commandsManager}\n              presets={presets}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n\n        {volumeRenderingPresets && is3DVolume && (\n          <VolumeRenderingPresets\n            serviceManager={serviceManager}\n            viewportId={viewportId}\n            commandsManager={commandsManager}\n            volumeRenderingPresets={volumeRenderingPresets}\n          />\n        )}\n\n        {volumeRenderingQualityRange && is3DVolume && (\n          <AllInOneMenu.SubMenu itemLabel=\"Rendering Options\">\n            <VolumeRenderingOptions\n              viewportId={viewportId}\n              commandsManager={commandsManager}\n              volumeRenderingQualityRange={volumeRenderingQualityRange}\n              serviceManager={serviceManager}\n            />\n          </AllInOneMenu.SubMenu>\n        )}\n      </AllInOneMenu.ItemPanel>\n    </AllInOneMenu.IconMenu>\n  );\n}\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport PropTypes from 'prop-types';\nimport * as cs3DTools from '@cornerstonejs/tools';\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  StackViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { MeasurementService } from '@ohif/core';\nimport { Notification, useViewportDialog, AllInOneMenu } from '@ohif/ui';\nimport { IStackViewport, IVolumeViewport } from '@cornerstonejs/core/dist/esm/types';\n\nimport { setEnabledElement } from '../state';\n\nimport './OHIFCornerstoneViewport.css';\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\nimport getSOPInstanceAttributes from '../utils/measurementServiceMappings/utils/getSOPInstanceAttributes';\nimport CornerstoneServices from '../types/CornerstoneServices';\nimport CinePlayer from '../components/CinePlayer';\nimport { Types } from '@ohif/core';\n\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\nimport { getWindowLevelActionMenu } from '../components/WindowLevelActionMenu/getWindowLevelActionMenu';\nimport { useAppConfig } from '@state';\n\nimport { LutPresentation, PositionPresentation } from '../types/Presentation';\n\nconst STACK = 'stack';\n\n/**\n * Caches the jump to measurement operation, so that if display set is shown,\n * it can jump to the measurement.\n */\nlet cacheJumpToMeasurementEvent;\n\nfunction areEqual(prevProps, nextProps) {\n  if (nextProps.needsRerendering) {\n    return false;\n  }\n\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\n    return false;\n  }\n\n  if (prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType) {\n    return false;\n  }\n\n  if (nextProps.viewportOptions.needsRerendering) {\n    return false;\n  }\n\n  const prevDisplaySets = prevProps.displaySets;\n  const nextDisplaySets = nextProps.displaySets;\n\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\n    return false;\n  }\n\n  for (let i = 0; i < prevDisplaySets.length; i++) {\n    const prevDisplaySet = prevDisplaySets[i];\n\n    const foundDisplaySet = nextDisplaySets.find(\n      nextDisplaySet =>\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\n    );\n\n    if (!foundDisplaySet) {\n      return false;\n    }\n\n    // check they contain the same image\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\n      return false;\n    }\n\n    // check if their imageIds are the same\n    if (foundDisplaySet.images?.length) {\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\n// Then we don't need to worry about the re-renders if the props change.\nconst OHIFCornerstoneViewport = React.memo(props => {\n  const {\n    displaySets,\n    dataSource,\n    viewportOptions,\n    displaySetOptions,\n    servicesManager,\n    onElementEnabled,\n    onElementDisabled,\n    isJumpToMeasurementDisabled,\n    // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n    // of the imageData in the OHIFCornerstoneViewport. This prop is used\n    // to set the initial state of the viewport's first image to render\n    initialImageIndex,\n    // if the viewport is part of a hanging protocol layout\n    // we should not really rely on the old synchronizers and\n    // you see below we only rehydrate the synchronizers if the viewport\n    // is not part of the hanging protocol layout. HPs should\n    // define their own synchronizers. Since the synchronizers are\n    // viewportId dependent and\n    isHangingProtocolLayout,\n  } = props;\n\n  const viewportId = viewportOptions.viewportId;\n\n  if (!viewportId) {\n    throw new Error('Viewport ID is required');\n  }\n\n  // Since we only have support for dynamic data in volume viewports, we should\n  // handle this case here and set the viewportType to volume if any of the\n  // displaySets are dynamic volumes\n  viewportOptions.viewportType = displaySets.some(ds => ds.isDynamicVolume && ds.isReconstructable)\n    ? 'volume'\n    : viewportOptions.viewportType;\n\n  const [scrollbarHeight, setScrollbarHeight] = useState('100px');\n  const [enabledVPElement, setEnabledVPElement] = useState(null);\n  const elementRef = useRef();\n  const [appConfig] = useAppConfig();\n\n  const {\n    measurementService,\n    displaySetService,\n    toolbarService,\n    toolGroupService,\n    syncGroupService,\n    cornerstoneViewportService,\n    cornerstoneCacheService,\n    viewportGridService,\n    stateSyncService,\n    viewportActionCornersService,\n  } = servicesManager.services as CornerstoneServices;\n\n  const [viewportDialogState] = useViewportDialog();\n  // useCallback for scroll bar height calculation\n  const setImageScrollBarHeight = useCallback(() => {\n    const scrollbarHeight = `${elementRef.current.clientHeight - 40}px`;\n    setScrollbarHeight(scrollbarHeight);\n  }, [elementRef]);\n\n  // useCallback for onResize\n  const onResize = useCallback(() => {\n    if (elementRef.current) {\n      cornerstoneViewportService.resize();\n      setImageScrollBarHeight();\n    }\n  }, [elementRef]);\n\n  const cleanUpServices = useCallback(\n    viewportInfo => {\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\n      const syncGroups = viewportInfo.getSyncGroups();\n\n      toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\n\n      syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n      viewportActionCornersService.clear(viewportId);\n    },\n    [viewportId]\n  );\n\n  const elementEnabledHandler = useCallback(\n    evt => {\n      // check this is this element reference and return early if doesn't match\n      if (evt.detail.element !== elementRef.current) {\n        return;\n      }\n\n      const { viewportId, element } = evt.detail;\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n      setEnabledElement(viewportId, element);\n      setEnabledVPElement(element);\n\n      const renderingEngineId = viewportInfo.getRenderingEngineId();\n      const toolGroupId = viewportInfo.getToolGroupId();\n      const syncGroups = viewportInfo.getSyncGroups();\n\n      toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\n\n      syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\n\n      const synchronizersStore = stateSyncService.getState().synchronizersStore;\n\n      if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\n        // If the viewport used to have a synchronizer, re apply it again\n        _rehydrateSynchronizers(synchronizersStore, viewportId, syncGroupService);\n      }\n\n      if (onElementEnabled) {\n        onElementEnabled(evt);\n      }\n    },\n    [viewportId, onElementEnabled, toolGroupService]\n  );\n\n  // disable the element upon unmounting\n  useEffect(() => {\n    cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\n\n    eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n\n    setImageScrollBarHeight();\n\n    return () => {\n      const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n      if (!viewportInfo) {\n        return;\n      }\n\n      cornerstoneViewportService.storePresentation({ viewportId });\n\n      // This should be done after the store presentation since synchronizers\n      // will get cleaned up and they need the viewportInfo to be present\n      cleanUpServices(viewportInfo);\n\n      if (onElementDisabled) {\n        onElementDisabled(viewportInfo);\n      }\n\n      cornerstoneViewportService.disableElement(viewportId);\n\n      eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\n    };\n  }, []);\n\n  // subscribe to displaySet metadata invalidation (updates)\n  // Currently, if the metadata changes we need to re-render the display set\n  // for it to take effect in the viewport. As we deal with scaling in the loading,\n  // we need to remove the old volume from the cache, and let the\n  // viewport to re-add it which will use the new metadata. Otherwise, the\n  // viewport will use the cached volume and the new metadata will not be used.\n  // Note: this approach does not actually end of sending network requests\n  // and it uses the network cache\n  useEffect(() => {\n    const { unsubscribe } = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      async ({\n        displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\n        invalidateData,\n      }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\n        if (!invalidateData) {\n          return;\n        }\n\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\n\n        if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\n          const viewportData = viewportInfo.getViewportData();\n          const newViewportData = await cornerstoneCacheService.invalidateViewportData(\n            viewportData,\n            invalidatedDisplaySetInstanceUID,\n            dataSource,\n            displaySetService\n          );\n\n          const keepCamera = true;\n          cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\n        }\n      }\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, [viewportId]);\n\n  useEffect(() => {\n    // handle the default viewportType to be stack\n    if (!viewportOptions.viewportType) {\n      viewportOptions.viewportType = STACK;\n    }\n\n    const loadViewportData = async () => {\n      console.log('CREATE VIEWPORT DATA', displaySets, viewportOptions, dataSource, initialImageIndex)\n      const viewportData = await cornerstoneCacheService.createViewportData(\n        displaySets,\n        viewportOptions,\n        dataSource,\n        initialImageIndex\n      );\n\n      // The presentation state will have been stored previously by closing\n      // a viewport.  Otherwise, this viewport will be unchanged and the\n      // presentation information will be directly carried over.\n      const state = stateSyncService.getState();\n      const lutPresentationStore = state.lutPresentationStore as LutPresentation;\n      const positionPresentationStore = state.positionPresentationStore as PositionPresentation;\n\n      const { presentationIds } = viewportOptions;\n      const presentations = {\n        positionPresentation: positionPresentationStore[presentationIds?.positionPresentationId],\n        lutPresentation: lutPresentationStore[presentationIds?.lutPresentationId],\n      };\n      let measurement;\n      if (cacheJumpToMeasurementEvent?.viewportId === viewportId) {\n        measurement = cacheJumpToMeasurementEvent.measurement;\n        // Delete the position presentation so that viewport navigates direct\n        presentations.positionPresentation = null;\n        cacheJumpToMeasurementEvent = null;\n      }\n\n      // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\n      // Used for segmentation hydration right now, since the logic to decide whether\n      // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\n      // so we need to re-render (force update via change of the needsRerendering) so that React\n      // does the diffing and decides we should render this again (although the id and element has not changed)\n      // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\n      if (viewportOptions.needsRerendering) {\n        viewportOptions.needsRerendering = false;\n      }\n\n      cornerstoneViewportService.setViewportData(\n        viewportId,\n        viewportData,\n        viewportOptions,\n        displaySetOptions,\n        presentations\n      );\n      if (measurement) {\n        cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n      }\n    };\n\n    loadViewportData();\n  }, [viewportOptions, displaySets, dataSource]);\n\n  /**\n   * There are two scenarios for jump to click\n   * 1. Current viewports contain the displaySet that the annotation was drawn on\n   * 2. Current viewports don't contain the displaySet that the annotation was drawn on\n   * and we need to change the viewports displaySet for jumping.\n   * Since measurement_jump happens via events and listeners, the former case is handled\n   * by the measurement_jump direct callback, but the latter case is handled first by\n   * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\n   * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\n   */\n  useEffect(() => {\n    if (isJumpToMeasurementDisabled) {\n      return;\n    }\n\n    const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\n      measurementService,\n      displaySetService,\n      elementRef,\n      viewportId,\n      displaySets,\n      viewportGridService,\n      cornerstoneViewportService\n    );\n\n    _checkForCachedJumpToMeasurementEvents(\n      measurementService,\n      displaySetService,\n      elementRef,\n      viewportId,\n      displaySets,\n      viewportGridService,\n      cornerstoneViewportService\n    );\n\n    return () => {\n      unsubscribeFromJumpToMeasurementEvents();\n    };\n  }, [displaySets, elementRef, viewportId]);\n\n  // Set up the window level action menu in the viewport action corners.\n  useEffect(() => {\n    // Doing an === check here because the default config value when not set is true\n    if (appConfig.addWindowLevelActionMenu === false) {\n      return;\n    }\n\n    // TODO: In the future we should consider using the customization service\n    // to determine if and in which corner various action components should go.\n    const wlActionMenu = getWindowLevelActionMenu({\n      viewportId,\n      element: elementRef.current,\n      displaySets,\n      servicesManager,\n      commandsManager,\n      verticalDirection: AllInOneMenu.VerticalDirection.TopToBottom,\n      horizontalDirection: AllInOneMenu.HorizontalDirection.RightToLeft,\n    });\n\n    viewportActionCornersService.setComponent({\n      viewportId,\n      id: 'windowLevelActionMenu',\n      component: wlActionMenu,\n      location: viewportActionCornersService.LOCATIONS.topRight,\n      indexPriority: -100,\n    });\n  }, [displaySets, viewportId, viewportActionCornersService, servicesManager, commandsManager]);\n\n  return (\n    <React.Fragment>\n      <div className=\"viewport-wrapper\">\n        <ReactResizeDetector\n          onResize={onResize}\n          targetRef={elementRef.current}\n        />\n        <div\n          className=\"cornerstone-viewport-element\"\n          style={{ height: '100%', width: '100%' }}\n          onContextMenu={e => e.preventDefault()}\n          onMouseDown={e => e.preventDefault()}\n          ref={elementRef}\n        ></div>\n        <CornerstoneOverlays\n          viewportId={viewportId}\n          toolBarService={toolbarService}\n          element={elementRef.current}\n          scrollbarHeight={scrollbarHeight}\n          servicesManager={servicesManager}\n        />\n        <CinePlayer\n          enabledVPElement={enabledVPElement}\n          viewportId={viewportId}\n          servicesManager={servicesManager}\n        />\n      </div>\n      {/* top offset of 24px to account for ViewportActionCorners. */}\n      <div className=\"absolute top-[24px] w-full\">\n        {viewportDialogState.viewportId === viewportId && (\n          <Notification\n            id=\"viewport-notification\"\n            message={viewportDialogState.message}\n            type={viewportDialogState.type}\n            actions={viewportDialogState.actions}\n            onSubmit={viewportDialogState.onSubmit}\n            onOutsideClick={viewportDialogState.onOutsideClick}\n            onKeyPress={viewportDialogState.onKeyPress}\n          />\n        )}\n      </div>\n      {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\n      <OHIFViewportActionCorners viewportId={viewportId} />\n    </React.Fragment>\n  );\n}, areEqual);\n\nfunction _subscribeToJumpToMeasurementEvents(\n  measurementService,\n  displaySetService,\n  elementRef,\n  viewportId,\n  displaySets,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  const { unsubscribe } = measurementService.subscribe(\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\n    props => {\n      cacheJumpToMeasurementEvent = props;\n      const { viewportId: jumpId, measurement, isConsumed } = props;\n      if (!measurement || isConsumed) {\n        return;\n      }\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\n        // Decide on which viewport should handle this\n        cacheJumpToMeasurementEvent.cornerstoneViewport =\n          cornerstoneViewportService.getViewportIdToJump(\n            jumpId,\n            measurement.displaySetInstanceUID,\n            {\n              referencedImageId:\n                measurement.referencedImageId || measurement.metadata?.referencedImageId,\n            }\n          );\n      }\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportId) {\n        return;\n      }\n      _jumpToMeasurement(\n        measurement,\n        elementRef,\n        viewportId,\n        measurementService,\n        displaySetService,\n        viewportGridService,\n        cornerstoneViewportService\n      );\n    }\n  );\n\n  return unsubscribe;\n}\n\n// Check if there is a queued jumpToMeasurement event\nfunction _checkForCachedJumpToMeasurementEvents(\n  measurementService,\n  displaySetService,\n  elementRef,\n  viewportId,\n  displaySets,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  if (!cacheJumpToMeasurementEvent) {\n    return;\n  }\n  if (cacheJumpToMeasurementEvent.isConsumed) {\n    cacheJumpToMeasurementEvent = null;\n    return;\n  }\n  const displaysUIDs = displaySets.map(displaySet => displaySet.displaySetInstanceUID);\n  if (!displaysUIDs?.length) {\n    return;\n  }\n\n  // Jump to measurement if the measurement exists\n  const { measurement } = cacheJumpToMeasurementEvent;\n  if (measurement && elementRef) {\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\n      _jumpToMeasurement(\n        measurement,\n        elementRef,\n        viewportId,\n        measurementService,\n        displaySetService,\n        viewportGridService,\n        cornerstoneViewportService\n      );\n    }\n  }\n}\n\nfunction _jumpToMeasurement(\n  measurement,\n  targetElementRef,\n  viewportId,\n  measurementService,\n  displaySetService,\n  viewportGridService,\n  cornerstoneViewportService\n) {\n  const targetElement = targetElementRef.current;\n  const { displaySetInstanceUID, SOPInstanceUID, frameNumber } = measurement;\n\n  if (!SOPInstanceUID) {\n    console.warn('cannot jump in a non-acquisition plane measurements yet');\n    return;\n  }\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\n  //  to set it properly\n  // setCornerstoneMeasurementActive(measurement);\n\n  viewportGridService.setActiveViewportId(viewportId);\n\n  const enabledElement = getEnabledElement(targetElement);\n\n  if (enabledElement) {\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\n    const viewport = enabledElement.viewport as IStackViewport | IVolumeViewport;\n\n    let imageIdIndex = 0;\n    let viewportCameraDirectionMatch = true;\n\n    if (viewport instanceof StackViewport) {\n      const imageIds = viewport.getImageIds();\n      imageIdIndex = imageIds.findIndex(imageId => {\n        const { SOPInstanceUID: aSOPInstanceUID, frameNumber: aFrameNumber } =\n          getSOPInstanceAttributes(imageId);\n        return aSOPInstanceUID === SOPInstanceUID && (!frameNumber || frameNumber === aFrameNumber);\n      });\n    } else {\n      // for volume viewport we can't rely on the imageIdIndex since it can be\n      // a reconstructed view that doesn't match the original slice numbers etc.\n      const { viewPlaneNormal: measurementViewPlane } = measurement.metadata;\n      imageIdIndex = referencedDisplaySet.images.findIndex(\n        i => i.SOPInstanceUID === SOPInstanceUID\n      );\n\n      // the index is reversed in the volume viewport\n      // imageIdIndex = referencedDisplaySet.images.length - 1 - imageIdIndex;\n\n      const { viewPlaneNormal: viewportViewPlane } = viewport.getCamera();\n\n      // should compare abs for both planes since the direction can be flipped\n      if (\n        measurementViewPlane &&\n        !csUtils.isEqual(measurementViewPlane.map(Math.abs), viewportViewPlane.map(Math.abs))\n      ) {\n        viewportCameraDirectionMatch = false;\n      }\n    }\n\n    if (!viewportCameraDirectionMatch || imageIdIndex === -1) {\n      return;\n    }\n\n    cs3DTools.utilities.jumpToSlice(targetElement, {\n      imageIndex: imageIdIndex,\n    });\n\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\n    // Jump to measurement consumed, remove.\n    cacheJumpToMeasurementEvent?.consume?.();\n    cacheJumpToMeasurementEvent = null;\n  }\n}\n\nfunction _rehydrateSynchronizers(\n  synchronizersStore: { [key: string]: unknown },\n  viewportId: string,\n  syncGroupService: any\n) {\n  synchronizersStore[viewportId].forEach(synchronizerObj => {\n    if (!synchronizerObj.id) {\n      return;\n    }\n\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\n\n    const synchronizer = syncGroupService.getSynchronizer(id);\n\n    if (!synchronizer) {\n      return;\n    }\n\n    const sourceViewportInfo = sourceViewports.find(\n      sourceViewport => sourceViewport.viewportId === viewportId\n    );\n\n    const targetViewportInfo = targetViewports.find(\n      targetViewport => targetViewport.viewportId === viewportId\n    );\n\n    const isSourceViewportInSynchronizer = synchronizer\n      .getSourceViewports()\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\n\n    const isTargetViewportInSynchronizer = synchronizer\n      .getTargetViewports()\n      .find(targetViewport => targetViewport.viewportId === viewportId);\n\n    // if the viewport was previously a source viewport, add it again\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\n      synchronizer.addSource({\n        viewportId: sourceViewportInfo.viewportId,\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\n      });\n    }\n\n    // if the viewport was previously a target viewport, add it again\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\n      synchronizer.addTarget({\n        viewportId: targetViewportInfo.viewportId,\n        renderingEngineId: targetViewportInfo.renderingEngineId,\n      });\n    }\n  });\n}\n\n// Component displayName\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\n\nOHIFCornerstoneViewport.defaultProps = {\n  isJumpToMeasurementDisabled: false,\n};\n\nOHIFCornerstoneViewport.propTypes = {\n  displaySets: PropTypes.array.isRequired,\n  dataSource: PropTypes.object.isRequired,\n  viewportOptions: PropTypes.object,\n  displaySetOptions: PropTypes.arrayOf(PropTypes.any),\n  servicesManager: PropTypes.object.isRequired,\n  onElementEnabled: PropTypes.func,\n  isJumpToMeasurementDisabled: PropTypes.bool,\n  // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\n  // of the imageData in the OHIFCornerstoneViewport. This prop is used\n  // to set the initial state of the viewport's first image to render\n  initialImageIdOrIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nexport default OHIFCornerstoneViewport;\n","import React, { ReactNode } from 'react';\nimport { WindowLevelActionMenu } from './WindowLevelActionMenu';\n\nexport function getWindowLevelActionMenu({\n  viewportId,\n  element,\n  displaySets,\n  servicesManager,\n  commandsManager,\n  verticalDirection,\n  horizontalDirection,\n}): ReactNode {\n  const { customizationService } = servicesManager.services;\n\n  const { presets } = customizationService.get('cornerstone.windowLevelPresets');\n  const colorbarProperties = customizationService.get('cornerstone.colorbar');\n  const { volumeRenderingPresets, volumeRenderingQualityRange } = customizationService.get(\n    'cornerstone.3dVolumeRendering'\n  );\n\n  const displaySetPresets = displaySets\n    .filter(displaySet => presets[displaySet.Modality])\n    .map(displaySet => {\n      return { [displaySet.Modality]: presets[displaySet.Modality] };\n    });\n\n  return (\n    <WindowLevelActionMenu\n      viewportId={viewportId}\n      element={element}\n      presets={displaySetPresets}\n      verticalDirection={verticalDirection}\n      horizontalDirection={horizontalDirection}\n      commandsManager={commandsManager}\n      serviceManager={servicesManager}\n      colorbarProperties={colorbarProperties}\n      displaySets={displaySets}\n      volumeRenderingPresets={volumeRenderingPresets}\n      volumeRenderingQualityRange={volumeRenderingQualityRange}\n    />\n  );\n}\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","viewportType","Enums","STACK","ORTHOGRAPHIC","sliceData","utilities","imageIndex","numberOfSlices","getCurrentImageIdIndex","data","imageIds","length","updateStackIndex","event","newImageIdIndex","detail","addEventListener","STACK_VIEWPORT_SCROLL","removeEventListener","updateVolumeIndex","VOLUME_NEW_IMAGE","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csToolsUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","formatNumberPrecision","number","precision","parseFloat","toFixed","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","formatPN","name","cleaned","split","filter","s","join","trim","EPSILON","OverlayItemComponents","voi","customization","windowWidth","windowCenter","className","style","color","undefined","scale","instanceNumber","CustomizableViewportOverlay","customizationService","toolGroupService","setVOI","useState","setScale","topLeftCustomization","getModeCustomization","topRightCustomization","bottomLeftCustomization","bottomRightCustomization","instances","useMemo","push","forEach","volume","imageId","instance","metaData","_getViewportInstances","getInstanceNumber","updateVOI","eventDetail","range","lower","upper","VOI_MODIFIED","updateScale","previousCamera","camera","parallelScale","imageData","getImageData","spacing","clientHeight","CAMERA_MODIFIED","_renderOverlayItem","useCallback","item","overlayItemProps","formatters","formatDate","formatTime","instanceIndex","customizationType","OverlayItemComponent","renderItem","transform","content","getContent","defaultItems","keyPrefix","items","map","index","key","condition","studyDateItem","label","title","StudyDate","contentF","seriesDescriptionItem","attribute","SeriesDescription","topLeftItems","flat","ViewportOverlay","topLeft","topRight","bottomLeft","getActiveToolForViewport","bottomRight","generalImageModule","parseInt","_getInstanceNumberFromStack","volumes","direction","cornerstoneViewport","getCamera","viewPlaneNormal","scanAxisNormal","slice","cross","vec3","_getInstanceNumberFromVolume","Number","isNaN","getOrientationStringLPS","invertOrientationStringLPS","ViewportOrientationMarkers","orientationMarkers","rotation","setRotation","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","markers","rowCosines","columnCosines","getEnabledElement","viewUp","viewRight","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","getViewportInfo","m","classNames","console","log","percentComplete","error","defaultProps","ViewportImageSliceLoadingIndicator","loading","setLoading","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","component","CinePlayerComponent","CinePlayer","get","setDynamicInfo","handleTimePointIndexChange","volumeId","timePointIndex","numTimePoints","splittingTag","eventTarget","StreamingEnums","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","cache","getVolume","updateDynamicInfo","frameRate","onClose","setIsCineEnabled","onPlayPauseChange","onFrameRateChange","enabledVPElement","displaySetService","viewportGridService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","Math","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","displaySetInstanceUID","displaySet","getDisplaySetByUID","FrameRate","round","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","STACK_VIEWPORT_NEW_STACK","VOLUME_VIEWPORT_NEW_VOLUME","cine","viewportActionCornersState","useViewportActionCornersContext","ViewportActionCorners","cornerComponents","Colormap","colormaps","displaySets","commandsManager","serviceManager","activeDisplaySet","setActiveDisplaySet","showPreview","setShowPreview","prePreviewColormap","setPrePreviewColormap","showPreviewRef","prePreviewColormapRef","activeDisplaySetRef","onSetColorLUT","opacity","includes","colormap","run","commandName","commandOptions","immediate","context","buttons","children","Modality","minWidth","fontSize","textAlign","display","justifyContent","alignItems","ButtonGroup","onActiveIndexChange","activeIndex","findIndex","ds","SwitchButton","checked","AllInOneMenu","description","onClick","onMouseEnter","getViewportColormap","StackViewport","getProperties","find","c","Name","actorEntry","getActors","entry","uid","onMouseLeave","setViewportColorbar","colorbarOptions","backgroundColor","getViewportOptions","background","ticks","position","font","maxNumTicks","tickSize","tickWidth","labelMargin","VolumeViewport","options","Colorbar","colorbarProperties","colorbarService","width","colorbarWidth","colorbarTickPosition","colorbarContainerPosition","colorbarInitialColormap","showColorbar","setShowColorbar","hasColorbar","onSetColorbar","activeColormapName","STATE_CHANGED","updateColorbarState","WindowLevel","presets","t","useTranslation","onSetWindowLevel","modalityPresets","modalityIndex","Object","entries","modality","presetsArray","preset","secondaryLabel","window","level","VolumeRenderingPresetsContent","filteredPresets","setFilteredPresets","searchValue","setSearchValue","selectedPreset","setSelectedPreset","handleSearchChange","filtered","toLowerCase","handleApply","runCommand","InputFilterText","onDebounceChange","placeholder","Icon","maxChars","formatLabel","Button","size","ButtonEnums","medium","type","secondary","VolumeRenderingPresets","volumeRenderingPresets","uiModalService","icon","rightIcon","onClickPresets","show","movable","contentProps","hide","containerDimensions","contentDimensions","VolumeRenderingQuality","volumeRenderingQualityRange","min","step","quality","setQuality","volumeQuality","actor","mapper","getMapper","getInputData","getSpacing","sampleDistance","getSampleDistance","averageSpacing","reduce","a","b","sqrt","htmlFor","e","target","percentage","calculateBackground","VolumeShift","minShift","setMinShift","maxShift","setMaxShift","shift","setShift","shiftedBy","setStep","isBlocking","setIsBlocking","prevShiftRef","ofun","getProperty","getScalarOpacity","getRange","transferFunctionWidth","pow","floor","log10","onChangeRange","newShift","shiftDifference","shiftValue","onMouseDown","onMouseUp","VolumeLighting","ambient","setAmbient","diffuse","setDiffuse","specular","setSpecular","onAmbientChange","onDiffuseChange","onSpecularChange","getAmbient","getDiffuse","getSpecular","VolumeShade","shade","setShade","setKey","onShadeChange","getShade","VolumeRenderingOptions","WindowLevelActionMenu","verticalDirection","horizontalDirection","isLight","nonImageModalities","viewportGrid","useViewportGrid","activeViewportId","vpHeight","setVpHeight","menuKey","setMenuKey","is3DVolume","setIs3DVolume","newVpHeight","removeColorbar","VolumeViewport3D","iconClassName","menuStyle","maxHeight","onVisibilityChange","itemLabel","itemIcon","cacheJumpToMeasurementEvent","areEqual","prevProps","nextProps","needsRerendering","orientation","toolGroupId","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","some","isReconstructable","setScrollbarHeight","setEnabledVPElement","elementRef","measurementService","toolbarService","syncGroupService","cornerstoneCacheService","stateSyncService","viewportActionCornersService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clear","elementEnabledHandler","setEnabledElement","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","state","lutPresentationStore","positionPresentationStore","presentationIds","presentations","positionPresentation","positionPresentationId","lutPresentation","lutPresentationId","measurement","cs3DTools","loadViewportData","unsubscribeFromJumpToMeasurementEvents","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpId","isConsumed","getViewportIdToJump","referencedImageId","metadata","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","_checkForCachedJumpToMeasurementEvents","addWindowLevelActionMenu","wlActionMenu","displaySetPresets","getWindowLevelActionMenu","TopToBottom","RightToLeft","setComponent","location","LOCATIONS","indexPriority","ReactResizeDetector","targetRef","onContextMenu","preventDefault","ref","CornerstoneOverlays","toolBarService","Notification","message","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","targetElementRef","targetElement","SOPInstanceUID","frameNumber","warn","referencedDisplaySet","setActiveViewportId","enabledElement","imageIdIndex","viewportCameraDirectionMatch","getImageIds","aSOPInstanceUID","aFrameNumber","getSOPInstanceAttributes","measurementViewPlane","viewportViewPlane","csUtils","abs","consume","displayName","initialImageIdOrIndex"],"sourceRoot":""}