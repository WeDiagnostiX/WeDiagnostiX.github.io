{"version":3,"file":"926.bundle.1d5dcbeb0d05a8b0b171.js","mappings":"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","sources":["webpack:///../../../node_modules/@cornerstonejs/adapters/dist/@cornerstonejs/adapters.es.js","webpack:///../../../node_modules/iota-array/iota.js","webpack:///../../../node_modules/is-buffer/index.js","webpack:///../../../node_modules/ndarray/ndarray.js"],"sourcesContent":["import { utilities, derivations, normalizers, data, log } from 'dcmjs';\nimport ndarray from 'ndarray';\nimport cloneDeep from 'lodash.clonedeep';\nimport { vec3 } from 'gl-matrix';\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar toArray = function toArray(x) {\n  return Array.isArray(x) ? x : [x];\n};\nvar codeMeaningEquals = function codeMeaningEquals(codeMeaningName) {\n  return function (contentItem) {\n    return contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName;\n  };\n};\n\nvar TID1500$1 = utilities.TID1500,\n  addAccessors$1 = utilities.addAccessors;\nvar StructuredReport$1 = derivations.StructuredReport;\nvar Normalizer$3 = normalizers.Normalizer;\nvar TID1500MeasurementReport$1 = TID1500$1.TID1500MeasurementReport,\n  TID1501MeasurementGroup$1 = TID1500$1.TID1501MeasurementGroup;\nvar DicomMetaDictionary$3 = data.DicomMetaDictionary;\nvar FINDING$2 = {\n  CodingSchemeDesignator: \"DCM\",\n  CodeValue: \"121071\"\n};\nvar FINDING_SITE$2 = {\n  CodingSchemeDesignator: \"SCT\",\n  CodeValue: \"363698007\"\n};\nvar FINDING_SITE_OLD$1 = {\n  CodingSchemeDesignator: \"SRT\",\n  CodeValue: \"G-C0E3\"\n};\nvar codeValueMatch$1 = function codeValueMatch(group, code, oldCode) {\n  var ConceptNameCodeSequence = group.ConceptNameCodeSequence;\n  if (!ConceptNameCodeSequence) return;\n  var CodingSchemeDesignator = ConceptNameCodeSequence.CodingSchemeDesignator,\n    CodeValue = ConceptNameCodeSequence.CodeValue;\n  return CodingSchemeDesignator == code.CodingSchemeDesignator && CodeValue == code.CodeValue || oldCode && CodingSchemeDesignator == oldCode.CodingSchemeDesignator && CodeValue == oldCode.CodeValue;\n};\nfunction getTID300ContentItem$1(tool, toolType, ReferencedSOPSequence, toolClass) {\n  var args = toolClass.getTID300RepresentationArguments(tool);\n  args.ReferencedSOPSequence = ReferencedSOPSequence;\n  var TID300Measurement = new toolClass.TID300Representation(args);\n  return TID300Measurement;\n}\nfunction getMeasurementGroup$1(toolType, toolData, ReferencedSOPSequence) {\n  var toolTypeData = toolData[toolType];\n  var toolClass = MeasurementReport$1.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];\n  if (!toolTypeData || !toolTypeData.data || !toolTypeData.data.length || !toolClass) {\n    return;\n  }\n\n  // Loop through the array of tool instances\n  // for this tool\n  var Measurements = toolTypeData.data.map(function (tool) {\n    return getTID300ContentItem$1(tool, toolType, ReferencedSOPSequence, toolClass);\n  });\n  return new TID1501MeasurementGroup$1(Measurements);\n}\nvar MeasurementReport$1 = /*#__PURE__*/function () {\n  function MeasurementReport() {\n    _classCallCheck(this, MeasurementReport);\n  }\n  _createClass(MeasurementReport, null, [{\n    key: \"getSetupMeasurementData\",\n    value: function getSetupMeasurementData(MeasurementGroup) {\n      var ContentSequence = MeasurementGroup.ContentSequence;\n      var contentSequenceArr = toArray(ContentSequence);\n      var findingGroup = contentSequenceArr.find(function (group) {\n        return codeValueMatch$1(group, FINDING$2);\n      });\n      var findingSiteGroups = contentSequenceArr.filter(function (group) {\n        return codeValueMatch$1(group, FINDING_SITE$2, FINDING_SITE_OLD$1);\n      }) || [];\n      var NUMGroup = contentSequenceArr.find(function (group) {\n        return group.ValueType === \"NUM\";\n      });\n      var SCOORDGroup = toArray(NUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var ReferencedSOPSequence = SCOORDGroup.ContentSequence.ReferencedSOPSequence;\n      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,\n        ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;\n      var defaultState = {\n        sopInstanceUid: ReferencedSOPInstanceUID,\n        frameIndex: ReferencedFrameNumber || 1,\n        complete: true,\n        finding: findingGroup ? addAccessors$1(findingGroup.ConceptCodeSequence) : undefined,\n        findingSites: findingSiteGroups.map(function (fsg) {\n          return addAccessors$1(fsg.ConceptCodeSequence);\n        })\n      };\n      if (defaultState.finding) {\n        defaultState.description = defaultState.finding.CodeMeaning;\n      }\n      var findingSite = defaultState.findingSites && defaultState.findingSites[0];\n      if (findingSite) {\n        defaultState.location = findingSite[0] && findingSite[0].CodeMeaning || findingSite.CodeMeaning;\n      }\n      return {\n        defaultState: defaultState,\n        findingGroup: findingGroup,\n        findingSiteGroups: findingSiteGroups,\n        NUMGroup: NUMGroup,\n        SCOORDGroup: SCOORDGroup,\n        ReferencedSOPSequence: ReferencedSOPSequence,\n        ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,\n        ReferencedFrameNumber: ReferencedFrameNumber\n      };\n    }\n  }, {\n    key: \"generateReport\",\n    value: function generateReport(toolState, metadataProvider, options) {\n      // ToolState for array of imageIDs to a Report\n      // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID\n\n      var allMeasurementGroups = [];\n      var firstImageId = Object.keys(toolState)[0];\n      if (!firstImageId) {\n        throw new Error(\"No measurements provided.\");\n      }\n\n      /* Patient ID\r\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID\r\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date\r\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time\r\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID\r\n       */\n      var generalSeriesModule = metadataProvider.get(\"generalSeriesModule\", firstImageId);\n\n      //const sopCommonModule = metadataProvider.get('sopCommonModule', firstImageId);\n\n      // NOTE: We are getting the Series and Study UIDs from the first imageId of the toolState\n      // which means that if the toolState is for multiple series, the report will have the incorrect\n      // SeriesInstanceUIDs\n      var studyInstanceUID = generalSeriesModule.studyInstanceUID,\n        seriesInstanceUID = generalSeriesModule.seriesInstanceUID;\n\n      // Loop through each image in the toolData\n      Object.keys(toolState).forEach(function (imageId) {\n        var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n        var frameNumber = metadataProvider.get(\"frameNumber\", imageId);\n        var toolData = toolState[imageId];\n        var toolTypes = Object.keys(toolData);\n        var ReferencedSOPSequence = {\n          ReferencedSOPClassUID: sopCommonModule.sopClassUID,\n          ReferencedSOPInstanceUID: sopCommonModule.sopInstanceUID\n        };\n        if (Normalizer$3.isMultiframeSOPClassUID(sopCommonModule.sopClassUID)) {\n          ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;\n        }\n\n        // Loop through each tool type for the image\n        var measurementGroups = [];\n        toolTypes.forEach(function (toolType) {\n          var group = getMeasurementGroup$1(toolType, toolData, ReferencedSOPSequence);\n          if (group) {\n            measurementGroups.push(group);\n          }\n        });\n        allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);\n      });\n      var _MeasurementReport = new TID1500MeasurementReport$1({\n        TID1501MeasurementGroups: allMeasurementGroups\n      }, options);\n\n      // TODO: what is the correct metaheader\n      // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\n      // TODO: move meta creation to happen in derivations.js\n      var fileMetaInformationVersionArray = new Uint8Array(2);\n      fileMetaInformationVersionArray[1] = 1;\n      var derivationSourceDataset = {\n        StudyInstanceUID: studyInstanceUID,\n        SeriesInstanceUID: seriesInstanceUID\n        //SOPInstanceUID: sopInstanceUID, // TODO: Necessary?\n        //SOPClassUID: sopClassUID,\n      };\n      var _meta = {\n        FileMetaInformationVersion: {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: \"OB\"\n        },\n        //MediaStorageSOPClassUID\n        //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\n        TransferSyntaxUID: {\n          Value: [\"1.2.840.10008.1.2.1\"],\n          vr: \"UI\"\n        },\n        ImplementationClassUID: {\n          Value: [DicomMetaDictionary$3.uid()],\n          // TODO: could be git hash or other valid id\n          vr: \"UI\"\n        },\n        ImplementationVersionName: {\n          Value: [\"dcmjs\"],\n          vr: \"SH\"\n        }\n      };\n      var _vrMap = {\n        PixelData: \"OW\"\n      };\n      derivationSourceDataset._meta = _meta;\n      derivationSourceDataset._vrMap = _vrMap;\n      var report = new StructuredReport$1([derivationSourceDataset]);\n      var contentItem = _MeasurementReport.contentItem(derivationSourceDataset);\n\n      // Merge the derived dataset with the content from the Measurement Report\n      report.dataset = Object.assign(report.dataset, contentItem);\n      report.dataset._meta = _meta;\n      return report;\n    }\n\n    /**\r\n     * Generate Cornerstone tool state from dataset\r\n     * @param {object} dataset dataset\r\n     * @param {object} hooks\r\n     * @param {function} hooks.getToolClass Function to map dataset to a tool class\r\n     * @returns\r\n     */\n  }, {\n    key: \"generateToolState\",\n    value: function generateToolState(dataset) {\n      var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // For now, bail out if the dataset is not a TID1500 SR with length measurements\n      if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\n        throw new Error(\"This package can currently only interpret DICOM SR TID 1500\");\n      }\n      var REPORT = \"Imaging Measurements\";\n      var GROUP = \"Measurement Group\";\n      var TRACKING_IDENTIFIER = \"Tracking Identifier\";\n\n      // Identify the Imaging Measurements\n      var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT));\n\n      // Retrieve the Measurements themselves\n      var measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP));\n\n      // For each of the supported measurement types, compute the measurement data\n      var measurementData = {};\n      var cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n      var registeredToolClasses = [];\n      Object.keys(cornerstoneToolClasses).forEach(function (key) {\n        registeredToolClasses.push(cornerstoneToolClasses[key]);\n        measurementData[key] = [];\n      });\n      measurementGroups.forEach(function (measurementGroup) {\n        var measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);\n        var TrackingIdentifierGroup = measurementGroupContentSequence.find(function (contentItem) {\n          return contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER;\n        });\n        var TrackingIdentifierValue = TrackingIdentifierGroup.TextValue;\n        var toolClass = hooks.getToolClass ? hooks.getToolClass(measurementGroup, dataset, registeredToolClasses) : registeredToolClasses.find(function (tc) {\n          return tc.isValidCornerstoneTrackingIdentifier(TrackingIdentifierValue);\n        });\n        if (toolClass) {\n          var measurement = toolClass.getMeasurementData(measurementGroup);\n          console.log(\"=== \".concat(toolClass.toolType, \" ===\"));\n          console.log(measurement);\n          measurementData[toolClass.toolType].push(measurement);\n        }\n      });\n\n      // NOTE: There is no way of knowing the cornerstone imageIds as that could be anything.\n      // That is up to the consumer to derive from the SOPInstanceUIDs.\n      return measurementData;\n    }\n  }, {\n    key: \"registerTool\",\n    value: function registerTool(toolClass) {\n      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;\n      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;\n      MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] = toolClass.utilityToolType;\n    }\n  }]);\n  return MeasurementReport;\n}();\nMeasurementReport$1.MEASUREMENT_BY_TOOLTYPE = {};\nMeasurementReport$1.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};\nMeasurementReport$1.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};\n\nvar CORNERSTONE_4_TAG = \"cornerstoneTools@^4.0.0\";\n\nvar TID300Length$1 = utilities.TID300.Length;\nvar LENGTH$1 = \"Length\";\nvar Length$1 = /*#__PURE__*/function () {\n  function Length() {\n    _classCallCheck(this, Length);\n  }\n  _createClass(Length, null, [{\n    key: \"getMeasurementData\",\n    value:\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        NUMGroup = _MeasurementReport$ge.NUMGroup,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        length: NUMGroup.MeasuredValueSequence.NumericValue,\n        toolType: Length.toolType,\n        handles: {\n          start: {},\n          end: {},\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        }\n      });\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 4);\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      state.handles.end.x = _SCOORDGroup$GraphicD[2];\n      state.handles.end.y = _SCOORDGroup$GraphicD[3];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n        finding = tool.finding,\n        findingSites = tool.findingSites;\n      var point1 = handles.start;\n      var point2 = handles.end;\n      var distance = tool.length;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Length\";\n      return {\n        point1: point1,\n        point2: point2,\n        distance: distance,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return Length;\n}();\nLength$1.toolType = LENGTH$1;\nLength$1.utilityToolType = LENGTH$1;\nLength$1.TID300Representation = TID300Length$1;\nLength$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === LENGTH$1;\n};\nMeasurementReport$1.registerTool(Length$1);\n\nvar TID300Polyline$3 = utilities.TID300.Polyline;\nvar FreehandRoi = /*#__PURE__*/function () {\n  function FreehandRoi() {\n    _classCallCheck(this, FreehandRoi);\n  }\n  _createClass(FreehandRoi, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n        NUMGroup = _MeasurementReport$ge.NUMGroup;\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: FreehandRoi.toolType,\n        handles: {\n          points: [],\n          textBox: {\n            active: false,\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        },\n        color: undefined,\n        invalidated: true\n      });\n      var GraphicData = SCOORDGroup.GraphicData;\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        state.handles.points.push({\n          x: GraphicData[i],\n          y: GraphicData[i + 1]\n        });\n      }\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n        finding = tool.finding,\n        findingSites = tool.findingSites,\n        _tool$cachedStats = tool.cachedStats,\n        cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats;\n      var points = handles.points;\n      var _cachedStats$area = cachedStats.area,\n        area = _cachedStats$area === void 0 ? 0 : _cachedStats$area,\n        _cachedStats$perimete = cachedStats.perimeter,\n        perimeter = _cachedStats$perimete === void 0 ? 0 : _cachedStats$perimete;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:FreehandRoi\";\n      return {\n        points: points,\n        area: area,\n        perimeter: perimeter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return FreehandRoi;\n}();\nFreehandRoi.toolType = \"FreehandRoi\";\nFreehandRoi.utilityToolType = \"FreehandRoi\";\nFreehandRoi.TID300Representation = TID300Polyline$3;\nFreehandRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === FreehandRoi.toolType;\n};\nMeasurementReport$1.registerTool(FreehandRoi);\n\nvar TID300Bidirectional$1 = utilities.TID300.Bidirectional;\nvar BIDIRECTIONAL$1 = \"Bidirectional\";\nvar LONG_AXIS$1 = \"Long Axis\";\nvar SHORT_AXIS$1 = \"Short Axis\";\nvar FINDING$1 = \"121071\";\nvar FINDING_SITE$1 = \"G-C0E3\";\nvar Bidirectional$1 = /*#__PURE__*/function () {\n  function Bidirectional() {\n    _classCallCheck(this, Bidirectional);\n  }\n  _createClass(Bidirectional, null, [{\n    key: \"getMeasurementData\",\n    value:\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    function getMeasurementData(MeasurementGroup) {\n      var ContentSequence = MeasurementGroup.ContentSequence;\n      var findingGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeValue === FINDING$1;\n      });\n      var findingSiteGroups = toArray(ContentSequence).filter(function (group) {\n        return group.ConceptNameCodeSequence.CodeValue === FINDING_SITE$1;\n      });\n      var longAxisNUMGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS$1;\n      });\n      var longAxisSCOORDGroup = toArray(longAxisNUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var shortAxisNUMGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS$1;\n      });\n      var shortAxisSCOORDGroup = toArray(shortAxisNUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var ReferencedSOPSequence = longAxisSCOORDGroup.ContentSequence.ReferencedSOPSequence;\n      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,\n        ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;\n\n      // Long axis\n\n      var longestDiameter = String(longAxisNUMGroup.MeasuredValueSequence.NumericValue);\n      var shortestDiameter = String(shortAxisNUMGroup.MeasuredValueSequence.NumericValue);\n      var bottomRight = {\n        x: Math.max(longAxisSCOORDGroup.GraphicData[0], longAxisSCOORDGroup.GraphicData[2], shortAxisSCOORDGroup.GraphicData[0], shortAxisSCOORDGroup.GraphicData[2]),\n        y: Math.max(longAxisSCOORDGroup.GraphicData[1], longAxisSCOORDGroup.GraphicData[3], shortAxisSCOORDGroup.GraphicData[1], shortAxisSCOORDGroup.GraphicData[3])\n      };\n      var state = {\n        sopInstanceUid: ReferencedSOPInstanceUID,\n        frameIndex: ReferencedFrameNumber || 1,\n        toolType: Bidirectional.toolType,\n        active: false,\n        handles: {\n          start: {\n            x: longAxisSCOORDGroup.GraphicData[0],\n            y: longAxisSCOORDGroup.GraphicData[1],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 0\n          },\n          end: {\n            x: longAxisSCOORDGroup.GraphicData[2],\n            y: longAxisSCOORDGroup.GraphicData[3],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 1\n          },\n          perpendicularStart: {\n            x: shortAxisSCOORDGroup.GraphicData[0],\n            y: shortAxisSCOORDGroup.GraphicData[1],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 2\n          },\n          perpendicularEnd: {\n            x: shortAxisSCOORDGroup.GraphicData[2],\n            y: shortAxisSCOORDGroup.GraphicData[3],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 3\n          },\n          textBox: {\n            highlight: false,\n            hasMoved: true,\n            active: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true,\n            x: bottomRight.x + 10,\n            y: bottomRight.y + 10\n          }\n        },\n        invalidated: false,\n        isCreating: false,\n        longestDiameter: longestDiameter,\n        shortestDiameter: shortestDiameter,\n        toolName: \"Bidirectional\",\n        visible: true,\n        finding: findingGroup ? findingGroup.ConceptCodeSequence : undefined,\n        findingSites: findingSiteGroups.map(function (fsg) {\n          return fsg.ConceptCodeSequence;\n        })\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var _tool$handles = tool.handles,\n        start = _tool$handles.start,\n        end = _tool$handles.end,\n        perpendicularStart = _tool$handles.perpendicularStart,\n        perpendicularEnd = _tool$handles.perpendicularEnd;\n      var shortestDiameter = tool.shortestDiameter,\n        longestDiameter = tool.longestDiameter,\n        finding = tool.finding,\n        findingSites = tool.findingSites;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Bidirectional\";\n      return {\n        longAxis: {\n          point1: start,\n          point2: end\n        },\n        shortAxis: {\n          point1: perpendicularStart,\n          point2: perpendicularEnd\n        },\n        longAxisLength: longestDiameter,\n        shortAxisLength: shortestDiameter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return Bidirectional;\n}();\nBidirectional$1.toolType = BIDIRECTIONAL$1;\nBidirectional$1.utilityToolType = BIDIRECTIONAL$1;\nBidirectional$1.TID300Representation = TID300Bidirectional$1;\nBidirectional$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === BIDIRECTIONAL$1;\n};\nMeasurementReport$1.registerTool(Bidirectional$1);\n\nvar TID300Ellipse$1 = utilities.TID300.Ellipse;\nvar ELLIPTICALROI$1 = \"EllipticalRoi\";\nvar EllipticalRoi = /*#__PURE__*/function () {\n  function EllipticalRoi() {\n    _classCallCheck(this, EllipticalRoi);\n  }\n  _createClass(EllipticalRoi, null, [{\n    key: \"getMeasurementData\",\n    value:\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        NUMGroup = _MeasurementReport$ge.NUMGroup,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var majorAxis = [{\n        x: GraphicData[0],\n        y: GraphicData[1]\n      }, {\n        x: GraphicData[2],\n        y: GraphicData[3]\n      }];\n      var minorAxis = [{\n        x: GraphicData[4],\n        y: GraphicData[5]\n      }, {\n        x: GraphicData[6],\n        y: GraphicData[7]\n      }];\n\n      // Calculate two opposite corners of box defined by two axes.\n\n      var minorAxisLength = Math.sqrt(Math.pow(minorAxis[0].x - minorAxis[1].x, 2) + Math.pow(minorAxis[0].y - minorAxis[1].y, 2));\n      var minorAxisDirection = {\n        x: (minorAxis[1].x - minorAxis[0].x) / minorAxisLength,\n        y: (minorAxis[1].y - minorAxis[0].y) / minorAxisLength\n      };\n      var halfMinorAxisLength = minorAxisLength / 2;\n\n      // First end point of major axis + half minor axis vector\n      var corner1 = {\n        x: majorAxis[0].x + minorAxisDirection.x * halfMinorAxisLength,\n        y: majorAxis[0].y + minorAxisDirection.y * halfMinorAxisLength\n      };\n\n      // Second end point of major axis - half of minor axis vector\n      var corner2 = {\n        x: majorAxis[1].x - minorAxisDirection.x * halfMinorAxisLength,\n        y: majorAxis[1].y - minorAxisDirection.y * halfMinorAxisLength\n      };\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: EllipticalRoi.toolType,\n        active: false,\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        },\n        handles: {\n          end: {\n            x: corner1.x,\n            y: corner1.y,\n            highlight: false,\n            active: false\n          },\n          initialRotation: 0,\n          start: {\n            x: corner2.x,\n            y: corner2.y,\n            highlight: false,\n            active: false\n          },\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        invalidated: true,\n        visible: true\n      });\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var _tool$cachedStats = tool.cachedStats,\n        cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats,\n        handles = tool.handles,\n        finding = tool.finding,\n        findingSites = tool.findingSites;\n      var start = handles.start,\n        end = handles.end;\n      var area = cachedStats.area;\n      var halfXLength = Math.abs(start.x - end.x) / 2;\n      var halfYLength = Math.abs(start.y - end.y) / 2;\n      var points = [];\n      var center = {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2\n      };\n      if (halfXLength > halfYLength) {\n        // X-axis major\n        // Major axis\n        points.push({\n          x: center.x - halfXLength,\n          y: center.y\n        });\n        points.push({\n          x: center.x + halfXLength,\n          y: center.y\n        });\n        // Minor axis\n        points.push({\n          x: center.x,\n          y: center.y - halfYLength\n        });\n        points.push({\n          x: center.x,\n          y: center.y + halfYLength\n        });\n      } else {\n        // Y-axis major\n        // Major axis\n        points.push({\n          x: center.x,\n          y: center.y - halfYLength\n        });\n        points.push({\n          x: center.x,\n          y: center.y + halfYLength\n        });\n        // Minor axis\n        points.push({\n          x: center.x - halfXLength,\n          y: center.y\n        });\n        points.push({\n          x: center.x + halfXLength,\n          y: center.y\n        });\n      }\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:EllipticalRoi\";\n      return {\n        area: area,\n        points: points,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return EllipticalRoi;\n}();\nEllipticalRoi.toolType = ELLIPTICALROI$1;\nEllipticalRoi.utilityToolType = ELLIPTICALROI$1;\nEllipticalRoi.TID300Representation = TID300Ellipse$1;\nEllipticalRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === ELLIPTICALROI$1;\n};\nMeasurementReport$1.registerTool(EllipticalRoi);\n\nvar TID300Circle$1 = utilities.TID300.Circle;\nvar CIRCLEROI$1 = \"CircleRoi\";\nvar CircleRoi = /*#__PURE__*/function () {\n  function CircleRoi() {\n    _classCallCheck(this, CircleRoi);\n  }\n  _createClass(CircleRoi, null, [{\n    key: \"getMeasurementData\",\n    value: /** Gets the measurement data for cornerstone, given DICOM SR measurement data. */\n    function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        NUMGroup = _MeasurementReport$ge.NUMGroup,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var center = {\n        x: GraphicData[0],\n        y: GraphicData[1]\n      };\n      var end = {\n        x: GraphicData[2],\n        y: GraphicData[3]\n      };\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: CircleRoi.toolType,\n        active: false,\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0,\n          // Dummy values to be updated by cornerstone\n          radius: 0,\n          perimeter: 0\n        },\n        handles: {\n          end: _objectSpread2(_objectSpread2({}, end), {}, {\n            highlight: false,\n            active: false\n          }),\n          initialRotation: 0,\n          start: _objectSpread2(_objectSpread2({}, center), {}, {\n            highlight: false,\n            active: false\n          }),\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        invalidated: true,\n        visible: true\n      });\n      return state;\n    }\n\n    /**\r\n     * Gets the TID 300 representation of a circle, given the cornerstone representation.\r\n     *\r\n     * @param {Object} tool\r\n     * @returns\r\n     */\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var _tool$cachedStats = tool.cachedStats,\n        cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats,\n        handles = tool.handles,\n        finding = tool.finding,\n        findingSites = tool.findingSites;\n      var center = handles.start,\n        end = handles.end;\n      var area = cachedStats.area,\n        radius = cachedStats.radius;\n      var perimeter = 2 * Math.PI * radius;\n      var points = [];\n      points.push(center);\n      points.push(end);\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:CircleRoi\";\n      return {\n        area: area,\n        perimeter: perimeter,\n        radius: radius,\n        points: points,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return CircleRoi;\n}();\nCircleRoi.toolType = CIRCLEROI$1;\nCircleRoi.utilityToolType = CIRCLEROI$1;\nCircleRoi.TID300Representation = TID300Circle$1;\nCircleRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === CIRCLEROI$1;\n};\nMeasurementReport$1.registerTool(CircleRoi);\n\nvar TID300Point$2 = utilities.TID300.Point;\nvar ARROW_ANNOTATE$1 = \"ArrowAnnotate\";\nvar CORNERSTONEFREETEXT$1 = \"CORNERSTONEFREETEXT\";\nvar ArrowAnnotate$1 = /*#__PURE__*/function () {\n  function ArrowAnnotate() {\n    _classCallCheck(this, ArrowAnnotate);\n  }\n  _createClass(ArrowAnnotate, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n        findingGroup = _MeasurementReport$ge.findingGroup;\n      var text = findingGroup.ConceptCodeSequence.CodeMeaning;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: ArrowAnnotate.toolType,\n        active: false,\n        handles: {\n          start: {\n            x: GraphicData[0],\n            y: GraphicData[1],\n            highlight: true,\n            active: false\n          },\n          // Use a generic offset if the stored data doesn't have the endpoint, otherwise\n          // use the actual endpoint.\n          end: {\n            x: GraphicData.length == 4 ? GraphicData[2] : GraphicData[0] + 20,\n            y: GraphicData.length == 4 ? GraphicData[3] : GraphicData[1] + 20,\n            highlight: true,\n            active: false\n          },\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        invalidated: true,\n        text: text,\n        visible: true\n      });\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var points = [tool.handles.start, tool.handles.end];\n      var finding = tool.finding,\n        findingSites = tool.findingSites;\n      var TID300RepresentationArguments = {\n        points: points,\n        trackingIdentifierTextValue: \"cornerstoneTools@^4.0.0:ArrowAnnotate\",\n        findingSites: findingSites || []\n      };\n\n      // If freetext finding isn't present, add it from the tool text.\n      if (!finding || finding.CodeValue !== CORNERSTONEFREETEXT$1) {\n        finding = {\n          CodeValue: CORNERSTONEFREETEXT$1,\n          CodingSchemeDesignator: \"CST4\",\n          CodeMeaning: tool.text\n        };\n      }\n      TID300RepresentationArguments.finding = finding;\n      return TID300RepresentationArguments;\n    }\n  }]);\n  return ArrowAnnotate;\n}();\nArrowAnnotate$1.toolType = ARROW_ANNOTATE$1;\nArrowAnnotate$1.utilityToolType = ARROW_ANNOTATE$1;\nArrowAnnotate$1.TID300Representation = TID300Point$2;\nArrowAnnotate$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === ARROW_ANNOTATE$1;\n};\nMeasurementReport$1.registerTool(ArrowAnnotate$1);\n\nvar _utilities$orientatio$1 = utilities.orientation,\n  rotateDirectionCosinesInPlane$1 = _utilities$orientatio$1.rotateDirectionCosinesInPlane,\n  flipIOP$1 = _utilities$orientatio$1.flipImageOrientationPatient,\n  flipMatrix2D$1 = _utilities$orientatio$1.flipMatrix2D,\n  rotateMatrix902D$1 = _utilities$orientatio$1.rotateMatrix902D;\nvar datasetToBlob$1 = utilities.datasetToBlob,\n  BitArray$2 = utilities.BitArray,\n  DicomMessage$1 = utilities.DicomMessage,\n  DicomMetaDictionary$2 = utilities.DicomMetaDictionary;\nvar Normalizer$2 = normalizers.Normalizer;\nvar SegmentationDerivation$1 = derivations.Segmentation;\nvar Segmentation$3 = {\n  generateSegmentation: generateSegmentation$2,\n  generateToolState: generateToolState$2\n};\n\n/**\r\n *\r\n * @typedef {Object} BrushData\r\n * @property {Object} toolState - The cornerstoneTools global toolState.\r\n * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the\r\n *                                 seriesInstanceUid.\r\n */\n\n/**\r\n * generateSegmentation - Generates cornerstoneTools brush data, given a stack of\r\n * imageIds, images and the cornerstoneTools brushData.\r\n *\r\n * @param  {object[]} images    An array of the cornerstone image objects.\r\n * @param  {BrushData} brushData and object containing the brushData.\r\n * @returns {type}           description\r\n */\nfunction generateSegmentation$2(images, brushData) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    includeSliceSpacing: true\n  };\n  var toolState = brushData.toolState,\n    segments = brushData.segments;\n\n  // Calculate the dimensions of the data cube.\n  var image0 = images[0];\n  var dims = {\n    x: image0.columns,\n    y: image0.rows,\n    z: images.length\n  };\n  dims.xy = dims.x * dims.y;\n  var numSegments = _getSegCount(seg, segments);\n  if (!numSegments) {\n    throw new Error(\"No segments to export!\");\n  }\n  var isMultiframe = image0.imageId.includes(\"?frame\");\n  var seg = _createSegFromImages$1(images, isMultiframe, options);\n  var _getNumberOfFramesPer = _getNumberOfFramesPerSegment(toolState, images, segments),\n    referencedFramesPerSegment = _getNumberOfFramesPer.referencedFramesPerSegment,\n    segmentIndicies = _getNumberOfFramesPer.segmentIndicies;\n  var NumberOfFrames = 0;\n  for (var i = 0; i < referencedFramesPerSegment.length; i++) {\n    NumberOfFrames += referencedFramesPerSegment[i].length;\n  }\n  seg.setNumberOfFrames(NumberOfFrames);\n  for (var _i = 0; _i < segmentIndicies.length; _i++) {\n    var segmentIndex = segmentIndicies[_i];\n    var referencedFrameIndicies = referencedFramesPerSegment[_i];\n\n    // Frame numbers start from 1.\n    var referencedFrameNumbers = referencedFrameIndicies.map(function (element) {\n      return element + 1;\n    });\n    var segment = segments[segmentIndex];\n    seg.addSegment(segment, _extractCornerstoneToolsPixelData(segmentIndex, referencedFrameIndicies, toolState, images, dims), referencedFrameNumbers);\n  }\n  seg.bitPackPixelData();\n  var segBlob = datasetToBlob$1(seg.dataset);\n  return segBlob;\n}\nfunction _extractCornerstoneToolsPixelData(segmentIndex, referencedFrames, toolState, images, dims) {\n  var pixelData = new Uint8Array(dims.xy * referencedFrames.length);\n  var pixelDataIndex = 0;\n  for (var i = 0; i < referencedFrames.length; i++) {\n    var frame = referencedFrames[i];\n    var imageId = images[frame].imageId;\n    var imageIdSpecificToolState = toolState[imageId];\n    var brushPixelData = imageIdSpecificToolState.brush.data[segmentIndex].pixelData;\n    for (var p = 0; p < brushPixelData.length; p++) {\n      pixelData[pixelDataIndex] = brushPixelData[p];\n      pixelDataIndex++;\n    }\n  }\n  return pixelData;\n}\nfunction _getNumberOfFramesPerSegment(toolState, images, segments) {\n  var segmentIndicies = [];\n  var referencedFramesPerSegment = [];\n  for (var i = 0; i < segments.length; i++) {\n    if (segments[i]) {\n      segmentIndicies.push(i);\n      referencedFramesPerSegment.push([]);\n    }\n  }\n  for (var z = 0; z < images.length; z++) {\n    var imageId = images[z].imageId;\n    var imageIdSpecificToolState = toolState[imageId];\n    for (var _i2 = 0; _i2 < segmentIndicies.length; _i2++) {\n      var segIdx = segmentIndicies[_i2];\n      if (imageIdSpecificToolState && imageIdSpecificToolState.brush && imageIdSpecificToolState.brush.data && imageIdSpecificToolState.brush.data[segIdx] && imageIdSpecificToolState.brush.data[segIdx].pixelData) {\n        referencedFramesPerSegment[_i2].push(z);\n      }\n    }\n  }\n  return {\n    referencedFramesPerSegment: referencedFramesPerSegment,\n    segmentIndicies: segmentIndicies\n  };\n}\nfunction _getSegCount(seg, segments) {\n  var numSegments = 0;\n  for (var i = 0; i < segments.length; i++) {\n    if (segments[i]) {\n      numSegments++;\n    }\n  }\n  return numSegments;\n}\n\n/**\r\n * _createSegFromImages - description\r\n *\r\n * @param  {Object[]} images    An array of the cornerstone image objects.\r\n * @param  {Boolean} isMultiframe Whether the images are multiframe.\r\n * @returns {Object}              The Seg derived dataSet.\r\n */\nfunction _createSegFromImages$1(images, isMultiframe, options) {\n  var datasets = [];\n  if (isMultiframe) {\n    var image = images[0];\n    var arrayBuffer = image.data.byteArray.buffer;\n    var dicomData = DicomMessage$1.readFile(arrayBuffer);\n    var dataset = DicomMetaDictionary$2.naturalizeDataset(dicomData.dict);\n    dataset._meta = DicomMetaDictionary$2.namifyDataset(dicomData.meta);\n    datasets.push(dataset);\n  } else {\n    for (var i = 0; i < images.length; i++) {\n      var _image = images[i];\n      var _arrayBuffer = _image.data.byteArray.buffer;\n      var _dicomData = DicomMessage$1.readFile(_arrayBuffer);\n      var _dataset = DicomMetaDictionary$2.naturalizeDataset(_dicomData.dict);\n      _dataset._meta = DicomMetaDictionary$2.namifyDataset(_dicomData.meta);\n      datasets.push(_dataset);\n    }\n  }\n  var multiframe = Normalizer$2.normalizeToDataset(datasets);\n  return new SegmentationDerivation$1([multiframe], options);\n}\n\n/**\r\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\r\n * derive cornerstoneTools toolState and brush metadata.\r\n *\r\n * @param  {string[]} imageIds    An array of the imageIds.\r\n * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.\r\n * @param {*} metadataProvider\r\n * @returns {Object}  The toolState and an object from which the\r\n *                    segment metadata can be derived.\r\n */\nfunction generateToolState$2(imageIds, arrayBuffer, metadataProvider) {\n  var dicomData = DicomMessage$1.readFile(arrayBuffer);\n  var dataset = DicomMetaDictionary$2.naturalizeDataset(dicomData.dict);\n  dataset._meta = DicomMetaDictionary$2.namifyDataset(dicomData.meta);\n  var multiframe = Normalizer$2.normalizeToDataset([dataset]);\n  var imagePlaneModule = metadataProvider.get(\"imagePlaneModule\", imageIds[0]);\n  if (!imagePlaneModule) {\n    console.warn(\"Insufficient metadata, imagePlaneModule missing.\");\n  }\n  var ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [].concat(_toConsumableArray(imagePlaneModule.rowCosines), _toConsumableArray(imagePlaneModule.columnCosines)) : [imagePlaneModule.rowCosines.x, imagePlaneModule.rowCosines.y, imagePlaneModule.rowCosines.z, imagePlaneModule.columnCosines.x, imagePlaneModule.columnCosines.y, imagePlaneModule.columnCosines.z];\n\n  // Get IOP from ref series, compute supported orientations:\n  var validOrientations = getValidOrientations$1(ImageOrientationPatient);\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = multiframe.Columns * multiframe.Rows;\n  var segMetadata = getSegmentMetadata$1(multiframe);\n  var pixelData = unpackPixelData$1(multiframe);\n  var PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;\n  var toolState = {};\n  var inPlane = true;\n  for (var i = 0; i < PerFrameFunctionalGroupsSequence.length; i++) {\n    var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];\n    var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n    var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [multiframe.Rows, multiframe.Columns]);\n    var alignedPixelDataI = alignPixelDataWithSourceData$1(pixelDataI2D, ImageOrientationPatientI, validOrientations);\n    if (!alignedPixelDataI) {\n      console.warn(\"This segmentation object is not in-plane with the source data. Bailing out of IO. It'd be better to render this with vtkjs. \");\n      inPlane = false;\n      break;\n    }\n    var segmentIndex = PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber - 1;\n    var SourceImageSequence = void 0;\n    if (SharedFunctionalGroupsSequence.DerivationImageSequence && SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence) {\n      SourceImageSequence = SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence[i];\n    } else {\n      SourceImageSequence = PerFrameFunctionalGroups.DerivationImageSequence.SourceImageSequence;\n    }\n    var imageId = getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider);\n    addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, alignedPixelDataI);\n  }\n  if (!inPlane) {\n    return;\n  }\n  return {\n    toolState: toolState,\n    segMetadata: segMetadata\n  };\n}\n\n/**\r\n * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.\r\n *\r\n * @param  {Object} multiframe The multiframe dataset.\r\n * @return {Uint8Array}      The unpacked pixelData.\r\n */\nfunction unpackPixelData$1(multiframe) {\n  var segType = multiframe.SegmentationType;\n  if (segType === \"BINARY\") {\n    return BitArray$2.unpack(multiframe.PixelData);\n  }\n  var pixelData = new Uint8Array(multiframe.PixelData);\n  var max = multiframe.MaximumFractionalValue;\n  var onlyMaxAndZero = pixelData.find(function (element) {\n    return element !== 0 && element !== max;\n  }) === undefined;\n  if (!onlyMaxAndZero) {\n    log.warn(\"This is a fractional segmentation, which is not currently supported.\");\n    return;\n  }\n  log.warn(\"This segmentation object is actually binary... processing as such.\");\n  return pixelData;\n}\n\n/**\r\n * addImageIdSpecificBrushToolState - Adds brush pixel data to cornerstoneTools\r\n * formatted toolState object.\r\n *\r\n * @param  {Object} toolState    The toolState object to modify\r\n * @param  {String} imageId      The imageId of the toolState to add the data.\r\n * @param  {Number} segmentIndex The index of the segment data being added.\r\n * @param  {Ndarray} pixelData2D  The pixelData in Ndarry 2D format.\r\n */\nfunction addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, pixelData2D) {\n  if (!toolState[imageId]) {\n    toolState[imageId] = {};\n    toolState[imageId].brush = {};\n    toolState[imageId].brush.data = [];\n  } else if (!toolState[imageId].brush) {\n    toolState[imageId].brush = {};\n    toolState[imageId].brush.data = [];\n  } else if (!toolState[imageId].brush.data) {\n    toolState[imageId].brush.data = [];\n  }\n  toolState[imageId].brush.data[segmentIndex] = {};\n  var brushDataI = toolState[imageId].brush.data[segmentIndex];\n  brushDataI.pixelData = new Uint8Array(pixelData2D.data.length);\n  var cToolsPixelData = brushDataI.pixelData;\n  for (var p = 0; p < cToolsPixelData.length; p++) {\n    if (pixelData2D.data[p]) {\n      cToolsPixelData[p] = 1;\n    } else {\n      cToolsPixelData[p] = 0;\n    }\n  }\n}\n\n/**\r\n * getImageIdOfSourceImage - Returns the Cornerstone imageId of the source image.\r\n *\r\n * @param  {Object} SourceImageSequence Sequence describing the source image.\r\n * @param  {String[]} imageIds          A list of imageIds.\r\n * @param  {Object} metadataProvider    A Cornerstone metadataProvider to query\r\n *                                      metadata from imageIds.\r\n * @return {String}                     The corresponding imageId.\r\n */\nfunction getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider) {\n  var ReferencedSOPInstanceUID = SourceImageSequence.ReferencedSOPInstanceUID,\n    ReferencedFrameNumber = SourceImageSequence.ReferencedFrameNumber;\n  return ReferencedFrameNumber ? getImageIdOfReferencedFrame$1(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance$1(ReferencedSOPInstanceUID, imageIds, metadataProvider);\n}\n\n/**\r\n * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId\r\n * corresponding to the specified sopInstanceUid for single-frame images.\r\n *\r\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\r\n * @param  {String[]} imageIds         The list of imageIds.\r\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\r\n *                                 from the cornerstone imageIds.\r\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\r\n */\nfunction getImageIdOfReferencedSingleFramedSOPInstance$1(sopInstanceUid, imageIds, metadataProvider) {\n  return imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n    if (!sopCommonModule) {\n      return;\n    }\n    return sopCommonModule.sopInstanceUID === sopInstanceUid;\n  });\n}\n\n/**\r\n * getImageIdOfReferencedFrame - Returns the imageId corresponding to the\r\n * specified sopInstanceUid and frameNumber for multi-frame images.\r\n *\r\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\r\n * @param  {Number} frameNumber      The frame number.\r\n * @param  {String} imageIds         The list of imageIds.\r\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\r\n *                                   from the cornerstone imageIds.\r\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\r\n */\nfunction getImageIdOfReferencedFrame$1(sopInstanceUid, frameNumber, imageIds, metadataProvider) {\n  var imageId = imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n    if (!sopCommonModule) {\n      return;\n    }\n    var imageIdFrameNumber = Number(imageId.split(\"frame=\")[1]);\n    return (\n      //frameNumber is zero indexed for cornerstoneDICOMImageLoader image Ids.\n      sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1\n    );\n  });\n  return imageId;\n}\n\n/**\r\n * getValidOrientations - returns an array of valid orientations.\r\n *\r\n * @param  iop - The row (0..2) an column (3..5) direction cosines.\r\n * @return  An array of valid orientations.\r\n */\nfunction getValidOrientations$1(iop) {\n  var orientations = [];\n\n  // [0,  1,  2]: 0,   0hf,   0vf\n  // [3,  4,  5]: 90,  90hf,  90vf\n  // [6, 7]:      180, 270\n\n  orientations[0] = iop;\n  orientations[1] = flipIOP$1.h(iop);\n  orientations[2] = flipIOP$1.v(iop);\n  var iop90 = rotateDirectionCosinesInPlane$1(iop, Math.PI / 2);\n  orientations[3] = iop90;\n  orientations[4] = flipIOP$1.h(iop90);\n  orientations[5] = flipIOP$1.v(iop90);\n  orientations[6] = rotateDirectionCosinesInPlane$1(iop, Math.PI);\n  orientations[7] = rotateDirectionCosinesInPlane$1(iop, 1.5 * Math.PI);\n  return orientations;\n}\n\n/**\r\n * alignPixelDataWithSourceData -\r\n *\r\n * @param pixelData2D - The data to align.\r\n * @param iop - The orientation of the image slice.\r\n * @param orientations - An array of valid imageOrientationPatient values.\r\n * @return The aligned pixelData.\r\n */\nfunction alignPixelDataWithSourceData$1(pixelData2D, iop, orientations) {\n  if (compareIOP(iop, orientations[0])) {\n    //Same orientation.\n    return pixelData2D;\n  } else if (compareIOP(iop, orientations[1])) {\n    //Flipped vertically.\n    return flipMatrix2D$1.v(pixelData2D);\n  } else if (compareIOP(iop, orientations[2])) {\n    //Flipped horizontally.\n    return flipMatrix2D$1.h(pixelData2D);\n  } else if (compareIOP(iop, orientations[3])) {\n    //Rotated 90 degrees.\n    return rotateMatrix902D$1(pixelData2D);\n  } else if (compareIOP(iop, orientations[4])) {\n    //Rotated 90 degrees and fliped horizontally.\n    return flipMatrix2D$1.h(rotateMatrix902D$1(pixelData2D));\n  } else if (compareIOP(iop, orientations[5])) {\n    //Rotated 90 degrees and fliped vertically.\n    return flipMatrix2D$1.v(rotateMatrix902D$1(pixelData2D));\n  } else if (compareIOP(iop, orientations[6])) {\n    //Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n    return rotateMatrix902D$1(rotateMatrix902D$1(pixelData2D));\n  } else if (compareIOP(iop, orientations[7])) {\n    //Rotated 270 degrees.  // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n    return rotateMatrix902D$1(rotateMatrix902D$1(rotateMatrix902D$1(pixelData2D)));\n  }\n}\nvar dx = 1e-5;\n\n/**\r\n * compareIOP - Returns true if iop1 and iop2 are equal\r\n * within a tollerance, dx.\r\n *\r\n * @param  iop1 - An ImageOrientationPatient array.\r\n * @param  iop2 - An ImageOrientationPatient array.\r\n * @return True if iop1 and iop2 are equal.\r\n */\nfunction compareIOP(iop1, iop2) {\n  return Math.abs(iop1[0] - iop2[0]) < dx && Math.abs(iop1[1] - iop2[1]) < dx && Math.abs(iop1[2] - iop2[2]) < dx && Math.abs(iop1[3] - iop2[3]) < dx && Math.abs(iop1[4] - iop2[4]) < dx && Math.abs(iop1[5] - iop2[5]) < dx;\n}\nfunction getSegmentMetadata$1(multiframe) {\n  var data = [];\n  var segmentSequence = multiframe.SegmentSequence;\n  if (Array.isArray(segmentSequence)) {\n    for (var segIdx = 0; segIdx < segmentSequence.length; segIdx++) {\n      data.push(segmentSequence[segIdx]);\n    }\n  } else {\n    // Only one segment, will be stored as an object.\n    data.push(segmentSequence);\n  }\n  return {\n    seriesInstanceUid: multiframe.ReferencedSeriesSequence.SeriesInstanceUID,\n    data: data\n  };\n}\n\nvar _utilities$orientatio = utilities.orientation,\n  rotateDirectionCosinesInPlane = _utilities$orientatio.rotateDirectionCosinesInPlane,\n  flipIOP = _utilities$orientatio.flipImageOrientationPatient,\n  flipMatrix2D = _utilities$orientatio.flipMatrix2D,\n  rotateMatrix902D = _utilities$orientatio.rotateMatrix902D,\n  nearlyEqual = _utilities$orientatio.nearlyEqual;\nvar datasetToBlob = utilities.datasetToBlob,\n  BitArray$1 = utilities.BitArray,\n  DicomMessage = utilities.DicomMessage,\n  DicomMetaDictionary$1 = utilities.DicomMetaDictionary;\nvar Normalizer$1 = normalizers.Normalizer;\nvar SegmentationDerivation = derivations.Segmentation;\nvar _utilities$compressio = utilities.compression,\n  encode = _utilities$compressio.encode,\n  decode = _utilities$compressio.decode;\nvar Segmentation$2 = {\n  generateSegmentation: generateSegmentation$1,\n  generateToolState: generateToolState$1,\n  fillSegmentation: fillSegmentation$1\n};\n\n/**\r\n *\r\n * @typedef {Object} BrushData\r\n * @property {Object} toolState - The cornerstoneTools global toolState.\r\n * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the\r\n *                                 seriesInstanceUid.\r\n */\n\nvar generateSegmentationDefaultOptions = {\n  includeSliceSpacing: true,\n  rleEncode: true\n};\n\n/**\r\n * generateSegmentation - Generates cornerstoneTools brush data, given a stack of\r\n * imageIds, images and the cornerstoneTools brushData.\r\n *\r\n * @param  {object[]} images An array of cornerstone images that contain the source\r\n *                           data under `image.data.byteArray.buffer`.\r\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\r\n * @param  {Object} userOptions Options to pass to the segmentation derivation and `fillSegmentation`.\r\n * @returns {Blob}\r\n */\nfunction generateSegmentation$1(images, inputLabelmaps3D) {\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var isMultiframe = images[0].imageId.includes(\"?frame\");\n  var segmentation = _createSegFromImages(images, isMultiframe, userOptions);\n  return fillSegmentation$1(segmentation, inputLabelmaps3D, userOptions);\n}\n\n/**\r\n * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.\r\n *\r\n * @param  {object[]} segmentation An empty segmentation derived dataset.\r\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\r\n * @param  {Object} userOptions Options object to override default options.\r\n * @returns {Blob}           description\r\n */\nfunction fillSegmentation$1(segmentation, inputLabelmaps3D) {\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = Object.assign({}, generateSegmentationDefaultOptions, userOptions);\n\n  // Use another variable so we don't redefine labelmaps3D.\n  var labelmaps3D = Array.isArray(inputLabelmaps3D) ? inputLabelmaps3D : [inputLabelmaps3D];\n  var numberOfFrames = 0;\n  var referencedFramesPerLabelmap = [];\n  var _loop = function _loop() {\n    var labelmap3D = labelmaps3D[labelmapIndex];\n    var labelmaps2D = labelmap3D.labelmaps2D,\n      metadata = labelmap3D.metadata;\n    var referencedFramesPerSegment = [];\n    for (var i = 1; i < metadata.length; i++) {\n      if (metadata[i]) {\n        referencedFramesPerSegment[i] = [];\n      }\n    }\n    var _loop2 = function _loop2(_i) {\n      var labelmap2D = labelmaps2D[_i];\n      if (labelmaps2D[_i]) {\n        var segmentsOnLabelmap = labelmap2D.segmentsOnLabelmap;\n        segmentsOnLabelmap.forEach(function (segmentIndex) {\n          if (segmentIndex !== 0) {\n            referencedFramesPerSegment[segmentIndex].push(_i);\n            numberOfFrames++;\n          }\n        });\n      }\n    };\n    for (var _i = 0; _i < labelmaps2D.length; _i++) {\n      _loop2(_i);\n    }\n    referencedFramesPerLabelmap[labelmapIndex] = referencedFramesPerSegment;\n  };\n  for (var labelmapIndex = 0; labelmapIndex < labelmaps3D.length; labelmapIndex++) {\n    _loop();\n  }\n  segmentation.setNumberOfFrames(numberOfFrames);\n  for (var _labelmapIndex = 0; _labelmapIndex < labelmaps3D.length; _labelmapIndex++) {\n    var referencedFramesPerSegment = referencedFramesPerLabelmap[_labelmapIndex];\n    var labelmap3D = labelmaps3D[_labelmapIndex];\n    var metadata = labelmap3D.metadata;\n    for (var segmentIndex = 1; segmentIndex < referencedFramesPerSegment.length; segmentIndex++) {\n      var referencedFrameIndicies = referencedFramesPerSegment[segmentIndex];\n      if (referencedFrameIndicies) {\n        // Frame numbers start from 1.\n        var referencedFrameNumbers = referencedFrameIndicies.map(function (element) {\n          return element + 1;\n        });\n        var segmentMetadata = metadata[segmentIndex];\n        var labelmaps = _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies);\n        segmentation.addSegmentFromLabelmap(segmentMetadata, labelmaps, segmentIndex, referencedFrameNumbers);\n      }\n    }\n  }\n  if (options.rleEncode) {\n    var rleEncodedFrames = encode(segmentation.dataset.PixelData, numberOfFrames, segmentation.dataset.Rows, segmentation.dataset.Columns);\n\n    // Must use fractional now to RLE encode, as the DICOM standard only allows BitStored && BitsAllocated\n    // to be 1 for BINARY. This is not ideal and there should be a better format for compression in this manner\n    // added to the standard.\n    segmentation.assignToDataset({\n      BitsAllocated: \"8\",\n      BitsStored: \"8\",\n      HighBit: \"7\",\n      SegmentationType: \"FRACTIONAL\",\n      SegmentationFractionalType: \"PROBABILITY\",\n      MaximumFractionalValue: \"255\"\n    });\n    segmentation.dataset._meta.TransferSyntaxUID = {\n      Value: [\"1.2.840.10008.1.2.5\"],\n      vr: \"UI\"\n    };\n    segmentation.dataset._vrMap.PixelData = \"OB\";\n    segmentation.dataset.PixelData = rleEncodedFrames;\n  } else {\n    // If no rleEncoding, at least bitpack the data.\n    segmentation.bitPackPixelData();\n  }\n  var segBlob = datasetToBlob(segmentation.dataset);\n  return segBlob;\n}\nfunction _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies) {\n  var labelmaps2D = labelmap3D.labelmaps2D;\n  var labelmaps = [];\n  for (var i = 0; i < referencedFrameIndicies.length; i++) {\n    var frame = referencedFrameIndicies[i];\n    labelmaps.push(labelmaps2D[frame].pixelData);\n  }\n  return labelmaps;\n}\n\n/**\r\n * _createSegFromImages - description\r\n *\r\n * @param  {Object[]} images    An array of the cornerstone image objects.\r\n * @param  {Boolean} isMultiframe Whether the images are multiframe.\r\n * @returns {Object}              The Seg derived dataSet.\r\n */\nfunction _createSegFromImages(images, isMultiframe, options) {\n  var datasets = [];\n  if (isMultiframe) {\n    var image = images[0];\n    var arrayBuffer = image.data.byteArray.buffer;\n    var dicomData = DicomMessage.readFile(arrayBuffer);\n    var dataset = DicomMetaDictionary$1.naturalizeDataset(dicomData.dict);\n    dataset._meta = DicomMetaDictionary$1.namifyDataset(dicomData.meta);\n    datasets.push(dataset);\n  } else {\n    for (var i = 0; i < images.length; i++) {\n      var _image = images[i];\n      var _arrayBuffer = _image.data.byteArray.buffer;\n      var _dicomData = DicomMessage.readFile(_arrayBuffer);\n      var _dataset = DicomMetaDictionary$1.naturalizeDataset(_dicomData.dict);\n      _dataset._meta = DicomMetaDictionary$1.namifyDataset(_dicomData.meta);\n      datasets.push(_dataset);\n    }\n  }\n  var multiframe = Normalizer$1.normalizeToDataset(datasets);\n  return new SegmentationDerivation([multiframe], options);\n}\n\n/**\r\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\r\n * derive cornerstoneTools toolState and brush metadata.\r\n *\r\n * @param  {string[]} imageIds - An array of the imageIds.\r\n * @param  {ArrayBuffer} arrayBuffer - The SEG arrayBuffer.\r\n * @param  {*} metadataProvider.\r\n * @param  {bool} skipOverlapping - skip checks for overlapping segs, default value false.\r\n * @param  {number} tolerance - default value 1.e-3.\r\n *\r\n * @return {[]ArrayBuffer}a list of array buffer for each labelMap\r\n * @return {Object} an object from which the segment metadata can be derived\r\n * @return {[][][]} 2D list containing the track of segments per frame\r\n * @return {[][][]} 3D list containing the track of segments per frame for each labelMap\r\n *                  (available only for the overlapping case).\r\n */\nfunction generateToolState$1(imageIds, arrayBuffer, metadataProvider) {\n  var skipOverlapping = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var tolerance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  var dicomData = DicomMessage.readFile(arrayBuffer);\n  var dataset = DicomMetaDictionary$1.naturalizeDataset(dicomData.dict);\n  dataset._meta = DicomMetaDictionary$1.namifyDataset(dicomData.meta);\n  var multiframe = Normalizer$1.normalizeToDataset([dataset]);\n  var imagePlaneModule = metadataProvider.get(\"imagePlaneModule\", imageIds[0]);\n  var generalSeriesModule = metadataProvider.get(\"generalSeriesModule\", imageIds[0]);\n  var SeriesInstanceUID = generalSeriesModule.seriesInstanceUID;\n  if (!imagePlaneModule) {\n    console.warn(\"Insufficient metadata, imagePlaneModule missing.\");\n  }\n  var ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [].concat(_toConsumableArray(imagePlaneModule.rowCosines), _toConsumableArray(imagePlaneModule.columnCosines)) : [imagePlaneModule.rowCosines.x, imagePlaneModule.rowCosines.y, imagePlaneModule.rowCosines.z, imagePlaneModule.columnCosines.x, imagePlaneModule.columnCosines.y, imagePlaneModule.columnCosines.z];\n\n  // Get IOP from ref series, compute supported orientations:\n  var validOrientations = getValidOrientations(ImageOrientationPatient);\n  var sliceLength = multiframe.Columns * multiframe.Rows;\n  var segMetadata = getSegmentMetadata(multiframe, SeriesInstanceUID);\n  var TransferSyntaxUID = multiframe._meta.TransferSyntaxUID.Value[0];\n  var pixelData;\n  if (TransferSyntaxUID === \"1.2.840.10008.1.2.5\") {\n    var rleEncodedFrames = Array.isArray(multiframe.PixelData) ? multiframe.PixelData : [multiframe.PixelData];\n    pixelData = decode(rleEncodedFrames, multiframe.Rows, multiframe.Columns);\n    if (multiframe.BitsStored === 1) {\n      console.warn(\"No implementation for rle + bitbacking.\");\n      return;\n    }\n  } else {\n    pixelData = unpackPixelData(multiframe);\n    if (!pixelData) {\n      throw new Error(\"Fractional segmentations are not yet supported\");\n    }\n  }\n  var orientation = checkOrientation(multiframe, validOrientations, [imagePlaneModule.rows, imagePlaneModule.columns, imageIds.length], tolerance);\n  var overlapping = false;\n  if (!skipOverlapping) {\n    overlapping = checkSEGsOverlapping(pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance);\n  }\n  var insertFunction;\n  switch (orientation) {\n    case \"Planar\":\n      if (overlapping) {\n        insertFunction = insertOverlappingPixelDataPlanar;\n      } else {\n        insertFunction = insertPixelDataPlanar;\n      }\n      break;\n    case \"Perpendicular\":\n      //insertFunction = insertPixelDataPerpendicular;\n      throw new Error(\"Segmentations orthogonal to the acquisition plane of the source data are not yet supported.\");\n    case \"Oblique\":\n      throw new Error(\"Segmentations oblique to the acquisition plane of the source data are not yet supported.\");\n  }\n\n  /* if SEGs are overlapping:\r\n  1) the labelmapBuffer will contain M volumes which have non-overlapping segments;\r\n  2) segmentsOnFrame will have M * numberOfFrames values to track in which labelMap are the segments;\r\n  3) insertFunction will return the number of LabelMaps\r\n  4) generateToolState return is an array*/\n\n  var segmentsOnFrameArray = [];\n  segmentsOnFrameArray[0] = [];\n  var segmentsOnFrame = [];\n  var arrayBufferLength = sliceLength * imageIds.length * 2; // 2 bytes per label voxel in cst4.\n  var labelmapBufferArray = [];\n  labelmapBufferArray[0] = new ArrayBuffer(arrayBufferLength);\n  insertFunction(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance);\n  return {\n    labelmapBufferArray: labelmapBufferArray,\n    segMetadata: segMetadata,\n    segmentsOnFrame: segmentsOnFrame,\n    segmentsOnFrameArray: segmentsOnFrameArray\n  };\n}\n\n// function insertPixelDataPerpendicular(\n//     segmentsOnFrame,\n//     labelmapBuffer,\n//     pixelData,\n//     multiframe,\n//     imageIds,\n//     validOrientations,\n//     metadataProvider\n// ) {\n//     const {\n//         SharedFunctionalGroupsSequence,\n//         PerFrameFunctionalGroupsSequence,\n//         Rows,\n//         Columns\n//     } = multiframe;\n\n//     const firstImagePlaneModule = metadataProvider.get(\n//         \"imagePlaneModule\",\n//         imageIds[0]\n//     );\n\n//     const lastImagePlaneModule = metadataProvider.get(\n//         \"imagePlaneModule\",\n//         imageIds[imageIds.length - 1]\n//     );\n\n//     console.log(firstImagePlaneModule);\n//     console.log(lastImagePlaneModule);\n\n//     const corners = [\n//         ...getCorners(firstImagePlaneModule),\n//         ...getCorners(lastImagePlaneModule)\n//     ];\n\n//     console.log(`corners:`);\n//     console.log(corners);\n\n//     const indexToWorld = mat4.create();\n\n//     const ippFirstFrame = firstImagePlaneModule.imagePositionPatient;\n//     const rowCosines = Array.isArray(firstImagePlaneModule.rowCosines)\n//         ? [...firstImagePlaneModule.rowCosines]\n//         : [\n//               firstImagePlaneModule.rowCosines.x,\n//               firstImagePlaneModule.rowCosines.y,\n//               firstImagePlaneModule.rowCosines.z\n//           ];\n\n//     const columnCosines = Array.isArray(firstImagePlaneModule.columnCosines)\n//         ? [...firstImagePlaneModule.columnCosines]\n//         : [\n//               firstImagePlaneModule.columnCosines.x,\n//               firstImagePlaneModule.columnCosines.y,\n//               firstImagePlaneModule.columnCosines.z\n//           ];\n\n//     const { pixelSpacing } = firstImagePlaneModule;\n\n//     mat4.set(\n//         indexToWorld,\n//         // Column 1\n//         0,\n//         0,\n//         0,\n//         ippFirstFrame[0],\n//         // Column 2\n//         0,\n//         0,\n//         0,\n//         ippFirstFrame[1],\n//         // Column 3\n//         0,\n//         0,\n//         0,\n//         ippFirstFrame[2],\n//         // Column 4\n//         0,\n//         0,\n//         0,\n//         1\n//     );\n\n//     // TODO -> Get origin and (x,y,z) increments to build a translation matrix:\n//     // TODO -> Equation C.7.6.2.1-1\n\n//     // | cx*di rx* Xx 0 |  |x|\n//     // | cy*di ry Xy 0 |  |y|\n//     // | cz*di rz Xz 0 |  |z|\n//     // | tx ty tz 1 |  |1|\n\n//     // const [\n//     //     0, 0 , 0 , 0,\n//     //     0, 0 , 0 , 0,\n//     //     0, 0 , 0 , 0,\n//     //     ipp[0], ipp[1] , ipp[2] , 1,\n//     // ]\n\n//     // Each frame:\n\n//     // Find which corner the first voxel lines up with (one of 8 corners.)\n\n//     // Find how i,j,k orient with respect to source volume.\n//     // Go through each frame, find location in source to start, and whether to increment +/ix,+/-y,+/-z\n//     //   through each voxel.\n\n//     // [1,0,0,0,1,0]\n\n//     // const [\n\n//     // ]\n\n//     // Invert transformation matrix to get worldToIndex\n\n//     // Apply world to index on each point to fill up the matrix.\n\n//     // const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence\n//     //     ? SharedFunctionalGroupsSequence.PlaneOrientationSequence\n//     //           .ImageOrientationPatient\n//     //     : undefined;\n//     // const sliceLength = Columns * Rows;\n// }\n\n// function getCorners(imagePlaneModule) {\n//     // console.log(imagePlaneModule);\n\n//     const {\n//         rows,\n//         columns,\n//         rowCosines,\n//         columnCosines,\n//         imagePositionPatient: ipp,\n//         rowPixelSpacing,\n//         columnPixelSpacing\n//     } = imagePlaneModule;\n\n//     const rowLength = columns * columnPixelSpacing;\n//     const columnLength = rows * rowPixelSpacing;\n\n//     const entireRowVector = [\n//         rowLength * columnCosines[0],\n//         rowLength * columnCosines[1],\n//         rowLength * columnCosines[2]\n//     ];\n\n//     const entireColumnVector = [\n//         columnLength * rowCosines[0],\n//         columnLength * rowCosines[1],\n//         columnLength * rowCosines[2]\n//     ];\n\n//     const topLeft = [ipp[0], ipp[1], ipp[2]];\n//     const topRight = [\n//         topLeft[0] + entireRowVector[0],\n//         topLeft[1] + entireRowVector[1],\n//         topLeft[2] + entireRowVector[2]\n//     ];\n//     const bottomLeft = [\n//         topLeft[0] + entireColumnVector[0],\n//         topLeft[1] + entireColumnVector[1],\n//         topLeft[2] + entireColumnVector[2]\n//     ];\n\n//     const bottomRight = [\n//         bottomLeft[0] + entireRowVector[0],\n//         bottomLeft[1] + entireRowVector[1],\n//         bottomLeft[2] + entireRowVector[2]\n//     ];\n\n//     return [topLeft, topRight, bottomLeft, bottomRight];\n// }\n\n/**\r\n * Find the reference frame of the segmentation frame in the source data.\r\n *\r\n * @param  {Object}      multiframe        dicom metadata\r\n * @param  {Int}         frameSegment      frame dicom index\r\n * @param  {String[]}    imageIds          A list of imageIds.\r\n * @param  {Object}      metadataProvider  A Cornerstone metadataProvider to query\r\n *                                         metadata from imageIds.\r\n * @param  {Float}       tolerance         The tolerance parameter\r\n *\r\n * @returns {String}     Returns the imageId\r\n */\nfunction findReferenceSourceImageId(multiframe, frameSegment, imageIds, metadataProvider, tolerance) {\n  var imageId = undefined;\n  if (!multiframe) {\n    return imageId;\n  }\n  var FrameOfReferenceUID = multiframe.FrameOfReferenceUID,\n    PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n    SourceImageSequence = multiframe.SourceImageSequence,\n    ReferencedSeriesSequence = multiframe.ReferencedSeriesSequence;\n  if (!PerFrameFunctionalGroupsSequence || PerFrameFunctionalGroupsSequence.length === 0) {\n    return imageId;\n  }\n  var PerFrameFunctionalGroup = PerFrameFunctionalGroupsSequence[frameSegment];\n  if (!PerFrameFunctionalGroup) {\n    return imageId;\n  }\n  var frameSourceImageSequence = undefined;\n  if (SourceImageSequence && SourceImageSequence.length !== 0) {\n    frameSourceImageSequence = SourceImageSequence[frameSegment];\n  } else if (PerFrameFunctionalGroup.DerivationImageSequence) {\n    var DerivationImageSequence = PerFrameFunctionalGroup.DerivationImageSequence;\n    if (Array.isArray(DerivationImageSequence)) {\n      if (DerivationImageSequence.length !== 0) {\n        DerivationImageSequence = DerivationImageSequence[0];\n      } else {\n        DerivationImageSequence = undefined;\n      }\n    }\n    if (DerivationImageSequence) {\n      frameSourceImageSequence = DerivationImageSequence.SourceImageSequence;\n      if (Array.isArray(frameSourceImageSequence)) {\n        if (frameSourceImageSequence.length !== 0) {\n          frameSourceImageSequence = frameSourceImageSequence[0];\n        } else {\n          frameSourceImageSequence = undefined;\n        }\n      }\n    }\n  }\n  if (frameSourceImageSequence) {\n    imageId = getImageIdOfSourceImagebySourceImageSequence(frameSourceImageSequence, imageIds, metadataProvider);\n  }\n  if (imageId === undefined && ReferencedSeriesSequence) {\n    var referencedSeriesSequence = Array.isArray(ReferencedSeriesSequence) ? ReferencedSeriesSequence[0] : ReferencedSeriesSequence;\n    var ReferencedSeriesInstanceUID = referencedSeriesSequence.SeriesInstanceUID;\n    imageId = getImageIdOfSourceImagebyGeometry(ReferencedSeriesInstanceUID, FrameOfReferenceUID, PerFrameFunctionalGroup, imageIds, metadataProvider, tolerance);\n  }\n  return imageId;\n}\n\n/**\r\n * Checks if there is any overlapping segmentations.\r\n *  @returns {boolean} Returns a flag if segmentations overlapping\r\n */\n\nfunction checkSEGsOverlapping(pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n    PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n    SegmentSequence = multiframe.SegmentSequence,\n    Rows = multiframe.Rows,\n    Columns = multiframe.Columns;\n  var numberOfSegs = SegmentSequence.length;\n  if (numberOfSegs < 2) {\n    return false;\n  }\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = Columns * Rows;\n  var groupsLen = PerFrameFunctionalGroupsSequence.length;\n\n  /** sort groupsLen to have all the segments for each frame in an array\r\n   * frame 2 : 1, 2\r\n   * frame 4 : 1, 3\r\n   * frame 5 : 4\r\n   */\n\n  var frameSegmentsMapping = new Map();\n  var _loop3 = function _loop3() {\n      var segmentIndex = getSegmentIndex(multiframe, frameSegment);\n      if (segmentIndex === undefined) {\n        console.warn(\"Could not retrieve the segment index for frame segment \" + frameSegment + \", skipping this frame.\");\n        return 0; // continue\n      }\n      var imageId = findReferenceSourceImageId(multiframe, frameSegment, imageIds, metadataProvider, tolerance);\n      if (!imageId) {\n        console.warn(\"Image not present in stack, can't import frame : \" + frameSegment + \".\");\n        return 0; // continue\n      }\n      var imageIdIndex = imageIds.findIndex(function (element) {\n        return element === imageId;\n      });\n      if (frameSegmentsMapping.has(imageIdIndex)) {\n        var segmentArray = frameSegmentsMapping.get(imageIdIndex);\n        if (!segmentArray.includes(frameSegment)) {\n          segmentArray.push(frameSegment);\n          frameSegmentsMapping.set(imageIdIndex, segmentArray);\n        }\n      } else {\n        frameSegmentsMapping.set(imageIdIndex, [frameSegment]);\n      }\n    },\n    _ret;\n  for (var frameSegment = 0; frameSegment < groupsLen; ++frameSegment) {\n    _ret = _loop3();\n    if (_ret === 0) continue;\n  }\n  var _iterator = _createForOfIteratorHelper(frameSegmentsMapping.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        role = _step$value[1];\n      var temp2DArray = new Uint16Array(sliceLength).fill(0);\n      for (var i = 0; i < role.length; ++i) {\n        var _frameSegment = role[i];\n        var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[_frameSegment];\n        var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n        var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, _frameSegment * sliceLength, sliceLength), [Rows, Columns]);\n        var alignedPixelDataI = alignPixelDataWithSourceData(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);\n        if (!alignedPixelDataI) {\n          console.warn(\"Individual SEG frames are out of plane with respect to the first SEG frame, this is not yet supported, skipping this frame.\");\n          continue;\n        }\n        var data = alignedPixelDataI.data;\n        for (var j = 0, len = data.length; j < len; ++j) {\n          if (data[j] !== 0) {\n            temp2DArray[j]++;\n            if (temp2DArray[j] > 1) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n}\nfunction insertOverlappingPixelDataPlanar(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n    PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n    Rows = multiframe.Rows,\n    Columns = multiframe.Columns;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = Columns * Rows;\n  var arrayBufferLength = sliceLength * imageIds.length * 2; // 2 bytes per label voxel in cst4.\n\n  // indicate the number of labelMaps\n  var M = 1;\n\n  // indicate the current labelMap array index;\n  var m = 0;\n\n  // temp array for checking overlaps\n  var tempBuffer = labelmapBufferArray[m].slice(0);\n\n  // temp list for checking overlaps\n  var tempSegmentsOnFrame = cloneDeep(segmentsOnFrameArray[m]);\n\n  /** split overlapping SEGs algorithm for each segment:\r\n   *  A) copy the labelmapBuffer in the array with index 0\r\n   *  B) add the segment pixel per pixel on the copied buffer from (A)\r\n   *  C) if no overlap, copy the results back on the orignal array from (A)\r\n   *  D) if overlap, repeat increasing the index m up to M (if out of memory, add new buffer in the array and M++);\r\n   */\n\n  var numberOfSegs = multiframe.SegmentSequence.length;\n  for (var segmentIndexToProcess = 1; segmentIndexToProcess <= numberOfSegs; ++segmentIndexToProcess) {\n    var _loop4 = function _loop4(_i2) {\n        var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[_i2];\n        var segmentIndex = getSegmentIndex(multiframe, _i2);\n        if (segmentIndex === undefined) {\n          throw new Error(\"Could not retrieve the segment index. Aborting segmentation loading.\");\n        }\n        if (segmentIndex !== segmentIndexToProcess) {\n          i = _i2;\n          return 0; // continue\n        }\n        var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n        var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, _i2 * sliceLength, sliceLength), [Rows, Columns]);\n        var alignedPixelDataI = alignPixelDataWithSourceData(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);\n        if (!alignedPixelDataI) {\n          throw new Error(\"Individual SEG frames are out of plane with respect to the first SEG frame. \" + \"This is not yet supported. Aborting segmentation loading.\");\n        }\n        var imageId = findReferenceSourceImageId(multiframe, _i2, imageIds, metadataProvider, tolerance);\n        if (!imageId) {\n          console.warn(\"Image not present in stack, can't import frame : \" + _i2 + \".\");\n          i = _i2;\n          return 0; // continue\n        }\n        var sourceImageMetadata = metadataProvider.get(\"instance\", imageId);\n        if (Rows !== sourceImageMetadata.Rows || Columns !== sourceImageMetadata.Columns) {\n          throw new Error(\"Individual SEG frames have different geometry dimensions (Rows and Columns) \" + \"respect to the source image reference frame. This is not yet supported. \" + \"Aborting segmentation loading. \");\n        }\n        var imageIdIndex = imageIds.findIndex(function (element) {\n          return element === imageId;\n        });\n        var byteOffset = sliceLength * 2 * imageIdIndex; // 2 bytes/pixel\n\n        var labelmap2DView = new Uint16Array(tempBuffer, byteOffset, sliceLength);\n        var data = alignedPixelDataI.data;\n        var segmentOnFrame = false;\n        for (var j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {\n          if (data[j]) {\n            if (labelmap2DView[j] !== 0) {\n              m++;\n              if (m >= M) {\n                labelmapBufferArray[m] = new ArrayBuffer(arrayBufferLength);\n                segmentsOnFrameArray[m] = [];\n                M++;\n              }\n              tempBuffer = labelmapBufferArray[m].slice(0);\n              tempSegmentsOnFrame = cloneDeep(segmentsOnFrameArray[m]);\n              _i2 = 0;\n              break;\n            } else {\n              labelmap2DView[j] = segmentIndex;\n              segmentOnFrame = true;\n            }\n          }\n        }\n        if (segmentOnFrame) {\n          if (!tempSegmentsOnFrame[imageIdIndex]) {\n            tempSegmentsOnFrame[imageIdIndex] = [];\n          }\n          tempSegmentsOnFrame[imageIdIndex].push(segmentIndex);\n          if (!segmentsOnFrame[imageIdIndex]) {\n            segmentsOnFrame[imageIdIndex] = [];\n          }\n          segmentsOnFrame[imageIdIndex].push(segmentIndex);\n        }\n        i = _i2;\n      },\n      _ret2;\n    for (var i = 0, groupsLen = PerFrameFunctionalGroupsSequence.length; i < groupsLen; ++i) {\n      _ret2 = _loop4(i);\n      if (_ret2 === 0) continue;\n    }\n    labelmapBufferArray[m] = tempBuffer.slice(0);\n    segmentsOnFrameArray[m] = cloneDeep(tempSegmentsOnFrame);\n\n    // reset temp variables/buffers for new segment\n    m = 0;\n    tempBuffer = labelmapBufferArray[m].slice(0);\n    tempSegmentsOnFrame = cloneDeep(segmentsOnFrameArray[m]);\n  }\n}\nvar getSegmentIndex = function getSegmentIndex(multiframe, frame) {\n  var PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n    SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;\n  var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[frame];\n  return PerFrameFunctionalGroups && PerFrameFunctionalGroups.SegmentIdentificationSequence ? PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber : SharedFunctionalGroupsSequence.SegmentIdentificationSequence ? SharedFunctionalGroupsSequence.SegmentIdentificationSequence.ReferencedSegmentNumber : undefined;\n};\nfunction insertPixelDataPlanar(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n    PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n    Rows = multiframe.Rows,\n    Columns = multiframe.Columns;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = Columns * Rows;\n  var _loop5 = function _loop5() {\n    var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];\n    var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n    var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [Rows, Columns]);\n    var alignedPixelDataI = alignPixelDataWithSourceData(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);\n    if (!alignedPixelDataI) {\n      throw new Error(\"Individual SEG frames are out of plane with respect to the first SEG frame. \" + \"This is not yet supported. Aborting segmentation loading.\");\n    }\n    var segmentIndex = getSegmentIndex(multiframe, i);\n    if (segmentIndex === undefined) {\n      throw new Error(\"Could not retrieve the segment index. Aborting segmentation loading.\");\n    }\n    var imageId = findReferenceSourceImageId(multiframe, i, imageIds, metadataProvider, tolerance);\n    if (!imageId) {\n      console.warn(\"Image not present in stack, can't import frame : \" + i + \".\");\n      return 1; // continue\n    }\n    var sourceImageMetadata = metadataProvider.get(\"instance\", imageId);\n    if (Rows !== sourceImageMetadata.Rows || Columns !== sourceImageMetadata.Columns) {\n      throw new Error(\"Individual SEG frames have different geometry dimensions (Rows and Columns) \" + \"respect to the source image reference frame. This is not yet supported. \" + \"Aborting segmentation loading. \");\n    }\n    var imageIdIndex = imageIds.findIndex(function (element) {\n      return element === imageId;\n    });\n    var byteOffset = sliceLength * 2 * imageIdIndex; // 2 bytes/pixel\n\n    var labelmap2DView = new Uint16Array(labelmapBufferArray[0], byteOffset, sliceLength);\n    var data = alignedPixelDataI.data;\n    for (var j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {\n      if (data[j]) {\n        for (var x = j; x < len; ++x) {\n          if (data[x]) {\n            labelmap2DView[x] = segmentIndex;\n          }\n        }\n        if (!segmentsOnFrame[imageIdIndex]) {\n          segmentsOnFrame[imageIdIndex] = [];\n        }\n        segmentsOnFrame[imageIdIndex].push(segmentIndex);\n        break;\n      }\n    }\n  };\n  for (var i = 0, groupsLen = PerFrameFunctionalGroupsSequence.length; i < groupsLen; ++i) {\n    if (_loop5()) continue;\n  }\n}\nfunction checkOrientation(multiframe, validOrientations, sourceDataDimensions, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n    PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n\n  // Check if in plane.\n  var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[0];\n  var iop = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n  var inPlane = validOrientations.some(function (operation) {\n    return compareArrays(iop, operation, tolerance);\n  });\n  if (inPlane) {\n    return \"Planar\";\n  }\n  if (checkIfPerpendicular(iop, validOrientations[0], tolerance) && sourceDataDimensions.includes(multiframe.Rows) && sourceDataDimensions.includes(multiframe.Columns)) {\n    // Perpendicular and fits on same grid.\n    return \"Perpendicular\";\n  }\n  return \"Oblique\";\n}\n\n/**\r\n * checkIfPerpendicular - Returns true if iop1 and iop2 are perpendicular\r\n * within a tolerance.\r\n *\r\n * @param  {Number[6]} iop1 An ImageOrientationPatient array.\r\n * @param  {Number[6]} iop2 An ImageOrientationPatient array.\r\n * @param  {Number} tolerance.\r\n * @return {Boolean} True if iop1 and iop2 are equal.\r\n */\nfunction checkIfPerpendicular(iop1, iop2, tolerance) {\n  var absDotColumnCosines = Math.abs(iop1[0] * iop2[0] + iop1[1] * iop2[1] + iop1[2] * iop2[2]);\n  var absDotRowCosines = Math.abs(iop1[3] * iop2[3] + iop1[4] * iop2[4] + iop1[5] * iop2[5]);\n  return (absDotColumnCosines < tolerance || Math.abs(absDotColumnCosines - 1) < tolerance) && (absDotRowCosines < tolerance || Math.abs(absDotRowCosines - 1) < tolerance);\n}\n\n/**\r\n * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.\r\n *\r\n * @param  {Object} multiframe The multiframe dataset.\r\n * @return {Uint8Array}      The unpacked pixelData.\r\n */\nfunction unpackPixelData(multiframe) {\n  var segType = multiframe.SegmentationType;\n  var data;\n  if (Array.isArray(multiframe.PixelData)) {\n    data = multiframe.PixelData[0];\n  } else {\n    data = multiframe.PixelData;\n  }\n  if (data === undefined) {\n    log.error(\"This segmentation pixeldata is undefined.\");\n  }\n  if (segType === \"BINARY\") {\n    return BitArray$1.unpack(data);\n  }\n  var pixelData = new Uint8Array(data);\n  var max = multiframe.MaximumFractionalValue;\n  var onlyMaxAndZero = pixelData.find(function (element) {\n    return element !== 0 && element !== max;\n  }) === undefined;\n  if (!onlyMaxAndZero) {\n    // This is a fractional segmentation, which is not currently supported.\n    return;\n  }\n  log.warn(\"This segmentation object is actually binary... processing as such.\");\n  return pixelData;\n}\n\n/**\r\n * getImageIdOfSourceImagebySourceImageSequence - Returns the Cornerstone imageId of the source image.\r\n *\r\n * @param  {Object}   SourceImageSequence  Sequence describing the source image.\r\n * @param  {String[]} imageIds             A list of imageIds.\r\n * @param  {Object}   metadataProvider     A Cornerstone metadataProvider to query\r\n *                                         metadata from imageIds.\r\n * @return {String}                        The corresponding imageId.\r\n */\nfunction getImageIdOfSourceImagebySourceImageSequence(SourceImageSequence, imageIds, metadataProvider) {\n  var ReferencedSOPInstanceUID = SourceImageSequence.ReferencedSOPInstanceUID,\n    ReferencedFrameNumber = SourceImageSequence.ReferencedFrameNumber;\n  return ReferencedFrameNumber ? getImageIdOfReferencedFrame(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance(ReferencedSOPInstanceUID, imageIds, metadataProvider);\n}\n\n/**\r\n * getImageIdOfSourceImagebyGeometry - Returns the Cornerstone imageId of the source image.\r\n *\r\n * @param  {String}    ReferencedSeriesInstanceUID    Referenced series of the source image.\r\n * @param  {String}    FrameOfReferenceUID            Frame of reference.\r\n * @param  {Object}    PerFrameFunctionalGroup        Sequence describing segmentation reference attributes per frame.\r\n * @param  {String[]}  imageIds                       A list of imageIds.\r\n * @param  {Object}    metadataProvider               A Cornerstone metadataProvider to query\r\n * @param  {Float}     tolerance                      The tolerance parameter\r\n *\r\n * @return {String}                                   The corresponding imageId.\r\n */\nfunction getImageIdOfSourceImagebyGeometry(ReferencedSeriesInstanceUID, FrameOfReferenceUID, PerFrameFunctionalGroup, imageIds, metadataProvider, tolerance) {\n  if (ReferencedSeriesInstanceUID === undefined || PerFrameFunctionalGroup.PlanePositionSequence === undefined || PerFrameFunctionalGroup.PlanePositionSequence[0] === undefined || PerFrameFunctionalGroup.PlanePositionSequence[0].ImagePositionPatient === undefined) {\n    return undefined;\n  }\n  for (var imageIdsIndexc = 0; imageIdsIndexc < imageIds.length; ++imageIdsIndexc) {\n    var sourceImageMetadata = metadataProvider.get(\"instance\", imageIds[imageIdsIndexc]);\n    if (sourceImageMetadata === undefined || sourceImageMetadata.ImagePositionPatient === undefined || sourceImageMetadata.FrameOfReferenceUID !== FrameOfReferenceUID || sourceImageMetadata.SeriesInstanceUID !== ReferencedSeriesInstanceUID) {\n      continue;\n    }\n    if (compareArrays(PerFrameFunctionalGroup.PlanePositionSequence[0].ImagePositionPatient, sourceImageMetadata.ImagePositionPatient, tolerance)) {\n      return imageIds[imageIdsIndexc];\n    }\n  }\n}\n\n/**\r\n * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId\r\n * corresponding to the specified sopInstanceUid for single-frame images.\r\n *\r\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\r\n * @param  {String[]} imageIds         The list of imageIds.\r\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\r\n *                                 from the cornerstone imageIds.\r\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\r\n */\nfunction getImageIdOfReferencedSingleFramedSOPInstance(sopInstanceUid, imageIds, metadataProvider) {\n  return imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n    if (!sopCommonModule) {\n      return;\n    }\n    return sopCommonModule.sopInstanceUID === sopInstanceUid;\n  });\n}\n\n/**\r\n * getImageIdOfReferencedFrame - Returns the imageId corresponding to the\r\n * specified sopInstanceUid and frameNumber for multi-frame images.\r\n *\r\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\r\n * @param  {Number} frameNumber      The frame number.\r\n * @param  {String} imageIds         The list of imageIds.\r\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\r\n *                                   from the cornerstone imageIds.\r\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\r\n */\nfunction getImageIdOfReferencedFrame(sopInstanceUid, frameNumber, imageIds, metadataProvider) {\n  var imageId = imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n    if (!sopCommonModule) {\n      return;\n    }\n    var imageIdFrameNumber = Number(imageId.split(\"frame=\")[1]);\n    return (\n      //frameNumber is zero indexed for cornerstoneDICOMImageLoader image Ids.\n      sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1\n    );\n  });\n  return imageId;\n}\n\n/**\r\n * getValidOrientations - returns an array of valid orientations.\r\n *\r\n * @param  {Number[6]} iop The row (0..2) an column (3..5) direction cosines.\r\n * @return {Number[8][6]} An array of valid orientations.\r\n */\nfunction getValidOrientations(iop) {\n  var orientations = [];\n\n  // [0,  1,  2]: 0,   0hf,   0vf\n  // [3,  4,  5]: 90,  90hf,  90vf\n  // [6, 7]:      180, 270\n\n  orientations[0] = iop;\n  orientations[1] = flipIOP.h(iop);\n  orientations[2] = flipIOP.v(iop);\n  var iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);\n  orientations[3] = iop90;\n  orientations[4] = flipIOP.h(iop90);\n  orientations[5] = flipIOP.v(iop90);\n  orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);\n  orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);\n  return orientations;\n}\n\n/**\r\n * alignPixelDataWithSourceData -\r\n *\r\n * @param {Ndarray} pixelData2D - The data to align.\r\n * @param {Number[6]} iop - The orientation of the image slice.\r\n * @param {Number[8][6]} orientations - An array of valid imageOrientationPatient values.\r\n * @param {Number} tolerance.\r\n * @return {Ndarray} The aligned pixelData.\r\n */\nfunction alignPixelDataWithSourceData(pixelData2D, iop, orientations, tolerance) {\n  if (compareArrays(iop, orientations[0], tolerance)) {\n    return pixelData2D;\n  } else if (compareArrays(iop, orientations[1], tolerance)) {\n    // Flipped vertically.\n\n    // Undo Flip\n    return flipMatrix2D.v(pixelData2D);\n  } else if (compareArrays(iop, orientations[2], tolerance)) {\n    // Flipped horizontally.\n\n    // Unfo flip\n    return flipMatrix2D.h(pixelData2D);\n  } else if (compareArrays(iop, orientations[3], tolerance)) {\n    //Rotated 90 degrees\n\n    // Rotate back\n    return rotateMatrix902D(pixelData2D);\n  } else if (compareArrays(iop, orientations[4], tolerance)) {\n    //Rotated 90 degrees and fliped horizontally.\n\n    // Undo flip and rotate back.\n    return rotateMatrix902D(flipMatrix2D.h(pixelData2D));\n  } else if (compareArrays(iop, orientations[5], tolerance)) {\n    // Rotated 90 degrees and fliped vertically\n\n    // Unfo flip and rotate back.\n    return rotateMatrix902D(flipMatrix2D.v(pixelData2D));\n  } else if (compareArrays(iop, orientations[6], tolerance)) {\n    // Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n\n    return rotateMatrix902D(rotateMatrix902D(pixelData2D));\n  } else if (compareArrays(iop, orientations[7], tolerance)) {\n    // Rotated 270 degrees\n\n    // Rotate back.\n    return rotateMatrix902D(rotateMatrix902D(rotateMatrix902D(pixelData2D)));\n  }\n}\n\n/**\r\n * compareArrays - Returns true if array1 and array2 are equal\r\n * within a tolerance.\r\n *\r\n * @param  {Number[]} array1 - An array.\r\n * @param  {Number[]} array2 - An array.\r\n * @param {Number} tolerance.\r\n * @return {Boolean} True if array1 and array2 are equal.\r\n */\nfunction compareArrays(array1, array2, tolerance) {\n  if (array1.length != array2.length) {\n    return false;\n  }\n  for (var i = 0; i < array1.length; ++i) {\n    if (!nearlyEqual(array1[i], array2[i], tolerance)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getSegmentMetadata(multiframe, seriesInstanceUid) {\n  var segmentSequence = multiframe.SegmentSequence;\n  var data = [];\n  if (Array.isArray(segmentSequence)) {\n    data = [undefined].concat(_toConsumableArray(segmentSequence));\n  } else {\n    // Only one segment, will be stored as an object.\n    data = [undefined, segmentSequence];\n  }\n  return {\n    seriesInstanceUid: seriesInstanceUid,\n    data: data\n  };\n}\n\nvar Segmentation$1 = {\n  generateSegmentation: generateSegmentation,\n  generateToolState: generateToolState,\n  fillSegmentation: fillSegmentation\n};\n\n/**\r\n * generateSegmentation - Generates a DICOM Segmentation object given cornerstoneTools data.\r\n *\r\n * @param  {object[]} images    An array of the cornerstone image objects.\r\n * @param  {Object|Object[]} labelmaps3DorBrushData For 4.X: The cornerstone `Labelmap3D` object, or an array of objects.\r\n *                                                  For 3.X: the BrushData.\r\n * @param  {number} cornerstoneToolsVersion The cornerstoneTools major version to map against.\r\n * @returns {Object}\r\n */\nfunction generateSegmentation(images, labelmaps3DorBrushData) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    includeSliceSpacing: true\n  };\n  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n  if (cornerstoneToolsVersion === 4) {\n    return Segmentation$2.generateSegmentation(images, labelmaps3DorBrushData, options);\n  }\n  if (cornerstoneToolsVersion === 3) {\n    return Segmentation$3.generateSegmentation(images, labelmaps3DorBrushData, options);\n  }\n  console.warn(\"No generateSegmentation adapater for cornerstone version \".concat(cornerstoneToolsVersion, \", exiting.\"));\n}\n\n/**\r\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\r\n * derive cornerstoneTools toolState and brush metadata.\r\n *\r\n * @param  {string[]} imageIds    An array of the imageIds.\r\n * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.\r\n * @param {*} metadataProvider\r\n * @param  {bool} skipOverlapping - skip checks for overlapping segs, default value false.\r\n * @param  {number} tolerance - default value 1.e-3.\r\n * @param  {number} cornerstoneToolsVersion - default value 4.\r\n *\r\n * @returns {Object}  The toolState and an object from which the\r\n *                    segment metadata can be derived.\r\n */\nfunction generateToolState(imageIds, arrayBuffer, metadataProvider) {\n  var skipOverlapping = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var tolerance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  var cornerstoneToolsVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 4;\n  if (cornerstoneToolsVersion === 4) {\n    return Segmentation$2.generateToolState(imageIds, arrayBuffer, metadataProvider, skipOverlapping, tolerance);\n  }\n  if (cornerstoneToolsVersion === 3) {\n    return Segmentation$3.generateToolState(imageIds, arrayBuffer, metadataProvider);\n  }\n  console.warn(\"No generateToolState adapater for cornerstone version \".concat(cornerstoneToolsVersion, \", exiting.\"));\n}\n\n/**\r\n * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.\r\n *\r\n * @param  {object[]} segmentation An empty segmentation derived dataset.\r\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\r\n * @param  {Object} userOptions Options object to override default options.\r\n * @returns {Blob}           description\r\n */\nfunction fillSegmentation(segmentation, inputLabelmaps3D) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    includeSliceSpacing: true\n  };\n  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n  if (cornerstoneToolsVersion === 4) {\n    return Segmentation$2.fillSegmentation(segmentation, inputLabelmaps3D, options);\n  }\n  console.warn(\"No generateSegmentation adapater for cornerstone version \".concat(cornerstoneToolsVersion, \", exiting.\"));\n}\n\nvar TID300CobbAngle$2 = utilities.TID300.CobbAngle;\nvar COBB_ANGLE = \"CobbAngle\";\nvar CobbAngle$1 = /*#__PURE__*/function () {\n  function CobbAngle() {\n    _classCallCheck(this, CobbAngle);\n  }\n  _createClass(CobbAngle, null, [{\n    key: \"getMeasurementData\",\n    value:\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        NUMGroup = _MeasurementReport$ge.NUMGroup,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        rAngle: NUMGroup.MeasuredValueSequence.NumericValue,\n        toolType: CobbAngle.toolType,\n        handles: {\n          start: {},\n          end: {},\n          start2: {\n            highlight: true,\n            drawnIndependently: true\n          },\n          end2: {\n            highlight: true,\n            drawnIndependently: true\n          },\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        }\n      });\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 8);\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      state.handles.end.x = _SCOORDGroup$GraphicD[2];\n      state.handles.end.y = _SCOORDGroup$GraphicD[3];\n      state.handles.start2.x = _SCOORDGroup$GraphicD[4];\n      state.handles.start2.y = _SCOORDGroup$GraphicD[5];\n      state.handles.end2.x = _SCOORDGroup$GraphicD[6];\n      state.handles.end2.y = _SCOORDGroup$GraphicD[7];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n        finding = tool.finding,\n        findingSites = tool.findingSites;\n      var point1 = handles.start;\n      var point2 = handles.end;\n      var point3 = handles.start2;\n      var point4 = handles.end2;\n      var rAngle = tool.rAngle;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:CobbAngle\";\n      return {\n        point1: point1,\n        point2: point2,\n        point3: point3,\n        point4: point4,\n        rAngle: rAngle,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return CobbAngle;\n}();\nCobbAngle$1.toolType = COBB_ANGLE;\nCobbAngle$1.utilityToolType = COBB_ANGLE;\nCobbAngle$1.TID300Representation = TID300CobbAngle$2;\nCobbAngle$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === COBB_ANGLE;\n};\nMeasurementReport$1.registerTool(CobbAngle$1);\n\nvar TID300Angle = utilities.TID300.Angle;\nvar ANGLE = \"Angle\";\nvar Angle$1 = /*#__PURE__*/function () {\n  function Angle() {\n    _classCallCheck(this, Angle);\n  }\n  _createClass(Angle, null, [{\n    key: \"getMeasurementData\",\n    value:\n    /**\r\n     * Generate TID300 measurement data for a plane angle measurement - use a Angle, but label it as Angle\r\n     */\n    function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        NUMGroup = _MeasurementReport$ge.NUMGroup,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        rAngle: NUMGroup.MeasuredValueSequence.NumericValue,\n        toolType: Angle.toolType,\n        handles: {\n          start: {},\n          middle: {},\n          end: {},\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        }\n      });\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 8);\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      state.handles.middle.x = _SCOORDGroup$GraphicD[2];\n      state.handles.middle.y = _SCOORDGroup$GraphicD[3];\n      state.handles.middle.x = _SCOORDGroup$GraphicD[4];\n      state.handles.middle.y = _SCOORDGroup$GraphicD[5];\n      state.handles.end.x = _SCOORDGroup$GraphicD[6];\n      state.handles.end.y = _SCOORDGroup$GraphicD[7];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n        finding = tool.finding,\n        findingSites = tool.findingSites;\n      var point1 = handles.start;\n      var point2 = handles.middle;\n      var point3 = handles.middle;\n      var point4 = handles.end;\n      var rAngle = tool.rAngle;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Angle\";\n      return {\n        point1: point1,\n        point2: point2,\n        point3: point3,\n        point4: point4,\n        rAngle: rAngle,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return Angle;\n}();\nAngle$1.toolType = ANGLE;\nAngle$1.utilityToolType = ANGLE;\nAngle$1.TID300Representation = TID300Angle;\nAngle$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === ANGLE;\n};\nMeasurementReport$1.registerTool(Angle$1);\n\nvar TID300Polyline$2 = utilities.TID300.Polyline;\nvar RectangleRoi = /*#__PURE__*/function () {\n  function RectangleRoi() {\n    _classCallCheck(this, RectangleRoi);\n  }\n  _createClass(RectangleRoi, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup),\n        defaultState = _MeasurementReport$ge.defaultState,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n        NUMGroup = _MeasurementReport$ge.NUMGroup;\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: RectangleRoi.toolType,\n        handles: {\n          start: {},\n          end: {},\n          textBox: {\n            active: false,\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          },\n          initialRotation: 0\n        },\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        },\n        color: undefined,\n        invalidated: true\n      });\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 6);\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      _SCOORDGroup$GraphicD[2];\n      _SCOORDGroup$GraphicD[3];\n      state.handles.end.x = _SCOORDGroup$GraphicD[4];\n      state.handles.end.y = _SCOORDGroup$GraphicD[5];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var finding = tool.finding,\n        findingSites = tool.findingSites,\n        _tool$cachedStats = tool.cachedStats,\n        cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats,\n        handles = tool.handles;\n      var start = handles.start,\n        end = handles.end;\n      var points = [start, {\n        x: start.x,\n        y: end.y\n      }, end, {\n        x: end.x,\n        y: start.y\n      }];\n      var area = cachedStats.area,\n        perimeter = cachedStats.perimeter;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:RectangleRoi\";\n      return {\n        points: points,\n        area: area,\n        perimeter: perimeter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return RectangleRoi;\n}();\nRectangleRoi.toolType = \"RectangleRoi\";\nRectangleRoi.utilityToolType = \"RectangleRoi\";\nRectangleRoi.TID300Representation = TID300Polyline$2;\nRectangleRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone4Tag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n  return toolType === RectangleRoi.toolType;\n};\nMeasurementReport$1.registerTool(RectangleRoi);\n\nvar Cornerstone = {\n  Length: Length$1,\n  FreehandRoi: FreehandRoi,\n  Bidirectional: Bidirectional$1,\n  EllipticalRoi: EllipticalRoi,\n  CircleRoi: CircleRoi,\n  ArrowAnnotate: ArrowAnnotate$1,\n  MeasurementReport: MeasurementReport$1,\n  Segmentation: Segmentation$1,\n  CobbAngle: CobbAngle$1,\n  Angle: Angle$1,\n  RectangleRoi: RectangleRoi\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nvar CORNERSTONE_3D_TAG = \"Cornerstone3DTools@^0.1.0\";\n\n// This is a custom coding scheme defined to store some annotations from Cornerstone.\n// Note: CodeMeaning is VR type LO, which means we only actually support 64 characters\n// here this is fine for most labels, but may be problematic at some point.\nvar CORNERSTONEFREETEXT = \"CORNERSTONEFREETEXT\";\n\n// Cornerstone specified coding scheme for storing findings\nvar CodingSchemeDesignator$1 = \"CORNERSTONEJS\";\nvar CodingScheme = {\n  CodingSchemeDesignator: CodingSchemeDesignator$1,\n  codeValues: {\n    CORNERSTONEFREETEXT: CORNERSTONEFREETEXT\n  }\n};\n\nvar TID1500 = utilities.TID1500, addAccessors = utilities.addAccessors;\r\nvar StructuredReport = derivations.StructuredReport;\r\nvar Normalizer = normalizers.Normalizer;\r\nvar TID1500MeasurementReport = TID1500.TID1500MeasurementReport, TID1501MeasurementGroup = TID1500.TID1501MeasurementGroup;\r\nvar DicomMetaDictionary = data.DicomMetaDictionary;\r\nvar FINDING = { CodingSchemeDesignator: \"DCM\", CodeValue: \"121071\" };\r\nvar FINDING_SITE = { CodingSchemeDesignator: \"SCT\", CodeValue: \"363698007\" };\r\nvar FINDING_SITE_OLD = { CodingSchemeDesignator: \"SRT\", CodeValue: \"G-C0E3\" };\r\nvar codeValueMatch = function (group, code, oldCode) {\r\n    var ConceptNameCodeSequence = group.ConceptNameCodeSequence;\r\n    if (!ConceptNameCodeSequence)\r\n        return;\r\n    var CodingSchemeDesignator = ConceptNameCodeSequence.CodingSchemeDesignator, CodeValue = ConceptNameCodeSequence.CodeValue;\r\n    return ((CodingSchemeDesignator == code.CodingSchemeDesignator &&\r\n        CodeValue == code.CodeValue) ||\r\n        (oldCode &&\r\n            CodingSchemeDesignator == oldCode.CodingSchemeDesignator &&\r\n            CodeValue == oldCode.CodeValue));\r\n};\r\nfunction getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass, worldToImageCoords) {\r\n    var args = toolClass.getTID300RepresentationArguments(tool, worldToImageCoords);\r\n    args.ReferencedSOPSequence = ReferencedSOPSequence;\r\n    var TID300Measurement = new toolClass.TID300Representation(args);\r\n    return TID300Measurement;\r\n}\r\nfunction getMeasurementGroup(toolType, toolData, ReferencedSOPSequence, worldToImageCoords) {\r\n    var toolTypeData = toolData[toolType];\r\n    var toolClass = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];\r\n    if (!toolTypeData ||\r\n        !toolTypeData.data ||\r\n        !toolTypeData.data.length ||\r\n        !toolClass) {\r\n        return;\r\n    }\r\n    // Loop through the array of tool instances\r\n    // for this tool\r\n    var Measurements = toolTypeData.data.map(function (tool) {\r\n        return getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass, worldToImageCoords);\r\n    });\r\n    return new TID1501MeasurementGroup(Measurements);\r\n}\r\nvar MeasurementReport = /** @class */ (function () {\r\n    function MeasurementReport() {\r\n    }\r\n    MeasurementReport.getCornerstoneLabelFromDefaultState = function (defaultState) {\r\n        var _a = defaultState.findingSites, findingSites = _a === void 0 ? [] : _a, finding = defaultState.finding;\r\n        var cornersoneFreeTextCodingValue = CodingScheme.codeValues.CORNERSTONEFREETEXT;\r\n        var freeTextLabel = findingSites.find(function (fs) { return fs.CodeValue === cornersoneFreeTextCodingValue; });\r\n        if (freeTextLabel) {\r\n            return freeTextLabel.CodeMeaning;\r\n        }\r\n        if (finding && finding.CodeValue === cornersoneFreeTextCodingValue) {\r\n            return finding.CodeMeaning;\r\n        }\r\n    };\r\n    MeasurementReport.generateDatasetMeta = function () {\r\n        // TODO: what is the correct metaheader\r\n        // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\r\n        // TODO: move meta creation to happen in derivations.js\r\n        var fileMetaInformationVersionArray = new Uint8Array(2);\r\n        fileMetaInformationVersionArray[1] = 1;\r\n        var _meta = {\r\n            FileMetaInformationVersion: {\r\n                Value: [fileMetaInformationVersionArray.buffer],\r\n                vr: \"OB\"\r\n            },\r\n            //MediaStorageSOPClassUID\r\n            //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\r\n            TransferSyntaxUID: {\r\n                Value: [\"1.2.840.10008.1.2.1\"],\r\n                vr: \"UI\"\r\n            },\r\n            ImplementationClassUID: {\r\n                Value: [DicomMetaDictionary.uid()],\r\n                vr: \"UI\"\r\n            },\r\n            ImplementationVersionName: {\r\n                Value: [\"dcmjs\"],\r\n                vr: \"SH\"\r\n            }\r\n        };\r\n        return _meta;\r\n    };\r\n    MeasurementReport.getSetupMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, toolType) {\r\n        var ContentSequence = MeasurementGroup.ContentSequence;\r\n        var contentSequenceArr = toArray(ContentSequence);\r\n        var findingGroup = contentSequenceArr.find(function (group) {\r\n            return codeValueMatch(group, FINDING);\r\n        });\r\n        var findingSiteGroups = contentSequenceArr.filter(function (group) {\r\n            return codeValueMatch(group, FINDING_SITE, FINDING_SITE_OLD);\r\n        }) || [];\r\n        var NUMGroup = contentSequenceArr.find(function (group) { return group.ValueType === \"NUM\"; });\r\n        var SCOORDGroup = toArray(NUMGroup.ContentSequence).find(function (group) { return group.ValueType === \"SCOORD\"; });\r\n        var ReferencedSOPSequence = SCOORDGroup.ContentSequence.ReferencedSOPSequence;\r\n        var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID, ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;\r\n        var referencedImageId = sopInstanceUIDToImageIdMap[ReferencedSOPInstanceUID];\r\n        var imagePlaneModule = metadata.get(\"imagePlaneModule\", referencedImageId);\r\n        var finding = findingGroup\r\n            ? addAccessors(findingGroup.ConceptCodeSequence)\r\n            : undefined;\r\n        var findingSites = findingSiteGroups.map(function (fsg) {\r\n            return addAccessors(fsg.ConceptCodeSequence);\r\n        });\r\n        var defaultState = {\r\n            description: undefined,\r\n            sopInstanceUid: ReferencedSOPInstanceUID,\r\n            annotation: {\r\n                annotationUID: DicomMetaDictionary.uid(),\r\n                metadata: {\r\n                    toolName: toolType,\r\n                    referencedImageId: referencedImageId,\r\n                    FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\r\n                    label: \"\"\r\n                },\r\n                data: undefined\r\n            },\r\n            finding: finding,\r\n            findingSites: findingSites\r\n        };\r\n        if (defaultState.finding) {\r\n            defaultState.description = defaultState.finding.CodeMeaning;\r\n        }\r\n        defaultState.annotation.metadata.label =\r\n            MeasurementReport.getCornerstoneLabelFromDefaultState(defaultState);\r\n        return {\r\n            defaultState: defaultState,\r\n            NUMGroup: NUMGroup,\r\n            SCOORDGroup: SCOORDGroup,\r\n            ReferencedSOPSequence: ReferencedSOPSequence,\r\n            ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,\r\n            ReferencedFrameNumber: ReferencedFrameNumber\r\n        };\r\n    };\r\n    MeasurementReport.generateReport = function (toolState, metadataProvider, worldToImageCoords, options) {\r\n        // ToolState for array of imageIDs to a Report\r\n        // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID\r\n        var allMeasurementGroups = [];\r\n        /* Patient ID\r\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID\r\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date\r\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time\r\n        Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID\r\n        */\r\n        var sopInstanceUIDsToSeriesInstanceUIDMap = {};\r\n        var derivationSourceDatasets = [];\r\n        var _meta = MeasurementReport.generateDatasetMeta();\r\n        // Loop through each image in the toolData\r\n        Object.keys(toolState).forEach(function (imageId) {\r\n            var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\r\n            var instance = metadataProvider.get(\"instance\", imageId);\r\n            var sopInstanceUID = sopCommonModule.sopInstanceUID, sopClassUID = sopCommonModule.sopClassUID;\r\n            var seriesInstanceUID = instance.SeriesInstanceUID;\r\n            sopInstanceUIDsToSeriesInstanceUIDMap[sopInstanceUID] =\r\n                seriesInstanceUID;\r\n            if (!derivationSourceDatasets.find(function (dsd) { return dsd.SeriesInstanceUID === seriesInstanceUID; })) {\r\n                // Entry not present for series, create one.\r\n                var derivationSourceDataset = MeasurementReport.generateDerivationSourceDataset(instance);\r\n                derivationSourceDatasets.push(derivationSourceDataset);\r\n            }\r\n            var frameNumber = metadataProvider.get(\"frameNumber\", imageId);\r\n            var toolData = toolState[imageId];\r\n            var toolTypes = Object.keys(toolData);\r\n            var ReferencedSOPSequence = {\r\n                ReferencedSOPClassUID: sopClassUID,\r\n                ReferencedSOPInstanceUID: sopInstanceUID,\r\n                ReferencedFrameNumber: undefined\r\n            };\r\n            if ((instance &&\r\n                instance.NumberOfFrames &&\r\n                instance.NumberOfFrames > 1) ||\r\n                Normalizer.isMultiframeSOPClassUID(sopClassUID)) {\r\n                ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;\r\n            }\r\n            // Loop through each tool type for the image\r\n            var measurementGroups = [];\r\n            toolTypes.forEach(function (toolType) {\r\n                var group = getMeasurementGroup(toolType, toolData, ReferencedSOPSequence, worldToImageCoords);\r\n                if (group) {\r\n                    measurementGroups.push(group);\r\n                }\r\n            });\r\n            allMeasurementGroups =\r\n                allMeasurementGroups.concat(measurementGroups);\r\n        });\r\n        var tid1500MeasurementReport = new TID1500MeasurementReport({ TID1501MeasurementGroups: allMeasurementGroups }, options);\r\n        var report = new StructuredReport(derivationSourceDatasets, options);\r\n        var contentItem = tid1500MeasurementReport.contentItem(derivationSourceDatasets, __assign(__assign({}, options), { sopInstanceUIDsToSeriesInstanceUIDMap: sopInstanceUIDsToSeriesInstanceUIDMap }));\r\n        // Merge the derived dataset with the content from the Measurement Report\r\n        report.dataset = Object.assign(report.dataset, contentItem);\r\n        report.dataset._meta = _meta;\r\n        return report;\r\n    };\r\n    /**\r\n     * Generate Cornerstone tool state from dataset\r\n     */\r\n    MeasurementReport.generateToolState = function (dataset, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata, hooks) {\r\n        // For now, bail out if the dataset is not a TID1500 SR with length measurements\r\n        if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\r\n            throw new Error(\"This package can currently only interpret DICOM SR TID 1500\");\r\n        }\r\n        var REPORT = \"Imaging Measurements\";\r\n        var GROUP = \"Measurement Group\";\r\n        var TRACKING_IDENTIFIER = \"Tracking Identifier\";\r\n        // Identify the Imaging Measurements\r\n        var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT));\r\n        // Retrieve the Measurements themselves\r\n        var measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP));\r\n        // For each of the supported measurement types, compute the measurement data\r\n        var measurementData = {};\r\n        var cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\r\n        var registeredToolClasses = [];\r\n        Object.keys(cornerstoneToolClasses).forEach(function (key) {\r\n            registeredToolClasses.push(cornerstoneToolClasses[key]);\r\n            measurementData[key] = [];\r\n        });\r\n        measurementGroups.forEach(function (measurementGroup) {\r\n            var _a;\r\n            try {\r\n                var measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);\r\n                var TrackingIdentifierGroup = measurementGroupContentSequence.find(function (contentItem) {\r\n                    return contentItem.ConceptNameCodeSequence.CodeMeaning ===\r\n                        TRACKING_IDENTIFIER;\r\n                });\r\n                var TrackingIdentifierValue_1 = TrackingIdentifierGroup.TextValue;\r\n                var toolClass = ((_a = hooks === null || hooks === void 0 ? void 0 : hooks.getToolClass) === null || _a === void 0 ? void 0 : _a.call(hooks, measurementGroup, dataset, registeredToolClasses)) ||\r\n                    registeredToolClasses.find(function (tc) {\r\n                        return tc.isValidCornerstoneTrackingIdentifier(TrackingIdentifierValue_1);\r\n                    });\r\n                if (toolClass) {\r\n                    var measurement = toolClass.getMeasurementData(measurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata);\r\n                    console.log(\"=== \".concat(toolClass.toolType, \" ===\"));\r\n                    console.log(measurement);\r\n                    measurementData[toolClass.toolType].push(measurement);\r\n                }\r\n            }\r\n            catch (e) {\r\n                console.warn(\"Unable to generate tool state for\", measurementGroup, e);\r\n            }\r\n        });\r\n        // NOTE: There is no way of knowing the cornerstone imageIds as that could be anything.\r\n        // That is up to the consumer to derive from the SOPInstanceUIDs.\r\n        return measurementData;\r\n    };\r\n    /**\r\n     * Register a new tool type.\r\n     * @param toolClass to perform I/O to DICOM for this tool\r\n     */\r\n    MeasurementReport.registerTool = function (toolClass) {\r\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;\r\n        MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;\r\n        MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] =\r\n            toolClass.utilityToolType;\r\n    };\r\n    MeasurementReport.CORNERSTONE_3D_TAG = CORNERSTONE_3D_TAG;\r\n    MeasurementReport.MEASUREMENT_BY_TOOLTYPE = {};\r\n    MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};\r\n    MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};\r\n    MeasurementReport.generateDerivationSourceDataset = function (instance) {\r\n        var _vrMap = {\r\n            PixelData: \"OW\"\r\n        };\r\n        var _meta = MeasurementReport.generateDatasetMeta();\r\n        var derivationSourceDataset = __assign(__assign({}, instance), { _meta: _meta, _vrMap: _vrMap });\r\n        return derivationSourceDataset;\r\n    };\r\n    return MeasurementReport;\r\n}());\n\nvar TID300Point$1 = utilities.TID300.Point;\nvar ARROW_ANNOTATE = \"ArrowAnnotate\";\nvar trackingIdentifierTextValue$7 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(ARROW_ANNOTATE);\nvar codeValues = CodingScheme.codeValues,\n  CodingSchemeDesignator = CodingScheme.CodingSchemeDesignator;\nvar ArrowAnnotate = /*#__PURE__*/function () {\n  function ArrowAnnotate() {\n    _classCallCheck(this, ArrowAnnotate);\n  }\n  _createClass(ArrowAnnotate, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, ArrowAnnotate.toolType),\n        defaultState = _MeasurementReport$ge.defaultState,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n        ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var text = defaultState.annotation.metadata.label;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      }\n\n      // Since the arrowAnnotate measurement is just a point, to generate the tool state\n      // we derive the second point based on the image size relative to the first point.\n      if (worldCoords.length === 1) {\n        var imagePixelModule = metadata.get(\"imagePixelModule\", referencedImageId);\n        var xOffset = 10;\n        var yOffset = 10;\n        if (imagePixelModule) {\n          var columns = imagePixelModule.columns,\n            rows = imagePixelModule.rows;\n          xOffset = columns / 10;\n          yOffset = rows / 10;\n        }\n        var secondPoint = imageToWorldCoords(referencedImageId, [GraphicData[0] + xOffset, GraphicData[1] + yOffset]);\n        worldCoords.push(secondPoint);\n      }\n      var state = defaultState;\n      state.annotation.data = {\n        text: text,\n        handles: {\n          arrowFirst: true,\n          points: [worldCoords[0], worldCoords[1]],\n          activeHandleIndex: 0,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n        metadata = tool.metadata;\n      var finding = tool.finding,\n        findingSites = tool.findingSites;\n      var referencedImageId = metadata.referencedImageId;\n      if (!referencedImageId) {\n        throw new Error(\"ArrowAnnotate.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n      var _data$handles = data.handles,\n        points = _data$handles.points,\n        arrowFirst = _data$handles.arrowFirst;\n      var point;\n      if (arrowFirst) {\n        point = points[0];\n      } else {\n        point = points[1];\n      }\n      var pointImage = worldToImageCoords(referencedImageId, point);\n      var TID300RepresentationArguments = {\n        points: [{\n          x: pointImage[0],\n          y: pointImage[1]\n        }],\n        trackingIdentifierTextValue: trackingIdentifierTextValue$7,\n        findingSites: findingSites || []\n      };\n\n      // If freetext finding isn't present, add it from the tool text.\n      if (!finding || finding.CodeValue !== codeValues.CORNERSTONEFREETEXT) {\n        finding = {\n          CodeValue: codeValues.CORNERSTONEFREETEXT,\n          CodingSchemeDesignator: CodingSchemeDesignator,\n          CodeMeaning: data.text\n        };\n      }\n      TID300RepresentationArguments.finding = finding;\n      return TID300RepresentationArguments;\n    }\n  }]);\n  return ArrowAnnotate;\n}();\nArrowAnnotate.toolType = ARROW_ANNOTATE;\nArrowAnnotate.utilityToolType = ARROW_ANNOTATE;\nArrowAnnotate.TID300Representation = TID300Point$1;\nArrowAnnotate.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone3DTag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n  return toolType === ARROW_ANNOTATE;\n};\nMeasurementReport.registerTool(ArrowAnnotate);\n\nvar TID300Bidirectional = utilities.TID300.Bidirectional;\r\nvar BIDIRECTIONAL = \"Bidirectional\";\r\nvar LONG_AXIS = \"Long Axis\";\r\nvar SHORT_AXIS = \"Short Axis\";\r\nvar trackingIdentifierTextValue$6 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(BIDIRECTIONAL);\r\nvar Bidirectional = /** @class */ (function () {\r\n    function Bidirectional() {\r\n    }\r\n    Bidirectional.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a;\r\n        var _b = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Bidirectional.toolType), defaultState = _b.defaultState, ReferencedFrameNumber = _b.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var ContentSequence = MeasurementGroup.ContentSequence;\r\n        var longAxisNUMGroup = toArray(ContentSequence).find(function (group) { return group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS; });\r\n        var longAxisSCOORDGroup = toArray(longAxisNUMGroup.ContentSequence).find(function (group) { return group.ValueType === \"SCOORD\"; });\r\n        var shortAxisNUMGroup = toArray(ContentSequence).find(function (group) { return group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS; });\r\n        var shortAxisSCOORDGroup = toArray(shortAxisNUMGroup.ContentSequence).find(function (group) { return group.ValueType === \"SCOORD\"; });\r\n        var worldCoords = [];\r\n        [longAxisSCOORDGroup, shortAxisSCOORDGroup].forEach(function (group) {\r\n            var GraphicData = group.GraphicData;\r\n            for (var i = 0; i < GraphicData.length; i += 2) {\r\n                var point = imageToWorldCoords(referencedImageId, [\r\n                    GraphicData[i],\r\n                    GraphicData[i + 1]\r\n                ]);\r\n                worldCoords.push(point);\r\n            }\r\n        });\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            handles: {\r\n                points: [\r\n                    worldCoords[0],\r\n                    worldCoords[1],\r\n                    worldCoords[2],\r\n                    worldCoords[3]\r\n                ],\r\n                activeHandleIndex: 0,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            cachedStats: (_a = {},\r\n                _a[\"imageId:\".concat(referencedImageId)] = {\r\n                    length: longAxisNUMGroup.MeasuredValueSequence.NumericValue,\r\n                    width: shortAxisNUMGroup.MeasuredValueSequence.NumericValue\r\n                },\r\n                _a),\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    Bidirectional.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var _a = data.cachedStats, cachedStats = _a === void 0 ? {} : _a, handles = data.handles;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"Bidirectional.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var _b = cachedStats[\"imageId:\".concat(referencedImageId)] || {}, length = _b.length, width = _b.width;\r\n        var points = handles.points;\r\n        // Find the length and width point pairs by comparing the distances of the points at 0,1 to points at 2,3\r\n        var firstPointPairs = [points[0], points[1]];\r\n        var secondPointPairs = [points[2], points[3]];\r\n        var firstPointPairsDistance = Math.sqrt(Math.pow(firstPointPairs[0][0] - firstPointPairs[1][0], 2) +\r\n            Math.pow(firstPointPairs[0][1] - firstPointPairs[1][1], 2) +\r\n            Math.pow(firstPointPairs[0][2] - firstPointPairs[1][2], 2));\r\n        var secondPointPairsDistance = Math.sqrt(Math.pow(secondPointPairs[0][0] - secondPointPairs[1][0], 2) +\r\n            Math.pow(secondPointPairs[0][1] - secondPointPairs[1][1], 2) +\r\n            Math.pow(secondPointPairs[0][2] - secondPointPairs[1][2], 2));\r\n        var shortAxisPoints;\r\n        var longAxisPoints;\r\n        if (firstPointPairsDistance > secondPointPairsDistance) {\r\n            shortAxisPoints = firstPointPairs;\r\n            longAxisPoints = secondPointPairs;\r\n        }\r\n        else {\r\n            shortAxisPoints = secondPointPairs;\r\n            longAxisPoints = firstPointPairs;\r\n        }\r\n        var longAxisStartImage = worldToImageCoords(referencedImageId, shortAxisPoints[0]);\r\n        var longAxisEndImage = worldToImageCoords(referencedImageId, shortAxisPoints[1]);\r\n        var shortAxisStartImage = worldToImageCoords(referencedImageId, longAxisPoints[0]);\r\n        var shortAxisEndImage = worldToImageCoords(referencedImageId, longAxisPoints[1]);\r\n        return {\r\n            longAxis: {\r\n                point1: {\r\n                    x: longAxisStartImage[0],\r\n                    y: longAxisStartImage[1]\r\n                },\r\n                point2: {\r\n                    x: longAxisEndImage[0],\r\n                    y: longAxisEndImage[1]\r\n                }\r\n            },\r\n            shortAxis: {\r\n                point1: {\r\n                    x: shortAxisStartImage[0],\r\n                    y: shortAxisStartImage[1]\r\n                },\r\n                point2: {\r\n                    x: shortAxisEndImage[0],\r\n                    y: shortAxisEndImage[1]\r\n                }\r\n            },\r\n            longAxisLength: length,\r\n            shortAxisLength: width,\r\n            trackingIdentifierTextValue: trackingIdentifierTextValue$6,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    Bidirectional.toolType = BIDIRECTIONAL;\r\n    Bidirectional.utilityToolType = BIDIRECTIONAL;\r\n    Bidirectional.TID300Representation = TID300Bidirectional;\r\n    Bidirectional.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\r\n        if (!TrackingIdentifier.includes(\":\")) {\r\n            return false;\r\n        }\r\n        var _a = TrackingIdentifier.split(\":\"), cornerstone3DTag = _a[0], toolType = _a[1];\r\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\r\n            return false;\r\n        }\r\n        return toolType === BIDIRECTIONAL;\r\n    };\r\n    return Bidirectional;\r\n}());\r\nMeasurementReport.registerTool(Bidirectional);\n\nvar TID300CobbAngle$1 = utilities.TID300.CobbAngle;\r\nvar MEASUREMENT_TYPE$1 = \"Angle\";\r\nvar trackingIdentifierTextValue$5 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(MEASUREMENT_TYPE$1);\r\nvar Angle = /** @class */ (function () {\r\n    function Angle() {\r\n    }\r\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\r\n    Angle.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a;\r\n        var _b = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Angle.toolType), defaultState = _b.defaultState, NUMGroup = _b.NUMGroup, SCOORDGroup = _b.SCOORDGroup, ReferencedFrameNumber = _b.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var GraphicData = SCOORDGroup.GraphicData;\r\n        var worldCoords = [];\r\n        for (var i = 0; i < GraphicData.length; i += 2) {\r\n            var point = imageToWorldCoords(referencedImageId, [\r\n                GraphicData[i],\r\n                GraphicData[i + 1]\r\n            ]);\r\n            worldCoords.push(point);\r\n        }\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            handles: {\r\n                points: [worldCoords[0], worldCoords[1], worldCoords[3]],\r\n                activeHandleIndex: 0,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            cachedStats: (_a = {},\r\n                _a[\"imageId:\".concat(referencedImageId)] = {\r\n                    angle: NUMGroup\r\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\r\n                        : null\r\n                },\r\n                _a),\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    Angle.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var _a = data.cachedStats, cachedStats = _a === void 0 ? {} : _a, handles = data.handles;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"Angle.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var start1 = worldToImageCoords(referencedImageId, handles.points[0]);\r\n        var middle = worldToImageCoords(referencedImageId, handles.points[1]);\r\n        var end = worldToImageCoords(referencedImageId, handles.points[2]);\r\n        var point1 = { x: start1[0], y: start1[1] };\r\n        var point2 = { x: middle[0], y: middle[1] };\r\n        var point3 = point2;\r\n        var point4 = { x: end[0], y: end[1] };\r\n        var angle = (cachedStats[\"imageId:\".concat(referencedImageId)] || {}).angle;\r\n        // Represented as a cobb angle\r\n        return {\r\n            point1: point1,\r\n            point2: point2,\r\n            point3: point3,\r\n            point4: point4,\r\n            rAngle: angle,\r\n            trackingIdentifierTextValue: trackingIdentifierTextValue$5,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    Angle.toolType = MEASUREMENT_TYPE$1;\r\n    Angle.utilityToolType = MEASUREMENT_TYPE$1;\r\n    Angle.TID300Representation = TID300CobbAngle$1;\r\n    Angle.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\r\n        if (!TrackingIdentifier.includes(\":\")) {\r\n            return false;\r\n        }\r\n        var _a = TrackingIdentifier.split(\":\"), cornerstone3DTag = _a[0], toolType = _a[1];\r\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\r\n            return false;\r\n        }\r\n        return toolType === MEASUREMENT_TYPE$1;\r\n    };\r\n    return Angle;\r\n}());\r\nMeasurementReport.registerTool(Angle);\n\nvar TID300CobbAngle = utilities.TID300.CobbAngle;\r\nvar MEASUREMENT_TYPE = \"CobbAngle\";\r\nvar trackingIdentifierTextValue$4 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(MEASUREMENT_TYPE);\r\nvar CobbAngle = /** @class */ (function () {\r\n    function CobbAngle() {\r\n    }\r\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\r\n    CobbAngle.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a;\r\n        var _b = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, CobbAngle.toolType), defaultState = _b.defaultState, NUMGroup = _b.NUMGroup, SCOORDGroup = _b.SCOORDGroup, ReferencedFrameNumber = _b.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var GraphicData = SCOORDGroup.GraphicData;\r\n        var worldCoords = [];\r\n        for (var i = 0; i < GraphicData.length; i += 2) {\r\n            var point = imageToWorldCoords(referencedImageId, [\r\n                GraphicData[i],\r\n                GraphicData[i + 1]\r\n            ]);\r\n            worldCoords.push(point);\r\n        }\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            handles: {\r\n                points: [\r\n                    worldCoords[0],\r\n                    worldCoords[1],\r\n                    worldCoords[2],\r\n                    worldCoords[3]\r\n                ],\r\n                activeHandleIndex: 0,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            cachedStats: (_a = {},\r\n                _a[\"imageId:\".concat(referencedImageId)] = {\r\n                    angle: NUMGroup\r\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\r\n                        : null\r\n                },\r\n                _a),\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    CobbAngle.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var _a = data.cachedStats, cachedStats = _a === void 0 ? {} : _a, handles = data.handles;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"CobbAngle.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var start1 = worldToImageCoords(referencedImageId, handles.points[0]);\r\n        var end1 = worldToImageCoords(referencedImageId, handles.points[1]);\r\n        var start2 = worldToImageCoords(referencedImageId, handles.points[2]);\r\n        var end2 = worldToImageCoords(referencedImageId, handles.points[3]);\r\n        var point1 = { x: start1[0], y: start1[1] };\r\n        var point2 = { x: end1[0], y: end1[1] };\r\n        var point3 = { x: start2[0], y: start2[1] };\r\n        var point4 = { x: end2[0], y: end2[1] };\r\n        var angle = (cachedStats[\"imageId:\".concat(referencedImageId)] || {}).angle;\r\n        return {\r\n            point1: point1,\r\n            point2: point2,\r\n            point3: point3,\r\n            point4: point4,\r\n            rAngle: angle,\r\n            trackingIdentifierTextValue: trackingIdentifierTextValue$4,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    CobbAngle.toolType = MEASUREMENT_TYPE;\r\n    CobbAngle.utilityToolType = MEASUREMENT_TYPE;\r\n    CobbAngle.TID300Representation = TID300CobbAngle;\r\n    CobbAngle.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\r\n        if (!TrackingIdentifier.includes(\":\")) {\r\n            return false;\r\n        }\r\n        var _a = TrackingIdentifier.split(\":\"), cornerstone3DTag = _a[0], toolType = _a[1];\r\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\r\n            return false;\r\n        }\r\n        return toolType === MEASUREMENT_TYPE;\r\n    };\r\n    return CobbAngle;\r\n}());\r\nMeasurementReport.registerTool(CobbAngle);\n\nfunction isValidCornerstoneTrackingIdentifier(trackingIdentifier) {\r\n    if (!trackingIdentifier.includes(\":\")) {\r\n        return false;\r\n    }\r\n    var _a = trackingIdentifier.split(\":\"), cornerstone3DTag = _a[0], toolType = _a[1];\r\n    if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\r\n        return false;\r\n    }\r\n    // The following is needed since the new cornerstone3D has changed\r\n    // case names such as EllipticalRoi to EllipticalROI\r\n    return toolType.toLowerCase() === this.toolType.toLowerCase();\r\n}\n\nvar TID300Circle = utilities.TID300.Circle;\r\nvar CIRCLEROI = \"CircleROI\";\r\nvar CircleROI = /** @class */ (function () {\r\n    function CircleROI() {\r\n    }\r\n    /** Gets the measurement data for cornerstone, given DICOM SR measurement data. */\r\n    CircleROI.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a;\r\n        var _b = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, CircleROI.toolType), defaultState = _b.defaultState, NUMGroup = _b.NUMGroup, SCOORDGroup = _b.SCOORDGroup, ReferencedFrameNumber = _b.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var GraphicData = SCOORDGroup.GraphicData;\r\n        // GraphicData is ordered as [centerX, centerY, endX, endY]\r\n        var pointsWorld = [];\r\n        for (var i = 0; i < GraphicData.length; i += 2) {\r\n            var worldPos = imageToWorldCoords(referencedImageId, [\r\n                GraphicData[i],\r\n                GraphicData[i + 1]\r\n            ]);\r\n            pointsWorld.push(worldPos);\r\n        }\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            handles: {\r\n                points: __spreadArray([], pointsWorld, true),\r\n                activeHandleIndex: 0,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            cachedStats: (_a = {},\r\n                _a[\"imageId:\".concat(referencedImageId)] = {\r\n                    area: NUMGroup\r\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\r\n                        : 0,\r\n                    // Dummy values to be updated by cornerstone\r\n                    radius: 0,\r\n                    perimeter: 0\r\n                },\r\n                _a),\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    /**\r\n     * Gets the TID 300 representation of a circle, given the cornerstone representation.\r\n     *\r\n     * @param {Object} tool\r\n     * @returns\r\n     */\r\n    CircleROI.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var _a = data.cachedStats, cachedStats = _a === void 0 ? {} : _a, handles = data.handles;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"CircleROI.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var center = worldToImageCoords(referencedImageId, handles.points[0]);\r\n        var end = worldToImageCoords(referencedImageId, handles.points[1]);\r\n        var points = [];\r\n        points.push({ x: center[0], y: center[1] });\r\n        points.push({ x: end[0], y: end[1] });\r\n        var _b = cachedStats[\"imageId:\".concat(referencedImageId)] || {}, area = _b.area, radius = _b.radius;\r\n        var perimeter = 2 * Math.PI * radius;\r\n        return {\r\n            area: area,\r\n            perimeter: perimeter,\r\n            radius: radius,\r\n            points: points,\r\n            trackingIdentifierTextValue: this.trackingIdentifierTextValue,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    CircleROI.trackingIdentifierTextValue = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(CIRCLEROI);\r\n    CircleROI.toolType = CIRCLEROI;\r\n    CircleROI.utilityToolType = CIRCLEROI;\r\n    CircleROI.TID300Representation = TID300Circle;\r\n    CircleROI.isValidCornerstoneTrackingIdentifier = isValidCornerstoneTrackingIdentifier;\r\n    return CircleROI;\r\n}());\r\nMeasurementReport.registerTool(CircleROI);\n\nvar TID300Ellipse = utilities.TID300.Ellipse;\r\nvar ELLIPTICALROI = \"EllipticalROI\";\r\nvar EPSILON = 1e-4;\r\nvar EllipticalROI = /** @class */ (function () {\r\n    function EllipticalROI() {\r\n    }\r\n    EllipticalROI.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a;\r\n        var _b = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, EllipticalROI.toolType), defaultState = _b.defaultState, NUMGroup = _b.NUMGroup, SCOORDGroup = _b.SCOORDGroup, ReferencedFrameNumber = _b.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var GraphicData = SCOORDGroup.GraphicData;\r\n        // GraphicData is ordered as [majorAxisStartX, majorAxisStartY, majorAxisEndX, majorAxisEndY, minorAxisStartX, minorAxisStartY, minorAxisEndX, minorAxisEndY]\r\n        // But Cornerstone3D points are ordered as top, bottom, left, right for the\r\n        // ellipse so we need to identify if the majorAxis is horizontal or vertical\r\n        // in the image plane and then choose the correct points to use for the ellipse.\r\n        var pointsWorld = [];\r\n        for (var i = 0; i < GraphicData.length; i += 2) {\r\n            var worldPos = imageToWorldCoords(referencedImageId, [\r\n                GraphicData[i],\r\n                GraphicData[i + 1]\r\n            ]);\r\n            pointsWorld.push(worldPos);\r\n        }\r\n        var majorAxisStart = vec3.fromValues.apply(vec3, pointsWorld[0]);\r\n        var majorAxisEnd = vec3.fromValues.apply(vec3, pointsWorld[1]);\r\n        var minorAxisStart = vec3.fromValues.apply(vec3, pointsWorld[2]);\r\n        var minorAxisEnd = vec3.fromValues.apply(vec3, pointsWorld[3]);\r\n        var majorAxisVec = vec3.create();\r\n        vec3.sub(majorAxisVec, majorAxisEnd, majorAxisStart);\r\n        // normalize majorAxisVec to avoid scaling issues\r\n        vec3.normalize(majorAxisVec, majorAxisVec);\r\n        var minorAxisVec = vec3.create();\r\n        vec3.sub(minorAxisVec, minorAxisEnd, minorAxisStart);\r\n        vec3.normalize(minorAxisVec, minorAxisVec);\r\n        var imagePlaneModule = metadata.get(\"imagePlaneModule\", referencedImageId);\r\n        if (!imagePlaneModule) {\r\n            throw new Error(\"imageId does not have imagePlaneModule metadata\");\r\n        }\r\n        var columnCosines = imagePlaneModule.columnCosines;\r\n        // find which axis is parallel to the columnCosines\r\n        var columnCosinesVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\r\n        var projectedMajorAxisOnColVec = vec3.dot(columnCosinesVec, majorAxisVec);\r\n        var projectedMinorAxisOnColVec = vec3.dot(columnCosinesVec, minorAxisVec);\r\n        var absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);\r\n        var absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);\r\n        var ellipsePoints = [];\r\n        if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON) {\r\n            ellipsePoints = [\r\n                pointsWorld[0],\r\n                pointsWorld[1],\r\n                pointsWorld[2],\r\n                pointsWorld[3]\r\n            ];\r\n        }\r\n        else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON) {\r\n            ellipsePoints = [\r\n                pointsWorld[2],\r\n                pointsWorld[3],\r\n                pointsWorld[0],\r\n                pointsWorld[1]\r\n            ];\r\n        }\r\n        else {\r\n            console.warn(\"OBLIQUE ELLIPSE NOT YET SUPPORTED\");\r\n        }\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            handles: {\r\n                points: __spreadArray([], ellipsePoints, true),\r\n                activeHandleIndex: 0,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            cachedStats: (_a = {},\r\n                _a[\"imageId:\".concat(referencedImageId)] = {\r\n                    area: NUMGroup\r\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\r\n                        : 0\r\n                },\r\n                _a),\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    EllipticalROI.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var _a = data.cachedStats, cachedStats = _a === void 0 ? {} : _a, handles = data.handles;\r\n        var rotation = data.initialRotation || 0;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"EllipticalROI.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var top, bottom, left, right;\r\n        // this way when it's restored we can assume the initial rotation is 0.\r\n        if (rotation == 90 || rotation == 270) {\r\n            bottom = worldToImageCoords(referencedImageId, handles.points[2]);\r\n            top = worldToImageCoords(referencedImageId, handles.points[3]);\r\n            left = worldToImageCoords(referencedImageId, handles.points[0]);\r\n            right = worldToImageCoords(referencedImageId, handles.points[1]);\r\n        }\r\n        else {\r\n            top = worldToImageCoords(referencedImageId, handles.points[0]);\r\n            bottom = worldToImageCoords(referencedImageId, handles.points[1]);\r\n            left = worldToImageCoords(referencedImageId, handles.points[2]);\r\n            right = worldToImageCoords(referencedImageId, handles.points[3]);\r\n        }\r\n        // find the major axis and minor axis\r\n        var topBottomLength = Math.abs(top[1] - bottom[1]);\r\n        var leftRightLength = Math.abs(left[0] - right[0]);\r\n        var points = [];\r\n        if (topBottomLength > leftRightLength) {\r\n            // major axis is bottom to top\r\n            points.push({ x: top[0], y: top[1] });\r\n            points.push({ x: bottom[0], y: bottom[1] });\r\n            // minor axis is left to right\r\n            points.push({ x: left[0], y: left[1] });\r\n            points.push({ x: right[0], y: right[1] });\r\n        }\r\n        else {\r\n            // major axis is left to right\r\n            points.push({ x: left[0], y: left[1] });\r\n            points.push({ x: right[0], y: right[1] });\r\n            // minor axis is bottom to top\r\n            points.push({ x: top[0], y: top[1] });\r\n            points.push({ x: bottom[0], y: bottom[1] });\r\n        }\r\n        var area = (cachedStats[\"imageId:\".concat(referencedImageId)] || {}).area;\r\n        return {\r\n            area: area,\r\n            points: points,\r\n            trackingIdentifierTextValue: this.trackingIdentifierTextValue,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    EllipticalROI.trackingIdentifierTextValue = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(ELLIPTICALROI);\r\n    EllipticalROI.toolType = ELLIPTICALROI;\r\n    EllipticalROI.utilityToolType = ELLIPTICALROI;\r\n    EllipticalROI.TID300Representation = TID300Ellipse;\r\n    EllipticalROI.isValidCornerstoneTrackingIdentifier = isValidCornerstoneTrackingIdentifier;\r\n    return EllipticalROI;\r\n}());\r\nMeasurementReport.registerTool(EllipticalROI);\n\nvar TID300Polyline$1 = utilities.TID300.Polyline;\r\nvar TOOLTYPE = \"RectangleROI\";\r\nvar trackingIdentifierTextValue$3 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(TOOLTYPE);\r\nvar RectangleROI = /** @class */ (function () {\r\n    function RectangleROI() {\r\n    }\r\n    RectangleROI.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a;\r\n        var _b = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, RectangleROI.toolType), defaultState = _b.defaultState, NUMGroup = _b.NUMGroup, SCOORDGroup = _b.SCOORDGroup, ReferencedFrameNumber = _b.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var GraphicData = SCOORDGroup.GraphicData;\r\n        var worldCoords = [];\r\n        for (var i = 0; i < GraphicData.length; i += 2) {\r\n            var point = imageToWorldCoords(referencedImageId, [\r\n                GraphicData[i],\r\n                GraphicData[i + 1]\r\n            ]);\r\n            worldCoords.push(point);\r\n        }\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            handles: {\r\n                points: [\r\n                    worldCoords[0],\r\n                    worldCoords[1],\r\n                    worldCoords[3],\r\n                    worldCoords[2]\r\n                ],\r\n                activeHandleIndex: 0,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            cachedStats: (_a = {},\r\n                _a[\"imageId:\".concat(referencedImageId)] = {\r\n                    area: NUMGroup\r\n                        ? NUMGroup.MeasuredValueSequence.NumericValue\r\n                        : null\r\n                },\r\n                _a),\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    RectangleROI.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var _a = data.cachedStats, cachedStats = _a === void 0 ? {} : _a, handles = data.handles;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"CobbAngle.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var corners = handles.points.map(function (point) {\r\n            return worldToImageCoords(referencedImageId, point);\r\n        });\r\n        var area = cachedStats.area, perimeter = cachedStats.perimeter;\r\n        return {\r\n            points: [\r\n                corners[0],\r\n                corners[1],\r\n                corners[3],\r\n                corners[2],\r\n                corners[0]\r\n            ],\r\n            area: area,\r\n            perimeter: perimeter,\r\n            trackingIdentifierTextValue: trackingIdentifierTextValue$3,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    RectangleROI.toolType = TOOLTYPE;\r\n    RectangleROI.utilityToolType = TOOLTYPE;\r\n    RectangleROI.TID300Representation = TID300Polyline$1;\r\n    RectangleROI.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\r\n        if (!TrackingIdentifier.includes(\":\")) {\r\n            return false;\r\n        }\r\n        var _a = TrackingIdentifier.split(\":\"), cornerstone3DTag = _a[0], toolType = _a[1];\r\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\r\n            return false;\r\n        }\r\n        return toolType === TOOLTYPE;\r\n    };\r\n    return RectangleROI;\r\n}());\r\nMeasurementReport.registerTool(RectangleROI);\n\nvar TID300Length = utilities.TID300.Length;\nvar LENGTH = \"Length\";\nvar trackingIdentifierTextValue$2 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(LENGTH);\nvar Length = /*#__PURE__*/function () {\n  function Length() {\n    _classCallCheck(this, Length);\n  }\n  _createClass(Length, null, [{\n    key: \"getMeasurementData\",\n    value:\n    // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n    function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Length.toolType),\n        defaultState = _MeasurementReport$ge.defaultState,\n        NUMGroup = _MeasurementReport$ge.NUMGroup,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n        ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      }\n      var state = defaultState;\n      state.annotation.data = {\n        handles: {\n          points: [worldCoords[0], worldCoords[1]],\n          activeHandleIndex: 0,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        cachedStats: _defineProperty({}, \"imageId:\".concat(referencedImageId), {\n          length: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        }),\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n        finding = tool.finding,\n        findingSites = tool.findingSites,\n        metadata = tool.metadata;\n      var _data$cachedStats = data.cachedStats,\n        cachedStats = _data$cachedStats === void 0 ? {} : _data$cachedStats,\n        handles = data.handles;\n      var referencedImageId = metadata.referencedImageId;\n      if (!referencedImageId) {\n        throw new Error(\"Length.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n      var start = worldToImageCoords(referencedImageId, handles.points[0]);\n      var end = worldToImageCoords(referencedImageId, handles.points[1]);\n      var point1 = {\n        x: start[0],\n        y: start[1]\n      };\n      var point2 = {\n        x: end[0],\n        y: end[1]\n      };\n      var _ref = cachedStats[\"imageId:\".concat(referencedImageId)] || {},\n        distance = _ref.length;\n      return {\n        point1: point1,\n        point2: point2,\n        distance: distance,\n        trackingIdentifierTextValue: trackingIdentifierTextValue$2,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n  return Length;\n}();\nLength.toolType = LENGTH;\nLength.utilityToolType = LENGTH;\nLength.TID300Representation = TID300Length;\nLength.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone3DTag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n  return toolType === LENGTH;\n};\nMeasurementReport.registerTool(Length);\n\nvar TID300Polyline = utilities.TID300.Polyline;\r\nvar PLANARFREEHANDROI = \"PlanarFreehandROI\";\r\nvar trackingIdentifierTextValue$1 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(PLANARFREEHANDROI);\r\nvar closedContourThreshold = 1e-5;\r\nvar PlanarFreehandROI = /** @class */ (function () {\r\n    function PlanarFreehandROI() {\r\n    }\r\n    PlanarFreehandROI.getMeasurementData = function (MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\r\n        var _a = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, PlanarFreehandROI.toolType), defaultState = _a.defaultState, SCOORDGroup = _a.SCOORDGroup, ReferencedFrameNumber = _a.ReferencedFrameNumber;\r\n        var referencedImageId = defaultState.annotation.metadata.referencedImageId;\r\n        var GraphicData = SCOORDGroup.GraphicData;\r\n        var worldCoords = [];\r\n        for (var i = 0; i < GraphicData.length; i += 2) {\r\n            var point = imageToWorldCoords(referencedImageId, [\r\n                GraphicData[i],\r\n                GraphicData[i + 1]\r\n            ]);\r\n            worldCoords.push(point);\r\n        }\r\n        var distanceBetweenFirstAndLastPoint = vec3.distance(worldCoords[worldCoords.length - 1], worldCoords[0]);\r\n        var isOpenContour = true;\r\n        // If the contour is closed, this should have been encoded as exactly the same point, so check for a very small difference.\r\n        if (distanceBetweenFirstAndLastPoint < closedContourThreshold) {\r\n            worldCoords.pop(); // Remove the last element which is duplicated.\r\n            isOpenContour = false;\r\n        }\r\n        var points = [];\r\n        if (isOpenContour) {\r\n            points.push(worldCoords[0], worldCoords[worldCoords.length - 1]);\r\n        }\r\n        var state = defaultState;\r\n        state.annotation.data = {\r\n            polyline: worldCoords,\r\n            isOpenContour: isOpenContour,\r\n            handles: {\r\n                points: points,\r\n                activeHandleIndex: null,\r\n                textBox: {\r\n                    hasMoved: false\r\n                }\r\n            },\r\n            frameNumber: ReferencedFrameNumber\r\n        };\r\n        return state;\r\n    };\r\n    PlanarFreehandROI.getTID300RepresentationArguments = function (tool, worldToImageCoords) {\r\n        var data = tool.data, finding = tool.finding, findingSites = tool.findingSites, metadata = tool.metadata;\r\n        var isOpenContour = data.isOpenContour, polyline = data.polyline;\r\n        var referencedImageId = metadata.referencedImageId;\r\n        if (!referencedImageId) {\r\n            throw new Error(\"PlanarFreehandROI.getTID300RepresentationArguments: referencedImageId is not defined\");\r\n        }\r\n        var points = polyline.map(function (worldPos) {\r\n            return worldToImageCoords(referencedImageId, worldPos);\r\n        });\r\n        if (!isOpenContour) {\r\n            // Need to repeat the first point at the end of to have an explicitly closed contour.\r\n            var firstPoint = points[0];\r\n            // Explicitly expand to avoid ciruclar references.\r\n            points.push([firstPoint[0], firstPoint[1]]);\r\n        }\r\n        var area = 0; // TODO -> The tool doesn't have these stats yet.\r\n        var perimeter = 0;\r\n        return {\r\n            points: points,\r\n            area: area,\r\n            perimeter: perimeter,\r\n            trackingIdentifierTextValue: trackingIdentifierTextValue$1,\r\n            finding: finding,\r\n            findingSites: findingSites || []\r\n        };\r\n    };\r\n    PlanarFreehandROI.toolType = PLANARFREEHANDROI;\r\n    PlanarFreehandROI.utilityToolType = PLANARFREEHANDROI;\r\n    PlanarFreehandROI.TID300Representation = TID300Polyline;\r\n    PlanarFreehandROI.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\r\n        if (!TrackingIdentifier.includes(\":\")) {\r\n            return false;\r\n        }\r\n        var _a = TrackingIdentifier.split(\":\"), cornerstone3DTag = _a[0], toolType = _a[1];\r\n        if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\r\n            return false;\r\n        }\r\n        return toolType === PLANARFREEHANDROI;\r\n    };\r\n    return PlanarFreehandROI;\r\n}());\r\nMeasurementReport.registerTool(PlanarFreehandROI);\n\nvar TID300Point = utilities.TID300.Point;\nvar PROBE = \"Probe\";\nvar trackingIdentifierTextValue = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(PROBE);\nvar Probe = /*#__PURE__*/function () {\n  function Probe() {\n    _classCallCheck(this, Probe);\n  }\n  _createClass(Probe, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Probe.toolType),\n        defaultState = _MeasurementReport$ge.defaultState,\n        SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n        ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      }\n      var state = defaultState;\n      state.annotation.data = {\n        handles: {\n          points: worldCoords,\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n        metadata = tool.metadata;\n      var finding = tool.finding,\n        findingSites = tool.findingSites;\n      var referencedImageId = metadata.referencedImageId;\n      if (!referencedImageId) {\n        throw new Error(\"Probe.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n      var points = data.handles.points;\n      var pointsImage = points.map(function (point) {\n        var pointImage = worldToImageCoords(referencedImageId, point);\n        return {\n          x: pointImage[0],\n          y: pointImage[1]\n        };\n      });\n      var TID300RepresentationArguments = {\n        points: pointsImage,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        findingSites: findingSites || [],\n        finding: finding\n      };\n      return TID300RepresentationArguments;\n    }\n  }]);\n  return Probe;\n}();\nProbe.toolType = PROBE;\nProbe.utilityToolType = PROBE;\nProbe.TID300Representation = TID300Point;\nProbe.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n    _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n    cornerstone3DTag = _TrackingIdentifier$s2[0],\n    toolType = _TrackingIdentifier$s2[1];\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n  return toolType === PROBE;\n};\nMeasurementReport.registerTool(Probe);\n\nvar Cornerstone3D = {\r\n    Bidirectional: Bidirectional,\r\n    CobbAngle: CobbAngle,\r\n    Angle: Angle,\r\n    Length: Length,\r\n    CircleROI: CircleROI,\r\n    EllipticalROI: EllipticalROI,\r\n    RectangleROI: RectangleROI,\r\n    ArrowAnnotate: ArrowAnnotate,\r\n    Probe: Probe,\r\n    PlanarFreehandROI: PlanarFreehandROI,\r\n    MeasurementReport: MeasurementReport,\r\n    CodeScheme: CodingScheme,\r\n    CORNERSTONE_3D_TAG: CORNERSTONE_3D_TAG\r\n};\n\nvar Colors = data.Colors,\n  BitArray = data.BitArray;\n\n// TODO: Is there a better name for this? RGBAInt?\n// Should we move it to Colors.js\nfunction dicomlab2RGBA(cielab) {\n  var rgba = Colors.dicomlab2RGB(cielab).map(function (x) {\n    return Math.round(x * 255);\n  });\n  rgba.push(255);\n  return rgba;\n}\n\n// TODO: Copied these functions in from VTK Math so we don't need a dependency.\n// I guess we should put them somewhere\n// https://github.com/Kitware/vtk-js/blob/master/Sources/Common/Core/Math/index.js\nfunction cross(x, y, out) {\n  var Zx = x[1] * y[2] - x[2] * y[1];\n  var Zy = x[2] * y[0] - x[0] * y[2];\n  var Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n}\nfunction norm(x) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n    default:\n      {\n        var sum = 0;\n        for (var i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n        return Math.sqrt(sum);\n      }\n  }\n}\nfunction normalize(x) {\n  var den = norm(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n  return den;\n}\nfunction subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n}\n\n// TODO: This is a useful utility on its own. We should move it somewhere?\n// dcmjs.adapters.vtk.Multiframe? dcmjs.utils?\nfunction geometryFromFunctionalGroups(dataset, PerFrameFunctionalGroups) {\n  var geometry = {};\n  var pixelMeasures = dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence;\n  var planeOrientation = dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence;\n\n  // Find the origin of the volume from the PerFrameFunctionalGroups' ImagePositionPatient values\n  //\n  // TODO: assumes sorted frames. This should read the ImagePositionPatient from each frame and\n  // sort them to obtain the first and last position along the acquisition axis.\n  var firstFunctionalGroup = PerFrameFunctionalGroups[0];\n  var lastFunctionalGroup = PerFrameFunctionalGroups[PerFrameFunctionalGroups.length - 1];\n  var firstPosition = firstFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);\n  var lastPosition = lastFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);\n  geometry.origin = firstPosition;\n\n  // NB: DICOM PixelSpacing is defined as Row then Column,\n  // unlike ImageOrientationPatient\n  geometry.spacing = [pixelMeasures.PixelSpacing[1], pixelMeasures.PixelSpacing[0], pixelMeasures.SpacingBetweenSlices].map(Number);\n  geometry.dimensions = [dataset.Columns, dataset.Rows, PerFrameFunctionalGroups.length].map(Number);\n  var orientation = planeOrientation.ImageOrientationPatient.map(Number);\n  var columnStepToPatient = orientation.slice(0, 3);\n  var rowStepToPatient = orientation.slice(3, 6);\n  geometry.planeNormal = [];\n  cross(columnStepToPatient, rowStepToPatient, geometry.planeNormal);\n  geometry.sliceStep = [];\n  subtract(lastPosition, firstPosition, geometry.sliceStep);\n  normalize(geometry.sliceStep);\n  geometry.direction = columnStepToPatient.concat(rowStepToPatient).concat(geometry.sliceStep);\n  return geometry;\n}\nvar Segmentation = /*#__PURE__*/function () {\n  function Segmentation() {\n    _classCallCheck(this, Segmentation);\n  }\n\n  /**\r\n   * Produces an array of Segments from an input DICOM Segmentation dataset\r\n   *\r\n   * Segments are returned with Geometry values that can be used to create\r\n   * VTK Image Data objects.\r\n   *\r\n   * @example Example usage to create VTK Volume actors from each segment:\r\n   *\r\n   * const actors = [];\r\n   * const segments = generateToolState(dataset);\r\n   * segments.forEach(segment => {\r\n   *   // now make actors using the segment information\r\n   *   const scalarArray = vtk.Common.Core.vtkDataArray.newInstance({\r\n   *        name: \"Scalars\",\r\n   *        numberOfComponents: 1,\r\n   *        values: segment.pixelData,\r\n   *    });\r\n   *\r\n   *    const imageData = vtk.Common.DataModel.vtkImageData.newInstance();\r\n   *    imageData.getPointData().setScalars(scalarArray);\r\n   *    imageData.setDimensions(geometry.dimensions);\r\n   *    imageData.setSpacing(geometry.spacing);\r\n   *    imageData.setOrigin(geometry.origin);\r\n   *    imageData.setDirection(geometry.direction);\r\n   *\r\n   *    const mapper = vtk.Rendering.Core.vtkVolumeMapper.newInstance();\r\n   *    mapper.setInputData(imageData);\r\n   *    mapper.setSampleDistance(2.);\r\n   *\r\n   *    const actor = vtk.Rendering.Core.vtkVolume.newInstance();\r\n   *    actor.setMapper(mapper);\r\n   *\r\n   *    actors.push(actor);\r\n   * });\r\n   *\r\n   * @param dataset\r\n   * @return {{}}\r\n   */\n  _createClass(Segmentation, null, [{\n    key: \"generateSegments\",\n    value: function generateSegments(dataset) {\n      if (dataset.SegmentSequence.constructor.name !== \"Array\") {\n        dataset.SegmentSequence = [dataset.SegmentSequence];\n      }\n      dataset.SegmentSequence.forEach(function (segment) {\n        // TODO: other interesting fields could be extracted from the segment\n        // TODO: Read SegmentsOverlay field\n        // http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.8.20.2.html\n\n        // TODO: Looks like vtkColor only wants RGB in 0-1 values.\n        // Why was this example converting to RGBA with 0-255 values?\n        var color = dicomlab2RGBA(segment.RecommendedDisplayCIELabValue);\n        segments[segment.SegmentNumber] = {\n          color: color,\n          functionalGroups: [],\n          offset: null,\n          size: null,\n          pixelData: null\n        };\n      });\n\n      // make a list of functional groups per segment\n      dataset.PerFrameFunctionalGroupsSequence.forEach(function (functionalGroup) {\n        var segmentNumber = functionalGroup.SegmentIdentificationSequence.ReferencedSegmentNumber;\n        segments[segmentNumber].functionalGroups.push(functionalGroup);\n      });\n\n      // determine per-segment index into the pixel data\n      // TODO: only handles one-bit-per pixel\n      var frameSize = Math.ceil(dataset.Rows * dataset.Columns / 8);\n      var nextOffset = 0;\n      Object.keys(segments).forEach(function (segmentNumber) {\n        var segment = segments[segmentNumber];\n        segment.numberOfFrames = segment.functionalGroups.length;\n        segment.size = segment.numberOfFrames * frameSize;\n        segment.offset = nextOffset;\n        nextOffset = segment.offset + segment.size;\n        var packedSegment = dataset.PixelData.slice(segment.offset, nextOffset);\n        segment.pixelData = BitArray.unpack(packedSegment);\n        var geometry = geometryFromFunctionalGroups(dataset, segment.functionalGroups);\n        segment.geometry = geometry;\n      });\n      return segments;\n    }\n  }]);\n  return Segmentation;\n}();\n\nvar VTKjs = {\n  Segmentation: Segmentation\n};\n\nvar adapters = {\n  Cornerstone: Cornerstone,\n  Cornerstone3D: Cornerstone3D,\n  VTKjs: VTKjs\n};\n\nexport { adapters as adaptersSR, adapters as default };\n//# sourceMappingURL=adapters.es.js.map\n","\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n"],"names":["ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","i","Symbol","toPrimitive","call","TypeError","String","Number","_toPrimitive","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","configurable","writable","key","_createClass","protoProps","staticProps","prototype","obj","value","_slicedToArray","arr","Array","isArray","_arrayWithHoles","l","iterator","n","u","a","f","next","done","return","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","minLen","toString","slice","constructor","name","test","len","arr2","toArray","x","codeMeaningEquals","codeMeaningName","contentItem","ConceptNameCodeSequence","CodeMeaning","TID1500$1","TID1500","addAccessors$1","addAccessors","StructuredReport$1","StructuredReport","Normalizer$3","Normalizer","TID1500MeasurementReport$1","TID1500MeasurementReport","TID1501MeasurementGroup$1","TID1501MeasurementGroup","DicomMetaDictionary$3","DicomMetaDictionary","FINDING$2","CodingSchemeDesignator","CodeValue","FINDING_SITE$2","FINDING_SITE_OLD$1","codeValueMatch$1","group","code","oldCode","MeasurementReport$1","MeasurementReport","this","MeasurementGroup","ContentSequence","contentSequenceArr","findingGroup","find","findingSiteGroups","NUMGroup","ValueType","SCOORDGroup","ReferencedSOPSequence","ReferencedSOPInstanceUID","ReferencedFrameNumber","defaultState","sopInstanceUid","frameIndex","complete","finding","ConceptCodeSequence","undefined","findingSites","map","fsg","description","findingSite","location","toolState","metadataProvider","options","allMeasurementGroups","firstImageId","Error","generalSeriesModule","get","studyInstanceUID","seriesInstanceUID","imageId","sopCommonModule","frameNumber","toolData","toolTypes","ReferencedSOPClassUID","sopClassUID","sopInstanceUID","isMultiframeSOPClassUID","measurementGroups","toolType","toolTypeData","toolClass","CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE","data","Measurements","tool","args","getTID300RepresentationArguments","TID300Representation","getTID300ContentItem$1","getMeasurementGroup$1","concat","_MeasurementReport","TID1501MeasurementGroups","fileMetaInformationVersionArray","Uint8Array","derivationSourceDataset","StudyInstanceUID","SeriesInstanceUID","_meta","FileMetaInformationVersion","Value","buffer","vr","TransferSyntaxUID","ImplementationClassUID","uid","ImplementationVersionName","_vrMap","PixelData","report","dataset","assign","hooks","ContentTemplateSequence","TemplateIdentifier","imagingMeasurementContent","measurementData","cornerstoneToolClasses","CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE","registeredToolClasses","measurementGroup","TrackingIdentifierValue","TextValue","getToolClass","tc","isValidCornerstoneTrackingIdentifier","measurement","getMeasurementData","console","log","utilityToolType","MEASUREMENT_BY_TOOLTYPE","CORNERSTONE_4_TAG","TID300Length$1","TID300","Length","LENGTH$1","Length$1","_MeasurementReport$ge","getSetupMeasurementData","state","MeasuredValueSequence","NumericValue","handles","start","end","textBox","hasMoved","movesIndependently","drawnIndependently","allowedOutsideImage","hasBoundingBox","_SCOORDGroup$GraphicD","GraphicData","y","point1","point2","distance","trackingIdentifierTextValue","TrackingIdentifier","includes","_TrackingIdentifier$s2","split","cornerstone4Tag","registerTool","TID300Polyline$3","Polyline","FreehandRoi","points","active","cachedStats","area","color","invalidated","_tool$cachedStats","_cachedStats$area","_cachedStats$perimete","perimeter","TID300Bidirectional$1","Bidirectional","BIDIRECTIONAL$1","Bidirectional$1","longAxisNUMGroup","longAxisSCOORDGroup","shortAxisNUMGroup","shortAxisSCOORDGroup","longestDiameter","shortestDiameter","bottomRight","Math","max","highlight","index","perpendicularStart","perpendicularEnd","isCreating","toolName","visible","_tool$handles","longAxis","shortAxis","longAxisLength","shortAxisLength","TID300Ellipse$1","Ellipse","ELLIPTICALROI$1","EllipticalRoi","majorAxis","minorAxis","minorAxisLength","sqrt","pow","minorAxisDirection","halfMinorAxisLength","corner1","corner2","initialRotation","halfXLength","abs","halfYLength","center","TID300Circle$1","Circle","CIRCLEROI$1","CircleRoi","radius","PI","TID300Point$2","Point","ARROW_ANNOTATE$1","CORNERSTONEFREETEXT$1","ArrowAnnotate$1","ArrowAnnotate","text","TID300RepresentationArguments","_utilities$orientatio$1","orientation","rotateDirectionCosinesInPlane$1","rotateDirectionCosinesInPlane","flipIOP$1","flipImageOrientationPatient","flipMatrix2D$1","flipMatrix2D","rotateMatrix902D$1","rotateMatrix902D","datasetToBlob$1","datasetToBlob","BitArray$2","BitArray","DicomMessage$1","DicomMessage","DicomMetaDictionary$2","Normalizer$2","SegmentationDerivation$1","Segmentation","Segmentation$3","generateSegmentation","images","brushData","includeSliceSpacing","segments","image0","dims","columns","rows","z","xy","_getSegCount","seg","isMultiframe","datasets","arrayBuffer","byteArray","dicomData","readFile","naturalizeDataset","dict","namifyDataset","meta","_arrayBuffer","_dicomData","_dataset","multiframe","normalizeToDataset","_createSegFromImages$1","_getNumberOfFramesPer","segmentIndicies","referencedFramesPerSegment","imageIdSpecificToolState","_i2","segIdx","brush","pixelData","_getNumberOfFramesPerSegment","NumberOfFrames","setNumberOfFrames","_i","segmentIndex","referencedFrameIndicies","referencedFrameNumbers","element","segment","addSegment","_extractCornerstoneToolsPixelData","bitPackPixelData","generateToolState","imageIds","imagePlaneModule","warn","validOrientations","iop","orientations","h","v","iop90","getValidOrientations$1","rowCosines","columnCosines","SharedFunctionalGroupsSequence","sharedImageOrientationPatient","PlaneOrientationSequence","ImageOrientationPatient","sliceLength","Columns","Rows","segMetadata","segmentSequence","SegmentSequence","seriesInstanceUid","ReferencedSeriesSequence","getSegmentMetadata$1","segType","SegmentationType","unpack","MaximumFractionalValue","onlyMaxAndZero","unpackPixelData$1","PerFrameFunctionalGroupsSequence","inPlane","PerFrameFunctionalGroups","ImageOrientationPatientI","alignedPixelDataI","alignPixelDataWithSourceData$1","SegmentIdentificationSequence","ReferencedSegmentNumber","addImageIdSpecificBrushToolState","getImageIdOfSourceImage","DerivationImageSequence","SourceImageSequence","referencedFrames","pixelDataIndex","brushPixelData","p","numSegments","pixelData2D","brushDataI","cToolsPixelData","imageIdFrameNumber","getImageIdOfReferencedFrame$1","getImageIdOfReferencedSingleFramedSOPInstance$1","compareIOP","dx","iop1","iop2","_utilities$orientatio","flipIOP","nearlyEqual","BitArray$1","DicomMetaDictionary$1","Normalizer$1","SegmentationDerivation","_utilities$compressio","compression","encode","decode","Segmentation$2","inputLabelmaps3D","userOptions","fillSegmentation$1","_createSegFromImages","skipOverlapping","tolerance","getValidOrientations","getSegmentMetadata","rleEncodedFrames","BitsStored","error","unpackPixelData","insertFunction","sourceDataDimensions","some","operation","compareArrays","absDotColumnCosines","absDotRowCosines","checkIfPerpendicular","checkOrientation","overlapping","groupsLen","frameSegmentsMapping","Map","_loop3","getSegmentIndex","frameSegment","findReferenceSourceImageId","imageIdIndex","findIndex","has","segmentArray","set","_step","_iterator","allowArrayLike","it","F","s","err","normalCompletion","didErr","step","_createForOfIteratorHelper","entries","role","temp2DArray","Uint16Array","fill","_frameSegment","alignPixelDataWithSourceData","j","checkSEGsOverlapping","insertOverlappingPixelDataPlanar","insertPixelDataPlanar","segmentsOnFrameArray","segmentsOnFrame","arrayBufferLength","labelmapBufferArray","ArrayBuffer","fillSegmentation","generateSegmentationDefaultOptions","rleEncode","segmentation","labelmaps3D","numberOfFrames","referencedFramesPerLabelmap","_loop","labelmap3D","labelmapIndex","labelmaps2D","metadata","_loop2","labelmap2D","segmentsOnLabelmap","_labelmapIndex","segmentMetadata","labelmaps","_getLabelmapsFromRefernecedFrameIndicies","addSegmentFromLabelmap","assignToDataset","BitsAllocated","HighBit","SegmentationFractionalType","frame","FrameOfReferenceUID","PerFrameFunctionalGroup","frameSourceImageSequence","getImageIdOfReferencedFrame","getImageIdOfReferencedSingleFramedSOPInstance","getImageIdOfSourceImagebySourceImageSequence","ReferencedSeriesInstanceUID","PlanePositionSequence","ImagePositionPatient","imageIdsIndexc","sourceImageMetadata","getImageIdOfSourceImagebyGeometry","M","m","tempBuffer","tempSegmentsOnFrame","numberOfSegs","segmentIndexToProcess","_loop4","labelmap2DView","segmentOnFrame","_loop5","byteOffset","array1","array2","Segmentation$1","labelmaps3DorBrushData","cornerstoneToolsVersion","TID300CobbAngle$2","CobbAngle","COBB_ANGLE","CobbAngle$1","rAngle","start2","end2","point3","point4","TID300Angle","Angle","ANGLE","Angle$1","middle","TID300Polyline$2","RectangleRoi","Cornerstone","__assign","hasOwnProperty","__spreadArray","to","pack","ar","SuppressedError","CORNERSTONE_3D_TAG","CodingScheme","codeValues","CORNERSTONEFREETEXT","FINDING","FINDING_SITE","FINDING_SITE_OLD","codeValueMatch","getMeasurementGroup","worldToImageCoords","getTID300ContentItem","getCornerstoneLabelFromDefaultState","_a","cornersoneFreeTextCodingValue","freeTextLabel","fs","generateDatasetMeta","sopInstanceUIDToImageIdMap","referencedImageId","annotation","annotationUID","frameOfReferenceUID","label","generateReport","sopInstanceUIDsToSeriesInstanceUIDMap","derivationSourceDatasets","dsd","generateDerivationSourceDataset","tid1500MeasurementReport","imageToWorldCoords","TrackingIdentifierValue_1","TID300Point$1","ARROW_ANNOTATE","trackingIdentifierTextValue$7","worldCoords","point","imagePixelModule","xOffset","yOffset","secondPoint","arrowFirst","activeHandleIndex","_data$handles","pointImage","cornerstone3DTag","TID300Bidirectional","BIDIRECTIONAL","trackingIdentifierTextValue$6","_b","width","shortAxisPoints","longAxisPoints","firstPointPairs","secondPointPairs","longAxisStartImage","longAxisEndImage","shortAxisStartImage","shortAxisEndImage","TID300CobbAngle$1","MEASUREMENT_TYPE$1","trackingIdentifierTextValue$5","angle","start1","TID300CobbAngle","MEASUREMENT_TYPE","trackingIdentifierTextValue$4","end1","trackingIdentifier","toLowerCase","TID300Circle","CIRCLEROI","CircleROI","pointsWorld","worldPos","TID300Ellipse","ELLIPTICALROI","EPSILON","EllipticalROI","majorAxisStart","majorAxisEnd","minorAxisStart","minorAxisEnd","majorAxisVec","minorAxisVec","columnCosinesVec","projectedMajorAxisOnColVec","projectedMinorAxisOnColVec","absoluteOfMajorDotProduct","absoluteOfMinorDotProduct","ellipsePoints","top","bottom","left","right","rotation","TID300Polyline$1","TOOLTYPE","trackingIdentifierTextValue$3","RectangleROI","corners","TID300Length","LENGTH","trackingIdentifierTextValue$2","_data$cachedStats","TID300Polyline","PLANARFREEHANDROI","trackingIdentifierTextValue$1","PlanarFreehandROI","isOpenContour","pop","polyline","firstPoint","TID300Point","PROBE","Probe","Cornerstone3D","CodeScheme","Colors","normalize","den","sum","norm","adapters","VTKjs","cielab","rgba","RecommendedDisplayCIELabValue","dicomlab2RGB","round","SegmentNumber","functionalGroups","offset","size","functionalGroup","segmentNumber","frameSize","ceil","nextOffset","packedSegment","geometry","pixelMeasures","PixelMeasuresSequence","planeOrientation","firstFunctionalGroup","lastFunctionalGroup","firstPosition","lastPosition","origin","spacing","PixelSpacing","SpacingBetweenSlices","dimensions","out","Zx","Zy","Zz","columnStepToPatient","rowStepToPatient","planeNormal","sliceStep","b","subtract","direction","geometryFromFunctionalGroups","module","exports","result","isBuffer","iota","hasTypedArrays","Float64Array","compare1st","order","stride","terms","sort","compileConstructor","dtype","dimension","className","join","useGetters","Function","procedure","CACHED_CONSTRUCTORS","indices","index_str","shapeArg","strideArg","a_vars","c_vars","tShape","tStride","idx","shape","ctor","array","d","sz","arrayDType","ctor_list"],"sourceRoot":""}