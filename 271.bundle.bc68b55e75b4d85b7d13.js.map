{"version":3,"file":"271.bundle.bc68b55e75b4d85b7d13.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/_hydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/promptHydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/initRTToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/OHIFCornerstoneRTViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["async function _hydrateRTDisplaySet({\n  rtDisplaySet,\n  viewportIndex,\n  servicesManager,\n}) {\n  const {\n    segmentationService,\n    hangingProtocolService,\n    viewportGridService,\n  } = servicesManager.services;\n\n  const displaySetInstanceUID = rtDisplaySet.referencedDisplaySetInstanceUID;\n\n  let segmentationId = null;\n\n  // We need the hydration to notify panels about the new segmentation added\n  const suppressEvents = false;\n\n  segmentationId = await segmentationService.createSegmentationForRTDisplaySet(\n    rtDisplaySet,\n    segmentationId,\n    suppressEvents\n  );\n\n  segmentationService.hydrateSegmentation(rtDisplaySet.displaySetInstanceUID);\n\n  const { viewports } = viewportGridService.getState();\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    viewportIndex,\n    displaySetInstanceUID\n  );\n\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  // Todo: fix this after we have a better way for stack viewport segmentations\n\n  // check every viewport in the viewports to see if the displaySetInstanceUID\n  // is being displayed, if so we need to update the viewport to use volume viewport\n  // (if already is not using it) since Cornerstone3D currently only supports\n  // volume viewport for segmentation\n  viewports.forEach((viewport, index) => {\n    if (index === viewportIndex) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      rtDisplaySet.displaySetInstanceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportIndex: index,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          initialImageOptions: {\n            preset: 'middle',\n          },\n        },\n      });\n    }\n  });\n\n  // Do the entire update at once\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  return true;\n}\n\nexport default _hydrateRTDisplaySet;\n","import hydrateRTDisplaySet from './_hydrateRT';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateRT({\n  servicesManager,\n  rtDisplaySet,\n  viewportIndex,\n  toolGroupId = 'default',\n}) {\n  const { uiViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function(resolve, reject) {\n    const promptResult = await _askHydrate(\n      uiViewportDialogService,\n      viewportIndex\n    );\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      const isHydrated = await hydrateRTDisplaySet({\n        rtDisplaySet,\n        viewportIndex,\n        toolGroupId,\n        servicesManager,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(uiViewportDialogService, viewportIndex) {\n  return new Promise(function(resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: 'secondary',\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportIndex,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateRT;\n","function createRTToolGroupAndAddTools(\n  ToolGroupService,\n  customizationService,\n  toolGroupId\n) {\n  const { tools } =\n    customizationService.get('cornerstone.overlayViewportTools') ?? {};\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools, {});\n}\n\nexport default createRTToolGroupAndAddTools;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OHIF, { utils } from '@ohif/core';\nimport {\n  ViewportActionBar,\n  useViewportGrid,\n  LoadingIndicatorTotalPercent,\n} from '@ohif/ui';\n\nimport _hydrateRTdisplaySet from '../utils/_hydrateRT';\nimport promptHydrateRT from '../utils/promptHydrateRT';\nimport _getStatusComponent from './_getStatusComponent';\nimport createRTToolGroupAndAddTools from '../utils/initRTToolGroup';\nimport _hydrateRTDisplaySet from '../utils/_hydrateRT';\n\nconst { formatDate } = utils;\nconst RT_TOOLGROUP_BASE_NAME = 'RTToolGroup';\n\nfunction OHIFCornerstoneRTViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    viewportIndex,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n  } = props;\n\n  const {\n    displaySetService,\n    toolGroupService,\n    segmentationService,\n    uiNotificationService,\n    customizationService,\n  } = servicesManager.services;\n\n  const toolGroupId = `${RT_TOOLGROUP_BASE_NAME}-${viewportIndex}`;\n\n  // RT viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('RT viewport should only have a single display set');\n  }\n\n  const rtDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  // States\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the RT is opened and segments are loaded into the\n  // segmentation panel, and RT is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the RT. However,\n  // loading basically means RT loading over network and bit unpacking of the\n  // RT data.\n  const [isHydrated, setIsHydrated] = useState(rtDisplaySet.isHydrated);\n  const [rtIsLoading, setRtIsLoading] = useState(!rtDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportIndex } = viewportGrid;\n\n  const referencedDisplaySet = rtDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const {\n      displaySet: referencedDisplaySet,\n    } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, rtDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n      ></Component>\n    );\n  }, [viewportIndex, rtDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      direction = direction === 'left' ? -1 : 1;\n      const segmentationId = rtDisplaySet.displaySetInstanceUID;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      // Segment 0 is always background\n      if (newSelectedSegmentIndex >= numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      segmentationService.jumpToSegmentCenter(\n        segmentationId,\n        newSelectedSegmentIndex,\n        toolGroupId\n      );\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (rtIsLoading) {\n      return;\n    }\n\n    promptHydrateRT({\n      servicesManager,\n      viewportIndex,\n      rtDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportIndex, rtDisplaySet, rtIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (\n          evt.rtDisplaySet.displaySetInstanceUID ===\n          rtDisplaySet.displaySetInstanceUID\n        ) {\n          setRtIsLoading(false);\n        }\n\n        if (evt.overlappingSegments) {\n          uiNotificationService.show({\n            title: 'Overlapping Segments',\n            message:\n              'Overlapping segments detected which is not currently supported',\n            type: 'warning',\n          });\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [rtDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [rtDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports[activeViewportIndex];\n        if (\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\n        ) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportIndex: activeViewportIndex,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    toolGroup = createRTToolGroupAndAddTools(\n      toolGroupService,\n      customizationService,\n      toolGroupId\n    );\n\n    setToolGroupCreated(true);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(rtDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(\n        toolGroupId\n      );\n      referencedDisplaySetRef.current = null;\n    };\n  }, [rtDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportIndex,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n    SeriesNumber,\n  } = referencedDisplaySetRef.current.metadata;\n\n  const onStatusClick = async () => {\n    const isHydrated = await _hydrateRTDisplaySet({\n      rtDisplaySet,\n      viewportIndex,\n      servicesManager,\n    });\n\n    setIsHydrated(isHydrated);\n  };\n\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onSegmentChange}\n        getStatusComponent={() => {\n          return _getStatusComponent({\n            isHydrated,\n            onStatusClick,\n          });\n        }}\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          currentSeries: SeriesNumber,\n          seriesDescription: `RT Viewport ${SeriesDescription}`,\n          patientInformation: {\n            patientName: PatientName\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\n              : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\n            spacing:\n              SpacingBetweenSlices !== undefined\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\n                : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\n        {rtIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"w-full h-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading RTSTRUCT...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneRTViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportIndex: PropTypes.number.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneRTViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneRTViewport;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, Tooltip } from '@ohif/ui';\n\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  const { t } = useTranslation('Common');\n  const loadStr = t('LOAD');\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => (\n        <div>This Segmentation is loaded in the segmentation panel</div>\n      );\n      break;\n    case false:\n      StatusIcon = () => <Icon name=\"status-untracked\" />;\n\n      ToolTipMessage = () => <div>Click LOAD to load RTSTRUCT.</div>;\n  }\n\n  const StatusArea = () => (\n    <div className=\"flex h-6 leading-6 cursor-default text-sm text-white\">\n      <div className=\"min-w-[45px] flex items-center p-1 rounded-l-xl rounded-r bg-customgray-100\">\n        <StatusIcon />\n        <span className=\"ml-1\">RTSTRUCT</span>\n      </div>\n      {!isHydrated && (\n        <div\n          className=\"ml-1 px-1.5 rounded cursor-pointer hover:text-black bg-primary-main hover:bg-primary-light\"\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n          onMouseUp={onStatusClick}\n        >\n          {loadStr}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n"],"names":["async","rtDisplaySet","viewportIndex","servicesManager","segmentationService","hangingProtocolService","viewportGridService","services","displaySetInstanceUID","referencedDisplaySetInstanceUID","segmentationId","createSegmentationForRTDisplaySet","hydrateSegmentation","viewports","getState","updatedViewports","getViewportsRequireUpdate","setDisplaySetsForViewports","forEach","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","push","viewportOptions","initialImageOptions","preset","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","toolGroupId","uiViewportDialogService","Promise","resolve","reject","promptResult","message","actions","type","text","value","onSubmit","result","hide","show","onOutsideClick","_askHydrate","hydrateRTDisplaySet","ToolGroupService","customizationService","tools","get","createToolGroupAndAddTools","formatDate","utils","OHIFCornerstoneRTViewport","props","children","displaySets","viewportLabel","extensionManager","displaySetService","toolGroupService","uiNotificationService","length","Error","viewportGrid","useViewportGrid","isToolGroupCreated","setToolGroupCreated","useState","selectedSegment","setSelectedSegment","isHydrated","setIsHydrated","rtIsLoading","setRtIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","activeViewportIndex","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","React","_extends","viewportType","orientation","viewportId","onSegmentChange","direction","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateRT","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","overlappingSegments","title","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createRTToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","key","onStatusClick","_hydrateRTDisplaySet","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","t","useTranslation","loadStr","Icon","name","StatusArea","className","onMouseUp","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}