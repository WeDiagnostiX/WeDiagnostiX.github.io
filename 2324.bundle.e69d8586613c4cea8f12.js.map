{"version":3,"file":"2324.bundle.e69d8586613c4cea8f12.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/types/segmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../ui/src/components/DualInputRange/DualInputRange.tsx","webpack:///../../ui/src/components/DualInputRange/index.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/brushToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/cscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/paintFillToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIStartEndToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/sscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/undoToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/baseToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segConfigurationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segmentationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { CONSTANTS } from '@cornerstonejs/tools';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(segDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({ extensionManager, servicesManager, segDisplaySet, headers }) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  let usedRecommendedDisplayCIELabValue = true;\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = data.RecommendedDisplayCIELabValue;\n\n      if (data.rgba) {\n        data.rgba = dicomlabToRGB(data.rgba);\n      } else {\n        usedRecommendedDisplayCIELabValue = false;\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\n      }\n    }\n  });\n\n  if (results.overlappingSegments) {\n    uiNotificationService.show({\n      title: 'Overlapping Segments',\n      message:\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\n      type: 'warning',\n    });\n  }\n\n  if (!usedRecommendedDisplayCIELabValue) {\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\n    uiNotificationService.show({\n      title: 'DICOM SEG import',\n      message:\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\n      type: 'warning',\n      duration: 5000,\n    });\n  }\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","export enum SegmentationPanelMode {\n  Expanded = 'expanded',\n  Dropdown = 'dropdown',\n}\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React from 'react';\nimport { Dialog } from '@ohif/ui';\nimport { ChromePicker } from 'react-color';\n\nimport './colorPickerDialog.css';\n\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\n  const dialogId = 'pick-color';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.rgbaColor, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment Color',\n        value: { rgbaColor },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          const handleChange = color => {\n            setValue({ rgbaColor: color.rgb });\n          };\n\n          return (\n            <ChromePicker\n              color={value.rgbaColor}\n              onChange={handleChange}\n              presetColors={[]}\n              width={300}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callColorPickerDialog;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Typography from '../Typography';\nimport './DualInputRange.css';\nimport {Button} from \"@ohif/ui\";\n\n\n/**\n * React Range Input component\n * it has two props, value and onChange\n * value is a number value\n * onChange is a function that will be called when the range input is changed\n *\n *\n */\n\nconst DualInputRange: React.FC<{\n    value1: number;\n    value2: number;\n    onChange: (value1, value2) => void;\n    minValue: number;\n    maxValue: number;\n    step: number;\n    unit?: string;\n    containerClassName?: string;\n    inputClassName?: string;\n    labelClassName?: string;\n    labelVariant?: string;\n    showLabel?: boolean;\n    labelPosition?: string;\n    trackColor?: string;\n}> = ({\n                                value1,\n                                value2,\n                                onChange,\n                                minValue,\n                                maxValue,\n                                step = 1,\n                                unit = '',\n                                containerClassName,\n                                inputClassName,\n                                labelClassName,\n                                labelVariant,\n                                showLabel = true,\n                                labelPosition = '',\n                                trackColor,\n                            }) => {\n    const [rangeValue1, setRangeValue1] = useState(value1);\n    const [rangeValue2, setRangeValue2] = useState(value2);\n\n    useEffect(() => {\n        //Change value 1\n        if(value1 < minValue) return\n        setRangeValue1(value1);\n        // if (value1 >= rangeValue2) {\n        //     setRangeValue2(value1);\n        // }\n\n        //Change value 2\n        if(value2 > maxValue) return\n        setRangeValue2(value2);\n        // if (value2 <= rangeValue1) {\n        //     setRangeValue1(value2);\n        // }\n    }, [value1, value2])\n\n    const handleChange1 = (e) => {\n        const value = Number(e.target.value);\n        if(value < minValue) return\n        setRangeValue1(value);\n        // if (value >= rangeValue2) {\n        //     setRangeValue2(value);\n        // }\n        onChange(value, rangeValue2)\n    };\n\n    const handleChange2 = (e) => {\n        const value = Number(e.target.value);\n        if(value > maxValue) return\n        setRangeValue2(value);\n        // if (value <= rangeValue1) {\n        //     setRangeValue1(value);\n        // }\n        onChange(rangeValue1, value)\n    }\n\n    const rangeValuePercentage1 = ((rangeValue1 - minValue) / (maxValue - minValue)) * 100;\n    const rangeValuePercentage2 = ((rangeValue2 - minValue) / (maxValue - minValue)) * 100;\n\n    const rangeValueForStr1 = step >= 1 ? rangeValue1.toFixed(0) : rangeValue1.toFixed(1);\n    const rangeValueForStr2 = step >= 1 ? rangeValue2.toFixed(0) : rangeValue2.toFixed(1);\n\n    return (\n        <div\n            style={{flexDirection:'column'}}\n            className={`flex items-center cursor-pointer space-x-1 ${\n                containerClassName ? containerClassName : ''\n            }`}\n        >\n            {showLabel && labelPosition === 'left' && (\n                <>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\n                    >\n                        {rangeValueForStr1}\n                        {unit}\n                    </Typography>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\n                    >\n                        {rangeValueForStr2}\n                        {unit}\n                    </Typography>\n                </>\n            )}\n            <div style={{flexDirection:'row'}} className={'flex pb-[5px]'}>\n                <input\n                    type=\"range\"\n                    min={minValue}\n                    max={maxValue}\n                    value={rangeValue1}\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\n                        inputClassName ? inputClassName : ''\n                    }`}\n                    style={{background: '#3a3f99',}}\n                    onChange={handleChange1}\n                    id=\"myRange1\"\n                    step={step}\n                />\n                <input\n                    type=\"range\"\n                    min={minValue}\n                    max={maxValue}\n                    value={rangeValue2}\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\n                        inputClassName ? inputClassName : ''\n                    }`}\n                    style={{background: '#3a3f99',}}\n                    onChange={handleChange2}\n                    id=\"myRange2\"\n                    step={step}\n                />\n            </div>\n            {showLabel && (!labelPosition || labelPosition === 'right') && (\n                <div style={{flexDirection:'row', width:'100%'}} className={'flex pb-[5px]'}>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\n                    >\n                        {'Min : '}\n                        {rangeValueForStr1}\n                        {unit}\n                    </Typography>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\n                    >\n                        {'Max : '}\n                        {rangeValueForStr2}\n                        {unit}\n                    </Typography>\n                </div>\n            )}\n            <div className={'flex'} style={{width:'100%'}}>\n                <div className={'flex w-1/2 justify-center'}>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 - 10}})\n                    }}>{'--'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 - 1}})\n                    }}>{'-'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 + 1}})\n                    }}>{'+'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 + 10}})\n                    }}>{'++'}</Button>\n                </div>\n                <div className={'flex w-1/2 justify-center'}>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 - 10}})\n                    }}>{'--'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 - 1}})\n                    }}>{'-'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 + 1}})\n                    }}>{'+'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 + 10}})\n                    }}>{'++'}</Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DualInputRange;\n","import DualInputRange from './DualInputRange';\n\nexport default DualInputRange;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport InputRange from '../../../../../platform/ui/src/components/InputRange';\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport { useTranslation } from 'react-i18next';\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\nimport {\n    getEnabledElement,\n    VolumeViewport,\n    triggerEvent,\n    eventTarget,\n    utilities as csUtils,\n    utilities,\n} from '@cornerstonejs/core';\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Brush_Strategies {\n    FILL_INSIDE_CIRCLE      =   'FILL_INSIDE_CIRCLE',\n    THRESHOLD_INSIDE_CIRCLE =   'THRESHOLD_INSIDE_CIRCLE',\n    THRESHOLD_INSIDE_SPHERE =   'THRESHOLD_INSIDE_SPHERE',\n    ERASE_INSIDE_CIRCLE     =   'ERASE_INSIDE_CIRCLE',\n    FILL_INSIDE_SPHERE      =   'FILL_INSIDE_SPHERE',\n    ERASE_INSIDE_SPHERE     =   'ERASE_INSIDE_SPHERE'\n}\n\nconst EVENT_LISTENERS = []\n\nexport default function BrushToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\n\n    // @ts-ignore\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n    const [activeStrategy, setActiveStrategy] = useState(Brush_Strategies.FILL_INSIDE_CIRCLE)\n    const [brushSize, setBrushSize] = useState(25)\n    const [circleThresholdValue, setCircleThresholdValue] = useState([-1000, 5000])\n    const [segments, setSegments] = useState([])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        setActiveStrategy(brushInstance.configuration.activeStrategy)\n        setBrushSize(brushInstance.configuration.brushSize)\n        setCircleThresholdValue(brushInstance.configuration.strategySpecificConfiguration.THRESHOLD.threshold)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                    const {label, segmentIndex} = args\n                    setEraseFocus(label)\n                    brushInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                }\n        }}))\n\n        toolGroup.setToolActive('Undo', {\n            bindings: [\n                {\n                    mouseButton: MouseBindings.Primary, // Left Click\n                },\n            ],\n        })\n    }, [])\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                        const {label, segmentIndex} = args\n                        brushInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                        setEraseFocus(label)\n                    }\n                }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    //Update list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                        const {label, segmentIndex} = args\n                        brushInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                        setEraseFocus(label)\n                    }\n                }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('Brush');\n        brushInstance.setConfiguration({\n            brushSize: brushSize,\n            activeStrategy: activeStrategy,\n            strategySpecificConfiguration: {\n                THRESHOLD: {\n                    threshold: circleThresholdValue, // E.g. CT Fat // Only used during threshold strategies.\n                },\n            },\n        })\n    }, [brushSize, activeStrategy, circleThresholdValue])\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n            const worldPoints = evt.detail.currentPoints.world\n            const imageData = viewport.getImageData()\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\n\n            index[0] = Math.round(index[0]);\n            index[1] = Math.round(index[1]);\n            index[2] = Math.round(index[2]);\n\n            const {scalarData, dimensions} = imageData\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value =\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setCircleThresholdValue([value, circleThresholdValue[1]])\n                } else {\n                    setCircleThresholdValue([circleThresholdValue[0], value])\n                }\n            }\n        }\n    }\n\n    //Create event listeners to catch mouse click for pipette threshold tool\n    //Activte probe tool is pipette active to display HU values on screen\n    //Go back to brush tool if we deactivate pipette\n    //Wrapper around addEventListener to not have multiple listeners\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            viewport.id,\n            viewport.renderingEngineId\n        );\n        const currentElement = viewport.element\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n                EVENT_LISTENERS[evt] = null\n            }\n            EVENT_LISTENERS[evt] = callback\n            currentElement.addEventListener(evt, callback)\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n            EVENT_LISTENERS[evt] = null\n        }\n\n        if(pipetteMode.active){\n            toolGroup.setToolPassive('Brush')\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        }\n        else{\n            toolGroup.setToolPassive('DragProbe')\n            toolGroup.setToolActive('Brush', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.removeEvent(Events.MOUSE_DRAG)\n        }\n    }, [pipetteMode.active, pipetteMode.minimum])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Paint Brush Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Filling mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Brush_Strategies.FILL_INSIDE_CIRCLE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Brush_Strategies.FILL_INSIDE_CIRCLE)}}\n                            >{'Circle'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_CIRCLE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Brush_Strategies.THRESHOLD_INSIDE_CIRCLE)}}\n                            >{'Circle Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Brush_Strategies.FILL_INSIDE_SPHERE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Brush_Strategies.FILL_INSIDE_SPHERE)}}\n                            >{'Sphere'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_SPHERE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Brush_Strategies.THRESHOLD_INSIDE_SPHERE)}}\n                            >{'Sphere Threshold'}</Button>\n                        </div>\n                        <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1\"></div>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Erase mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Brush_Strategies.ERASE_INSIDE_CIRCLE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Brush_Strategies.ERASE_INSIDE_CIRCLE)}}\n                            >{'Circle'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Brush_Strategies.ERASE_INSIDE_SPHERE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Brush_Strategies.ERASE_INSIDE_SPHERE)}}\n                            >{'Sphere'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on :'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1 mt-[8px]\"></div>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Attributes'}\n                        </span>\n                        <div className=\"flex items-center col-span-2\">\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\">{'Radius'}</div>\n                            <InputRange\n                                minValue={0}\n                                maxValue={100}\n                                value={brushSize}\n                                onChange={(value) => {setBrushSize(value)}}\n                                step={1}\n                                containerClassName=\"mt-[4px] mb-[4px]\"\n                                inputClassName=\"w-[64px]\"\n                                labelClassName=\"text-white text-[12px]\"\n                                unit=\"px\"\n                            />\n                        </div>\n                        {\n                            (activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_CIRCLE\n                            || activeStrategy === Brush_Strategies.THRESHOLD_INSIDE_SPHERE) && (\n                                <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                                    <DualInputRange\n                                        minValue={-1000}\n                                        maxValue={5000}\n                                        value1={circleThresholdValue[0]}\n                                        value2={circleThresholdValue[1]}\n                                        onChange={(vmin, vmax) => {setCircleThresholdValue([vmin, vmax])}}\n                                        step={5}\n                                        containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                        inputClassName=\"w-full\"\n                                        labelClassName=\"text-white text-[12px] w-full\"\n                                        unit=\"HU\"\n                                    />\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                                    <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                        <Button\n                                            fullWidth={true}\n                                            size={'small'}\n                                            color={'secondary'}\n                                            onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                        >{'Minimum'}</Button>\n                                        <Button\n                                            fullWidth={true}\n                                            size={'small'}\n                                            color={'secondary'}\n                                            onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                        >{'Maximum'}</Button>\n                                    </div>\n                                    {\n                                        pipetteMode.active && (\n                                            <Button\n                                                size={'small'}\n                                                color={'secondary'}\n                                                onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                            >\n                                                {'Back to annotation'}\n                                            </Button>\n                                        )\n                                    }\n                                </div>\n                            )\n\n                        }\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Circle_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function CircleScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Circle_Strategies.FILL_INSIDE)\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const cscissorsInstance = toolGroup.getToolInstance('CircleScissor');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                            const {label, segmentIndex} = args\n                            cscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                            setEraseFocus(label)\n                        }\n                    }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\n        setActiveStrategy(circleInstance.configuration.activeStrategy)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                setEraseFocus(label)\n                circleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n            }\n        }}))\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const CircleInstance = toolGroup.getToolInstance('CircleScissor');\n        CircleInstance.setConfiguration({\n            activeStrategy: activeStrategy,\n        })\n    }, [activeStrategy])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Circle Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Circle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Circle_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Circle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Circle_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on :'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\n\nexport default function PaintFillToolEdit ({}){\n    const [isMinimized, setIsMinimized] = useState(false);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Fill Holes Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'No configurations for this tool'}\n                        </span>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport InputRange from '../../../../../platform/ui/src/components/InputRange'\nimport {Button, useViewportGrid} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\n\nconst EVENT_LISTENERS = []\n\nexport default function RectangleROIStartEndThresholdToolEdit ({\n                                                            segmentationService,\n                                                            cornerstoneViewportService,\n                                                            commandsManager\n                                                       }){\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [thresholdValue, setThresholdValue] = useState([-1000, 5000])\n    const [slicesToPropagate, setSlicesToPropagate] = useState(0)\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\n\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\n        setSlicesToPropagate(rectangleROIInstance.configuration.numSlicesToPropagate)\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const brushInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\n        brushInstance.setConfiguration({\n            numSlicesToPropagate: slicesToPropagate\n        })\n        console.log('SET CONFIGURATION', slicesToPropagate)\n    }, [slicesToPropagate])\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n            const worldPoints = evt.detail.currentPoints.world\n            const imageData = viewport.getImageData()\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\n\n            index[0] = Math.round(index[0]);\n            index[1] = Math.round(index[1]);\n            index[2] = Math.round(index[2]);\n\n            const {scalarData, dimensions} = imageData\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value =\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setThresholdValue([value, thresholdValue[1]])\n                } else {\n                    setThresholdValue([thresholdValue[0], value])\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            viewport.id,\n            viewport.renderingEngineId\n        );\n        const currentElement = viewport.element\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n                EVENT_LISTENERS[evt] = null\n            }\n            EVENT_LISTENERS[evt] = callback\n            currentElement.addEventListener(evt, callback)\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n            EVENT_LISTENERS[evt] = null\n        }\n\n        if(pipetteMode.active){\n            toolGroup.setToolPassive('RectangleROIStartEndThreshold')\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        }\n        else{\n            toolGroup.setToolPassive('DragProbe')\n            toolGroup.setToolActive('RectangleROIStartEndThreshold', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.removeEvent(Events.MOUSE_DRAG)\n        }\n    }, [pipetteMode.active, pipetteMode.minimum])\n\n    const computeThreshold = () => {\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors()\n        const imageVolumes = actors\n            .map((va) => {\n                // prefer the referenceUID if it is set, since it can be a derived actor\n                // and the uid does not necessarily match the volumeId\n                const actorUID = va.referenceId ?? va.uid;\n                return cache.getVolume(actorUID);\n            })\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\n            .filter((iv) => !!iv);\n\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIStartEndThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        const annotation = csTools.annotation.state.getAnnotation(\n            annotationUID\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIStartEndThresholdAnnotation;\n\n        if (!annotation) return\n\n        // Todo: this only works for volumeViewport\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        const segmentations = segmentationService.getSegmentations();\n\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n            selectedAnnotationUIDs,\n            segmentationVolume,\n            [\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\n            ],\n            {\n                numSlicesToProject: 0,\n                overwrite: false,\n                overlapType: 1,\n                segmentIndex: segmentations[0].activeSegmentIndex,\n            }\n        );\n    }\n\n    const deleteRegion = () => {\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIStartEndThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n        console.log('selected annotation uid', selectedAnnotationUIDs)\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        console.log('CSTOOLS STATE', csTools.annotation.state)\n        csTools.annotation.state.removeAnnotation(annotationUID)\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render()\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'3D Rectangle Threshold Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                            <DualInputRange\n                                minValue={-1000}\n                                maxValue={5000}\n                                value1={thresholdValue[0]}\n                                value2={thresholdValue[1]}\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\n                                step={5}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"\"\n                            />\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                >{'Minimum'}</Button>\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                >{'Maximum'}</Button>\n                            </div>\n                            {\n                                pipetteMode.active && (\n                                    <Button\n                                        size={'small'}\n                                        color={'secondary'}\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                    >\n                                        {'Back to annotation'}\n                                    </Button>\n                                )\n                            }\n                        </div>\n                        <div className=\"flex items-center col-span-2\" style={{width:'100%', flexDirection:'column'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Slices Propagation'}</div>\n                            <InputRange\n                                minValue={0}\n                                maxValue={200}\n                                value={slicesToPropagate}\n                                onChange={(value) => {setSlicesToPropagate(value)}}\n                                step={1}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"\"\n                            />\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {computeThreshold()}}\n                            >{'Compute Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {deleteRegion()}}\n                            >{'Delete selected region'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport {Button, useViewportGrid} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\n\nconst EVENT_LISTENERS = []\n\nexport default function RectangleROIThresholdToolEdit ({\n    segmentationService,\n    cornerstoneViewportService,\n    commandsManager\n}){\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [thresholdValue, setThresholdValue] = useState([-1000, 5000])\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true})\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n            const worldPoints = evt.detail.currentPoints.world\n            const imageData = viewport.getImageData()\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round)\n\n            index[0] = Math.round(index[0]);\n            index[1] = Math.round(index[1]);\n            index[2] = Math.round(index[2]);\n\n            const {scalarData, dimensions} = imageData\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value =\n                    scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setThresholdValue([value, thresholdValue[1]])\n                } else {\n                    setThresholdValue([thresholdValue[0], value])\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            viewport.id,\n            viewport.renderingEngineId\n        );\n        const currentElement = viewport.element\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n                EVENT_LISTENERS[evt] = null\n            }\n            EVENT_LISTENERS[evt] = callback\n            currentElement.addEventListener(evt, callback)\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt])\n            EVENT_LISTENERS[evt] = null\n        }\n\n        if(pipetteMode.active){\n            toolGroup.setToolPassive('RectangleROIThreshold')\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        }\n        else{\n            toolGroup.setToolPassive('DragProbe')\n            toolGroup.setToolActive('RectangleROIThreshold', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            })\n            currentElement.removeEvent(Events.MOUSE_DRAG)\n        }\n    }, [pipetteMode.active, pipetteMode.minimum])\n\n    const computeThreshold = () => {\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors()\n        const imageVolumes = actors\n            .map((va) => {\n                // prefer the referenceUID if it is set, since it can be a derived actor\n                // and the uid does not necessarily match the volumeId\n                const actorUID = va.referenceId ?? va.uid;\n                return cache.getVolume(actorUID);\n            })\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\n            .filter((iv) => !!iv);\n\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        const annotation = csTools.annotation.state.getAnnotation(\n            annotationUID\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIThresholdAnnotation;\n\n        if (!annotation) return\n\n        // Todo: this only works for volumeViewport\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n\n        const segmentations = segmentationService.getSegmentations();\n        console.log('SEGMENTATION', segmentations)\n\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n            selectedAnnotationUIDs,\n            segmentationVolume,\n            [\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\n            ],\n            {\n                numSlicesToProject: 0,\n                overwrite: false,\n                overlapType: 1,\n                segmentIndex: segmentations[0].activeSegmentIndex,\n            }\n        );\n    }\n\n    const deleteRegion = () => {\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n        console.log('selected annotation uid', selectedAnnotationUIDs)\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        console.log('CSTOOLS STATE', csTools.annotation.state)\n        csTools.annotation.state.removeAnnotation(annotationUID)\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render()\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Rectangle Threshold Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"flex items-center col-span-2 pb-[9px]\" style={{flexDirection:'column', width:'100%'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pb-[3px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                            <DualInputRange\n                                minValue={-1000}\n                                maxValue={5000}\n                                value1={thresholdValue[0]}\n                                value2={thresholdValue[1]}\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\n                                step={5}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full pb-[3px]\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"HU\"\n                            />\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                >{'Minimum'}</Button>\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                >{'Maximum'}</Button>\n                            </div>\n                            {\n                                pipetteMode.active && (\n                                    <Button\n                                        size={'small'}\n                                        color={'secondary'}\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                    >\n                                        {'Back to annotation'}\n                                    </Button>\n                                )\n                            }\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {computeThreshold()}}\n                            >{'Compute Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {deleteRegion()}}\n                            >{'Delete selected region'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Rectangle_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function RectangleScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Rectangle_Strategies.FILL_INSIDE)\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rscissorsInstance = toolGroup.getToolInstance('RectangleScissor');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                            const {label, segmentIndex} = args\n                            rscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                            setEraseFocus(label)\n                        }\n                    }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n        setActiveStrategy(rectangleInstance.configuration.activeStrategy)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                setEraseFocus(label)\n                rectangleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n            }\n        }}))\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n        rectangleInstance.setConfiguration({\n            activeStrategy: activeStrategy,\n        })\n    }, [activeStrategy])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Rectangle Scissors Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Rectangle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Rectangle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on :'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Sphere_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function SphereScissorsToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Sphere_Strategies.FILL_INSIDE)\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const sscissorsInstance = toolGroup.getToolInstance('RectangleScissor');\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                    const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n                    setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                            const {label, segmentIndex} = args\n                            sscissorsInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n                            setEraseFocus(label)\n                        }\n                    }}))\n                }\n            );\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n        setActiveStrategy(sphereInstance.configuration.activeStrategy)\n\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0]\n        setSegments([{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)].map(s => {return {...s, onClick: (args) => {\n                const {label, segmentIndex} = args\n                setEraseFocus(label)\n                sphereInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n            }\n        }}))\n    }, [])\n\n    useEffect(() => {\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).id,\n            cornerstoneViewportService.getCornerstoneViewport(activeViewportId).renderingEngineId\n        );\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n        sphereInstance.setConfiguration({\n            activeStrategy: activeStrategy,\n        })\n    }, [activeStrategy])\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Sphere Scissors Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Sphere_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Sphere_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on :'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\nconst { Enums: csToolsEnums } = csTools\nconst { Events } = csToolsEnums\n\nclass CappedArray extends Array {\n    private readonly maxLength: number;\n\n    constructor(maxLength) {\n        super();\n        this.maxLength = maxLength;\n    }\n\n    push(...elements) {\n        // Appeler la méthode push de la classe Array parente\n        const r = super.push(...elements);\n\n        // Si la longueur dépasse maxLength, retirer les éléments les plus anciens\n        if (this.length > this.maxLength) {\n            const excess = this.length - this.maxLength;\n            this.splice(0, excess);\n        }\n\n        return r\n    }\n}\n\nconst MAX_CACHE_LENGTH = 10\nconst CACHE_SEGMENTATION_VOLUMES = new CappedArray(MAX_CACHE_LENGTH)\n\nexport default function UndoToolEdit ({cornerstoneViewportService, segmentationService}){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n    const [currentCacheIndex, setCurrentCacheIndex] = useState(CACHE_SEGMENTATION_VOLUMES.length)\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const currentElement = viewport.element\n        // Save previous segmentation states for \"undo\" functionality\n        currentElement.addEventListener(Events.MOUSE_DOWN, evt => {\n            const old_segmentation = segmentationService.getSegmentations()[0]\n            const old_seg_volume = new Uint8ClampedArray(segmentationService.getLabelmapVolume(old_segmentation.id).getScalarData())\n\n            //Add current segmentation volume in cache to save its state\n            CACHE_SEGMENTATION_VOLUMES.push(old_seg_volume)\n            setCurrentCacheIndex(CACHE_SEGMENTATION_VOLUMES.length)\n        })\n    }, [])\n\n    const apply_replace = (cacheIndex) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const currentElement = viewport.element\n\n        const previous_volume = CACHE_SEGMENTATION_VOLUMES[cacheIndex]\n        if(!previous_volume) return\n\n        const replace_event = new CustomEvent('UNDO_REDO_TOOL', {\n            detail: {\n                element: currentElement,\n                oldScalarData: previous_volume\n            }\n        })\n        window.dispatchEvent(replace_event)\n        setCurrentCacheIndex(cacheIndex)\n    }\n\n    const undo = () => {\n        if(currentCacheIndex === 0) return\n        apply_replace(currentCacheIndex - 1)\n    }\n\n    const redo = () => {\n        if(currentCacheIndex === MAX_CACHE_LENGTH) return\n        apply_replace(currentCacheIndex + 1)\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Undo / Redo Segmentation'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={undo}\n                            >{'Undo'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={redo}\n                            >{'Redo'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport {useViewportGrid} from '@ohif/ui';\nimport { useToolbar } from '@ohif/core';\nimport * as csTools from '@cornerstonejs/tools';\nconst { Enums: csToolsEnums } = csTools\nconst { Events } = csToolsEnums\nconst { state } = csTools\n\nimport BrushToolEdit from \"./brushToolEdit\";\nimport CircleScissorsToolEdit from \"./cscissorsToolEdit\";\nimport PaintFillToolEdit from \"./paintFillToolEdit\";\nimport RectangleROIStartEndThresholdToolEdit from \"./rectangleROIStartEndToolEdit\";\nimport RectangleROIThresholdToolEdit from \"./rectangleROIToolEdit\";\nimport RectangleScissorsToolEdit from \"./rscissorsToolEdit\";\nimport SphereScissorsToolEdit from \"./sscissorsToolEdit\";\nimport UndoToolEdit from \"./undoToolEdit\";\n\nconst SEG_TOOL_NAMES = [\n    'Brush',\n    'CircleScissor',\n    'PaintFill',\n    'RectangleROIStartEndThreshold',\n    'RectangleROIThreshold',\n    'RectangleScissor',\n    'SphereScissor'\n]\n\nexport default function BaseToolEdit (\n    {\n        segmentationService,\n        toolbarService,\n        toolGroupService,\n        cornerstoneViewportService,\n        commandsManager\n    }){\n    // @ts-ignore\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n    const [activeSegTool, setActiveSegTool] = useState(null)\n\n    const searchActiveSegTool = () => {\n        const toolStates = toolGroupService.getToolGroupForViewport(activeViewportId).toolOptions\n        const toolStatesArray = Object.keys(toolStates).map(function (key) {\n            return [key, toolStates[key]];\n        });\n        let activeSegTool = false\n        toolStatesArray.forEach(tool => {\n            //Check if tool is a segmentation tool\n            if (SEG_TOOL_NAMES.includes(tool[0])){\n                //Check if tool is active\n                if(tool[1].mode === 'Active'){\n                    activeSegTool = true\n                    setActiveSegTool(tool[0])\n                    return;\n                }\n            }\n        })\n        if(!activeSegTool) setActiveSegTool(null)\n    }\n\n    useEffect(() => {\n        searchActiveSegTool()\n    },[])\n\n    useEffect(() => {\n        const { unsubscribe } = toolbarService.subscribe(\n            toolbarService.EVENTS.TOOL_BAR_MODIFIED,\n            searchActiveSegTool\n        );\n\n        return () => {\n            unsubscribe();\n        };\n    }, [toolbarService]);\n\n    const renderActiveTool = () => {\n        switch (activeSegTool){\n            case 'Brush':\n                return <BrushToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'CircleScissor':\n                return <CircleScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'PaintFill':\n                return <PaintFillToolEdit />\n            case 'RectangleROIStartEndThreshold':\n                return <RectangleROIStartEndThresholdToolEdit\n                    segmentationService={segmentationService}\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    commandsManager={commandsManager}\n                />\n            case 'RectangleROIThreshold':\n                return <RectangleROIThresholdToolEdit\n                    segmentationService={segmentationService}\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    commandsManager={commandsManager}\n                />\n            case 'RectangleScissor':\n                return <RectangleScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'SphereScissor':\n                return <SphereScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            default:\n                return null\n        }\n    }\n\n    return (\n        <div>\n            {\n                activeSegTool &&\n                <UndoToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            }\n            {renderActiveTool()}\n        </div>\n    )\n}","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\nimport React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {Segmentation} from \"@ohif/extension-cornerstone/src/services/SegmentationService/SegmentationServiceTypes\";\nimport PropTypes from \"prop-types\";\nimport {saveAs, FileSaver} from 'file-saver'\n\nfunction SegmentsConfigurationImportExport({segmentationService, segmentations}) : React.JSX.Element {\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const exportConfiguration = () : void => {\n        const json = JSON.stringify(segmentations[0].segments)\n        const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n        saveAs(json_blob, 'segments_configuration.json')\n    }\n\n    const importConfiguration = () : void => {\n        console.log('SEGS AT IMPORT', segmentations)\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/json'\n        input.onchange = _ => {\n            const json_file = Array.from(input.files)[0];\n            const reader = new FileReader();\n            reader.onload = function(event) {\n                try {\n                    if (typeof event.target.result === \"string\") {\n                        for(let i = 1; i < segmentations[0].segments.length; i++){\n                            segmentationService.removeSegment(segmentations[0].id, i)\n                        }\n\n                        const jsonContent = JSON.parse(event.target.result);\n                        jsonContent.forEach(segment => {\n                            if(segment){\n                                const {segmentIndex} = segment\n                                segmentationService.addSegment(\n                                    segmentations[0].id,\n                                    segmentIndex,\n                                    viewports.get(activeViewportId).viewportOptions.toolGroupId,\n                                    segment,\n                                    true\n                                )\n                            }\n                        })\n                    }\n                    else {\n                        console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\n                    }\n                } catch (error) {\n                    console.error(\"ERROR::JSON_READING\", error);\n                }\n            };\n            reader.readAsText(json_file);\n        };\n        input.click();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Segments Configuration I/O'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\"\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={importConfiguration}\n                            >{'Import File'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={exportConfiguration}\n                            >{'Export File'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}\n\nSegmentsConfigurationImportExport.propTypes = {\n    segmentations: PropTypes.array.isRequired\n}\n\nexport default SegmentsConfigurationImportExport","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\nimport React, {useEffect, useState} from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {saveAs, FileSaver} from 'file-saver'\nimport JSZip from \"jszip\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { segmentation as cstSegmentation } from '@cornerstonejs/tools';\nimport { cache } from '@cornerstonejs/core';\n\n\nfunction SegmentationImportExport({segmentationService, segmentations, cornerstoneViewportService}) : React.JSX.Element {\n\n    const [isProcessingLayer, setIsProcessingLayer] = useState(false)\n    const [processingLayerPercent, setProcessingLayerPercent] = useState(0)\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportIndex, viewports }, viewportGridService] = useViewportGrid();\n\n    useEffect(() => {\n        if(isProcessingLayer){\n            setProcessingLayerPercent(0)\n            setTimeout(exportSegmentation, 500)\n        }\n    }, [isProcessingLayer])\n\n    const exportSegmentation = () => {\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id)\n        const {\n            dimensions,\n            direction,\n            scalarData\n        } = labelmapVolume\n        const segments_info = segmentations[0].segments\n        const existing_segment_indexes = segments_info\n            .map((s, i) => {if (s) return i})\n            .filter(i => i)\n        const data = new Uint32Array(scalarData)\n        console.log('START COMPUTING INDEX ARRAY...')\n\n        //Convert segmentation in PNG Images using JSON\n        //Iterate through one layer (one PNG image)\n        const all_layers_blobs = new Array<Blob>(dimensions[2] - 1)\n        for(let layer_i = 0; layer_i < data.length; layer_i += (dimensions[0] * dimensions[1])){\n            const current_processed_layer = layer_i / (dimensions[0] * dimensions[1])\n            const segmented_layer = new Uint8ClampedArray(dimensions[0] * dimensions[1] * 4)\n                .fill(0)\n                .map((el, i) => {return (i - 3) % 4 === 0 ? 255 : el})\n            const scalar_layer = data.slice(layer_i, layer_i + (dimensions[0] * dimensions[1]))\n            //Map through existing segment indexes\n            Promise.allSettled(existing_segment_indexes.map(segment_index => {\n                //Get indexes of values that matches the segment_index in parameter\n                const mapIndexSerial = (segment_index) => {\n                    return scalar_layer\n                        .map((v, i) => {if(v !== 0 && v === segment_index) return i})\n                        .filter(i => i !== 0)\n                }\n                return mapIndexSerial(segment_index)\n            })).then((indexes_array) => {\n                //List of arrays of indexes matching a segment index (length = number of segment indexes)\n\n                indexes_array.forEach((promise, i) => {\n                    const segment_array = promise.value\n                    //Fill segmented layer with corresponding segment color\n                    if(segment_array.length !== 0){\n                        const corresponding_segment_index = existing_segment_indexes[i]\n                        const color_to_fill = [...segments_info[corresponding_segment_index].color, 255]\n                        segment_array.forEach(index_to_color => {\n                            segmented_layer[index_to_color * 4] = color_to_fill[0]\n                            segmented_layer[index_to_color * 4 + 1] = color_to_fill[1]\n                            segmented_layer[index_to_color * 4 + 2] = color_to_fill[2]\n                        })\n                    }\n                })\n\n                // console.log(`SEGMENTED ${current_processed_layer}`, segmented_layer)\n\n                const fillingPromise = () => {\n                    return new Promise<void>((resolve, reject) => {\n                        const canvas = document.createElement('canvas')\n                        const ctx = canvas.getContext('2d')\n                        canvas.width = dimensions[0]\n                        canvas.height = dimensions[1]\n                        const imgData = new ImageData(segmented_layer, dimensions[0], dimensions[1]);\n                        ctx.putImageData(imgData, 0, 0)\n                        canvas.toBlob((blob) => {\n                            if(blob){\n                                all_layers_blobs[current_processed_layer] = blob\n                                resolve()\n                            }\n                        }, \"image/png\")\n                    })\n                }\n                fillingPromise().then(() => {\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length\n                    setProcessingLayerPercent(~~((completed_layers * 100) / dimensions[2]))\n                })\n            })\n        }\n\n        const waitUntilArrayDone = () => {\n            return new Promise<void>((resolve, reject) => {\n                (function waitForArray(){\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length\n                    if(completed_layers === dimensions[2]) return resolve();\n                    else {\n                        setTimeout(waitForArray, 500);}\n                })()\n            })\n        }\n        waitUntilArrayDone().then(() => {\n            const zip = new JSZip()\n            //Add layers in zip as PNG files\n            all_layers_blobs.forEach((blob, index) => {\n                zip.file(`layer_${index}.png`, blob)\n            })\n\n            //Add segments information as JSON File\n            const json = JSON.stringify(segmentations[0].segments, null, '\\t')\n            const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n            zip.file('segmentation_informations.json', json_blob)\n\n            //Add scalar data as binary file\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\n            const scalarData = new Uint8Array(labelmapVolume.scalarData);\n            const dataBlob = new Blob([scalarData], { type: 'application/octet-stream' })\n            zip.file('scalarData.bin', dataBlob);\n\n            zip.generateAsync({type:'blob'}).then((content) => {\n                saveAs(content, 'segmentation.zip')\n                setIsProcessingLayer(false)\n            })\n        })\n    }\n\n    const importSegmentation = async () => {\n        console.log('SEGS AT IMPORT', segmentations);\n\n        let viewport = viewports[activeViewportIndex];\n        if (viewport.viewportOptions.viewportType !== 'volume') {\n            viewport = viewports.find(vp => vp.viewportOptions.viewportType === 'volume');\n            console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\n            viewportGridService.setActiveViewportIndex(viewport.viewportIndex);\n        }\n        const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.id);\n        const actorEntries = cornerstoneVP.getActors();\n        console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\n        const imageVolumes = actorEntries.map((va) => {\n            const actorUID = va.referenceId ?? va.uid;\n            return cache.getVolume(actorUID);\n        });\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds)[0];\n        const segmentationId = segmentationVolume.volumeId;\n        const segmentationScalarData = segmentationVolume.getScalarData();\n\n        // Load binary file\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/octet-stream';\n        input.onchange = async _ => {\n            const file = Array.from(input.files)[0];\n            const reader = new FileReader();\n            reader.onload = async function(event) {\n                const newScalarData = new Uint8Array(event.target.result as ArrayBuffer);\n                // Replace values of current scalar data\n                for(let i = 0; i < segmentationScalarData.length; i++){\n                    segmentationScalarData[i] = newScalarData[i];\n                }\n                // Trigger rendering\n                cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentationId);\n            }\n            reader.readAsArrayBuffer(file);\n        };\n        input.click();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Segmentations I/O'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={importSegmentation}\n                            >{'Import Segmentation'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {\n                                    setIsProcessingLayer(true);\n                                    exportSegmentation;\n                                }}\n                            >{'Export Segmentation'}</Button>\n                        </div>\n                        {isProcessingLayer &&\n                            <div className={'w-full mt-[9px]'}>\n                                <p style={{color:'white'}}>{'Processing layers...'}</p>\n                                <ProgressBar\n                                    className={'w-full mt-[3px]'}\n                                    bgColor={processingLayerPercent < 100 ? '#5ACCE6' : '#50C878'}\n                                    completed={processingLayerPercent}\n                                    transitionDuration={\"0.05s\"}\n                                    transitionTimingFunction={\"linear\"}\n                                />\n                            </div>\n                        }\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}\n\nSegmentationImportExport.propTypes = {\n    segmentations: PropTypes.array.isRequired\n}\n\nexport default SegmentationImportExport\n","import { createReportAsync } from '@ohif/extension-default';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport PropTypes, {element} from 'prop-types';\nimport {Button, SegmentationGroupTable, SegmentationGroupTableExpanded, useViewportGrid, ListMenu} from '@ohif/ui';\nimport { SegmentationPanelMode } from '../types/segmentation';\nimport callInputDialog from './callInputDialog';\nimport callColorPickerDialog from './colorPickerDialog';\nimport * as csTools from '@cornerstonejs/tools';\nimport BaseToolEdit from \"./segToolsEditSection/baseToolEdit\";\nimport SegmentsConfigurationImportExport from \"./segConfigurationIO\";\nimport SegmentationImportExport from \"./segmentationIO\";\nimport {useTranslation} from 'react-i18next';\n\n\nconst LABELMAP = csTools.Enums.SegmentationRepresentations.Labelmap;\nconst components = {\n  [SegmentationPanelMode.Expanded]: SegmentationGroupTableExpanded,\n  [SegmentationPanelMode.Dropdown]: SegmentationGroupTable,\n};\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n}) {\n  const [{ activeViewportId, viewports }] = useViewportGrid();\n  const {\n    segmentationService,\n    viewportGridService,\n    uiDialogService,\n    displaySetService,\n    cornerstoneViewportService,\n    toolGroupService,\n    toolbarService,\n    uiNotificationService\n  } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSegmentation');\n\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [addSegmentationClassName, setAddSegmentationClassName] = useState('');\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  // temporary measure to not allow add segmentation when the selected viewport\n  // is stack viewport\n  useEffect(() => {\n    const handleActiveViewportChange = viewportId => {\n      const displaySetUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\n        viewportId || viewportGridService.getActiveViewportId()\n      );\n\n      if (!displaySetUIDs) {\n        return;\n      }\n\n      const isReconstructable =\n        displaySetUIDs?.some(displaySetUID => {\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetUID);\n          return displaySet?.isReconstructable;\n        }) || false;\n\n      if (isReconstructable) {\n        setAddSegmentationClassName('');\n      } else {\n        setAddSegmentationClassName('ohif-disabled');\n      }\n    };\n\n    // Handle initial state\n    handleActiveViewportChange();\n\n    const changedGrid = viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED;\n    const ready = viewportGridService.EVENTS.VIEWPORTS_READY;\n\n    const subsGrid = [];\n    [ready, changedGrid].forEach(evt => {\n      const { unsubscribe } = viewportGridService.subscribe(evt, ({ viewportId }) => {\n        handleActiveViewportChange(viewportId);\n      });\n\n      subsGrid.push(unsubscribe);\n    });\n\n    const changedData = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\n\n    const subsData = [];\n    [changedData].forEach(evt => {\n      const { unsubscribe } = cornerstoneViewportService.subscribe(evt, () => {\n        handleActiveViewportChange();\n      });\n\n      subsData.push(unsubscribe);\n    });\n\n    // Clean up\n    return () => {\n      subsGrid.forEach(unsub => unsub());\n      subsData.forEach(unsub => unsub());\n    };\n  }, []);\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    return toolGroupIds;\n  };\n\n  const onSegmentationAdd = async () => {\n    commandsManager.runCommand('createEmptySegmentationForViewport', {\n      viewportId: viewportGridService.getActiveViewportId(),\n    });\n  };\n\n  const onSegmentationClick = (segmentationId: string) => {\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    segmentationService.remove(segmentationId);\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      // const toolGroupId =\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n    });\n  };\n\n  const onSegmentAdd = (segmentationId) => {\n    const currentSegmentation = segmentationService.getSegmentation(segmentationId)\n    segmentationService.addSegment(segmentationId, {\n      segmentIndex: currentSegmentation.segments.length,\n      toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\n      properties: {\n        label: `Segment ${currentSegmentation.segmentCount + 1}`,\n        color: [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)],\n        opacity: 255,\n        visibility: true,\n        isLocked: false,\n        active: true\n      }\n    });\n  }\n\n  const onSegmentationEdit = segmentationId => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { color, opacity } = segment;\n\n    const rgbaColor = {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: opacity / 255.0,\n    };\n\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\n      if (actionId === 'cancel') {\n        return;\n      }\n\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\n        newRgbaColor.r,\n        newRgbaColor.g,\n        newRgbaColor.b,\n        newRgbaColor.a * 255.0,\n      ]);\n    });\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    segmentationService.removeSegment(segmentationId, segmentIndex);\n  };\n\n  // segment hide\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const isVisible = segmentation.isVisible;\n    const segments = segmentation.segments;\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      segments.forEach((segment, segmentIndex) => {\n        segmentationService.setSegmentVisibility(\n          segmentationId,\n          segmentIndex,\n          isVisible,\n          toolGroupId\n        );\n      });\n    });\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  const createSegmentationForSelectedViewport = () => {\n    viewports.forEach(vp => {\n      //Select chosen active viewport to create a segmentation on\n      if(vp.viewportId === activeViewportId){\n        if(vp.viewportOptions.viewportType === 'volume3d'){\n          uiNotificationService.show({\n            title: 'Create Segmentation',\n            message: 'Can\\'t create segmentation in viewport 3D, select a 2D viewport',\n            type: 'error',\n          });\n          return\n        }\n\n        console.log('SEG VP', vp)\n        segmentationService.createSegmentationForDisplaySet(\n            vp.displaySetInstanceUIDs[0],\n            { label: `Segmentation ${segmentations.length + 1}` }\n        ).then(segId => {\n          const segmentation = segmentationService.getSegmentation(segId)\n          console.log('CREATED SEGMENTATION', segmentation)\n          segmentationService.addSegmentationRepresentationToToolGroup(\n              vp.viewportOptions.toolGroupId,\n              segId,\n              true,\n              LABELMAP\n          ).then(() => {\n            segmentationService.setActiveSegmentationForToolGroup(\n                segId,\n                vp.viewportOptions.toolGroupId\n            );\n            segmentationService.addSegment(\n                segId,\n                1,\n                vp.viewportOptions.toolGroupId,\n                {\n                  label: `Segmentation 1`,\n                  color: [255, 0, 0],\n                  opacity: 255,\n                  visibility: true,\n                  isLocked: false,\n                  active: true\n                }\n            )\n            //Add segmentation tools to toolbar\n            console.log('MTOOLS', toolbarService.getButtonSection('MeasurementTools', {}))\n            toolbarService.createButtonSection('primary', [\n                'MeasurementTools',\n                'Zoom',\n                'WindowLevel',\n                'Pan',\n                'Capture',\n                'Crosshairs',\n                'MoreTools',\n                'SegmentationTools'\n            ])\n          });\n\n        })\n      }\n    })\n  }\n\n  // useEffect(() => {\n  //   console.log('SEGMENTATIONS', segmentations)\n  // },)\n\n  const onSegmentationDownload = segmentationId => {\n    commandsManager.runCommand('downloadSegmentation', {\n      segmentationId,\n    });\n  };\n\n  const storeSegmentation = async segmentationId => {\n    const datasources = extensionManager.getActiveDataSource();\n\n    const displaySetInstanceUIDs = await createReportAsync({\n      servicesManager,\n      getReport: () =>\n        commandsManager.runCommand('storeSegmentation', {\n          segmentationId,\n          dataSource: datasources[0],\n        }),\n      reportType: 'Segmentation',\n    });\n\n    // Show the exported report in the active viewport as read only (similar to SR)\n    if (displaySetInstanceUIDs) {\n      // clear the segmentation that we exported, similar to the storeMeasurement\n      // where we remove the measurements and prompt again the user if they would like\n      // to re-read the measurements in a SR read only viewport\n      segmentationService.remove(segmentationId);\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: viewportGridService.getActiveViewportId(),\n        displaySetInstanceUIDs,\n      });\n    }\n  };\n\n  const onSegmentationDownloadRTSS = segmentationId => {\n    commandsManager.runCommand('downloadRTSS', {\n      segmentationId,\n    });\n  };\n\n  const SegmentationGroupTableComponent =\n    components[configuration?.segmentationPanelMode] || SegmentationGroupTable;\n  const allowAddSegment = configuration?.addSegment;\n  const onSegmentationAddWrapper =\n    configuration?.onSegmentationAdd && typeof configuration?.onSegmentationAdd === 'function'\n      ? configuration?.onSegmentationAdd\n      : onSegmentationAdd;\n\n\n  const isSegmentationForDisplaySet = () => {\n    const displaySetUID = viewports.get(activeViewportId)?.displaySetInstanceUIDs[0]\n    const matchingSegs = segmentations.filter(seg => seg.displaySetInstanceUID === displaySetUID)\n    return matchingSegs.length > 0;\n  }\n\n  return (\n    <div className=\"flex flex-col flex-auto min-h-0F mt-1\">\n      {/* Segmentation tool edition */}\n      <BaseToolEdit\n          segmentationService={segmentationService}\n          cornerstoneViewportService={cornerstoneViewportService}\n          toolGroupService={toolGroupService}\n          toolbarService={toolbarService}\n          commandsManager={commandsManager}\n      />\n      {isSegmentationForDisplaySet() && (\n          <SegmentsConfigurationImportExport\n              segmentationService={segmentationService}\n              segmentations={segmentations}\n          />\n      )}\n      {/* show segmentation table */}\n      <SegmentationGroupTableComponent\n        title={t('Segmentations')}\n        segmentations={segmentations}\n        disableEditing={configuration.disableEditing}\n        activeSegmentationId={selectedSegmentationId || ''}\n        onSegmentationAdd={onSegmentationAddWrapper}\n        addSegmentationClassName={addSegmentationClassName}\n        showAddSegment={allowAddSegment}\n        onSegmentationClick={onSegmentationClick}\n        onSegmentationDelete={onSegmentationDelete}\n        onSegmentationDownload={onSegmentationDownload}\n        onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\n        storeSegmentation={storeSegmentation}\n        onSegmentationEdit={onSegmentationEdit}\n        onSegmentClick={onSegmentClick}\n        onSegmentEdit={onSegmentEdit}\n        onSegmentAdd={onSegmentAdd}\n        onSegmentColorClick={onSegmentColorClick}\n        onSegmentDelete={onSegmentDelete}\n        onToggleSegmentVisibility={onToggleSegmentVisibility}\n        onToggleSegmentLock={onToggleSegmentLock}\n        onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n        showDeleteSegment={true}\n        segmentationConfig={{ initialConfig: segmentationConfiguration }}\n        setRenderOutline={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\n        }\n        setOutlineOpacityActive={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\n        }\n        setRenderFill={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\n        }\n        setRenderInactiveSegmentations={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'renderInactiveSegmentations', value)\n        }\n        setOutlineWidthActive={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\n        }\n        setFillAlpha={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\n        }\n        setFillAlphaInactive={value =>\n          _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\n        }\n      />\n      {isSegmentationForDisplaySet ? (\n        <SegmentationImportExport\n          segmentationService={segmentationService}\n          segmentations={segmentations}\n          cornerstoneViewportService={cornerstoneViewportService}\n        />) :\n        <Button\n          className={'pt-1/10 pb-1/10'}\n          onClick={createSegmentationForSelectedViewport}\n          style={{marginTop:'10%'}}\n        >{\"Create Segmentation For Selected Viewport\"}\n        </Button>\n      }\n    </div>\n    );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\n\nimport { useAppConfig } from '@state';\nimport { Toolbox } from '@ohif/ui';\nimport PanelSegmentation from './panels/PanelSegmentation';\n\nconst getPanelModule = ({\n  commandsManager,\n  servicesManager,\n  extensionManager,\n  configuration,\n  title,\n}) => {\n  const { customizationService } = servicesManager.services;\n\n  const wrappedPanelSegmentation = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n          disableEditing: appConfig.disableEditing,\n          ...customizationService.get('segmentation.panel'),\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"segmentationToolbox\"\n          title=\"Segmentation Tools\"\n          configuration={{\n            ...configuration,\n          }}\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n            disableEditing: appConfig.disableEditing,\n            ...customizationService.get('segmentation.panel'),\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { Enums, cache } from '@cornerstonejs/core';\n\n/**\n * Updates the viewports in preparation for rendering segmentations.\n * Evaluates each viewport to determine which need modifications,\n * then for those viewports, changes them to a volume type and ensures\n * they are ready for segmentation rendering.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - ID of the viewport to be updated.\n * @param params.loadFn - Function to load the segmentation data.\n * @param params.servicesManager - The services manager.\n * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n *\n * @returns Returns true upon successful update of viewports for segmentation rendering.\n */\nasync function updateViewportsForSegmentationRendering({\n  viewportId,\n  loadFn,\n  servicesManager,\n  referencedDisplaySetInstanceUID,\n}: {\n  viewportId: string;\n  loadFn: () => Promise<string>;\n  servicesManager: any;\n  referencedDisplaySetInstanceUID?: string;\n}) {\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  referencedDisplaySetInstanceUID =\n    referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\n\n  const updatedViewports = getUpdatedViewportsForSegmentation({\n    servicesManager,\n    viewportId,\n    referencedDisplaySetInstanceUID,\n  });\n\n  // create Segmentation callback which needs to be waited until\n  // the volume is created (if coming from stack)\n  const createSegmentationForVolume = async () => {\n    const segmentationId = await loadFn();\n    segmentationService.hydrateSegmentation(segmentationId);\n  };\n\n  // the reference volume that is used to draw the segmentation. so check if the\n  // volume exists in the cache (the target Viewport is already a volume viewport)\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\n    volumeId.includes(referencedDisplaySetInstanceUID)\n  );\n\n  updatedViewports.forEach(async viewport => {\n    viewport.viewportOptions = {\n      ...viewport.viewportOptions,\n      viewportType: 'volume',\n      needsRerendering: true,\n    };\n    const viewportId = viewport.viewportId;\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const prevCamera = csViewport.getCamera();\n\n    // only run the createSegmentationForVolume for the targetViewportId\n    // since the rest will get handled by cornerstoneViewportService\n    if (volumeExists && viewportId === targetViewportId) {\n      await createSegmentationForVolume();\n      return;\n    }\n\n    const createNewSegmentationWhenVolumeMounts = async evt => {\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\n        ac.uid.includes(referencedDisplaySetInstanceUID)\n      );\n\n      // Note: make sure to re-grab the viewport since it might have changed\n      // during the time it took for the volume to be mounted, for instance\n      // the stack viewport has been changed to a volume viewport\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      volumeViewport.setCamera(prevCamera);\n\n      volumeViewport.element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        createNewSegmentationWhenVolumeMounts\n      );\n\n      if (!isTheActiveViewportVolumeMounted) {\n        // it means it is one of those other updated viewports so just update the camera\n        return;\n      }\n\n      if (viewportId === targetViewportId) {\n        await createSegmentationForVolume();\n      }\n    };\n\n    csViewport.element.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      createNewSegmentationWhenVolumeMounts\n    );\n  });\n\n  // Set the displaySets for the viewports that require to be updated\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\n/**\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n * This function evaluates viewports based on their compatibility with the provided segmentation's\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - the ID of the viewport to be updated.\n * @param params.servicesManager - The services manager\n * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n *\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n */\nfunction getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  referencedDisplaySetInstanceUID,\n}) {\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const { viewports, isHangingProtocolLayout } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\n\n  const referenceDisplaySetInstanceUID =\n    referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    referenceDisplaySetInstanceUID,\n    isHangingProtocolLayout\n  );\n\n  viewports.forEach((viewport, viewportId) => {\n    if (\n      targetViewportId === viewportId ||\n      updatedViewports.find(v => v.viewportId === viewportId)\n    ) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segmentationFrameOfReferenceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: 'volume',\n          needsRerendering: true,\n        },\n      });\n    }\n  });\n\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\n}\n\nexport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n};\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { ServicesManager, Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n  utilities,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nimport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n} from './utils/hydrationUtils';\nconst { segmentation: segmentationUtils } = utilities;\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    uiNotificationService,\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n    toolGroupService,\n  } = (servicesManager as ServicesManager).services;\n\n  const actions = {\n    /**\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the ID of the viewport to be updated.\n     * @param params.servicesManager - The services manager\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n     *\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n     */\n    getUpdatedViewportsForSegmentation,\n    /**\n     * Creates an empty segmentation for a specified viewport.\n     * It first checks if the display set associated with the viewport is reconstructable.\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\n     * for the display set after handling the necessary steps for making the viewport\n     * a volume viewport first\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (!displaySet.isReconstructable) {\n        uiNotificationService.show({\n          title: 'Segmentation',\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\n          type: 'error',\n        });\n        return;\n      }\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          const currentSegmentations = segmentationService.getSegmentations();\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n            displaySetInstanceUID,\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\n          );\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          // Add only one segment for now\n          segmentationService.addSegment(segmentationId, {\n            toolGroupId,\n            segmentIndex: 1,\n            properties: {\n              label: 'Segment 1',\n            },\n          });\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          // Todo: handle adding more than one segmentation\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n          const segmentation = segmentations[0];\n          const segmentationId = segmentation.id;\n          const label = segmentation.label;\n          const segments = segmentation.segments;\n\n          delete segmentation.segments;\n\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\n            segmentationId,\n            label,\n          });\n\n          if (segmentation.scalarData) {\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n            labelmapVolume.scalarData.set(segmentation.scalarData);\n          }\n\n          segmentationService.addOrUpdateSegmentation(segmentation);\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          segments.forEach(segment => {\n            if (segment === null) {\n              return;\n            }\n            segmentationService.addSegment(segmentationId, {\n              segmentIndex: segment.segmentIndex,\n              toolGroupId,\n              properties: {\n                color: segment.color,\n                label: segment.label,\n                opacity: segment.opacity,\n                isLocked: segment.isLocked,\n                visibility: segment.isVisible,\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\n              },\n            });\n          });\n\n          if (segmentation.centroidsIJK) {\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\n          }\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentation display sets for a specified viewport.\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\n     * it chooses the appropriate service function to create\n     * the segmentation for the display set.\n     * The function then prepares the viewport for rendering segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\n     *\n     */\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\n      // Todo: handle adding more than one segmentation\n      const displaySet = displaySets[0];\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n        displaySet.referencedDisplaySetInstanceUID\n      );\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        referencedDisplaySetInstanceUID: displaySet.referencedDisplaySetInstanceUID,\n        loadFn: async () => {\n          const segDisplaySet = displaySet;\n          const suppressEvents = false;\n          const serviceFunction =\n            segDisplaySet.Modality === 'SEG'\n              ? 'createSegmentationForSEGDisplaySet'\n              : 'createSegmentationForRTDisplaySet';\n\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\n          const segmentation = segmentationService.getSegmentation(segmentationId);\n          segmentation.description = `S${referencedDisplaySet.SeriesNumber}: ${referencedDisplaySet.SeriesDescription}`;\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\n\n      const segmentationVolume = cache.getVolume(segmentationId);\n      const referencedVolume = cache.getVolume(referencedVolumeId);\n      const referencedImages = referencedVolume.getCornerstoneImages();\n\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\n\n      // Generate fake metadata as an example\n      labelmapObj.metadata = [];\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      labelmapObj.segmentsOnLabelmap.forEach(segmentIndex => {\n        // segmentation service already has a color for each segment\n        const segment = segmentationInOHIF?.segments[segmentIndex];\n        const { label, color } = segment;\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: 'MANUAL',\n          SegmentAlgorithmName: 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmapObj,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\n        extensionManager,\n      });\n\n      if (promptResult.action !== 1 && promptResult.value) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n\n      const { label } = segmentation;\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      DicomMetadataStore.addInstances([naturalizedReport], true);\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n    setBrushSize: ({ value, toolNames }) => {\n      const brushSize = Number(value);\n\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        if (toolNames?.length === 0) {\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\n        } else {\n          toolNames?.forEach(toolName => {\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n          });\n        }\n      });\n    },\n    setThresholdRange: ({\n      value,\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n    }) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        toolNames?.forEach(toolName => {\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD: {\n                threshold: value,\n              },\n            },\n          });\n        });\n      });\n    },\n  };\n\n  const definitions = {\n    getUpdatedViewportsForSegmentation: {\n      commandFn: actions.getUpdatedViewportsForSegmentation,\n    },\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n    createEmptySegmentationForViewport: {\n      commandFn: actions.createEmptySegmentationForViewport,\n    },\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n    setBrushSize: {\n      commandFn: actions.setBrushSize,\n    },\n    setThresholdRange: {\n      commandFn: actions.setThresholdRange,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'SEGMENTATION',\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './commandsModule';\nimport { getToolbarModule } from './getToolbarModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  getCommandsModule,\n  getToolbarModule,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","export function getToolbarModule({ servicesManager }) {\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\n  return [\n    {\n      name: 'evaluate.cornerstone.segmentation',\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\n        // Todo: we need to pass in the button section Id since we are kind of\n        // forcing the button to have black background since initially\n        // it is designed for the toolbox not the toolbar on top\n        // we should then branch the buttonSectionId to have different styles\n        const segmentations = segmentationService.getSegmentations();\n        if (!segmentations?.length) {\n          return {\n            disabled: true,\n            className: '!text-common-bright !bg-black opacity-50',\n            disabledText: disabledText ?? 'No segmentations available',\n          };\n        }\n\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n        if (!toolGroup) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const toolName = toolbarService.getToolNameForButton(button);\n\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const isPrimaryActive = toolNames\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\n\n        return {\n          disabled: false,\n          className: isPrimaryActive\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\n          // Todo: isActive right now is used for nested buttons where the primary\n          // button needs to be fully rounded (vs partial rounded) when active\n          // otherwise it does not have any other use\n          isActive: isPrimaryActive,\n        };\n      },\n    },\n  ];\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","SegmentationPanelMode","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","DualInputRange","value1","value2","minValue","maxValue","step","unit","containerClassName","inputClassName","labelVariant","showLabel","labelPosition","trackColor","rangeValue1","setRangeValue1","useState","rangeValue2","setRangeValue2","useEffect","handleChange1","e","Number","handleChange2","rangeValueForStr1","toFixed","rangeValueForStr2","style","flexDirection","Typography","variant","component","classNames","min","max","background","Button","size","onClick","csToolsEnums","csTools","MouseBindings","listItemRenderer","DefaultListItemRenderer","t","eraseFocus","isActive","Brush_Strategies","EVENT_LISTENERS","BrushToolEdit","cornerstoneViewportService","useTranslation","isMinimized","setIsMinimized","isEraseOnlyMinimized","setIsEraseOnlyMinimized","setEraseFocus","pipetteMode","setPipetteMode","active","minimum","activeViewportId","viewportGridService","useViewportGrid","activeStrategy","setActiveStrategy","FILL_INSIDE_CIRCLE","brushSize","setBrushSize","circleThresholdValue","setCircleThresholdValue","setSegments","toolGroup","getCornerstoneViewport","renderingEngineId","brushInstance","getToolInstance","configuration","strategySpecificConfiguration","THRESHOLD","threshold","segmentation","getSegmentations","filter","s","segmentIndex","args","setConfiguration","eraseFocusIndex","setToolActive","bindings","mouseButton","Primary","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","subscribe","unsub","viewport","currentElement","element","addEvent","removeEventListener","removeEvent","setToolPassive","MOUSE_DRAG","setThresholdCallback","worldPoints","currentPoints","world","imageData","getImageData","index","worldToIndex","scalarData","dimensions","csUtils","yMultiple","zMultiple","Icon","display","justifyContent","fullWidth","THRESHOLD_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE","ERASE_INSIDE_CIRCLE","ERASE_INSIDE_SPHERE","stopPropagation","ListMenu","items","renderer","InputRange","vmin","vmax","Circle_Strategies","CircleScissorsToolEdit","FILL_INSIDE","cscissorsInstance","circleInstance","ERASE_INSIDE","PaintFillToolEdit","RectangleROIStartEndThresholdToolEdit","commandsManager","thresholdValue","setThresholdValue","slicesToPropagate","setSlicesToPropagate","rectangleROIInstance","numSlicesToPropagate","log","computeThreshold","imageVolumes","getActors","va","actorUID","referenceId","uid","iv","selectedAnnotationUIDs","annotationUID","ctVolume","segmentationVolume","segmentations","volume","lower","upper","numSlicesToProject","overwrite","overlapType","activeSegmentIndex","deleteRegion","render","RectangleROIThresholdToolEdit","Rectangle_Strategies","RectangleScissorsToolEdit","rscissorsInstance","rectangleInstance","Sphere_Strategies","SphereScissorsToolEdit","sscissorsInstance","sphereInstance","MAX_CACHE_LENGTH","CACHE_SEGMENTATION_VOLUMES","Array","constructor","maxLength","super","this","push","elements","r","excess","splice","UndoToolEdit","currentCacheIndex","setCurrentCacheIndex","MOUSE_DOWN","old_segmentation","old_seg_volume","Uint8ClampedArray","getLabelmapVolume","getScalarData","apply_replace","cacheIndex","previous_volume","replace_event","CustomEvent","oldScalarData","window","dispatchEvent","undo","redo","state","SEG_TOOL_NAMES","BaseToolEdit","toolbarService","toolGroupService","activeSegTool","setActiveSegTool","searchActiveSegTool","toolStates","getToolGroupForViewport","toolOptions","toolStatesArray","tool","includes","mode","unsubscribe","TOOL_BAR_MODIFIED","renderActiveTool","SegmentsConfigurationImportExport","importConfiguration","input","document","createElement","accept","onchange","_","json_file","from","files","reader","FileReader","onload","result","removeSegment","JSON","parse","segment","addSegment","get","readAsText","click","exportConfiguration","json","stringify","json_blob","Blob","saveAs","propTypes","PropTypes","isRequired","SegmentationImportExport","isProcessingLayer","setIsProcessingLayer","processingLayerPercent","setProcessingLayerPercent","activeViewportIndex","setTimeout","exportSegmentation","labelmapVolume","direction","segments_info","existing_segment_indexes","Uint32Array","all_layers_blobs","layer_i","current_processed_layer","segmented_layer","fill","el","scalar_layer","slice","allSettled","segment_index","v","mapIndexSerial","indexes_array","promise","segment_array","corresponding_segment_index","color_to_fill","index_to_color","canvas","ctx","getContext","height","imgData","ImageData","putImageData","toBlob","blob","completed_layers","waitForArray","zip","JSZip","file","Uint8Array","dataBlob","generateAsync","find","vp","assert","setActiveViewportIndex","viewportIndex","actorEntries","segmentationId","volumeId","segmentationScalarData","newScalarData","cstSegmentation","readAsArrayBuffer","ProgressBar","bgColor","completed","transitionDuration","transitionTimingFunction","LABELMAP","Labelmap","components","Expanded","SegmentationGroupTableExpanded","Dropdown","SegmentationGroupTable","PanelSegmentation","selectedSegmentationId","setSelectedSegmentationId","addSegmentationClassName","setAddSegmentationClassName","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","setSegmentations","handleActiveViewportChange","viewportId","displaySetUIDs","getDisplaySetsUIDsForViewport","getActiveViewportId","some","displaySetUID","getDisplaySetByUID","changedGrid","ACTIVE_VIEWPORT_ID_CHANGED","ready","VIEWPORTS_READY","subsGrid","changedData","VIEWPORT_DATA_CHANGED","subsData","getToolGroupIds","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","useCallback","SegmentationGroupTableComponent","segmentationPanelMode","allowAddSegment","onSegmentationAddWrapper","onSegmentationAdd","runCommand","isSegmentationForDisplaySet","displaySetInstanceUIDs","seg","disableEditing","activeSegmentationId","showAddSegment","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","onSegmentationEdit","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","setActiveSegment","jumpToSegmentCenter","onSegmentEdit","setSegmentLabel","onSegmentAdd","currentSegmentation","segmentCount","floor","random","opacity","visibility","isLocked","onSegmentColorClick","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","onSegmentDelete","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onToggleSegmentationVisibility","toggleSegmentationVisibility","showDeleteSegment","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","createSegmentationForSelectedViewport","createSegmentationForDisplaySet","segId","addSegmentationRepresentationToToolGroup","getButtonSection","createButtonSection","marginTop","getPanelModule","customizationService","iconName","iconLabel","appConfig","useAppConfig","Toolbox","buttonSectionId","updateViewportsForSegmentationRendering","loadFn","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","_volumeCache","needsRerendering","csViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","ac","volumeViewport","setCamera","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","getState","hangingProtocolService","isHangingProtocolLayout","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","shouldRenderSegmentation","segmentationUtils","utilities","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","createEmptySegmentationForViewport","currentSegmentations","loadSegmentationsForViewport","set","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","serviceFunction","boundFn","bind","description","options","cornerstoneToolsSegmentation","representationData","getCornerstoneImages","labelmapObj","metadata","segmentationInOHIF","segmentsOnLabelmap","rgb2DICOMLAB","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","SegmentAlgorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","generatedSegmentation","dataset","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","location","warn","toolNames","setBrushSizeForToolGroup","toolName","setThresholdRange","getToolGroup","setToolConfiguration","definitions","commandFn","defaultContext","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","evaluate","button","disabledText","disabled","getToolNameForButton","hasTool","isPrimaryActive","getActivePrimaryMouseButtonTool","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}