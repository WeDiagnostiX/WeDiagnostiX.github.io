{"version":3,"file":"206.bundle.e4aa39b55f47f8b97568.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/types/segmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../ui/src/components/DualInputRange/DualInputRange.tsx","webpack:///../../ui/src/components/DualInputRange/index.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/brushToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/cscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/paintFillToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIStartEndToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/sscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/undoToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/baseToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segConfigurationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segmentationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/utils.ts"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\nconst SOPClassHandlerName = 'dicom-seg';\r\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\r\n\r\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\r\n","import { utils } from '@ohif/core';\r\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\r\nimport { CONSTANTS } from '@cornerstonejs/tools';\r\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\r\n\r\nimport { SOPClassHandlerId } from './id';\r\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\r\n\r\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\r\n\r\nconst loadPromises = {};\r\n\r\nfunction _getDisplaySetsFromSeries(\r\n  instances,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager\r\n) {\r\n  const instance = instances[0];\r\n\r\n  const {\r\n    StudyInstanceUID,\r\n    SeriesInstanceUID,\r\n    SOPInstanceUID,\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPClassUID,\r\n    wadoRoot,\r\n    wadoUri,\r\n    wadoUriRoot,\r\n  } = instance;\r\n\r\n  const displaySet = {\r\n    Modality: 'SEG',\r\n    loading: false,\r\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\r\n    displaySetInstanceUID: utils.guid(),\r\n    SeriesDescription,\r\n    SeriesNumber,\r\n    SeriesDate,\r\n    SOPInstanceUID,\r\n    SeriesInstanceUID,\r\n    StudyInstanceUID,\r\n    SOPClassHandlerId,\r\n    SOPClassUID,\r\n    referencedImages: null,\r\n    referencedSeriesInstanceUID: null,\r\n    referencedDisplaySetInstanceUID: null,\r\n    isDerivedDisplaySet: true,\r\n    isLoaded: false,\r\n    isHydrated: false,\r\n    segments: {},\r\n    sopClassUids,\r\n    instance,\r\n    instances: [instance],\r\n    wadoRoot,\r\n    wadoUriRoot,\r\n    wadoUri,\r\n    isOverlayDisplaySet: true,\r\n  };\r\n\r\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\r\n\r\n  if (!referencedSeriesSequence) {\r\n    console.error('ReferencedSeriesSequence is missing for the SEG');\r\n    return;\r\n  }\r\n\r\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\r\n\r\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\r\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\r\n\r\n  displaySet.getReferenceDisplaySet = () => {\r\n    const { displaySetService } = servicesManager.services;\r\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\r\n      displaySet.referencedSeriesInstanceUID\r\n    );\r\n\r\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\r\n      throw new Error('Referenced DisplaySet is missing for the SEG');\r\n    }\r\n\r\n    const referencedDisplaySet = referencedDisplaySets[0];\r\n\r\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\r\n\r\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\r\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\r\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\r\n    displaySet.referencedVolumeId = referencedVolumeId;\r\n\r\n    return referencedDisplaySet;\r\n  };\r\n\r\n  displaySet.load = async ({ headers }) =>\r\n    await _load(displaySet, servicesManager, extensionManager, headers);\r\n\r\n  return [displaySet];\r\n}\r\n\r\nfunction _load(\r\n  segDisplaySet,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  extensionManager,\r\n  headers\r\n) {\r\n  const { SOPInstanceUID } = segDisplaySet;\r\n  const { segmentationService } = servicesManager.services;\r\n\r\n  if (\r\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\r\n    loadPromises[SOPInstanceUID] &&\r\n    _segmentationExists(segDisplaySet, segmentationService)\r\n  ) {\r\n    return loadPromises[SOPInstanceUID];\r\n  }\r\n\r\n  segDisplaySet.loading = true;\r\n\r\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\r\n  // and also return the same promise to any other callers.\r\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\r\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\r\n      await _loadSegments({\r\n        extensionManager,\r\n        servicesManager,\r\n        segDisplaySet,\r\n        headers,\r\n      });\r\n    }\r\n\r\n    const suppressEvents = true;\r\n    segmentationService\r\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\r\n      .then(() => {\r\n        segDisplaySet.loading = false;\r\n        resolve();\r\n      })\r\n      .catch(error => {\r\n        segDisplaySet.loading = false;\r\n        reject(error);\r\n      });\r\n  });\r\n\r\n  return loadPromises[SOPInstanceUID];\r\n}\r\n\r\nasync function _loadSegments({\r\n  extensionManager,\r\n  servicesManager,\r\n  segDisplaySet,\r\n  headers,\r\n}: withAppTypes) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { segmentationService, uiNotificationService } = servicesManager.services;\r\n\r\n  const { dicomLoaderService } = utilityModule.exports;\r\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\r\n\r\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\r\n\r\n  if (!cachedReferencedVolume) {\r\n    throw new Error(\r\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\r\n    );\r\n  }\r\n\r\n  const { imageIds } = cachedReferencedVolume;\r\n\r\n  // Todo: what should be defaults here\r\n  const tolerance = 0.001;\r\n  const skipOverlapping = true;\r\n\r\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\r\n    const { percentComplete } = evt.detail;\r\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\r\n      percentComplete,\r\n    });\r\n  });\r\n\r\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\r\n    imageIds,\r\n    arrayBuffer,\r\n    metaData,\r\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\r\n  );\r\n\r\n  let usedRecommendedDisplayCIELabValue = true;\r\n  results.segMetadata.data.forEach((data, i) => {\r\n    if (i > 0) {\r\n      data.rgba = data.RecommendedDisplayCIELabValue;\r\n\r\n      if (data.rgba) {\r\n        data.rgba = dicomlabToRGB(data.rgba);\r\n      } else {\r\n        usedRecommendedDisplayCIELabValue = false;\r\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\r\n      }\r\n    }\r\n  });\r\n\r\n  if (results.overlappingSegments) {\r\n    uiNotificationService.show({\r\n      title: 'Overlapping Segments',\r\n      message:\r\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\r\n      type: 'warning',\r\n    });\r\n  }\r\n\r\n  if (!usedRecommendedDisplayCIELabValue) {\r\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\r\n    uiNotificationService.show({\r\n      title: 'DICOM SEG import',\r\n      message:\r\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\r\n      type: 'warning',\r\n      duration: 5000,\r\n    });\r\n  }\r\n\r\n  Object.assign(segDisplaySet, results);\r\n}\r\n\r\nfunction _segmentationExists(segDisplaySet, segmentationService: AppTypes.SegmentationService) {\r\n  // This should be abstracted with the CornerstoneCacheService\r\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\r\n}\r\n\r\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\r\n  const getDisplaySetsFromSeries = instances => {\r\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'dicom-seg',\r\n      sopClassUids,\r\n      getDisplaySetsFromSeries,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getSopClassHandlerModule;\r\n","import dcmjs from 'dcmjs';\r\n\r\n/**\r\n * Converts a CIELAB color to an RGB color using the dcmjs library.\r\n * @param cielab - The CIELAB color to convert.\r\n * @returns The RGB color as an array of three integers between 0 and 255.\r\n */\r\nfunction dicomlabToRGB(cielab: number[]): number[] {\r\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\r\n\r\n  return rgb;\r\n}\r\n\r\nexport { dicomlabToRGB };\r\n","import { Types } from '@ohif/core';\r\n\r\nconst segProtocol: Types.HangingProtocol.Protocol = {\r\n  id: '@ohif/seg',\r\n  // Don't store this hanging protocol as it applies to the currently active\r\n  // display set by default\r\n  // cacheId: null,\r\n  name: 'Segmentations',\r\n  // Just apply this one when specifically listed\r\n  protocolMatchingRules: [],\r\n  toolGroupIds: ['default'],\r\n  // -1 would be used to indicate active only, whereas other values are\r\n  // the number of required priors referenced - so 0 means active with\r\n  // 0 or more priors.\r\n  numberOfPriorsReferenced: 0,\r\n  // Default viewport is used to define the viewport when\r\n  // additional viewports are added using the layout tool\r\n  defaultViewport: {\r\n    viewportOptions: {\r\n      viewportType: 'stack',\r\n      toolGroupId: 'default',\r\n      allowUnmatchedView: true,\r\n    },\r\n    displaySets: [\r\n      {\r\n        id: 'segDisplaySetId',\r\n        matchedDisplaySetsIndex: -1,\r\n      },\r\n    ],\r\n  },\r\n  displaySetSelectors: {\r\n    segDisplaySetId: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'SEG',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [\r\n    {\r\n      name: 'Segmentations',\r\n      viewportStructure: {\r\n        layoutType: 'grid',\r\n        properties: {\r\n          rows: 1,\r\n          columns: 1,\r\n        },\r\n      },\r\n      viewports: [\r\n        {\r\n          viewportOptions: { allowUnmatchedView: true },\r\n          displaySets: [\r\n            {\r\n              id: 'segDisplaySetId',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: segProtocol.id,\r\n      protocol: segProtocol,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\nexport { segProtocol };\r\n","export enum SegmentationPanelMode {\r\n  Expanded = 'expanded',\r\n  Dropdown = 'dropdown',\r\n}\r\n","import React from 'react';\r\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\r\n\r\nfunction callInputDialog(uiDialogService, label, callback) {\r\n  const dialogId = 'enter-segment-label';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.label, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Segment',\r\n        value: { label },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\r\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          return (\r\n            <Input\r\n              label=\"Enter the segment label\"\r\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\r\n              autoFocus\r\n              className=\"border-primary-main bg-black\"\r\n              type=\"text\"\r\n              value={value.label}\r\n              onChange={event => {\r\n                event.persist();\r\n                setValue(value => ({ ...value, label: event.target.value }));\r\n              }}\r\n              onKeyPress={event => {\r\n                if (event.key === 'Enter') {\r\n                  onSubmitHandler({ value, action: { id: 'save' } });\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default callInputDialog;\r\n","import React from 'react';\r\nimport { Dialog } from '@ohif/ui';\r\nimport { ChromePicker } from 'react-color';\r\n\r\nimport './colorPickerDialog.css';\r\n\r\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\r\n  const dialogId = 'pick-color';\r\n\r\n  const onSubmitHandler = ({ action, value }) => {\r\n    switch (action.id) {\r\n      case 'save':\r\n        callback(value.rgbaColor, action.id);\r\n        break;\r\n      case 'cancel':\r\n        callback('', action.id);\r\n        break;\r\n    }\r\n    uiDialogService.dismiss({ id: dialogId });\r\n  };\r\n\r\n  if (uiDialogService) {\r\n    uiDialogService.create({\r\n      id: dialogId,\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Segment Color',\r\n        value: { rgbaColor },\r\n        noCloseButton: true,\r\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\r\n        actions: [\r\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\r\n          { id: 'save', text: 'Save', type: 'secondary' },\r\n        ],\r\n        onSubmit: onSubmitHandler,\r\n        body: ({ value, setValue }) => {\r\n          const handleChange = color => {\r\n            setValue({ rgbaColor: color.rgb });\r\n          };\r\n\r\n          return (\r\n            <ChromePicker\r\n              color={value.rgbaColor}\r\n              onChange={handleChange}\r\n              presetColors={[]}\r\n              width={300}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default callColorPickerDialog;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport Typography from '../Typography';\r\nimport './DualInputRange.css';\r\nimport { Button, ButtonEnums } from \"@ohif/ui\";\r\n\r\n\r\n/**\r\n * React Range Input component\r\n * it has two props, value and onChange\r\n * value is a number value\r\n * onChange is a function that will be called when the range input is changed\r\n *\r\n *\r\n */\r\n\r\nconst DualInputRange: React.FC<{\r\n    value1: number;\r\n    value2: number;\r\n    onChange: (value1, value2) => void;\r\n    minValue: number;\r\n    maxValue: number;\r\n    step: number;\r\n    unit?: string;\r\n    containerClassName?: string;\r\n    inputClassName?: string;\r\n    labelClassName?: string;\r\n    labelVariant?: string;\r\n    showLabel?: boolean;\r\n    labelPosition?: string;\r\n    trackColor?: string;\r\n}> = ({\r\n                                value1,\r\n                                value2,\r\n                                onChange,\r\n                                minValue,\r\n                                maxValue,\r\n                                step = 1,\r\n                                unit = '',\r\n                                containerClassName,\r\n                                inputClassName,\r\n                                labelClassName,\r\n                                labelVariant,\r\n                                showLabel = true,\r\n                                labelPosition = '',\r\n                                trackColor,\r\n                            }) => {\r\n    const [rangeValue1, setRangeValue1] = useState(value1);\r\n    const [rangeValue2, setRangeValue2] = useState(value2);\r\n\r\n    useEffect(() => {\r\n        //Change value 1\r\n        if(value1 < minValue) return\r\n        setRangeValue1(value1);\r\n        // if (value1 >= rangeValue2) {\r\n        //     setRangeValue2(value1);\r\n        // }\r\n\r\n        //Change value 2\r\n        if(value2 > maxValue) return\r\n        setRangeValue2(value2);\r\n        // if (value2 <= rangeValue1) {\r\n        //     setRangeValue1(value2);\r\n        // }\r\n    }, [value1, value2])\r\n\r\n    const handleChange1 = (e) => {\r\n        const value = Number(e.target.value);\r\n        if(value < minValue) return\r\n        setRangeValue1(value);\r\n        // if (value >= rangeValue2) {\r\n        //     setRangeValue2(value);\r\n        // }\r\n        onChange(value, rangeValue2)\r\n    };\r\n\r\n    const handleChange2 = (e) => {\r\n        const value = Number(e.target.value);\r\n        if(value > maxValue) return\r\n        setRangeValue2(value);\r\n        // if (value <= rangeValue1) {\r\n        //     setRangeValue1(value);\r\n        // }\r\n        onChange(rangeValue1, value)\r\n    }\r\n\r\n    const rangeValuePercentage1 = ((rangeValue1 - minValue) / (maxValue - minValue)) * 100;\r\n    const rangeValuePercentage2 = ((rangeValue2 - minValue) / (maxValue - minValue)) * 100;\r\n\r\n    const rangeValueForStr1 = step >= 1 ? rangeValue1.toFixed(0) : rangeValue1.toFixed(1);\r\n    const rangeValueForStr2 = step >= 1 ? rangeValue2.toFixed(0) : rangeValue2.toFixed(1);\r\n\r\n    return (\r\n        <div\r\n            style={{flexDirection:'column'}}\r\n            className={`flex items-center cursor-pointer space-x-1 ${\r\n                containerClassName ? containerClassName : ''\r\n            }`}\r\n        >\r\n            {showLabel && labelPosition === 'left' && (\r\n                <>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\r\n                    >\r\n                        {rangeValueForStr1}\r\n                        {unit}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\r\n                    >\r\n                        {rangeValueForStr2}\r\n                        {unit}\r\n                    </Typography>\r\n                </>\r\n            )}\r\n            <div style={{flexDirection:'row'}} className={'flex pb-[5px]'}>\r\n                <input\r\n                    type=\"range\"\r\n                    min={minValue}\r\n                    max={maxValue}\r\n                    value={rangeValue1}\r\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\r\n                        inputClassName ? inputClassName : ''\r\n                    }`}\r\n                    style={{background: '#3a3f99',}}\r\n                    onChange={handleChange1}\r\n                    id=\"myRange1\"\r\n                    step={step}\r\n                />\r\n                <input\r\n                    type=\"range\"\r\n                    min={minValue}\r\n                    max={maxValue}\r\n                    value={rangeValue2}\r\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\r\n                        inputClassName ? inputClassName : ''\r\n                    }`}\r\n                    style={{background: '#3a3f99',}}\r\n                    onChange={handleChange2}\r\n                    id=\"myRange2\"\r\n                    step={step}\r\n                />\r\n            </div>\r\n            {showLabel && (!labelPosition || labelPosition === 'right') && (\r\n                <div style={{flexDirection:'row', width:'100%'}} className={'flex pb-[5px]'}>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\r\n                    >\r\n                        {'Min : '}\r\n                        {rangeValueForStr1}\r\n                        {unit}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant={labelVariant ?? 'subtitle'}\r\n                        component=\"p\"\r\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\r\n                    >\r\n                        {'Max : '}\r\n                        {rangeValueForStr2}\r\n                        {unit}\r\n                    </Typography>\r\n                </div>\r\n            )}\r\n            <div className={'flex'} style={{width:'100%'}}>\r\n                <div className={'flex w-1/2 justify-center'}>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange1({ target: { value: rangeValue1 - 10 } })}\r\n                    >{'--'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange1({ target: { value: rangeValue1 - 1 } })}\r\n                    >{'-'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange1({ target: { value: rangeValue1 + 1 } })}\r\n                    >{'+'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange1({ target: { value: rangeValue1 + 10 } })}\r\n                    >{'++'}</Button>\r\n                </div>\r\n                <div className={'flex w-1/2 justify-center'}>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange2({ target: { value: rangeValue2 - 10 } })}\r\n                    >{'--'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange2({ target: { value: rangeValue2 - 1 } })}\r\n                    >{'-'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange2({ target: { value: rangeValue2 + 1 } })}\r\n                    >{'+'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        type={ButtonEnums.type.primary}\r\n                        onClick={() => handleChange2({ target: { value: rangeValue2 + 10 } })}\r\n                    >{'++'}</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DualInputRange;\r\n","import DualInputRange from './DualInputRange';\r\n\r\nexport default DualInputRange;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport InputRange from '../../../../../platform/ui/src/components/InputRange';\r\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\r\nimport {Button, ButtonEnums, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport { useTranslation } from 'react-i18next';\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { MouseBindings, Events } = csToolsEnums;\r\nimport { utilities as csUtils } from '@cornerstonejs/core';\r\n\r\nconst DefaultListItemRenderer = ({ label, activeMode, eraseReplaceFocus }) => {\r\n    const isActive = label === eraseReplaceFocus;\r\n    if (label === 'All' && activeMode === Brush_Mode.REPLACE) {\r\n        label = 'Background';\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Brush_Tool {\r\n    CIRCLE      =   'CIRCLE',\r\n    SPHERE      =   'SPHERE'\r\n}\r\n\r\nenum Brush_Mode {\r\n    FILL        =   'FILL',\r\n    THRESHOLD   =   'THRESHOLD',\r\n    ERASE       =   'ERASE',\r\n    REPLACE     =   'REPLACE'\r\n}\r\n\r\nconst getBrushStrategy = (tool: Brush_Tool, mode: Brush_Mode) => {\r\n    return mode + '_INSIDE_' + tool;\r\n}\r\n\r\nconst EVENT_LISTENERS = []\r\n\r\nexport default function BrushToolEdit ({ segmentationService, cornerstoneViewportService }){\r\n    const { t } = useTranslation('Buttons');\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [isEraseReplaceOnlyMinimized, setIsEraseReplaceOnlyMinimized] = useState(true);\r\n    const [eraseReplaceFocus, setEraseReplaceFocus] = useState('All');\r\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true});\r\n\r\n    // @ts-ignore\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n    const [activeMode, setActiveMode] = useState(Brush_Mode.FILL);\r\n    const [activeTool, setActiveTool] = useState(Brush_Tool.CIRCLE);\r\n    const [brushSize, setBrushSize] = useState(10);\r\n    const [maxBrushSize, setMaxBrushSize] = useState(35);\r\n    const [spacing, setSpacing] = useState(0.4);\r\n    const [circleThresholdValue, setCircleThresholdValue] = useState([-1000, 3095]);\r\n    const [circleTargetSegmentIndex, setCircleTargetSegmentIndex] = useState(0);\r\n    const [segments, setSegments] = useState([]);\r\n\r\n    const handleSegmentClick = (args, brushInstance) => {\r\n        const {label, segmentIndex} = args;\r\n        const strategySpecificConfiguration = brushInstance.configuration.strategySpecificConfiguration;\r\n        strategySpecificConfiguration.REPLACE.targetSegmentIndex = segmentIndex;\r\n        brushInstance.setConfiguration({\r\n            eraseFocusIndex: segmentIndex, strategySpecificConfiguration: strategySpecificConfiguration\r\n        });\r\n        setEraseReplaceFocus(label);\r\n    }\r\n\r\n    const setSegmentsForToolGroup = (brushInstance) => {\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\r\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\r\n        segments = segments.map(s => ({\r\n            ...s,\r\n            onClick: args => handleSegmentClick(args, brushInstance)\r\n        }));\r\n        setSegments(segments);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const brushInstance = toolGroup.getToolInstance('Brush');\r\n\r\n        setActiveMode(Brush_Mode.FILL);\r\n        setActiveTool(Brush_Tool.CIRCLE);\r\n\r\n        const { volume } = cornerstoneViewportService.getViewportInfo(activeViewportId).viewportData.data[0];\r\n        const spacing = Math.min(...volume.spacing);\r\n        const brushSize = Math.floor(brushInstance.configuration.brushSize / spacing);\r\n        // No greater than half the default dentascan thickness\r\n        const maxBrushSize = Math.floor(Math.min(...volume.dimensions) / 4);\r\n\r\n        setSpacing(spacing);\r\n        setBrushSize(brushSize);\r\n        setMaxBrushSize(maxBrushSize);\r\n        setCircleThresholdValue(brushInstance.configuration.strategySpecificConfiguration.THRESHOLD.threshold);\r\n        setCircleTargetSegmentIndex(brushInstance.configuration.strategySpecificConfiguration.REPLACE.targetSegmentIndex);\r\n        setSegmentsForToolGroup(brushInstance);\r\n\r\n        toolGroup.setToolActive('Undo', { bindings: [{ mouseButton: MouseBindings.Primary }] });\r\n    }, []);\r\n\r\n    // Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const brushInstance = toolGroup.getToolInstance('Brush');\r\n\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n                setSegmentsForToolGroup(brushInstance);\r\n            });\r\n            subscriptions.push(unsubscribe);\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const brushInstance = toolGroup.getToolInstance('Brush');\r\n\r\n        brushInstance.setConfiguration({\r\n            brushSize: brushSize * spacing,\r\n            activeStrategy: getBrushStrategy(activeTool, activeMode),\r\n            strategySpecificConfiguration: {\r\n                THRESHOLD: { threshold: circleThresholdValue },\r\n                REPLACE: { targetSegmentIndex: circleTargetSegmentIndex },\r\n            },\r\n        });\r\n    }, [brushSize, activeTool, activeMode, circleThresholdValue]);\r\n\r\n    const setThresholdCallback = (evt, minimum) => {\r\n        //If left click\r\n        if (evt.detail.mouseButton === 1) {\r\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n            const worldPoints = evt.detail.currentPoints.world;\r\n            const { imageData, scalarData, dimensions } = viewport.getImageData();\r\n            const index = imageData.worldToIndex(worldPoints).map(Math.round);\r\n\r\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\r\n                const yMultiple = dimensions[0];\r\n                const zMultiple = dimensions[0] * dimensions[1];\r\n\r\n                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\r\n                if (minimum) {\r\n                    setCircleThresholdValue([value, circleThresholdValue[1]]);\r\n                } else {\r\n                    setCircleThresholdValue([circleThresholdValue[0], value]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Create event listeners to catch mouse click for pipette threshold tool\r\n    //Active probe tool is pipette active to display HU values on screen\r\n    //Go back to brush tool if we deactivate pipette\r\n    //Wrapper around addEventListener to not have multiple listeners\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const currentElement = viewport.element;\r\n        currentElement.addEvent = (evt, callback) => {\r\n            if (EVENT_LISTENERS[evt]) {\r\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\r\n                EVENT_LISTENERS[evt] = null;\r\n            }\r\n            EVENT_LISTENERS[evt] = callback;\r\n            currentElement.addEventListener(evt, callback);\r\n        }\r\n        currentElement.removeEvent = (evt) => {\r\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\r\n            EVENT_LISTENERS[evt] = null;\r\n        }\r\n        currentElement.removeEvent(Events.MOUSE_DRAG);\r\n\r\n        if (pipetteMode.active) {\r\n            if (toolGroup.getToolOptions('DragProbe').mode !== csToolsEnums.ToolModes.Active) {\r\n                toolGroup.setToolActive('DragProbe', { bindings: [{ mouseButton: MouseBindings.Primary }] });\r\n                toolGroup.setToolPassive('Brush');\r\n            }\r\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => { setThresholdCallback(evt, pipetteMode.minimum) });\r\n        } else {\r\n            toolGroup.setToolActive('Brush', { bindings: [{ mouseButton: MouseBindings.Primary, }] });\r\n            toolGroup.setToolPassive('DragProbe');\r\n        }\r\n\r\n        return () => {\r\n            currentElement.removeEvent(Events.MOUSE_DRAG);\r\n        }\r\n    }, [pipetteMode.active, pipetteMode.minimum]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Paint Brush Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                        >{'Tool and mode'}</span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeTool === Brush_Tool.CIRCLE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveTool(Brush_Tool.CIRCLE)}\r\n                            >{'Circle'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeTool === Brush_Tool.SPHERE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveTool(Brush_Tool.SPHERE)}\r\n                            >{'Sphere'}</Button>\r\n\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeMode === Brush_Mode.FILL ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveMode(Brush_Mode.FILL)}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeMode === Brush_Mode.THRESHOLD ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveMode(Brush_Mode.THRESHOLD)}\r\n                            >{'Threshold'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeMode === Brush_Mode.ERASE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveMode(Brush_Mode.ERASE)}\r\n                            >{'Erase'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeMode === Brush_Mode.REPLACE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveMode(Brush_Mode.REPLACE)}\r\n                            >{'Replace'}</Button>\r\n                        </div>\r\n                        <div className=\"flex items-center col-span-2\">\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Radius'}</div>\r\n                            <InputRange\r\n                                minValue={0}\r\n                                maxValue={maxBrushSize}\r\n                                value={brushSize}\r\n                                onChange={value => setBrushSize(value)}\r\n                                step={1}\r\n                                containerClassName=\"mt-[4px] mb-[4px]\"\r\n                                inputClassName=\"w-[64px]\"\r\n                                labelClassName=\"text-white text-[12px]\"\r\n                                unit=\"px\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseReplaceOnlyMinimized(!isEraseReplaceOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            { 'transform rotate-90': !isEraseReplaceOnlyMinimized, }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                                    >{'Erase/replace options'}</span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseReplaceOnlyMinimized && (\r\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\"\r\n                                        >{'Erase/replace focus on:'}</span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, activeMode, eraseReplaceFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            activeMode === Brush_Mode.THRESHOLD && (\r\n                                <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\r\n                                    <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1\" style={{width: '100%'}}></div>\r\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>\r\n                                        {'Threshold values'}\r\n                                    </div>\r\n                                    <DualInputRange\r\n                                        minValue={-1000}\r\n                                        maxValue={3095}\r\n                                        value1={circleThresholdValue[0]}\r\n                                        value2={circleThresholdValue[1]}\r\n                                        onChange={(vmin, vmax) => {setCircleThresholdValue([vmin, vmax])}}\r\n                                        step={5}\r\n                                        containerClassName=\"mt-[4px] mb-[4px] w-full\"\r\n                                        inputClassName=\"w-full\"\r\n                                        labelClassName=\"text-white text-[12px] w-full\"\r\n                                        unit=\"HU\"\r\n                                    />\r\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>\r\n                                        {'Select threshold value with pipette for :'}\r\n                                    </div>\r\n                                    <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\r\n                                        <Button\r\n                                            size={ButtonEnums.size.small}\r\n                                            onClick={() => setPipetteMode({ active: true, minimum: true })}\r\n                                        >{'Minimum'}</Button>\r\n                                        <Button\r\n                                            size={ButtonEnums.size.small}\r\n                                            onClick={() => setPipetteMode({ active: true, minimum: false })}\r\n                                        >{'Maximum'}</Button>\r\n                                    </div>\r\n                                    {\r\n                                        pipetteMode.active && (\r\n                                            <Button\r\n                                                size={ButtonEnums.size.small}\r\n                                                onClick={() => setPipetteMode({ active: false, minimum: true })}\r\n                                            >{'Back to annotation'}</Button>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, ButtonEnums, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Circle_Strategies {\r\n    FILL_INSIDE = 'FILL_INSIDE',\r\n    ERASE_INSIDE = 'ERASE_INSIDE'\r\n}\r\n\r\nexport default function CircleScissorsToolEdit({ segmentationService, cornerstoneViewportService }) {\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [activeStrategy, setActiveStrategy] = useState(Circle_Strategies.FILL_INSIDE);\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n\r\n    const [segments, setSegments] = useState([]);\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All');\r\n\r\n    const handleSegmentClick = (args, circleInstance) => {\r\n        const {label, segmentIndex} = args;\r\n        circleInstance.setConfiguration({eraseFocusIndex: segmentIndex});\r\n\r\n        setEraseFocus(label);\r\n    }\r\n\r\n    const setSegmentsForToolGroup = (circleInstance) => {\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\r\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\r\n        segments = segments.map(s => ({\r\n            ...s,\r\n            onClick: args => handleSegmentClick(args, circleInstance)\r\n        }));\r\n        setSegments(segments);\r\n    }\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\r\n\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                setSegmentsForToolGroup(circleInstance);\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\r\n\r\n        setActiveStrategy(circleInstance.configuration.activeStrategy);\r\n        setSegmentsForToolGroup(circleInstance);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\r\n\r\n        circleInstance.setConfiguration({ activeStrategy: activeStrategy });\r\n    }, [activeStrategy]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Circle Segmentation Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                        >{'Mode'}</span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeStrategy === Circle_Strategies.FILL_INSIDE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveStrategy(Circle_Strategies.FILL_INSIDE)}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeStrategy === Circle_Strategies.ERASE_INSIDE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => setActiveStrategy(Circle_Strategies.ERASE_INSIDE)}\r\n                            >{'Erase'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                                    >{'Erase Options'}</span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\"\r\n                                        >{'Erase focus on:'}</span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\n\r\nexport default function PaintFillToolEdit({}) {\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Fill Holes Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                        >{'No configurations for this tool'}</span>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\r\nimport InputRange from '../../../../../platform/ui/src/components/InputRange'\r\nimport {Button, ButtonEnums, useViewportGrid} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { MouseBindings, Events } = csToolsEnums;\r\n\r\nconst EVENT_LISTENERS = []\r\n\r\nexport default function RectangleROIStartEndThresholdToolEdit({ segmentationService, cornerstoneViewportService }) {\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n\r\n    const [thresholdValue, setThresholdValue] = useState([-1000, 3095]);\r\n    const [slicesToPropagate, setSlicesToPropagate] = useState(0);\r\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true});\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\r\n\r\n        setSlicesToPropagate(rectangleROIInstance.configuration.numSlicesToPropagate);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\r\n\r\n        rectangleROIInstance.setConfiguration({ numSlicesToPropagate: slicesToPropagate });\r\n        console.log('SET CONFIGURATION', slicesToPropagate);\r\n    }, [slicesToPropagate]);\r\n\r\n    const setThresholdCallback = (evt, minimum) => {\r\n        //If left click\r\n        if(evt.detail.mouseButton === 1) {\r\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n            const worldPoints = evt.detail.currentPoints.world;\r\n            const { imageData, scalarData, dimensions } = viewport.getImageData();\r\n            const index = imageData.worldToIndex(worldPoints).map(Math.round);\r\n\r\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\r\n                const yMultiple = dimensions[0];\r\n                const zMultiple = dimensions[0] * dimensions[1];\r\n\r\n                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\r\n                if (minimum) {\r\n                    setThresholdValue([value, thresholdValue[1]]);\r\n                } else {\r\n                    setThresholdValue([thresholdValue[0], value]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const currentElement = viewport.element;\r\n        currentElement.addEvent = (evt, callback) => {\r\n            if(EVENT_LISTENERS[evt]) {\r\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\r\n                EVENT_LISTENERS[evt] = null;\r\n            }\r\n            EVENT_LISTENERS[evt] = callback;\r\n            currentElement.addEventListener(evt, callback);\r\n        };\r\n        currentElement.removeEvent = (evt) => {\r\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\r\n            EVENT_LISTENERS[evt] = null\r\n        };\r\n\r\n        if (pipetteMode.active) {\r\n            toolGroup.setToolPassive('RectangleROIStartEndThreshold');\r\n            toolGroup.setToolActive('DragProbe', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            });\r\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\r\n        } else {\r\n            toolGroup.setToolPassive('DragProbe');\r\n            toolGroup.setToolActive('RectangleROIStartEndThreshold', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            });\r\n            currentElement.removeEvent(Events.MOUSE_DRAG);\r\n        }\r\n    }, [pipetteMode.active, pipetteMode.minimum]);\r\n\r\n    const computeThreshold = () => {\r\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors();\r\n        const imageVolumes = actors\r\n            .map((va) => {\r\n                // prefer the referenceUID if it is set, since it can be a derived actor\r\n                // and the uid does not necessarily match the volumeId\r\n                const actorUID = va.referenceId ?? va.uid;\r\n                return cache.getVolume(actorUID);\r\n            })\r\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\r\n            .filter((iv) => !!iv);\r\n\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIStartEndThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        const annotation = csTools.annotation.state.getAnnotation(\r\n            annotationUID\r\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIStartEndThresholdAnnotation;\r\n\r\n        if (!annotation) return\r\n\r\n        // Todo: this only works for volumeViewport\r\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\r\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\r\n        const segmentations = segmentationService.getSegmentations();\r\n\r\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n            selectedAnnotationUIDs,\r\n            segmentationVolume,\r\n            [\r\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\r\n            ],\r\n            {\r\n                numSlicesToProject: 0,\r\n                overwrite: false,\r\n                overlapType: 1,\r\n                segmentIndex: segmentations[0].activeSegmentIndex,\r\n            }\r\n        );\r\n    }\r\n\r\n    const deleteRegion = () => {\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIStartEndThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n        console.log('selected annotation uid', selectedAnnotationUIDs);\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        console.log('CSTOOLS STATE', csTools.annotation.state);\r\n        csTools.annotation.state.removeAnnotation(annotationUID);\r\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'3D Rectangle Threshold Segmentation Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\r\n                            <DualInputRange\r\n                                minValue={-1000}\r\n                                maxValue={5000}\r\n                                value1={thresholdValue[0]}\r\n                                value2={thresholdValue[1]}\r\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\r\n                                step={5}\r\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\r\n                                inputClassName=\"w-full\"\r\n                                labelClassName=\"text-white text-[12px] w-full\"\r\n                                unit=\"\"\r\n                            />\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\r\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\r\n                                <Button\r\n                                    size={ButtonEnums.size.small}\r\n                                    onClick={() => setPipetteMode({active: true, minimum: true})}\r\n                                >{'Minimum'}</Button>\r\n                                <Button\r\n                                    size={ButtonEnums.size.small}\r\n                                    onClick={() => setPipetteMode({active: true, minimum: false})}\r\n                                >{'Maximum'}</Button>\r\n                            </div>\r\n                            {\r\n                                pipetteMode.active && (\r\n                                    <Button\r\n                                        size={ButtonEnums.size.small}\r\n                                        onClick={() => setPipetteMode({active: false, minimum: true})}\r\n                                    >{'Back to annotation'}</Button>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div className=\"flex items-center col-span-2\" style={{width:'100%', flexDirection:'column'}}>\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Slices Propagation'}</div>\r\n                            <InputRange\r\n                                minValue={0}\r\n                                maxValue={200}\r\n                                value={slicesToPropagate}\r\n                                onChange={(value) => {setSlicesToPropagate(value)}}\r\n                                step={1}\r\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\r\n                                inputClassName=\"w-full\"\r\n                                labelClassName=\"text-white text-[12px] w-full\"\r\n                                unit=\"\"\r\n                            />\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                onClick={computeThreshold}\r\n                            >{'Compute Threshold'}</Button>\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                onClick={deleteRegion()}\r\n                            >{'Delete selected region'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\r\nimport {Button, ButtonEnums, useViewportGrid} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { MouseBindings, Events } = csToolsEnums;\r\n\r\nconst EVENT_LISTENERS = []\r\n\r\nexport default function RectangleROIThresholdToolEdit({ segmentationService, cornerstoneViewportService }) {\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n\r\n    const [thresholdValue, setThresholdValue] = useState([-1000, 3095]);\r\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true});\r\n\r\n    const setThresholdCallback = (evt, minimum) => {\r\n        //If left click\r\n        if (evt.detail.mouseButton === 1) {\r\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n            const worldPoints = evt.detail.currentPoints.world;\r\n            const imageData = viewport.getImageData();\r\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round);\r\n\r\n            const {scalarData, dimensions} = imageData;\r\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\r\n                const yMultiple = dimensions[0];\r\n                const zMultiple = dimensions[0] * dimensions[1];\r\n\r\n                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\r\n                if (minimum) {\r\n                    setThresholdValue([value, thresholdValue[1]]);\r\n                } else {\r\n                    setThresholdValue([thresholdValue[0], value]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const currentElement = viewport.element;\r\n        currentElement.addEvent = (evt, callback) => {\r\n            if (EVENT_LISTENERS[evt]) {\r\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\r\n                EVENT_LISTENERS[evt] = null;\r\n            }\r\n            EVENT_LISTENERS[evt] = callback;\r\n            currentElement.addEventListener(evt, callback);\r\n        };\r\n        currentElement.removeEvent = (evt) => {\r\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\r\n            EVENT_LISTENERS[evt] = null;\r\n        };\r\n\r\n        if (pipetteMode.active) {\r\n            toolGroup.setToolPassive('RectangleROIThreshold');\r\n            toolGroup.setToolActive('DragProbe', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            });\r\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\r\n        } else {\r\n            toolGroup.setToolPassive('DragProbe');\r\n            toolGroup.setToolActive('RectangleROIThreshold', {\r\n                bindings: [\r\n                    {\r\n                        mouseButton: MouseBindings.Primary, // Left Click\r\n                    },\r\n                ],\r\n            });\r\n            currentElement.removeEvent(Events.MOUSE_DRAG);\r\n        }\r\n    }, [pipetteMode.active, pipetteMode.minimum]);\r\n\r\n    const computeThreshold = () => {\r\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors();\r\n        const imageVolumes = actors\r\n            .map((va) => {\r\n                // prefer the referenceUID if it is set, since it can be a derived actor\r\n                // and the uid does not necessarily match the volumeId\r\n                const actorUID = va.referenceId ?? va.uid;\r\n                return cache.getVolume(actorUID);\r\n            })\r\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\r\n            .filter((iv) => !!iv);\r\n\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        const annotation = csTools.annotation.state.getAnnotation(\r\n            annotationUID\r\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIThresholdAnnotation;\r\n\r\n        if (!annotation) return\r\n\r\n        // Todo: this only works for volumeViewport\r\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\r\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\r\n        const segmentations = segmentationService.getSegmentations();\r\n\r\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n            selectedAnnotationUIDs,\r\n            segmentationVolume,\r\n            [\r\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\r\n            ],\r\n            {\r\n                numSlicesToProject: 0,\r\n                overwrite: false,\r\n                overlapType: 1,\r\n                segmentIndex: segmentations[0].activeSegmentIndex,\r\n            }\r\n        );\r\n    }\r\n\r\n    const deleteRegion = () => {\r\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\r\n            'RectangleROIThreshold'\r\n        ) as Array<string>;\r\n\r\n        if (!selectedAnnotationUIDs) {\r\n            throw new Error('No annotation selected ');\r\n        }\r\n        console.log('selected annotation uid', selectedAnnotationUIDs);\r\n\r\n        const annotationUID = selectedAnnotationUIDs[0];\r\n        console.log('CSTOOLS STATE', csTools.annotation.state);\r\n        csTools.annotation.state.removeAnnotation(annotationUID);\r\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Rectangle Threshold Segmentation Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div className=\"flex items-center col-span-2 pb-[9px]\" style={{flexDirection:'column', width:'100%'}}>\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pb-[3px]\" style={{width:'100%'}}>{'Threshold values'}</div>\r\n                            <DualInputRange\r\n                                minValue={-1000}\r\n                                maxValue={5000}\r\n                                value1={thresholdValue[0]}\r\n                                value2={thresholdValue[1]}\r\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\r\n                                step={5}\r\n                                containerClassName=\"mt-[4px] mb-[4px] w-full pb-[3px]\"\r\n                                inputClassName=\"w-full\"\r\n                                labelClassName=\"text-white text-[12px] w-full\"\r\n                                unit=\"HU\"\r\n                            />\r\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\r\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\r\n                                <Button\r\n                                    size={ButtonEnums.size.small}\r\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\r\n                                >{'Minimum'}</Button>\r\n                                <Button\r\n                                    size={ButtonEnums.size.small}\r\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\r\n                                >{'Maximum'}</Button>\r\n                            </div>\r\n                            {\r\n                                pipetteMode.active && (\r\n                                    <Button\r\n                                        size={ButtonEnums.size.small}\r\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\r\n                                    >{'Back to annotation'}</Button>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                onClick={computeThreshold}\r\n                            >{'Compute Threshold'}</Button>\r\n                        </div>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                onClick={deleteRegion}\r\n                            >{'Delete selected region'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, ButtonEnums, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Rectangle_Strategies {\r\n    FILL_INSIDE = 'FILL_INSIDE',\r\n    ERASE_INSIDE = 'ERASE_INSIDE'\r\n}\r\n\r\nexport default function RectangleScissorsToolEdit ({ segmentationService, cornerstoneViewportService }){\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [activeStrategy, setActiveStrategy] = useState(Rectangle_Strategies.FILL_INSIDE)\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n\r\n    const [segments, setSegments] = useState([])\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All')\r\n\r\n    const handleSegmentClick = (args, rectangleInstance) => {\r\n        const {label, segmentIndex} = args;\r\n        rectangleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\r\n\r\n        setEraseFocus(label);\r\n    }\r\n\r\n    const setSegmentsForToolGroup = (rectangleInstance) => {\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\r\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\r\n        segments = segments.map(s => ({\r\n            ...s,\r\n            onClick: args => handleSegmentClick(args, rectangleInstance)\r\n        }));\r\n        setSegments(segments);\r\n    }\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\r\n\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                setSegmentsForToolGroup(rectangleInstance);\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\r\n\r\n        setActiveStrategy(rectangleInstance.configuration.activeStrategy);\r\n        setSegmentsForToolGroup(rectangleInstance);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\r\n\r\n        rectangleInstance.setConfiguration({ activeStrategy: activeStrategy });\r\n    }, [activeStrategy]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Rectangle Scissors Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                        >{'Mode'}</span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeStrategy === Rectangle_Strategies.FILL_INSIDE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.FILL_INSIDE)}}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeStrategy === Rectangle_Strategies.ERASE_INSIDE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.ERASE_INSIDE)}}\r\n                            >{'Erase'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\r\n                                    {'Erase Options'}</span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\r\n                                        {'Erase focus on:'}</span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, ButtonEnums, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\r\n    const isActive = label === eraseFocus;\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\r\n                'text-base whitespace-pre',\r\n                isActive && 'bg-primary-dark',\r\n                isActive\r\n                    ? 'text-[#348CFD]'\r\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\r\n            )}\r\n        >\r\n            <span className=\"mr-5\">{label}</span>\r\n        </div>\r\n    );\r\n};\r\nconst listItemRenderer = DefaultListItemRenderer\r\n\r\nenum Sphere_Strategies {\r\n    FILL_INSIDE = 'FILL_INSIDE',\r\n    ERASE_INSIDE = 'ERASE_INSIDE'\r\n}\r\n\r\nexport default function SphereScissorsToolEdit({ segmentationService, cornerstoneViewportService }) {\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [activeStrategy, setActiveStrategy] = useState(Sphere_Strategies.FILL_INSIDE);\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n\r\n    const [segments, setSegments] = useState([]);\r\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\r\n    const [eraseFocus, setEraseFocus] = useState('All');\r\n\r\n    const handleSegmentClick = (args, sphereInstance) => {\r\n        const {label, segmentIndex} = args;\r\n        sphereInstance.setConfiguration({eraseFocusIndex: segmentIndex});\r\n\r\n        setEraseFocus(label);\r\n    }\r\n\r\n    const setSegmentsForToolGroup = (sphereInstance) => {\r\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\r\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\r\n        segments = segments.map(s => ({\r\n            ...s,\r\n            onClick: args => handleSegmentClick(args, sphereInstance)\r\n        }));\r\n        setSegments(segments);\r\n    }\r\n\r\n    //Update \"erase more\" list on segment modified\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\r\n\r\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n        const subscriptions = [];\r\n\r\n        [added, updated, removed].forEach(evt => {\r\n            segmentationService.subscribe(evt, () => {\r\n                setSegmentsForToolGroup(sphereInstance);\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            subscriptions.forEach(unsub => {\r\n                unsub();\r\n            });\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\r\n\r\n        setActiveStrategy(sphereInstance.configuration.activeStrategy);\r\n        setSegmentsForToolGroup(sphereInstance);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\r\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\r\n\r\n        sphereInstance.setConfiguration({ activeStrategy: activeStrategy });\r\n    }, [activeStrategy]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={() => setIsMinimized(!isMinimized)}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Sphere Scissors Tool Edit'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                        >{'Mode'}</span>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\r\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeStrategy === Sphere_Strategies.FILL_INSIDE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.FILL_INSIDE)}}\r\n                            >{'Fill'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                type={activeStrategy === Sphere_Strategies.ERASE_INSIDE ? ButtonEnums.type.primary : ButtonEnums.type.secondary}\r\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.ERASE_INSIDE)}}\r\n                            >{'Erase'}</Button>\r\n                        </div>\r\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n                            <div className=\"bg-primary-dark\">\r\n                                <div\r\n                                    className=\"flex cursor-pointer items-center\"\r\n                                    onClick={evt => {\r\n                                        evt.stopPropagation();\r\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\r\n                                    }}\r\n                                >\r\n                                    <Icon\r\n                                        name=\"panel-group-open-close\"\r\n                                        className={classNames(\r\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                                            {\r\n                                                'transform rotate-90': !isEraseOnlyMinimized,\r\n                                            }\r\n                                        )}\r\n                                    />\r\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                                    >{'Erase Options'}</span>\r\n                                </div>\r\n                                {/* active segmentation */}\r\n                                {!isEraseOnlyMinimized && (\r\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\"\r\n                                        >{'Erase focus on:'}</span>\r\n                                        <ListMenu\r\n                                            items={segments}\r\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState, useCallback } from 'react';\r\nimport classNames from \"classnames\";\r\nimport Icon from '../../../../../platform/ui/src/components/Icon'\r\nimport {Button, ButtonEnums, useViewportGrid, ListMenu} from \"@ohif/ui\";\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport {useTranslation} from \"react-i18next\";\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { Events } = csToolsEnums\r\n\r\nclass CappedArray extends Array {\r\n    private readonly maxLength: number;\r\n\r\n    constructor(maxLength) {\r\n        super();\r\n        this.maxLength = maxLength;\r\n    }\r\n\r\n    push(...elements) {\r\n        // Appeler la méthode push de la classe Array parente\r\n        const r = super.push(...elements);\r\n\r\n        // Si la longueur dépasse maxLength, retirer les éléments les plus anciens\r\n        if (this.length > this.maxLength) {\r\n            const excess = this.length - this.maxLength;\r\n            this.splice(0, excess);\r\n        }\r\n\r\n        return r;\r\n    }\r\n}\r\n\r\nconst MAX_CACHE_LENGTH = 10;\r\nconst CACHE_SEGMENTATION_VOLUMES = new CappedArray(MAX_CACHE_LENGTH);\r\n\r\nexport default function UndoToolEdit ({ segmentationService, cornerstoneViewportService }) {\r\n    const { t } = useTranslation('Buttons');\r\n\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\r\n    const [currentCacheIndex, setCurrentCacheIndex] = useState(CACHE_SEGMENTATION_VOLUMES.length);\r\n\r\n    useEffect(() => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const currentElement = viewport.element\r\n        // Save previous segmentation states for \"undo\" functionality\r\n        currentElement.addEventListener(Events.MOUSE_DOWN, evt => {\r\n            const old_segmentation = segmentationService.getSegmentations()[0]\r\n            const old_seg_volume = new Uint8ClampedArray(segmentationService.getLabelmapVolume(old_segmentation.id).getScalarData());\r\n\r\n            //Add current segmentation volume in cache to save its state\r\n            if (CACHE_SEGMENTATION_VOLUMES.length === MAX_CACHE_LENGTH) {\r\n                CACHE_SEGMENTATION_VOLUMES.shift();\r\n            }\r\n            CACHE_SEGMENTATION_VOLUMES.push(old_seg_volume);\r\n            setCurrentCacheIndex(CACHE_SEGMENTATION_VOLUMES.length);\r\n        });\r\n    }, []);\r\n\r\n    const apply_replace = (cacheIndex) => {\r\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\r\n        const currentElement = viewport.element\r\n\r\n        const previous_volume = CACHE_SEGMENTATION_VOLUMES[cacheIndex]\r\n        if(!previous_volume) return\r\n\r\n        const replace_event = new CustomEvent('UNDO_REDO_TOOL', {\r\n            detail: {\r\n                element: currentElement,\r\n                oldScalarData: previous_volume\r\n            }\r\n        });\r\n        window.dispatchEvent(replace_event);\r\n        setCurrentCacheIndex(cacheIndex);\r\n    }\r\n\r\n    const undo = () => {\r\n        if (currentCacheIndex > 0) {\r\n            apply_replace(currentCacheIndex - 1);\r\n        }\r\n    }\r\n\r\n    const redo = () => {\r\n        if (currentCacheIndex < MAX_CACHE_LENGTH) {\r\n            apply_replace(currentCacheIndex + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark\">\r\n                <div\r\n                    className=\"flex cursor-pointer items-center\"\r\n                    onClick={evt => {\r\n                        evt.stopPropagation();\r\n                        setIsMinimized(!isMinimized);\r\n                    }}\r\n                >\r\n                    <Icon\r\n                        name=\"panel-group-open-close\"\r\n                        className={classNames(\r\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\r\n                            {\r\n                                'transform rotate-90': !isMinimized,\r\n                            }\r\n                        )}\r\n                    />\r\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\"\r\n                    >{'Undo/redo Segmentation'}</span>\r\n                </div>\r\n                {/* active segmentation */}\r\n                {!isMinimized && (\r\n                    <div className=\"pl-2 pr-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\r\n                        <div\r\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly inline-flex\"\r\n                        >\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                onClick={undo}\r\n                            >{'Undo'}</Button>\r\n                            <Button\r\n                                size={ButtonEnums.size.small}\r\n                                onClick={redo}\r\n                            >{'Redo'}</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"h-[6px] bg-black \"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport {useViewportGrid} from '@ohif/ui';\r\nimport { useToolbar } from '@ohif/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\nconst { Enums: csToolsEnums } = csTools\r\nconst { Events } = csToolsEnums\r\nconst { state } = csTools\r\n\r\nimport BrushToolEdit from \"./brushToolEdit\";\r\nimport CircleScissorsToolEdit from \"./cscissorsToolEdit\";\r\nimport PaintFillToolEdit from \"./paintFillToolEdit\";\r\nimport RectangleROIStartEndThresholdToolEdit from \"./rectangleROIStartEndToolEdit\";\r\nimport RectangleROIThresholdToolEdit from \"./rectangleROIToolEdit\";\r\nimport RectangleScissorsToolEdit from \"./rscissorsToolEdit\";\r\nimport SphereScissorsToolEdit from \"./sscissorsToolEdit\";\r\nimport UndoToolEdit from \"./undoToolEdit\";\r\n\r\nconst SEG_TOOL_NAMES = [\r\n    'Brush',\r\n    'CircleScissor',\r\n    'PaintFill',\r\n    'RectangleROIStartEndThreshold',\r\n    'RectangleROIThreshold',\r\n    'RectangleScissor',\r\n    'SphereScissor'\r\n]\r\n\r\nexport default function BaseToolEdit ({ segmentationService, cornerstoneViewportService, toolbarService }) {\r\n    const [activeSegTool, setActiveSegTool] = useState(null);\r\n\r\n    const searchActiveSegTool = () => {\r\n        const toolStates = state.toolGroups.filter(tg => tg.id === 'mpr')[0]?.toolOptions;\r\n        if (!toolStates) {\r\n            setActiveSegTool(null);\r\n        }\r\n        const activeSegTool = Object.entries(toolStates).find(\r\n            //Check if tool is a segmentation tool and is active\r\n            ([toolname, toolOptions]) => SEG_TOOL_NAMES.includes(toolname) && toolOptions.mode === 'Active'\r\n        );\r\n        setActiveSegTool(activeSegTool ? activeSegTool[0] : null);\r\n    }\r\n\r\n    useEffect(() => {\r\n        searchActiveSegTool();\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        const { unsubscribe } = toolbarService.subscribe(\r\n            toolbarService.EVENTS.TOOL_BAR_MODIFIED,\r\n            searchActiveSegTool\r\n        );\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [toolbarService]);\r\n\r\n    const renderActiveTool = () => {\r\n        switch (activeSegTool) {\r\n            case 'Brush':\r\n            case 'DragProbe':\r\n                // TODO DragProbe displays Brush Panel, otherwise the Threshold Minimum button would not work\r\n                return <BrushToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'CircleScissor':\r\n                return <CircleScissorsToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'PaintFill':\r\n                return <PaintFillToolEdit/>\r\n            case 'RectangleROIStartEndThreshold':\r\n                return <RectangleROIStartEndThresholdToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'RectangleROIThreshold':\r\n                return <RectangleROIThresholdToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'RectangleScissor':\r\n                return <RectangleScissorsToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            case 'SphereScissor':\r\n                return <SphereScissorsToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            default:\r\n                return null;\r\n        };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {activeSegTool && (\r\n                <UndoToolEdit\r\n                    cornerstoneViewportService={cornerstoneViewportService}\r\n                    segmentationService={segmentationService}\r\n                />\r\n            )}\r\n            {renderActiveTool()}\r\n        </>\r\n    );\r\n}","import {Button, ButtonEnums, useViewportGrid, Icon} from \"@ohif/ui\";\r\nimport React, {useState} from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {Segmentation} from \"@ohif/extension-cornerstone/src/services/SegmentationService/SegmentationServiceTypes\";\r\nimport PropTypes from \"prop-types\";\r\nimport {saveAs, FileSaver} from 'file-saver'\r\nimport { segmentation as cstSegmentation } from '@cornerstonejs/tools';\r\n\r\nfunction SegmentsConfigurationImportExport({segmentations, segmentationService}) : React.JSX.Element {\r\n    const [isMinimized, setIsMinimized] = useState(false);\r\n    // @ts-ignore\r\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n    const exportConfiguration = () : void => {\r\n        const json = JSON.stringify(segmentations[0].segments)\r\n        const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\r\n        saveAs(json_blob, 'segments_configuration.json')\r\n    }\r\n\r\n    const importConfiguration = () : void => {\r\n        console.log('SEGS AT IMPORT', segmentations);\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.accept = 'application/json';\r\n        input.onchange = _ => {\r\n            const json_file = Array.from(input.files)[0];\r\n            const reader = new FileReader();\r\n            reader.onload = function(event) {\r\n                try {\r\n                    if (typeof event.target.result === \"string\") {\r\n                        for (let i = 1; i < segmentations[0].segments.length; i++) {\r\n                            segmentationService.removeSegment(segmentations[0].id, i);\r\n                        }\r\n\r\n                        const jsonContent = JSON.parse(event.target.result);\r\n                        for (const segment of jsonContent) {\r\n                            if (segment) {\r\n                                const {segmentIndex} = segment;\r\n                                segmentationService.addSegment(segmentations[0].id, {\r\n                                    segmentIndex: segmentIndex,\r\n                                    toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\r\n                                    properties: segment,\r\n                                    override: true\r\n                                });\r\n                            }\r\n                        }\r\n                    } else {\r\n                        console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"ERROR::JSON_READING\", error);\r\n                }\r\n            };\r\n            reader.readAsText(json_file);\r\n        };\r\n        input.click();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n            <div className=\"bg-primary-dark pt-[6px] pb-[6px]\">\r\n                <p className=\"text-[#d8d8d8] text-[12px] font-[300] pl-[9px] pr-[9px] pb-[6px] flex\">{'Configuration'}</p>\r\n                <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        onClick={importConfiguration}\r\n                    >{'Import'}</Button>\r\n                    <Button\r\n                        size={ButtonEnums.size.small}\r\n                        onClick={exportConfiguration}\r\n                    >{'Export'}</Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"h-[6px] bg-black \"></div>\r\n        </div>\r\n        );\r\n}\r\n\r\nSegmentsConfigurationImportExport.propTypes = {\r\n    segmentations: PropTypes.array.isRequired\r\n}\r\n\r\nexport default SegmentsConfigurationImportExport\r\n","import {Button, ButtonEnums, useViewportGrid, Icon} from \"@ohif/ui\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {saveAs, FileSaver} from 'file-saver'\r\nimport JSZip from \"jszip\";\r\nimport { segmentation as cstSegmentation, utilities as csToolsUtils, Enums } from '@cornerstonejs/tools';\r\nimport { cache } from '@cornerstonejs/core';\r\nimport FileLoaderService from '../../../../../platform/app/src/routes/Local/fileLoaderService.js'\r\nimport { PanoramicState } from \"extensions/cornerstone/src/types/Panoramic.js\";\r\nimport { ByteArray } from 'dicom-parser';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\nimport { formatPN } from '../../../../cornerstone/src/Viewport/Overlays/utils'\r\n\r\nfunction SegmentationImportExport({\r\n  segmentations,\r\n  segmentationService,\r\n  cornerstoneViewportService,\r\n  panoramicService,\r\n  uiNotificationService,\r\n  hangingProtocolService,\r\n}) : React.JSX.Element {\r\n\r\n  const [isProcessingLayer, setIsProcessingLayer] = useState(false);\r\n  const [processingLayerPercent, setProcessingLayerPercent] = useState(0);\r\n  const [isMinimized, setIsMinimized] = useState(false);\r\n  // @ts-ignore\r\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\r\n\r\n  useEffect(() => {\r\n    /*if (isProcessingLayer) {\r\n      setProcessingLayerPercent(0);\r\n      setTimeout(exportSegmentation, 500);\r\n    }*/\r\n  }, [isProcessingLayer])\r\n\r\n  const exportActiveSegmentation = async () => {\r\n    let segmentation = segmentationService.getActiveSegmentation();\r\n    if (!segmentation) {\r\n        uiNotificationService.show({\r\n            title: `Export Active Segmentation`,\r\n            message: `No active segmentation detected`,\r\n            type: 'info',\r\n            duration: 3000,\r\n        });\r\n        return;\r\n    }\r\n    const dentascanSegmentations = segmentationService.getDentascanSegmentations();\r\n    if (dentascanSegmentations?.includes(segmentation)) {\r\n      // Always export main segmentation\r\n      segmentation = segmentationService.getHiddenSegmentation(segmentation.id);\r\n    }\r\n\r\n    const { segments: segmentsInfo, label: segmentationLabel } = segmentation;\r\n    const { dimensions, scalarData } = segmentationService.getLabelmapVolume(segmentation.id);\r\n    const layerSize = dimensions[0] * dimensions[1];\r\n    const nbLayers = dimensions[2];\r\n\r\n    // One zip file per segmentation\r\n    const zip = new JSZip();\r\n\r\n    // One PNG image per layer\r\n    for (let layerI = 0; layerI < nbLayers; layerI++) {\r\n      const pixelData = new Uint8ClampedArray(layerSize * 4).fill(0);\r\n      for (let i = 0; i < layerSize; i++) {\r\n        const segmentIndex = scalarData[layerI * layerSize + i];\r\n        if (segmentIndex !== 0) {\r\n          // Not background\r\n          const { color } = segmentsInfo[segmentIndex];\r\n          pixelData[i * 4] = color[0];\r\n          pixelData[i * 4 + 1] = color[1];\r\n          pixelData[i * 4 + 2] = color[2];\r\n        }\r\n        pixelData[i * 4 + 3] = 255;\r\n      }\r\n\r\n      // Store PNG image in zip\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      canvas.width = dimensions[0];\r\n      canvas.height = dimensions[1];\r\n      const imgData = new ImageData(pixelData, dimensions[0], dimensions[1], { colorSpace: 'srgb' });\r\n      ctx.putImageData(imgData, 0, 0);\r\n      ctx.putImageData(imgData, 0, 0);\r\n\r\n      const pngBlob = await new Promise<Blob>((resolve, reject) => {\r\n        canvas.toBlob(blob => blob ? resolve(blob) : reject(new Error('Conversion to blob failed')), 'image/png');\r\n      });\r\n      zip.file(`layer_${layerI}.png`, pngBlob);\r\n    }\r\n\r\n    // Add scalar data as binary file\r\n    const binaryBlob = new Blob([new Uint8ClampedArray(scalarData)], { type: 'application/octet-stream' });\r\n    zip.file('labelmapVolume.bin', binaryBlob);\r\n\r\n    // Add segments information as JSON File\r\n    const jsonBlob = new Blob([JSON.stringify(segmentsInfo, null, '\\t')], { type: 'text/plain;charset=utf-8' });\r\n    zip.file('segmentsInfo.json', jsonBlob);\r\n\r\n    // Get study metadata\r\n    const { activeStudyUID } = hangingProtocolService.getState();\r\n    const study = DicomMetadataStore.getStudy(activeStudyUID);\r\n    const { StudyDate, PatientName } = study?.series[0]?.instances[0];\r\n    const patientNameFormatted = formatPN(PatientName[0]);\r\n\r\n    // Save zip file\r\n    const content = await zip.generateAsync({ type:'blob' });\r\n    saveAs(content, `${StudyDate ?? ''}_${patientNameFormatted ?? ''}_${segmentationLabel}.zip`);\r\n  }\r\n\r\n  const importConfiguration = (configurationFile) => {\r\n    const reader = new FileReader();\r\n    reader.onload = function(event) {\r\n      try {\r\n        if (typeof event.target.result === \"string\") {\r\n          const jsonContent = JSON.parse(event.target.result);\r\n          jsonContent.forEach(segment => {\r\n            if (segment) {\r\n              const {segmentIndex} = segment;\r\n              segmentationService.addSegment(segmentations[0].id, {\r\n                segmentIndex: segmentIndex,\r\n                toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\r\n                properties: segment,\r\n                override: true\r\n              });\r\n            }\r\n          })\r\n          cstSegmentation.triggerSegmentationEvents.triggerSegmentationModified(segmentations[0].id);\r\n        } else {\r\n          console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"ERROR::JSON_READING\", error);\r\n      }\r\n    };\r\n    reader.readAsText(configurationFile);\r\n  }\r\n\r\n  const _sortFiles = (files) => {\r\n    const indexedFiles = files.map(file => ({\r\n      file: file,\r\n      index: Number(file.name.slice(6, file.name.length - 4)),\r\n    }));\r\n    indexedFiles.sort((a, b) => a.index - b.index);\r\n    const sortedFiles = indexedFiles.map(item => item.file);\r\n\r\n    return sortedFiles;\r\n  }\r\n\r\n  const importSegmentationFromFolder = () => {\r\n    const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\r\n    const {dimensions, scalarData} = labelmapVolume; //TODO\r\n    const layerSize = dimensions[0] * dimensions[1];\r\n    console.log('SEGS AT IMPORT', segmentations);\r\n\r\n    /*let viewport = viewports.get(activeViewportId);\r\n    if (viewport.viewportOptions.viewportType !== 'volume') {\r\n      viewport = viewports.find(vp => vp.viewportOptions.viewportType === 'volume');\r\n      console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\r\n      viewportGridService.setActiveViewportId(viewport.viewportId);\r\n    }\r\n    const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.id);\r\n    const actorEntries = cornerstoneVP.getActors();\r\n    console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\r\n    const imageVolumes = actorEntries.map((va) => {\r\n      const actorUID = va.referenceId ?? va.uid;\r\n      return cache.getVolume(actorUID);\r\n    });\r\n    const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\r\n    const segmentationId = segmentationVolume.volumeId;\r\n    const scalarData = segmentationVolume.getScalarData();*/\r\n\r\n    const segmentsHashes = {255: 0};\r\n    for (const segment of segmentations[0].segments) {\r\n      if (segment) {\r\n        const [r, g, b] = segment.color;\r\n        const rgbHash = (r << 24) + (g << 16) + (b << 8) + 255;\r\n        segmentsHashes[rgbHash] = segment.segmentIndex;\r\n      }\r\n    }\r\n\r\n    // Load binary file\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    //input.accept = 'image/png';\r\n    input.webkitdirectory = true;\r\n    input.onchange = async _ => {\r\n      const files = Array.from(input.files);\r\n      const configurationFile = files.filter(filter => filter.type === 'application/json')[0];\r\n      importConfiguration(configurationFile);\r\n\r\n      let imageFiles = files.filter(file => file.type === 'image/png');\r\n      if (imageFiles.length !== dimensions[2]) {\r\n        // TODO Error\r\n        return;\r\n      }\r\n      imageFiles = _sortFiles(imageFiles);\r\n      for (let index = 0; index < imageFiles.length; index++) {\r\n        const file = imageFiles[index];\r\n        const fileLoaderService = new FileLoaderService(file)\r\n        const imageId = fileLoaderService.addFile(file)\r\n        const img = await fileLoaderService.loadFile(file, imageId);\r\n        const dataset = await fileLoaderService.getDataset(img, imageId);\r\n        const newScalarData = new Uint32Array(dataset.PixelData[0]);\r\n        if (newScalarData.length * imageFiles.length !== scalarData.length) {\r\n          // TODO Error\r\n          return;\r\n        }\r\n        newScalarData.map(value => segmentsHashes[value]);\r\n        const processedData = new Uint8Array(newScalarData);\r\n        // Replace values of current scalar data\r\n        //scalarData.set(processedData, index * layerSize)\r\n        const offset = index * layerSize;\r\n        for (let i = 0; i < processedData.length; i++) {\r\n          scalarData[offset + i] = processedData[i];\r\n        }\r\n      }\r\n      /*segmentationService.addOrUpdateSegmentation(segmentations[0]);\r\n      const representation = segmentationService.getSegmentationRepresentationsForToolGroup(\"mpr\");\r\n      const segmentationRepresentationUID = representation[0].segmentationRepresentationUID;\r\n      const toolGroupId = viewports.get(activeViewportId).viewportOptions.toolGroupId;\r\n      console.log(cstSegmentation.state.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID))\r\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n      csToolsUtils.segmentation.triggerSegmentationRender(toolGroupId);*/\r\n      cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentations[0].id);\r\n    };\r\n    input.click();\r\n  }\r\n\r\n  const importSegmentationFromBinary = async () => {\r\n    console.log('SEGS AT IMPORT', segmentations);\r\n\r\n    let viewport = viewports.get(activeViewportId);\r\n    if (viewport.viewportOptions.viewportType !== 'volume') {\r\n      viewport = Array.from(viewports.values()).find(vp => vp.viewportOptions.viewportType === 'volume');\r\n      console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\r\n      viewportGridService.setActiveViewportId(viewport.viewportId);\r\n    }\r\n    const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.viewportId);\r\n    const actorEntries = cornerstoneVP.getActors();\r\n    console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\r\n    const imageVolumes = actorEntries.map(va => cache.getVolume(va.referenceId ?? va.uid));\r\n    const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\r\n    if (!segmentationVolume) {\r\n      const options = { label: `Segmentation ${segmentations.length + 1}` };\r\n      const segId = await segmentationService.createSegmentationForDisplaySet(\r\n        viewport.displaySetInstanceUIDs[0], options\r\n      );\r\n\r\n      const segmentation = segmentationService.getSegmentation(segId);\r\n      console.log('CREATED SEGMENTATION', segmentation);\r\n      const LABELMAP = Enums.SegmentationRepresentations.Labelmap;\r\n      await segmentationService.addSegmentationRepresentationToToolGroup('mpr', segId, true, LABELMAP);\r\n\r\n      segmentationService.setActiveSegmentationForToolGroup(segId, 'mpr');\r\n    }\r\n    const segmentationId = segmentationVolume.volumeId;\r\n    const segmentationScalarData = segmentationVolume.getScalarData();\r\n\r\n    // Load binary file\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = 'application/octet-stream';\r\n    input.onchange = async _ => {\r\n      const file = Array.from(input.files)[0];\r\n      const reader = new FileReader();\r\n      reader.onload = async function(event) {\r\n        const newScalarData = new Uint8Array(event.target.result as ArrayBuffer);\r\n        // Replace values of current scalar data\r\n        for (let i = 0; i < segmentationScalarData.length; i++) {\r\n          segmentationScalarData[i] = newScalarData[i];\r\n        }\r\n        // Trigger rendering\r\n        cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentationId);\r\n      }\r\n      reader.readAsArrayBuffer(file);\r\n    };\r\n    input.click();\r\n  }\r\n\r\n  const convertDentascanSegmentation = async () => {\r\n    // TODO No validity check currently\r\n    const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\r\n    const scalarData = labelmapVolume.getScalarData();\r\n\r\n    const volumeViewportData = cornerstoneViewportService.getViewportInfo('default').getViewportData().data[0];\r\n    const volumeDisplaySetInstanceUID = volumeViewportData.displaySetInstanceUID;\r\n    const [volumeWidth, volumeHeight, nbLayers] = volumeViewportData.volume.dimensions;\r\n    const toolGroupId = viewports.get(activeViewportId).viewportOptions.toolGroupId;\r\n\r\n    const panoramicState = panoramicService.getPanoramicState(volumeDisplaySetInstanceUID);\r\n\r\n    // Creation of new segmentation in volume\r\n    const options = { label: `Converted segmentation ${segmentations.length + 1}` };\r\n    const segId = await segmentationService.createSegmentationForDisplaySet(volumeDisplaySetInstanceUID, options);\r\n    const LABELMAP = Enums.SegmentationRepresentations.Labelmap;\r\n    await segmentationService.addSegmentationRepresentationToToolGroup(toolGroupId, segId, true, LABELMAP);\r\n    segmentationService.setActiveSegmentationForToolGroup(segId, toolGroupId);\r\n    for (const segment of segmentations[0].segments) {\r\n      if (segment) {\r\n        const {segmentIndex} = segment;\r\n        segmentationService.addSegment(segId, {\r\n          segmentIndex: segmentIndex,\r\n          toolGroupId: toolGroupId,\r\n          properties: segment,\r\n          override: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Access to scalarData;\r\n    const segmentation = segmentationService.getSegmentation(segId);\r\n\r\n    const segmentationVolumeId = segmentation.representationData.LABELMAP.volumeId;\r\n    const segmentationVolume = cache.getVolume(segmentationVolumeId);\r\n    const segmentationScalarData = segmentationVolume.getScalarData();\r\n\r\n    // Replace values of current scalar data\r\n    panoramicState.dentascans.forEach((dentascan, i) => {\r\n      const [minPoint, maxPoint] = dentascan.interval;\r\n      const [minX, minY] = minPoint.map(Math.floor);\r\n      const [maxX, maxY] = maxPoint.map(Math.floor);\r\n      const deltaX = maxX - minX;\r\n      const deltaY = maxY - minY;\r\n      const steps = Math.abs(deltaX) + Math.abs(deltaY);\r\n      const vx = deltaX / steps;\r\n      const vy = deltaY / steps;\r\n      // TODO Consider Pixel crossing algorithm\r\n      // https://stackoverflow.com/questions/24679963/precise-subpixel-line-drawing-algorithm-rasterization-algorithm\r\n      // Use DDA algorithm to draw thick line crossing all the line's pixels\r\n      for (let k = 0; k < steps; k++) {\r\n        const xk = Math.floor(minX + k * vx);\r\n        const yk = Math.floor(minY + k * vy);\r\n        if (xk >= 0 && yk >= 0 && xk < volumeWidth && yk < volumeHeight) {\r\n          for (let layer = 0; layer < dentascan.height; layer++) {\r\n            // Layer order is reversed between volume and dentascans\r\n            const volumeIndex = (dentascan.height + dentascan.minLayer - layer) * volumeWidth * volumeHeight\r\n                      + yk * volumeWidth + xk;\r\n            // Axes are [width, height, nbDentascans] but data are stored in [nbDentascans, height, width] order\r\n            const dentascanK = Math.floor(k * dentascan.width / steps);\r\n            const dentascansIndex = i * dentascan.width * dentascan.height + layer * dentascan.width + dentascanK;\r\n            segmentationScalarData[volumeIndex] = scalarData[dentascansIndex];\r\n          }\r\n        }\r\n      }\r\n    });\r\n    for (let i = 0; i < segmentationScalarData.length; i++) {\r\n      segmentationScalarData[i] = segmentationScalarData[i];\r\n    }\r\n    // Trigger rendering\r\n    cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentationVolumeId);\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\r\n      <div className=\"bg-primary-dark pt-[6px] pb-[6px]\">\r\n        <p className=\"text-[#d8d8d8] text-[12px] font-[300] pl-[9px] pr-[9px] pb-[6px] flex\">{'Segmentation'}</p>\r\n        <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\r\n          <Button\r\n            size={ButtonEnums.size.small}\r\n            onClick={importSegmentationFromBinary}\r\n          >{'Import'}</Button>\r\n          <Button\r\n            size={ButtonEnums.size.small}\r\n            onClick={() => {\r\n              setIsProcessingLayer(true);\r\n              exportActiveSegmentation();\r\n            }}\r\n          >{'Export'}</Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"h-[6px] bg-black \"></div>\r\n      { /*<div className=\"bg-primary-dark pt-[6px] pb-[6px]\">\r\n        <p className=\"text-[#d8d8d8] text-[12px] font-[300] pl-[9px] pr-[9px] pb-[6px] flex\">{'Dentascan segmentation'}</p>\r\n        <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\r\n          <Button\r\n            size={ButtonEnums.size.small}\r\n            type={ButtonEnums.type.secondary}\r\n            onClick={convertDentascanSegmentation}\r\n          >{'Convert dentascan'}</Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"h-[6px] bg-black \"></div> */ }\r\n    </div>\r\n  );\r\n}\r\n\r\nSegmentationImportExport.propTypes = {\r\n  segmentations: PropTypes.array.isRequired\r\n}\r\n\r\nexport default SegmentationImportExport\r\n","import { createReportAsync } from '@ohif/extension-default';\r\nimport React, {useCallback, useEffect, useState} from 'react';\r\nimport PropTypes, {element} from 'prop-types';\r\nimport {Button, SegmentationGroupTable, SegmentationGroupTableExpanded, useViewportGrid, ListMenu} from '@ohif/ui';\r\nimport { SegmentationPanelMode } from '../types/segmentation';\r\nimport callInputDialog from './callInputDialog';\r\nimport callColorPickerDialog from './colorPickerDialog';\r\nimport BaseToolEdit from \"./segToolsEditSection/baseToolEdit\";\r\nimport SegmentsConfigurationImportExport from \"./segConfigurationIO\";\r\nimport SegmentationImportExport from \"./segmentationIO\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport { DisplaySet, RGB } from 'platform/core/src/types';\r\nimport { VolumeData } from 'extensions/cornerstone/src/types/CornerstoneCacheService';\r\nimport { Enums as csEnums } from '@cornerstonejs/core';\r\nimport { Enums as cstEnums } from '@cornerstonejs/tools';\r\n\r\nconst LABELMAP = cstEnums.SegmentationRepresentations.Labelmap;\r\nconst components = {\r\n  [SegmentationPanelMode.Expanded]: SegmentationGroupTableExpanded,\r\n  [SegmentationPanelMode.Dropdown]: SegmentationGroupTable,\r\n};\r\n\r\nconst seededRandom = (seed: number) => {\r\n  let value = seed % 2147483647;\r\n  return () => {\r\n      value = (value * 16807) % 2147483647;\r\n      return value / 2147483647;\r\n  };\r\n}\r\nconst random = seededRandom(42);\r\n\r\nexport default function PanelSegmentation({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n  configuration,\r\n}: withAppTypes) {\r\n  const [{ activeViewportId, viewports }] = useViewportGrid();\r\n  const {\r\n    segmentationService,\r\n    viewportGridService,\r\n    uiDialogService,\r\n    displaySetService,\r\n    cornerstoneViewportService,\r\n    toolbarService,\r\n    uiNotificationService,\r\n    panoramicService,\r\n    hangingProtocolService,\r\n  } = servicesManager.services;\r\n\r\n  const { t } = useTranslation('PanelSegmentation');\r\n\r\n  const [addSegmentationClassName, setAddSegmentationClassName] = useState('');\r\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\r\n    segmentationService.getConfiguration()\r\n  );\r\n\r\n  const isDentascanViewport = (viewportId): boolean => {\r\n    const { volume } = cornerstoneViewportService.getViewportInfo(viewportId).getViewportData().data[0] as VolumeData;\r\n    return volume?.metadata.SeriesInstanceUID.includes('dentascan') || false;\r\n  }\r\n\r\n  const viewportDentascanIsActive = isDentascanViewport(viewportGridService.getActiveViewportId());\r\n  const [visibleSegmentations, setVisibleSegmentations] = useState(\r\n    () => viewportDentascanIsActive ? segmentationService.getDentascanSegmentations()\r\n                                    : segmentationService.getAxialSegmentations()\r\n  );\r\n  const [hiddenSegmentations, setHiddenSegmentations] = useState(\r\n    () => viewportDentascanIsActive ? segmentationService.getAxialSegmentations()\r\n                                    : segmentationService.getDentascanSegmentations()\r\n  );\r\n  const [isMinimized, setIsMinimized] = useState({});\r\n\r\n  const onToggleMinimizeSegmentation = useCallback(id => {\r\n    setIsMinimized(prevState => ({ ...prevState, [id]: !prevState[id] }));\r\n  }, [setIsMinimized]);\r\n\r\n  // Only expand the last segmentation added to the list and collapse the rest\r\n  useEffect(() => {\r\n    const lastSegmentationId = visibleSegmentations[visibleSegmentations.length - 1]?.id;\r\n    if (lastSegmentationId) {\r\n      setIsMinimized(prevState => ({ ...prevState, [lastSegmentationId]: false, }));\r\n    }\r\n  }, [visibleSegmentations, setIsMinimized]);\r\n\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\r\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\r\n    const configChanged = segmentationService.EVENTS.SEGMENTATION_CONFIGURATION_CHANGED;\r\n    const subscriptions: any[] = [];\r\n\r\n    [added, updated, removed].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const viewportDentascanIsActive = isDentascanViewport(viewportGridService.getActiveViewportId());\r\n        setVisibleSegmentations(viewportDentascanIsActive ? segmentationService.getDentascanSegmentations()\r\n                                                          : segmentationService.getAxialSegmentations());\r\n        setHiddenSegmentations(viewportDentascanIsActive ? segmentationService.getAxialSegmentations()\r\n                                                         : segmentationService.getDentascanSegmentations());\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    [configChanged].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        setSegmentationConfiguration(segmentationService.getConfiguration());\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // temporary measure to not allow add segmentation when the selected viewport\r\n  // is stack viewport\r\n  useEffect(() => {\r\n    const handleActiveViewportChange = viewportId => {\r\n      const activeDisplaySetsUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\r\n        viewportId || viewportGridService.getActiveViewportId()\r\n      );\r\n\r\n      if (!activeDisplaySetsUIDs) {\r\n        return;\r\n      }\r\n\r\n      const isReconstructable =\r\n          activeDisplaySetsUIDs?.some(displaySetUID => {\r\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetUID);\r\n          return displaySet?.isReconstructable;\r\n        }) || false;\r\n\r\n      if (isReconstructable) {\r\n        setAddSegmentationClassName('');\r\n      } else {\r\n        setAddSegmentationClassName('ohif-disabled');\r\n      }\r\n    };\r\n\r\n    // Handle initial state\r\n    handleActiveViewportChange();\r\n\r\n    const changedGrid = viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED;\r\n    const ready = viewportGridService.EVENTS.VIEWPORTS_READY;\r\n\r\n    const subsGrid = [];\r\n    [ready, changedGrid].forEach(evt => {\r\n      const { unsubscribe } = viewportGridService.subscribe(evt, ({ viewportId }) => {\r\n        handleActiveViewportChange(viewportId);\r\n      });\r\n\r\n      subsGrid.push(unsubscribe);\r\n    });\r\n\r\n    const changedData = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\r\n\r\n    const subsData = [];\r\n    [changedData].forEach(evt => {\r\n      const { unsubscribe } = cornerstoneViewportService.subscribe(evt, () => {\r\n        handleActiveViewportChange();\r\n      });\r\n\r\n      subsData.push(unsubscribe);\r\n    });\r\n\r\n    // Clean up\r\n    return () => {\r\n      subsGrid.forEach(unsub => unsub());\r\n      subsData.forEach(unsub => unsub());\r\n    };\r\n  }, []);\r\n\r\n  const onSegmentationAdd = () => {\r\n    if (hangingProtocolService.getActiveProtocol().protocol.id !== 'panoramicViewport') {\r\n      commandsManager.runCommand('createEmptySegmentationForViewport', {\r\n        viewportId: viewportGridService.getActiveViewportId(),\r\n      });\r\n    } else {\r\n      const viewportIds = cornerstoneViewportService.getViewportIds();\r\n      if (isDentascanViewport(viewportGridService.getActiveViewportId())) {\r\n        commandsManager.runCommand('createEmptySegmentationForViewport', { viewportId: 'default' });\r\n        commandsManager.runCommand('createEmptySegmentationForViewport', { viewportId: viewportIds[2] });\r\n      } else {\r\n        commandsManager.runCommand('createEmptySegmentationForViewport', { viewportId: viewportIds[2] });\r\n        commandsManager.runCommand('createEmptySegmentationForViewport', { viewportId: 'default' });\r\n      }\r\n    }\r\n    toolbarService.createButtonSection('primary', [\r\n      'MeasurementTools',\r\n      'Zoom',\r\n      'Pan',\r\n      'TrackballRotate',\r\n      'WindowLevel',\r\n      'Capture',\r\n      'Layout',\r\n      'MPR',\r\n      'Panoramic',\r\n      'Crosshairs',\r\n      'MoreTools',\r\n      'SegmentationTools',\r\n    ]);\r\n  };\r\n\r\n  const onSegmentationClick = (segmentationId: string) => {\r\n    for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(segmentationId)) {\r\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n    };\r\n  };\r\n\r\n  const onSegmentationDelete = (segmentationId: string) => {\r\n    // Also delete hidden segmentation\r\n    // Delete hidden segmentation first so the new active segmentation is visible\r\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n    if (hiddenSegmentation) {\r\n      segmentationService.remove(hiddenSegmentation.id);\r\n    }\r\n\r\n    segmentationService.remove(segmentationId);\r\n  };\r\n\r\n  const onSegmentClick = (segmentationId, segmentIndex) => {\r\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\r\n\r\n    for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(segmentationId)) {\r\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\r\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\r\n    };\r\n\r\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n    if (hiddenSegmentation) {\r\n      segmentationService.setActiveSegment(hiddenSegmentation.id, segmentIndex);\r\n      // Also jump for hidden segment\r\n      for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(hiddenSegmentation.id)) {\r\n        segmentationService.jumpToSegmentCenter(hiddenSegmentation.id, segmentIndex, toolGroupId);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n    const segment = segmentation.segments[segmentIndex];\r\n    const { label } = segment;\r\n\r\n    callInputDialog(uiDialogService, label, (label, actionId) => {\r\n      if (label === '') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\r\n      // Also edit hidden segment\r\n      const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n      if (hiddenSegmentation) {\r\n        segmentationService.setSegmentLabel(hiddenSegmentation.id, segmentIndex, label);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onSegmentAdd = (segmentationId) => {\r\n    const segmentIndex = segmentationService.getSegmentation(segmentationId).segments.length;\r\n\r\n    const config = {\r\n      segmentIndex: segmentIndex,\r\n      properties: {\r\n        label: `Segment ${segmentIndex}`,\r\n        color: [Math.floor(random() * 256), Math.floor(random() * 256), Math.floor(random() * 256)] as RGB,\r\n        opacity: 255,\r\n        visibility: true,\r\n        isLocked: false,\r\n        active: true\r\n      }\r\n    }\r\n\r\n    segmentationService.addSegment(segmentationId, config);\r\n\r\n    // Also add on hidden segmentation\r\n    // Add also on dentascan segmentation\r\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n    if (hiddenSegmentation) {\r\n      segmentationService.addSegment(hiddenSegmentation.id, config);\r\n    }\r\n  }\r\n\r\n  const onSegmentationEdit = (segmentationId) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const { label } = segmentation;\r\n\r\n    callInputDialog(uiDialogService, label, (label, actionId) => {\r\n      if (label === '') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.addOrUpdateSegmentation(\r\n        {\r\n          id: segmentationId,\r\n          label,\r\n        },\r\n        false, // suppress event\r\n        true // notYetUpdatedAtSource\r\n      );\r\n\r\n      // Also update hidden segmentation\r\n      const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n      if (hiddenSegmentation) {\r\n        segmentationService.addOrUpdateSegmentation({ id: hiddenSegmentation.id, label }, false, true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n    const segment = segmentation.segments[segmentIndex];\r\n    const { color, opacity } = segment;\r\n\r\n    const rgbaColor = {\r\n      r: color[0],\r\n      g: color[1],\r\n      b: color[2],\r\n      a: opacity / 255.0,\r\n    };\r\n\r\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\r\n      if (actionId === 'cancel') {\r\n        return;\r\n      }\r\n\r\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\r\n        newRgbaColor.r,\r\n        newRgbaColor.g,\r\n        newRgbaColor.b,\r\n        newRgbaColor.a * 255.0,\r\n      ]);\r\n\r\n      // Also update hidden segment\r\n      const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n      if (hiddenSegmentation) {\r\n        segmentationService.setSegmentRGBAColor(hiddenSegmentation.id, segmentIndex, [\r\n          newRgbaColor.r,\r\n          newRgbaColor.g,\r\n          newRgbaColor.b,\r\n          newRgbaColor.a * 255.0,\r\n        ]);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\r\n    segmentationService.removeSegment(segmentationId, segmentIndex);\r\n    // Also delete hidden segment\r\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n    if (hiddenSegmentation) {\r\n      segmentationService.removeSegment(hiddenSegmentation.id, segmentIndex);\r\n    }\r\n  };\r\n\r\n  // segment hide\r\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const segmentInfo = segmentation.segments[segmentIndex];\r\n    const isVisible = !segmentInfo.isVisible;\r\n\r\n    // Todo: right now we apply the visibility to all tool groups\r\n    for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(segmentationId)) {\r\n      segmentationService.setSegmentVisibility(\r\n        segmentationId,\r\n        segmentIndex,\r\n        isVisible,\r\n        toolGroupId\r\n      );\r\n    };\r\n\r\n    // Also hide hidden segment\r\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n    if (hiddenSegmentation) {\r\n      for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(hiddenSegmentation.id)) {\r\n        segmentationService.setSegmentVisibility(\r\n          hiddenSegmentation.id,\r\n          segmentIndex,\r\n          isVisible,\r\n          toolGroupId\r\n        );\r\n      };\r\n    }\r\n  };\r\n\r\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\r\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\r\n    // Also lock hidden segment\r\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\r\n    if (hiddenSegmentation) {\r\n      segmentationService.toggleSegmentLocked(hiddenSegmentation.id, segmentIndex);\r\n    }\r\n  };\r\n\r\n  const onToggleSegmentationVisibility = segmentationId => {\r\n    segmentationService.toggleSegmentationVisibility(segmentationId);\r\n    const segmentation = segmentationService.getSegmentation(segmentationId);\r\n    const isVisible = segmentation.isVisible;\r\n    const segments = segmentation.segments;\r\n\r\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\r\n\r\n    toolGroupIds.forEach(toolGroupId => {\r\n      segments.forEach((segment, segmentIndex) => {\r\n        segmentationService.setSegmentVisibility(\r\n          segmentationId,\r\n          segmentIndex,\r\n          isVisible,\r\n          toolGroupId\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  const _setSegmentationConfiguration = useCallback(\r\n    (key, value) => {\r\n      segmentationService.setConfiguration({[key]: value});\r\n    }, [segmentationService]\r\n  );\r\n\r\n  const onSegmentationDownload = segmentationId => {\r\n    commandsManager.runCommand('downloadSegmentation', {\r\n      segmentationId,\r\n    });\r\n  };\r\n\r\n  const storeSegmentation = async segmentationId => {\r\n    const datasources = extensionManager.getActiveDataSource();\r\n\r\n    const displaySetInstanceUIDs = await createReportAsync({\r\n      servicesManager,\r\n      getReport: () =>\r\n        commandsManager.runCommand('storeSegmentation', {\r\n          segmentationId,\r\n          dataSource: datasources[0],\r\n        }),\r\n      reportType: 'Segmentation',\r\n    });\r\n\r\n    // Show the exported report in the active viewport as read only (similar to SR)\r\n    if (displaySetInstanceUIDs) {\r\n      // clear the segmentation that we exported, similar to the storeMeasurement\r\n      // where we remove the measurements and prompt again the user if they would like\r\n      // to re-read the measurements in a SR read only viewport\r\n      segmentationService.remove(segmentationId);\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: viewportGridService.getActiveViewportId(),\r\n        displaySetInstanceUIDs,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onSegmentationDownloadRTSS = segmentationId => {\r\n    commandsManager.runCommand('downloadRTSS', {\r\n      segmentationId,\r\n    });\r\n  };\r\n\r\n  const SegmentationGroupTableComponent =\r\n    components[configuration?.segmentationPanelMode] || SegmentationGroupTable;\r\n  const allowAddSegment = configuration?.addSegment;\r\n  const onSegmentationAddWrapper =\r\n    configuration?.onSegmentationAdd && typeof configuration?.onSegmentationAdd === 'function'\r\n      ? configuration?.onSegmentationAdd\r\n      : onSegmentationAdd;\r\n\r\n  const viewportTypeCheck = () => {\r\n    const viewportType = cornerstoneViewportService.getViewportInfo(activeViewportId).getViewportType();\r\n    let warning = '';\r\n    if (viewportType === csEnums.ViewportType.VOLUME_3D) {\r\n      warning = 'Can\\'t use segmentation panel in viewport 3D, select a 2D viewport'\r\n\r\n    } else if (viewportType === csEnums.ViewportType.STACK) {\r\n      // TODO Ensure only panoramic Viewport fits this criteria. May also check toolGroupId\r\n      warning = 'Can\\'t use segmentation panel in panoramic viewport, select an other viewport'\r\n    }\r\n\r\n    if (warning) {\r\n      uiNotificationService.show({\r\n        title: 'Segmentation Panel',\r\n        message: warning,\r\n        type: 'info',\r\n      });\r\n    }\r\n\r\n    return warning === '';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { viewportTypeCheck() && (\r\n        <div className=\"flex flex-col flex-auto min-h-0F mt-1\">\r\n          {/* Segmentation tool edition */}\r\n          <BaseToolEdit\r\n            segmentationService={segmentationService}\r\n            cornerstoneViewportService={cornerstoneViewportService}\r\n            toolbarService={toolbarService}\r\n          />\r\n          {/* show segmentation table */}\r\n          <SegmentationGroupTableComponent\r\n            title={t('Segmentations')}\r\n            segmentations={visibleSegmentations}\r\n            hiddenSegmentations={hiddenSegmentations}\r\n            segmentationConfig={{ initialConfig: segmentationConfiguration }}\r\n            disableEditing={configuration.disableEditing}\r\n            showAddSegment={allowAddSegment}\r\n            showDeleteSegment={true}\r\n            onSegmentationAdd={onSegmentationAddWrapper}\r\n            onSegmentationEdit={onSegmentationEdit}\r\n            onSegmentationClick={onSegmentationClick}\r\n            onSegmentationDelete={onSegmentationDelete}\r\n            onSegmentationDownload={onSegmentationDownload}\r\n            onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\r\n            storeSegmentation={storeSegmentation}\r\n            onSegmentClick={onSegmentClick}\r\n            onSegmentAdd={onSegmentAdd}\r\n            onSegmentDelete={onSegmentDelete}\r\n            onSegmentEdit={onSegmentEdit}\r\n            onToggleSegmentationVisibility={onToggleSegmentationVisibility}\r\n            onToggleSegmentVisibility={onToggleSegmentVisibility}\r\n            onToggleSegmentLock={onToggleSegmentLock}\r\n            onSegmentColorClick={onSegmentColorClick}\r\n            setFillAlpha={value => _setSegmentationConfiguration('fillAlpha', value)}\r\n            setFillAlphaInactive={value => _setSegmentationConfiguration('fillAlphaInactive', value)}\r\n            setOutlineWidthActive={value => _setSegmentationConfiguration('outlineWidthActive', value)}\r\n            setOutlineOpacityActive={value => _setSegmentationConfiguration('outlineOpacity', value)}\r\n            setRenderFill={value => _setSegmentationConfiguration('renderFill', value)}\r\n            setRenderInactiveSegmentations={value => _setSegmentationConfiguration('renderInactiveSegmentations', value)}\r\n            setRenderOutline={value => _setSegmentationConfiguration('renderOutline', value)}\r\n\r\n            addSegmentationClassName={addSegmentationClassName}\r\n          />\r\n          <div className=\"h-[6px] bg-black \"></div>\r\n          <SegmentsConfigurationImportExport\r\n            segmentations={visibleSegmentations}\r\n            segmentationService={segmentationService}\r\n          />\r\n          <SegmentationImportExport\r\n            segmentations={visibleSegmentations}\r\n            segmentationService={segmentationService}\r\n            cornerstoneViewportService={cornerstoneViewportService}\r\n            panoramicService={panoramicService}\r\n            uiNotificationService={uiNotificationService}\r\n            hangingProtocolService={hangingProtocolService}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPanelSegmentation.propTypes = {\r\n  commandsManager: PropTypes.shape({\r\n    runCommand: PropTypes.func.isRequired,\r\n  }),\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      segmentationService: PropTypes.shape({\r\n        getSegmentation: PropTypes.func.isRequired,\r\n        getSegmentations: PropTypes.func.isRequired,\r\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nimport { useAppConfig } from '@state';\r\nimport { Toolbox } from '@ohif/ui';\r\nimport PanelSegmentation from './panels/PanelSegmentation';\r\n\r\nconst getPanelModule = ({\r\n  commandsManager,\r\n  servicesManager,\r\n  extensionManager,\r\n  configuration,\r\n  title,\r\n}: withAppTypes) => {\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const wrappedPanelSegmentation = configuration => {\r\n    const [appConfig] = useAppConfig();\r\n\r\n    return (\r\n      <PanelSegmentation\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n        configuration={{\r\n          ...configuration,\r\n          disableEditing: appConfig.disableEditing,\r\n          ...customizationService.get('segmentation.panel'),\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedPanelSegmentationWithTools = configuration => {\r\n    const [appConfig] = useAppConfig();\r\n\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          buttonSectionId=\"segmentationToolbox\"\r\n          title=\"Segmentation Tools\"\r\n          configuration={{\r\n            ...configuration,\r\n          }}\r\n        />\r\n        <PanelSegmentation\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          configuration={{\r\n            ...configuration,\r\n            disableEditing: appConfig.disableEditing,\r\n            ...customizationService.get('segmentation.panel'),\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'panelSegmentation',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation',\r\n      component: wrappedPanelSegmentation,\r\n    },\r\n    {\r\n      name: 'panelSegmentationWithTools',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation',\r\n      component: wrappedPanelSegmentationWithTools,\r\n    },\r\n  ];\r\n};\r\n\r\nexport default getPanelModule;\r\n","import { Enums, cache } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Updates the viewports in preparation for rendering segmentations.\r\n * Evaluates each viewport to determine which need modifications,\r\n * then for those viewports, changes them to a volume type and ensures\r\n * they are ready for segmentation rendering.\r\n *\r\n * @param {Object} params - Parameters for the function.\r\n * @param params.viewportId - ID of the viewport to be updated.\r\n * @param params.loadFn - Function to load the segmentation data.\r\n * @param params.servicesManager - The services manager.\r\n * @param params.displaySet -  the display set.\r\n * @param params.initialSliceIndex - The initial slice index.\r\n *\r\n * @returns Returns true upon successful update of viewports for segmentation rendering.\r\n */\r\nasync function updateViewportsForSegmentationRendering({\r\n  viewportId,\r\n  loadFn,\r\n  servicesManager,\r\n  displaySet,\r\n  initialSliceIndex = null,\r\n}: {\r\n  viewportId: string;\r\n  loadFn: () => Promise<string>;\r\n  servicesManager: AppTypes.ServicesManager;\r\n  displaySet?: any;\r\n  initialSliceIndex?: number;\r\n}) {\r\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\r\n    servicesManager.services;\r\n\r\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n  const targetViewportId = viewport.viewportOptions.viewportId;\r\n\r\n  const referencedDisplaySetInstanceUID =\r\n    displaySet?.referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\r\n\r\n  const updatedViewports = getUpdatedViewportsForSegmentation({\r\n    viewportId,\r\n    servicesManager,\r\n    displaySet,\r\n  });\r\n\r\n  // create Segmentation callback which needs to be waited until\r\n  // the volume is created (if coming from stack)\r\n  const createSegmentationForVolume = async () => {\r\n    const segmentationId = await loadFn();\r\n    segmentationService.hydrateSegmentation(segmentationId);\r\n  };\r\n\r\n  // the reference volume that is used to draw the segmentation. so check if the\r\n  // volume exists in the cache (the target Viewport is already a volume viewport)\r\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\r\n    volumeId.includes(referencedDisplaySetInstanceUID)\r\n  );\r\n\r\n  updatedViewports.forEach(async viewport => {\r\n    viewport.viewportOptions = {\r\n      ...viewport.viewportOptions,\r\n      viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\r\n      needsRerendering: true,\r\n    };\r\n    const viewportId = viewport.viewportId;\r\n\r\n    // maintain the prehydration slice on the target viewport only\r\n    if (viewportId === targetViewportId) {\r\n      viewport.viewportOptions.initialImageOptions = {\r\n        index: initialSliceIndex,\r\n        useOnce: true,\r\n      };\r\n    }\r\n\r\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const prevCamera = csViewport.getCamera();\r\n\r\n    // only run the createSegmentationForVolume for the targetViewportId\r\n    // since the rest will get handled by cornerstoneViewportService\r\n    if ((volumeExists || displaySet.Modality === 'RTSTRUCT') && viewportId === targetViewportId) {\r\n      await createSegmentationForVolume();\r\n      return;\r\n    }\r\n\r\n    const createNewSegmentationWhenVolumeMounts = async evt => {\r\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\r\n        ac.uid.includes(referencedDisplaySetInstanceUID)\r\n      );\r\n\r\n      // Note: make sure to re-grab the viewport since it might have changed\r\n      // during the time it took for the volume to be mounted, for instance\r\n      // the stack viewport has been changed to a volume viewport\r\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      volumeViewport.setCamera(prevCamera);\r\n\r\n      volumeViewport.element.removeEventListener(\r\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n        createNewSegmentationWhenVolumeMounts\r\n      );\r\n\r\n      if (!isTheActiveViewportVolumeMounted) {\r\n        // it means it is one of those other updated viewports so just update the camera\r\n        return;\r\n      }\r\n\r\n      if (viewportId === targetViewportId) {\r\n        await createSegmentationForVolume();\r\n      }\r\n    };\r\n\r\n    csViewport.element.addEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      createNewSegmentationWhenVolumeMounts\r\n    );\r\n  });\r\n\r\n  // Set the displaySets for the viewports that require to be updated\r\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n\r\n  return true;\r\n}\r\n\r\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\r\n  const { viewports, activeViewportId } = viewportGridService.getState();\r\n  const targetViewportId = viewportId || activeViewportId;\r\n\r\n  const viewport = viewports.get(targetViewportId);\r\n\r\n  return viewport;\r\n};\r\n\r\n/**\r\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\r\n * This function evaluates viewports based on their compatibility with the provided segmentation's\r\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\r\n *\r\n * @param {Object} params - Parameters for the function.\r\n * @param params.viewportId - the ID of the viewport to be updated.\r\n * @param params.servicesManager - The services manager\r\n * @param params.displaySet -  the display set.\r\n *\r\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\r\n */\r\nfunction getUpdatedViewportsForSegmentation({\r\n  viewportId,\r\n  servicesManager,\r\n  displaySet,\r\n}: withAppTypes) {\r\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\r\n    servicesManager.services;\r\n\r\n  const { viewports, isHangingProtocolLayout } = viewportGridService.getState();\r\n\r\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n  const targetViewportId = viewport.viewportOptions.viewportId;\r\n\r\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\r\n\r\n  const referenceDisplaySetInstanceUID =\r\n    displaySet?.referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\r\n\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\r\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\r\n\r\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n    targetViewportId,\r\n    referenceDisplaySetInstanceUID,\r\n    isHangingProtocolLayout\r\n  );\r\n\r\n  viewports.forEach((viewport, viewportId) => {\r\n    if (\r\n      targetViewportId === viewportId ||\r\n      updatedViewports.find(v => v.viewportId === viewportId)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\r\n      viewport.displaySetInstanceUIDs,\r\n      segmentationFrameOfReferenceUID\r\n    );\r\n\r\n    if (shouldDisplaySeg) {\r\n      updatedViewports.push({\r\n        viewportId,\r\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\r\n        viewportOptions: {\r\n          viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\r\n          needsRerendering: true,\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\r\n}\r\n\r\nexport {\r\n  updateViewportsForSegmentationRendering,\r\n  getUpdatedViewportsForSegmentation,\r\n  getTargetViewport,\r\n};\r\n","import dcmjs from 'dcmjs';\r\nimport { createReportDialogPrompt } from '@ohif/extension-default';\r\nimport { Types } from '@ohif/core';\r\nimport { cache, metaData } from '@cornerstonejs/core';\r\nimport {\r\n  segmentation as cornerstoneToolsSegmentation,\r\n  Enums as cornerstoneToolsEnums,\r\n  utilities,\r\n} from '@cornerstonejs/tools';\r\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\r\nimport { classes, DicomMetadataStore } from '@ohif/core';\r\n\r\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\r\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\r\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\r\n\r\nimport {\r\n  updateViewportsForSegmentationRendering,\r\n  getUpdatedViewportsForSegmentation,\r\n  getTargetViewport,\r\n} from './utils/hydrationUtils';\r\nconst { segmentation: segmentationUtils } = utilities;\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\r\n  },\r\n} = adaptersSEG;\r\n\r\nconst {\r\n  Cornerstone3D: {\r\n    RTSS: { generateRTSSFromSegmentations },\r\n  },\r\n} = adaptersRT;\r\n\r\nconst { downloadDICOMData } = helpers;\r\n\r\nconst commandsModule = ({\r\n  servicesManager,\r\n  extensionManager,\r\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\r\n  const {\r\n    uiNotificationService,\r\n    segmentationService,\r\n    uiDialogService,\r\n    displaySetService,\r\n    viewportGridService,\r\n    toolGroupService,\r\n    cornerstoneViewportService,\r\n  } = servicesManager.services;\r\n\r\n  const actions = {\r\n    /**\r\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\r\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\r\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.viewportId - the ID of the viewport to be updated.\r\n     * @param params.servicesManager - The services manager\r\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\r\n     *\r\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\r\n     */\r\n    getUpdatedViewportsForSegmentation,\r\n    /**\r\n     * Creates an empty segmentation for a specified viewport.\r\n     * It first checks if the display set associated with the viewport is reconstructable.\r\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\r\n     * for the display set after handling the necessary steps for making the viewport\r\n     * a volume viewport first\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.viewportId - the target viewport ID.\r\n     *\r\n     */\r\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\r\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n      // Todo: add support for multiple display sets\r\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      if (!displaySet.isReconstructable) {\r\n        uiNotificationService.show({\r\n          title: 'Segmentation',\r\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n\r\n      updateViewportsForSegmentationRendering({\r\n        viewportId,\r\n        servicesManager,\r\n        displaySet,\r\n        loadFn: async () => {\r\n          const currentSegmentations = segmentationService.getSegmentations();\r\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\r\n            displaySetInstanceUID,\r\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\r\n          );\r\n\r\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\r\n\r\n          await segmentationService.addSegmentationRepresentationToToolGroup(\r\n            toolGroupId,\r\n            segmentationId\r\n          );\r\n\r\n          // Add only one segment for now\r\n          segmentationService.addSegment(segmentationId, {\r\n            toolGroupId,\r\n            segmentIndex: 1,\r\n            properties: {\r\n              label: 'Segment 1',\r\n              color: [255, 0, 0],\r\n              opacity: 255,\r\n              visibility: true,\r\n              isLocked: false,\r\n              active: true\r\n            },\r\n          });\r\n\r\n          return segmentationId;\r\n        },\r\n      });\r\n    },\r\n    /**\r\n     * Loads segmentations for a specified viewport.\r\n     * The function prepares the viewport for rendering, then loads the segmentation details.\r\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentations - Array of segmentations to be loaded.\r\n     * @param params.viewportId - the target viewport ID.\r\n     *\r\n     */\r\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\r\n      updateViewportsForSegmentationRendering({\r\n        viewportId,\r\n        servicesManager,\r\n        loadFn: async () => {\r\n          // Todo: handle adding more than one segmentation\r\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\r\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\r\n\r\n          const segmentation = segmentations[0];\r\n          const segmentationId = segmentation.id;\r\n          const label = segmentation.label;\r\n          const segments = segmentation.segments;\r\n\r\n          delete segmentation.segments;\r\n\r\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\r\n            segmentationId,\r\n            label,\r\n          });\r\n\r\n          if (segmentation.scalarData) {\r\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\r\n            labelmapVolume.scalarData.set(segmentation.scalarData);\r\n          }\r\n\r\n          segmentationService.addOrUpdateSegmentation(segmentation);\r\n\r\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\r\n          await segmentationService.addSegmentationRepresentationToToolGroup(\r\n            toolGroupId,\r\n            segmentationId\r\n          );\r\n\r\n          segments.forEach(segment => {\r\n            if (segment === null) {\r\n              return;\r\n            }\r\n            segmentationService.addSegment(segmentationId, {\r\n              segmentIndex: segment.segmentIndex,\r\n              toolGroupId,\r\n              properties: {\r\n                color: segment.color,\r\n                label: segment.label,\r\n                opacity: segment.opacity,\r\n                isLocked: segment.isLocked,\r\n                visibility: segment.isVisible,\r\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\r\n              },\r\n            });\r\n          });\r\n\r\n          if (segmentation.centroidsIJK) {\r\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\r\n          }\r\n\r\n          return segmentationId;\r\n        },\r\n      });\r\n    },\r\n    /**\r\n     * Loads segmentation display sets for a specified viewport.\r\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\r\n     * it chooses the appropriate service function to create\r\n     * the segmentation for the display set.\r\n     * The function then prepares the viewport for rendering segmentation.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\r\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\r\n     *\r\n     */\r\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\r\n      // Todo: handle adding more than one segmentation\r\n      const displaySet = displaySets[0];\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n        displaySet.referencedDisplaySetInstanceUID\r\n      );\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      const initialSliceIndex = viewport.getSliceIndex();\r\n\r\n      updateViewportsForSegmentationRendering({\r\n        viewportId,\r\n        servicesManager,\r\n        displaySet,\r\n        loadFn: async () => {\r\n          const segDisplaySet = displaySet;\r\n          const suppressEvents = false;\r\n          const serviceFunction =\r\n            segDisplaySet.Modality === 'SEG'\r\n              ? 'createSegmentationForSEGDisplaySet'\r\n              : 'createSegmentationForRTDisplaySet';\r\n\r\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\r\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\r\n          const segmentation = segmentationService.getSegmentation(segmentationId);\r\n          segmentation.description = `S${referencedDisplaySet.SeriesNumber}: ${referencedDisplaySet.SeriesDescription}`;\r\n          return segmentationId;\r\n        },\r\n        initialSliceIndex,\r\n      });\r\n    },\r\n    /**\r\n     * Generates a segmentation from a given segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * its referenced volume, extracts label maps from the\r\n     * segmentation volume, and produces segmentation data\r\n     * alongside associated metadata.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be generated.\r\n     * @param params.options - Optional configuration for the generation process.\r\n     *\r\n     * @returns Returns the generated segmentation data.\r\n     */\r\n    generateSegmentation: ({ segmentationId, options = {} }) => {\r\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\r\n\r\n      const segmentationVolume = cache.getVolume(segmentationId);\r\n      const referencedVolume = cache.getVolume(referencedVolumeId);\r\n      const referencedImages = referencedVolume.getCornerstoneImages();\r\n\r\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\r\n\r\n      // Generate fake metadata as an example\r\n      labelmapObj.metadata = [];\r\n\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      segmentationInOHIF.segments.forEach(segment => {\r\n        // segmentation service already has a color for each segment\r\n        if (!segment) {\r\n          return;\r\n        }\r\n        const segmentIndex = segment.segmentIndex;\r\n        const { label, color } = segment;\r\n\r\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\r\n          color.slice(0, 3).map(value => value / 255)\r\n        ).map(value => Math.round(value));\r\n\r\n        const segmentMetadata = {\r\n          SegmentNumber: segmentIndex.toString(),\r\n          SegmentLabel: label,\r\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\r\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\r\n          RecommendedDisplayCIELabValue,\r\n          SegmentedPropertyCategoryCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n          SegmentedPropertyTypeCodeSequence: {\r\n            CodeValue: 'T-D0050',\r\n            CodingSchemeDesignator: 'SRT',\r\n            CodeMeaning: 'Tissue',\r\n          },\r\n        };\r\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\r\n      });\r\n\r\n      const generatedSegmentation = generateSegmentation(\r\n        referencedImages,\r\n        labelmapObj,\r\n        metaData,\r\n        options\r\n      );\r\n\r\n      return generatedSegmentation;\r\n    },\r\n    /**\r\n     * Downloads a segmentation based on the provided segmentation ID.\r\n     * This function retrieves the associated segmentation and\r\n     * uses it to generate the corresponding DICOM dataset, which\r\n     * is then downloaded with an appropriate filename.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\r\n     *\r\n     */\r\n    downloadSegmentation: ({ segmentationId }) => {\r\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\r\n      const generatedSegmentation = actions.generateSegmentation({\r\n        segmentationId,\r\n      });\r\n\r\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\r\n    },\r\n    /**\r\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\r\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\r\n     * and in its absence, defaults to 'Research Derived Series'.\r\n     *\r\n     * @param {Object} params - Parameters for the function.\r\n     * @param params.segmentationId - ID of the segmentation to be stored.\r\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\r\n     *\r\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\r\n     * otherwise throws an error.\r\n     */\r\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\r\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\r\n        extensionManager,\r\n      });\r\n\r\n      if (promptResult.action !== 1 && promptResult.value) {\r\n        return;\r\n      }\r\n\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      if (!segmentation) {\r\n        throw new Error('No segmentation found');\r\n      }\r\n\r\n      const { label } = segmentation;\r\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\r\n\r\n      const generatedData = actions.generateSegmentation({\r\n        segmentationId,\r\n        options: {\r\n          SeriesDescription,\r\n        },\r\n      });\r\n\r\n      if (!generatedData || !generatedData.dataset) {\r\n        throw new Error('Error during segmentation generation');\r\n      }\r\n\r\n      const { dataset: naturalizedReport } = generatedData;\r\n\r\n      await dataSource.store.dicom(naturalizedReport);\r\n\r\n      // The \"Mode\" route listens for DicomMetadataStore changes\r\n      // When a new instance is added, it listens and\r\n      // automatically calls makeDisplaySets\r\n\r\n      // add the information for where we stored it to the instance as well\r\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\r\n\r\n      DicomMetadataStore.addInstances([naturalizedReport], true);\r\n\r\n      return naturalizedReport;\r\n    },\r\n    /**\r\n     * Converts segmentations into RTSS for download.\r\n     * This sample function retrieves all segentations and passes to\r\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\r\n     * converts dataset to downloadable blob.\r\n     *\r\n     */\r\n    downloadRTSS: ({ segmentationId }) => {\r\n      const segmentations = segmentationService.getSegmentation(segmentationId);\r\n      const vtkUtils = {\r\n        vtkImageMarchingSquares,\r\n        vtkDataArray,\r\n        vtkImageData,\r\n      };\r\n\r\n      const RTSS = generateRTSSFromSegmentations(\r\n        segmentations,\r\n        classes.MetadataProvider,\r\n        DicomMetadataStore,\r\n        cache,\r\n        cornerstoneToolsEnums,\r\n        vtkUtils\r\n      );\r\n\r\n      try {\r\n        const reportBlob = datasetToBlob(RTSS);\r\n\r\n        //Create a URL for the binary.\r\n        const objectUrl = URL.createObjectURL(reportBlob);\r\n        window.location.assign(objectUrl);\r\n      } catch (e) {\r\n        console.warn(e);\r\n      }\r\n    },\r\n    setBrushSize: ({ value, toolNames }) => {\r\n      const brushSize = Number(value);\r\n\r\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\r\n        if (toolNames?.length === 0) {\r\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\r\n        } else {\r\n          toolNames?.forEach(toolName => {\r\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\r\n          });\r\n        }\r\n      });\r\n    },\r\n    setThresholdRange: ({\r\n      value,\r\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\r\n    }) => {\r\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\r\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n        toolNames?.forEach(toolName => {\r\n          toolGroup.setToolConfiguration(toolName, {\r\n            strategySpecificConfiguration: {\r\n              THRESHOLD: {\r\n                threshold: value,\r\n              },\r\n            },\r\n          });\r\n        });\r\n      });\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    getUpdatedViewportsForSegmentation: {\r\n      commandFn: actions.getUpdatedViewportsForSegmentation,\r\n    },\r\n    loadSegmentationDisplaySetsForViewport: {\r\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\r\n    },\r\n    loadSegmentationsForViewport: {\r\n      commandFn: actions.loadSegmentationsForViewport,\r\n    },\r\n    createEmptySegmentationForViewport: {\r\n      commandFn: actions.createEmptySegmentationForViewport,\r\n    },\r\n    generateSegmentation: {\r\n      commandFn: actions.generateSegmentation,\r\n    },\r\n    downloadSegmentation: {\r\n      commandFn: actions.downloadSegmentation,\r\n    },\r\n    storeSegmentation: {\r\n      commandFn: actions.storeSegmentation,\r\n    },\r\n    downloadRTSS: {\r\n      commandFn: actions.downloadRTSS,\r\n    },\r\n    setBrushSize: {\r\n      commandFn: actions.setBrushSize,\r\n    },\r\n    setThresholdRange: {\r\n      commandFn: actions.setThresholdRange,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'SEGMENTATION',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","import { id } from './id';\r\nimport React from 'react';\r\n\r\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getCommandsModule from './commandsModule';\r\nimport { getToolbarModule } from './getToolbarModule';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\r\n});\r\n\r\nconst OHIFCornerstoneSEGViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\n/**\r\n * You can remove any of the following modules if you don't need them.\r\n */\r\nconst extension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   * You ID can be anything you want, but it should be unique.\r\n   */\r\n  id,\r\n  /**\r\n   * PanelModule should provide a list of panels that will be available in OHIF\r\n   * for Modes to consume and render. Each panel is defined by a {name,\r\n   * iconName, iconLabel, label, component} object. Example of a panel module\r\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\r\n   */\r\n  getPanelModule,\r\n  getCommandsModule,\r\n  getToolbarModule,\r\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\r\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\r\n      return (\r\n        <OHIFCornerstoneSEGViewport\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          commandsManager={commandsManager}\r\n          {...props}\r\n        />\r\n      );\r\n    };\r\n\r\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\r\n  },\r\n  /**\r\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\r\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\r\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\r\n   * Examples include the default sop class handler provided by the default extension\r\n   */\r\n  getSopClassHandlerModule,\r\n  getHangingProtocolModule,\r\n};\r\n\r\nexport default extension;\r\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\r\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\r\n  return [\r\n    {\r\n      name: 'evaluate.cornerstone.segmentation',\r\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\r\n        // Todo: we need to pass in the button section Id since we are kind of\r\n        // forcing the button to have black background since initially\r\n        // it is designed for the toolbox not the toolbar on top\r\n        // we should then branch the buttonSectionId to have different styles\r\n        const segmentations = segmentationService.getSegmentations();\r\n        if (!segmentations?.length) {\r\n          return {\r\n            disabled: true,\r\n            className: '!text-common-bright !bg-black opacity-50',\r\n            disabledText: disabledText ?? 'No segmentations available',\r\n          };\r\n        }\r\n\r\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\r\n\r\n        if (!toolGroup) {\r\n          return {\r\n            disabled: true,\r\n            className: '!text-common-bright ohif-disabled',\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        const toolName = toolbarService.getToolNameForButton(button);\r\n\r\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\r\n          return {\r\n            disabled: true,\r\n            className: '!text-common-bright ohif-disabled',\r\n            disabledText: disabledText ?? 'Not available on the current viewport',\r\n          };\r\n        }\r\n\r\n        const isPrimaryActive = toolNames\r\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\r\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\r\n\r\n        return {\r\n          disabled: false,\r\n          className: isPrimaryActive\r\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\r\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\r\n          // Todo: isActive right now is used for nested buttons where the primary\r\n          // button needs to be fully rounded (vs partial rounded) when active\r\n          // otherwise it does not have any other use\r\n          isActive: isPrimaryActive,\r\n        };\r\n      },\r\n    },\r\n  ];\r\n}\r\n","import moment from 'moment';\r\nimport { metaData } from '@cornerstonejs/core';\r\n\r\n/**\r\n * Checks if value is valid.\r\n *\r\n * @param {number} value\r\n * @returns {boolean} is valid.\r\n */\r\nexport function isValidNumber(value) {\r\n  return typeof value === 'number' && !isNaN(value);\r\n}\r\n\r\n/**\r\n * Formats number precision.\r\n *\r\n * @param {number} number\r\n * @param {number} precision\r\n * @returns {number} formatted number.\r\n */\r\nexport function formatNumberPrecision(number, precision = 0) {\r\n  if (number !== null) {\r\n    return parseFloat(number).toFixed(precision);\r\n  }\r\n}\r\n\r\n/**\r\n * Formats DICOM date.\r\n *\r\n * @param {string} date\r\n * @param {string} strFormat\r\n * @returns {string} formatted date.\r\n */\r\nexport function formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\r\n  return moment(date, 'YYYYMMDD').format(strFormat);\r\n}\r\n\r\n/**\r\n *    DICOM Time is stored as HHmmss.SSS, where:\r\n *      HH 24 hour time:\r\n *        m mm        0..59   Minutes\r\n *        s ss        0..59   Seconds\r\n *        S SS SSS    0..999  Fractional seconds\r\n *\r\n *        Goal: '24:12:12'\r\n *\r\n * @param {*} time\r\n * @param {string} strFormat\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatDICOMTime(time, strFormat = 'HH:mm:ss') {\r\n  return moment(time, 'HH:mm:ss').format(strFormat);\r\n}\r\n\r\n/**\r\n * Formats a patient name for display purposes\r\n *\r\n * @param {string} name\r\n * @returns {string} formatted name.\r\n */\r\nexport function formatPN(name) {\r\n  if (!name) {\r\n    return '';\r\n  }\r\n  if (typeof name === 'object') {\r\n    name = name.Alphabetic;\r\n    if (!name) {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  const cleaned = name\r\n    .split('^')\r\n    .filter(s => !!s)\r\n    .join(', ')\r\n    .trim();\r\n  return cleaned === ',' || cleaned === '' ? '' : cleaned;\r\n}\r\n\r\n/**\r\n * Gets compression type\r\n *\r\n * @param {number} imageId\r\n * @returns {string} compression type.\r\n */\r\nexport function getCompression(imageId) {\r\n  const generalImageModule = metaData.get('generalImageModule', imageId) || {};\r\n  const { lossyImageCompression, lossyImageCompressionRatio, lossyImageCompressionMethod } =\r\n    generalImageModule;\r\n\r\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\r\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\r\n    const compressionRatio = formatNumberPrecision(lossyImageCompressionRatio, 2);\r\n    return compressionMethod + compressionRatio + ' : 1';\r\n  }\r\n\r\n  return 'Lossless / Uncompressed';\r\n}\r\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","SegmentationPanelMode","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","DualInputRange","value1","value2","minValue","maxValue","step","unit","containerClassName","inputClassName","labelVariant","showLabel","labelPosition","trackColor","rangeValue1","setRangeValue1","useState","rangeValue2","setRangeValue2","useEffect","handleChange1","e","Number","handleChange2","rangeValueForStr1","toFixed","rangeValueForStr2","style","flexDirection","Typography","variant","component","classNames","min","max","background","Button","size","small","onClick","csToolsEnums","csTools","MouseBindings","listItemRenderer","DefaultListItemRenderer","activeMode","eraseReplaceFocus","isActive","Brush_Mode","REPLACE","Brush_Tool","EVENT_LISTENERS","BrushToolEdit","cornerstoneViewportService","t","useTranslation","isMinimized","setIsMinimized","isEraseReplaceOnlyMinimized","setIsEraseReplaceOnlyMinimized","setEraseReplaceFocus","pipetteMode","setPipetteMode","active","minimum","activeViewportId","viewportGridService","useViewportGrid","setActiveMode","FILL","activeTool","setActiveTool","CIRCLE","brushSize","setBrushSize","maxBrushSize","setMaxBrushSize","spacing","setSpacing","circleThresholdValue","setCircleThresholdValue","circleTargetSegmentIndex","setCircleTargetSegmentIndex","setSegments","setSegmentsForToolGroup","brushInstance","segmentIndex","getSegmentations","filter","s","args","handleSegmentClick","strategySpecificConfiguration","configuration","targetSegmentIndex","setConfiguration","eraseFocusIndex","viewport","getCornerstoneViewport","toolGroup","renderingEngineId","getToolInstance","volume","getViewportInfo","viewportData","floor","dimensions","THRESHOLD","threshold","setToolActive","bindings","mouseButton","Primary","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","getBrushStrategy","tool","mode","activeStrategy","currentElement","element","addEvent","removeEventListener","removeEvent","MOUSE_DRAG","getToolOptions","ToolModes","Active","setToolPassive","setThresholdCallback","worldPoints","currentPoints","world","imageData","scalarData","getImageData","index","worldToIndex","csUtils","yMultiple","zMultiple","Icon","display","justifyContent","SPHERE","ERASE","InputRange","stopPropagation","ListMenu","items","renderer","vmin","vmax","eraseFocus","Circle_Strategies","CircleScissorsToolEdit","setActiveStrategy","FILL_INSIDE","isEraseOnlyMinimized","setIsEraseOnlyMinimized","setEraseFocus","circleInstance","ERASE_INSIDE","PaintFillToolEdit","RectangleROIStartEndThresholdToolEdit","thresholdValue","setThresholdValue","slicesToPropagate","setSlicesToPropagate","rectangleROIInstance","numSlicesToPropagate","log","computeThreshold","imageVolumes","getActors","va","actorUID","referenceId","uid","iv","selectedAnnotationUIDs","annotationUID","ctVolume","segmentationVolume","segmentations","lower","upper","numSlicesToProject","overwrite","overlapType","activeSegmentIndex","deleteRegion","render","RectangleROIThresholdToolEdit","Rectangle_Strategies","RectangleScissorsToolEdit","rectangleInstance","Sphere_Strategies","SphereScissorsToolEdit","sphereInstance","CACHE_SEGMENTATION_VOLUMES","Array","constructor","maxLength","super","this","elements","r","excess","splice","UndoToolEdit","currentCacheIndex","setCurrentCacheIndex","MOUSE_DOWN","old_segmentation","old_seg_volume","Uint8ClampedArray","getLabelmapVolume","getScalarData","shift","apply_replace","cacheIndex","previous_volume","replace_event","CustomEvent","oldScalarData","window","dispatchEvent","undo","redo","state","SEG_TOOL_NAMES","BaseToolEdit","toolbarService","activeSegTool","setActiveSegTool","searchActiveSegTool","toolStates","toolGroups","tg","toolOptions","entries","find","toolname","includes","TOOL_BAR_MODIFIED","renderActiveTool","SegmentsConfigurationImportExport","importConfiguration","input","document","createElement","accept","onchange","_","json_file","from","files","reader","FileReader","onload","result","removeSegment","jsonContent","JSON","parse","segment","addSegment","get","override","readAsText","click","exportConfiguration","json","stringify","json_blob","Blob","saveAs","propTypes","PropTypes","isRequired","SegmentationImportExport","panoramicService","hangingProtocolService","isProcessingLayer","setIsProcessingLayer","processingLayerPercent","setProcessingLayerPercent","values","vp","assert","setActiveViewportId","viewportId","actorEntries","options","segId","createSegmentationForDisplaySet","displaySetInstanceUIDs","segmentation","LABELMAP","Labelmap","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","segmentationId","volumeId","segmentationScalarData","file","newScalarData","Uint8Array","cstSegmentation","readAsArrayBuffer","getActiveSegmentation","dentascanSegmentations","getDentascanSegmentations","getHiddenSegmentation","segmentsInfo","segmentationLabel","layerSize","nbLayers","zip","JSZip","layerI","pixelData","fill","canvas","ctx","getContext","height","imgData","ImageData","colorSpace","putImageData","pngBlob","toBlob","blob","binaryBlob","jsonBlob","activeStudyUID","getState","study","DicomMetadataStore","getStudy","StudyDate","PatientName","series","patientNameFormatted","formatPN","generateAsync","exportActiveSegmentation","components","cstEnums","Expanded","SegmentationGroupTableExpanded","Dropdown","SegmentationGroupTable","random","seed","seededRandom","PanelSegmentation","commandsManager","addSegmentationClassName","setAddSegmentationClassName","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","isDentascanViewport","getViewportData","metadata","viewportDentascanIsActive","getActiveViewportId","visibleSegmentations","setVisibleSegmentations","getAxialSegmentations","hiddenSegmentations","setHiddenSegmentations","useCallback","prevState","lastSegmentationId","configChanged","SEGMENTATION_CONFIGURATION_CHANGED","handleActiveViewportChange","activeDisplaySetsUIDs","getDisplaySetsUIDsForViewport","some","displaySetUID","getDisplaySetByUID","changedGrid","ACTIVE_VIEWPORT_ID_CHANGED","ready","VIEWPORTS_READY","subsGrid","changedData","VIEWPORT_DATA_CHANGED","subsData","_setSegmentationConfiguration","SegmentationGroupTableComponent","segmentationPanelMode","allowAddSegment","onSegmentationAddWrapper","onSegmentationAdd","getActiveProtocol","runCommand","viewportIds","getViewportIds","createButtonSection","viewportTypeCheck","getViewportType","warning","csEnums","VOLUME_3D","STACK","segmentationConfig","initialConfig","disableEditing","showAddSegment","showDeleteSegment","onSegmentationEdit","callInputDialog","actionId","addOrUpdateSegmentation","hiddenSegmentation","onSegmentationClick","getToolGroupIdsWithSegmentation","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","onSegmentClick","setActiveSegment","jumpToSegmentCenter","onSegmentAdd","config","opacity","visibility","isLocked","onSegmentDelete","onSegmentEdit","setSegmentLabel","onToggleSegmentationVisibility","toggleSegmentationVisibility","isVisible","setSegmentVisibility","onToggleSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onSegmentColorClick","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","setFillAlpha","setFillAlphaInactive","setOutlineWidthActive","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setRenderOutline","getPanelModule","customizationService","iconName","iconLabel","appConfig","useAppConfig","Toolbox","buttonSectionId","updateViewportsForSegmentationRendering","loadFn","initialSliceIndex","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","_volumeCache","needsRerendering","initialImageOptions","useOnce","csViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","ac","volumeViewport","setCamera","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","isHangingProtocolLayout","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","v","shouldRenderSegmentation","segmentationUtils","utilities","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","toolGroupService","createEmptySegmentationForViewport","currentSegmentations","loadSegmentationsForViewport","set","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","getSliceIndex","serviceFunction","boundFn","bind","description","cornerstoneToolsSegmentation","representationData","getCornerstoneImages","labelmapObj","rgb2DICOMLAB","slice","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","segmentationInOHIF","generatedSegmentation","dataset","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","location","warn","toolNames","getToolGroupIds","setBrushSizeForToolGroup","toolName","setThresholdRange","getToolGroup","setToolConfiguration","definitions","commandFn","defaultContext","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","evaluate","button","disabledText","disabled","getToolGroupForViewport","getToolNameForButton","hasTool","isPrimaryActive","getActivePrimaryMouseButtonTool","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule","formatNumberPrecision","number","precision","parseFloat","formatDICOMDate","date","strFormat","moment","format","formatDICOMTime","time","Alphabetic","cleaned","split","join","trim"],"sourceRoot":""}