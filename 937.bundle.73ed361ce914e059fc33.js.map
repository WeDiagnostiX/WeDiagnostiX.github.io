{"version":3,"file":"937.bundle.73ed361ce914e059fc33.js","mappings":"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","sources":["webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/ClassHierarchy.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/DataArray.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/Math/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/Core/Math/index.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/macros2.js","webpack:///../../../node_modules/@kitware/vtk.js/vtk.js","webpack:///../../../node_modules/fast-deep-equal/index.js","webpack:///../../../node_modules/gl-matrix/esm/common.js","webpack:///../../../node_modules/gl-matrix/esm/vec2.js","webpack:///../../../node_modules/gl-matrix/esm/mat3.js","webpack:///../../../node_modules/gl-matrix/esm/quat.js","webpack:///../../../node_modules/gl-matrix/esm/vec4.js","webpack:///../../../node_modules/seedrandom/index.js","webpack:///../../../node_modules/comlink/dist/esm/comlink.mjs"],"sourcesContent":["/* eslint-disable prefer-rest-params */\nclass ClassHierarchy extends Array {\n  push() {\n    for (let i = 0; i < arguments.length; i++) {\n      if (!this.includes(arguments[i])) {\n        super.push(arguments[i]);\n      }\n    }\n    return this.length;\n  }\n}\n\nexport { ClassHierarchy as default };\n","import Constants from './DataArray/Constants.js';\nimport { n as newInstance$1, a as newTypedArray, b as newTypedArrayFrom, o as obj, s as set, c as macro } from '../../macros2.js';\nimport { n as norm } from './Math/index.js';\n\nconst {\n  vtkErrorMacro\n} = macro;\nconst {\n  DefaultDataType\n} = Constants;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\nconst EPSILON = 1e-6;\n\n// Original source from https://www.npmjs.com/package/compute-range\n// Modified to accept type arrays\nfunction fastComputeRange(arr, offset, numberOfComponents) {\n  const len = arr.length;\n  let min = Number.MAX_VALUE;\n  let max = -Number.MAX_VALUE;\n  let x;\n  let i;\n\n  // find first non-NaN value\n  for (i = offset; i < len; i += numberOfComponents) {\n    if (!Number.isNaN(arr[i])) {\n      min = arr[i];\n      max = min;\n      break;\n    }\n  }\n  for (; i < len; i += numberOfComponents) {\n    x = arr[i];\n    if (x < min) {\n      min = x;\n    } else if (x > max) {\n      max = x;\n    }\n  }\n  return {\n    min,\n    max\n  };\n}\n\n/**\n * @deprecated please use fastComputeRange instead\n */\nfunction createRangeHelper() {\n  let min = Number.MAX_VALUE;\n  let max = -Number.MAX_VALUE;\n  let count = 0;\n  let sum = 0;\n  return {\n    add(value) {\n      if (min > value) {\n        min = value;\n      }\n      if (max < value) {\n        max = value;\n      }\n      count++;\n      sum += value;\n    },\n    get() {\n      return {\n        min,\n        max,\n        count,\n        sum,\n        mean: sum / count\n      };\n    },\n    getRange() {\n      return {\n        min,\n        max\n      };\n    }\n  };\n}\nfunction computeRange(values) {\n  let component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let numberOfComponents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (component < 0 && numberOfComponents > 1) {\n    // Compute magnitude\n    const size = values.length;\n    const numberOfValues = size / numberOfComponents;\n    const data = new Float64Array(numberOfValues);\n    for (let i = 0, j = 0; i < numberOfValues; ++i) {\n      for (let nextJ = j + numberOfComponents; j < nextJ; ++j) {\n        data[i] += values[j] * values[j];\n      }\n      data[i] **= 0.5;\n    }\n    return fastComputeRange(data, 0, 1);\n  }\n  return fastComputeRange(values, component < 0 ? 0 : component, numberOfComponents);\n}\nfunction ensureRangeSize(rangeArray) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const ranges = rangeArray || [];\n  // Pad ranges with null value to get the\n  while (ranges.length <= size) {\n    ranges.push(null);\n  }\n  return ranges;\n}\nfunction getDataType(typedArray) {\n  // Expects toString() to return \"[object ...Array]\"\n  return Object.prototype.toString.call(typedArray).slice(8, -1);\n}\nfunction getMaxNorm(normArray) {\n  const numComps = normArray.getNumberOfComponents();\n  let maxNorm = 0.0;\n  const tuple = new Array(numComps);\n  for (let i = 0; i < normArray.getNumberOfTuples(); ++i) {\n    normArray.getTuple(i, tuple);\n    const norm$1 = norm(tuple, numComps);\n    if (norm$1 > maxNorm) {\n      maxNorm = norm$1;\n    }\n  }\n  return maxNorm;\n}\n\n// ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nconst STATIC = {\n  computeRange,\n  createRangeHelper,\n  fastComputeRange,\n  getDataType,\n  getMaxNorm\n};\n\n// ----------------------------------------------------------------------------\n// vtkDataArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataArray');\n\n  /**\n   * Resize model.values and copy the old values to the new array.\n   * @param {Number} requestedNumTuples Final expected number of tuples; must be >= 0\n   * @returns {Boolean} True if a resize occured, false otherwise\n   */\n  function resize(requestedNumTuples) {\n    if (requestedNumTuples < 0) {\n      return false;\n    }\n    const numComps = publicAPI.getNumberOfComponents();\n    const curNumTuples = model.values.length / (numComps > 0 ? numComps : 1);\n    if (requestedNumTuples === curNumTuples) {\n      return true;\n    }\n    if (requestedNumTuples > curNumTuples) {\n      // Requested size is bigger than current size.  Allocate enough\n      // memory to fit the requested size and be more than double the\n      // currently allocated memory.\n      const oldValues = model.values;\n      model.values = newTypedArray(model.dataType, (requestedNumTuples + curNumTuples) * numComps);\n      model.values.set(oldValues);\n      return true;\n    }\n\n    // Requested size is smaller than currently allocated size\n    if (model.size > requestedNumTuples * numComps) {\n      model.size = requestedNumTuples * numComps;\n      publicAPI.dataChange();\n    }\n    return true;\n  }\n  publicAPI.dataChange = () => {\n    model.ranges = null;\n    publicAPI.modified();\n  };\n  publicAPI.resize = requestedNumTuples => {\n    resize(requestedNumTuples);\n    const newSize = requestedNumTuples * publicAPI.getNumberOfComponents();\n    if (model.size !== newSize) {\n      model.size = newSize;\n      publicAPI.dataChange();\n      return true;\n    }\n    return false;\n  };\n\n  // FIXME, to rename into \"clear()\" or \"reset()\"\n  publicAPI.initialize = () => {\n    publicAPI.resize(0);\n  };\n  publicAPI.getElementComponentSize = () => model.values.BYTES_PER_ELEMENT;\n\n  // Description:\n  // Return the data component at the location specified by tupleIdx and\n  // compIdx.\n  publicAPI.getComponent = function (tupleIdx) {\n    let compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return model.values[tupleIdx * model.numberOfComponents + compIdx];\n  };\n\n  // Description:\n  // Set the data component at the location specified by tupleIdx and compIdx\n  // to value.\n  // Note that i is less than NumberOfTuples and j is less than\n  //  NumberOfComponents. Make sure enough memory has been allocated\n  // (use SetNumberOfTuples() and SetNumberOfComponents()).\n  publicAPI.setComponent = (tupleIdx, compIdx, value) => {\n    if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {\n      model.values[tupleIdx * model.numberOfComponents + compIdx] = value;\n      publicAPI.dataChange();\n    }\n  };\n  publicAPI.getValue = valueIdx => {\n    const idx = valueIdx / model.numberOfComponents;\n    const comp = valueIdx % model.numberOfComponents;\n    return publicAPI.getComponent(idx, comp);\n  };\n  publicAPI.setValue = (valueIdx, value) => {\n    const idx = valueIdx / model.numberOfComponents;\n    const comp = valueIdx % model.numberOfComponents;\n    publicAPI.setComponent(idx, comp, value);\n  };\n  publicAPI.getData = () => model.size === model.values.length ? model.values : model.values.subarray(0, model.size);\n  publicAPI.getRange = function () {\n    let componentIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    let rangeIdx = componentIndex;\n    if (rangeIdx < 0) {\n      // If scalar data, then store in slot 0 (same as componentIndex = 0).\n      // If vector data, then store in last slot.\n      rangeIdx = model.numberOfComponents === 1 ? 0 : model.numberOfComponents;\n    }\n    let range = null;\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n    range = model.ranges[rangeIdx];\n    if (range) {\n      model.rangeTuple[0] = range.min;\n      model.rangeTuple[1] = range.max;\n      return model.rangeTuple;\n    }\n\n    // Need to compute ranges...\n    range = computeRange(publicAPI.getData(), componentIndex, model.numberOfComponents);\n    model.ranges[rangeIdx] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n  publicAPI.setRange = (rangeValue, componentIndex) => {\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n    const range = {\n      min: rangeValue.min,\n      max: rangeValue.max\n    };\n    model.ranges[componentIndex] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n  publicAPI.setTuple = (idx, tuple) => {\n    const offset = idx * model.numberOfComponents;\n    for (let i = 0; i < model.numberOfComponents; i++) {\n      model.values[offset + i] = tuple[i];\n    }\n  };\n  publicAPI.setTuples = (idx, tuples) => {\n    let i = idx * model.numberOfComponents;\n    const last = Math.min(tuples.length, model.size - i);\n    for (let j = 0; j < last;) {\n      model.values[i++] = tuples[j++];\n    }\n  };\n  publicAPI.insertTuple = (idx, tuple) => {\n    if (model.size <= idx * model.numberOfComponents) {\n      model.size = (idx + 1) * model.numberOfComponents;\n      resize(idx + 1);\n    }\n    publicAPI.setTuple(idx, tuple);\n    return idx;\n  };\n  publicAPI.insertTuples = (idx, tuples) => {\n    const end = idx + tuples.length / model.numberOfComponents;\n    if (model.size < end * model.numberOfComponents) {\n      model.size = end * model.numberOfComponents;\n      resize(end);\n    }\n    publicAPI.setTuples(idx, tuples);\n    return end;\n  };\n  publicAPI.insertNextTuple = tuple => {\n    const idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuple(idx, tuple);\n  };\n  publicAPI.insertNextTuples = tuples => {\n    const idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuples(idx, tuples);\n  };\n  publicAPI.findTuple = function (tuple) {\n    let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n    for (let i = 0; i < model.size; i += model.numberOfComponents) {\n      if (Math.abs(tuple[0] - model.values[i]) <= precision) {\n        let match = true;\n        for (let j = 1; j < model.numberOfComponents; ++j) {\n          if (Math.abs(tuple[j] - model.values[i + j]) > precision) {\n            match = false;\n            break;\n          }\n        }\n        if (match) {\n          return i / model.numberOfComponents;\n        }\n      }\n    }\n    return -1;\n  };\n  publicAPI.getTuple = function (idx) {\n    let tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const numberOfComponents = model.numberOfComponents || 1;\n    const offset = idx * numberOfComponents;\n    // Check most common component sizes first\n    // to avoid doing a for loop if possible\n    switch (numberOfComponents) {\n      case 4:\n        tupleToFill[3] = model.values[offset + 3];\n      // eslint-disable-next-line no-fallthrough\n      case 3:\n        tupleToFill[2] = model.values[offset + 2];\n      // eslint-disable-next-line no-fallthrough\n      case 2:\n        tupleToFill[1] = model.values[offset + 1];\n      // eslint-disable-next-line no-fallthrough\n      case 1:\n        tupleToFill[0] = model.values[offset];\n        break;\n      default:\n        for (let i = numberOfComponents - 1; i >= 0; --i) {\n          tupleToFill[i] = model.values[offset + i];\n        }\n    }\n    return tupleToFill;\n  };\n  publicAPI.getTuples = (fromId, toId) => {\n    const from = (fromId ?? 0) * model.numberOfComponents;\n    const to = (toId ?? publicAPI.getNumberOfTuples()) * model.numberOfComponents;\n    const arr = publicAPI.getData().subarray(from, to);\n    return arr.length > 0 ? arr : null;\n  };\n  publicAPI.getTupleLocation = function () {\n    let idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return idx * model.numberOfComponents;\n  };\n  publicAPI.getNumberOfComponents = () => model.numberOfComponents;\n  publicAPI.getNumberOfValues = () => model.size;\n  publicAPI.getNumberOfTuples = () => model.size / model.numberOfComponents;\n  publicAPI.getDataType = () => model.dataType;\n  /* eslint-disable no-use-before-define */\n  publicAPI.newClone = () => newInstance({\n    empty: true,\n    name: model.name,\n    dataType: model.dataType,\n    numberOfComponents: model.numberOfComponents\n  });\n  /* eslint-enable no-use-before-define */\n\n  publicAPI.getName = () => {\n    if (!model.name) {\n      publicAPI.modified();\n      model.name = `vtkDataArray${publicAPI.getMTime()}`;\n    }\n    return model.name;\n  };\n  publicAPI.setData = (typedArray, numberOfComponents) => {\n    model.values = typedArray;\n    model.size = typedArray.length;\n    model.dataType = getDataType(typedArray);\n    if (numberOfComponents) {\n      model.numberOfComponents = numberOfComponents;\n    }\n    if (model.size % model.numberOfComponents !== 0) {\n      model.numberOfComponents = 1;\n    }\n    publicAPI.dataChange();\n  };\n\n  // Override serialization support\n  publicAPI.getState = () => {\n    if (model.deleted) {\n      return null;\n    }\n    const jsonArchive = {\n      ...model,\n      vtkClass: publicAPI.getClassName()\n    };\n\n    // Convert typed array to regular array\n    jsonArchive.values = Array.from(jsonArchive.values);\n    delete jsonArchive.buffer;\n\n    // Clean any empty data\n    Object.keys(jsonArchive).forEach(keyName => {\n      if (!jsonArchive[keyName]) {\n        delete jsonArchive[keyName];\n      }\n    });\n\n    // Sort resulting object by key name\n    const sortedObj = {};\n    Object.keys(jsonArchive).sort().forEach(name => {\n      sortedObj[name] = jsonArchive[name];\n    });\n\n    // Remove mtime\n    if (sortedObj.mtime) {\n      delete sortedObj.mtime;\n    }\n    return sortedObj;\n  };\n  publicAPI.deepCopy = other => {\n    // Retain current dataType and array reference before shallowCopy call.\n    const currentType = publicAPI.getDataType();\n    const currentArray = model.values;\n    publicAPI.shallowCopy(other);\n\n    // Avoid array reallocation if size already sufficient\n    // and dataTypes match.\n    if (currentArray?.length >= other.getNumberOfValues() && currentType === other.getDataType()) {\n      currentArray.set(other.getData());\n      model.values = currentArray;\n      publicAPI.dataChange();\n    } else {\n      publicAPI.setData(other.getData().slice());\n    }\n  };\n  publicAPI.interpolateTuple = (idx, source1, source1Idx, source2, source2Idx, t) => {\n    const numberOfComponents = model.numberOfComponents || 1;\n    if (numberOfComponents !== source1.getNumberOfComponents() || numberOfComponents !== source2.getNumberOfComponents()) {\n      vtkErrorMacro('numberOfComponents must match');\n    }\n    const tuple1 = source1.getTuple(source1Idx);\n    const tuple2 = source2.getTuple(source2Idx);\n    const out = [];\n    out.length = numberOfComponents;\n\n    // Check most common component sizes first\n    // to avoid doing a for loop if possible\n    switch (numberOfComponents) {\n      case 4:\n        out[3] = tuple1[3] + (tuple2[3] - tuple1[3]) * t;\n      // eslint-disable-next-line no-fallthrough\n      case 3:\n        out[2] = tuple1[2] + (tuple2[2] - tuple1[2]) * t;\n      // eslint-disable-next-line no-fallthrough\n      case 2:\n        out[1] = tuple1[1] + (tuple2[1] - tuple1[1]) * t;\n      // eslint-disable-next-line no-fallthrough\n      case 1:\n        out[0] = tuple1[0] + (tuple2[0] - tuple1[0]) * t;\n        break;\n      default:\n        for (let i = 0; i < numberOfComponents; i++) {\n          out[i] = tuple1[i] + (tuple2[i] - tuple1[i]) * t;\n        }\n    }\n    return publicAPI.insertTuple(idx, out);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n// size: The current size of the dataArray.\n// NOTE: The underlying typed array may be larger than 'size'.\nconst DEFAULT_VALUES = {\n  name: '',\n  numberOfComponents: 1,\n  dataType: DefaultDataType,\n  rangeTuple: [0, 0]\n  // size: undefined,\n  // values: null,\n  // ranges: null,\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  if (!model.empty && !model.values && !model.size) {\n    throw new TypeError('Cannot create vtkDataArray object without: size > 0, values');\n  }\n  if (!model.values) {\n    model.values = newTypedArray(model.dataType, model.size);\n  } else if (Array.isArray(model.values)) {\n    model.values = newTypedArrayFrom(model.dataType, model.values);\n  }\n  if (model.values) {\n    // Takes the size if provided (can be lower than `model.values`) otherwise the actual length of `values`.\n    model.size = model.size ?? model.values.length;\n    model.dataType = getDataType(model.values);\n  }\n\n  // Object methods\n  obj(publicAPI, model);\n  set(publicAPI, model, ['name', 'numberOfComponents']);\n  if (model.size % model.numberOfComponents !== 0) {\n    throw new RangeError('model.size is not a multiple of model.numberOfComponents');\n  }\n\n  // Object specific methods\n  vtkDataArray(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = newInstance$1(extend, 'vtkDataArray');\n\n// ----------------------------------------------------------------------------\n\nvar vtkDataArray$1 = {\n  newInstance,\n  extend,\n  ...STATIC,\n  ...Constants\n};\n\nexport { STATIC, vtkDataArray$1 as default, extend, newInstance };\n","const DataTypeByteSize = {\n  Int8Array: 1,\n  Uint8Array: 1,\n  Uint8ClampedArray: 1,\n  Int16Array: 2,\n  Uint16Array: 2,\n  Int32Array: 4,\n  Uint32Array: 4,\n  Float32Array: 4,\n  Float64Array: 8\n};\nconst VtkDataTypes = {\n  VOID: '',\n  // not sure to know what that should be\n  CHAR: 'Int8Array',\n  SIGNED_CHAR: 'Int8Array',\n  UNSIGNED_CHAR: 'Uint8Array',\n  UNSIGNED_CHAR_CLAMPED: 'Uint8ClampedArray',\n  // should be used for VTK.js internal purpose only\n  SHORT: 'Int16Array',\n  UNSIGNED_SHORT: 'Uint16Array',\n  INT: 'Int32Array',\n  UNSIGNED_INT: 'Uint32Array',\n  FLOAT: 'Float32Array',\n  DOUBLE: 'Float64Array'\n};\nconst DefaultDataType = VtkDataTypes.FLOAT;\nvar Constants = {\n  DefaultDataType,\n  DataTypeByteSize,\n  VtkDataTypes\n};\n\nexport { DataTypeByteSize, DefaultDataType, VtkDataTypes, Constants as default };\n","const IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst IDENTITY_3X3 = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nconst EPSILON = 1e-6;\nconst VTK_SMALL_NUMBER = 1.0e-12;\nvar Constants = {\n  IDENTITY,\n  IDENTITY_3X3,\n  EPSILON,\n  VTK_SMALL_NUMBER\n};\n\nexport { EPSILON, IDENTITY, IDENTITY_3X3, VTK_SMALL_NUMBER, Constants as default };\n","import seedrandom from 'seedrandom';\nimport { m as macro } from '../../../macros2.js';\nimport { IDENTITY, IDENTITY_3X3, VTK_SMALL_NUMBER, EPSILON } from './Constants.js';\n\nconst {\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n/* eslint-disable camelcase                                                  */\n/* eslint-disable no-cond-assign                                             */\n/* eslint-disable no-bitwise                                                 */\n/* eslint-disable no-multi-assign                                            */\n// ----------------------------------------------------------------------------\nlet randomSeedValue = 0;\nconst VTK_MAX_ROTATIONS = 20;\nfunction notImplemented(method) {\n  return () => vtkErrorMacro(`vtkMath::${method} - NOT IMPLEMENTED`);\n}\n\n// Swap rows for n by n matrix\nfunction swapRowsMatrix_nxn(matrix, n, row1, row2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[row1 * n + i];\n    matrix[row1 * n + i] = matrix[row2 * n + i];\n    matrix[row2 * n + i] = tmp;\n  }\n}\n\n// Swap columns for n by n matrix\nfunction swapColumnsMatrix_nxn(matrix, n, column1, column2) {\n  let tmp;\n  for (let i = 0; i < n; i++) {\n    tmp = matrix[i * n + column1];\n    matrix[i * n + column1] = matrix[i * n + column2];\n    matrix[i * n + column2] = tmp;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nfunction createArray() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  // faster than Array.from and/or while loop\n  const res = Array(size);\n  for (let i = 0; i < size; ++i) {\n    res[i] = 0;\n  }\n  return res;\n}\nconst Pi = () => Math.PI;\nfunction radiansFromDegrees(deg) {\n  return deg / 180 * Math.PI;\n}\nfunction degreesFromRadians(rad) {\n  return rad * 180 / Math.PI;\n}\nconst {\n  round,\n  floor,\n  ceil,\n  min,\n  max\n} = Math;\nfunction arrayMin(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n  return minValue;\n}\nfunction arrayMax(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n  return maxValue;\n}\nfunction arrayRange(arr) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let minValue = Infinity;\n  let maxValue = -Infinity;\n  for (let i = offset, len = arr.length; i < len; i += stride) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n    if (maxValue < arr[i]) {\n      maxValue = arr[i];\n    }\n  }\n  return [minValue, maxValue];\n}\nconst ceilLog2 = notImplemented('ceilLog2');\nconst factorial = notImplemented('factorial');\nfunction nearestPowerOfTwo(xi) {\n  let v = 1;\n  while (v < xi) {\n    v *= 2;\n  }\n  return v;\n}\nfunction isPowerOfTwo(x) {\n  return x === nearestPowerOfTwo(x);\n}\nfunction binomial(m, n) {\n  let r = 1;\n  for (let i = 1; i <= n; ++i) {\n    r *= (m - i + 1) / i;\n  }\n  return Math.floor(r);\n}\nfunction beginCombination(m, n) {\n  if (m < n) {\n    return 0;\n  }\n  const r = createArray(n);\n  for (let i = 0; i < n; ++i) {\n    r[i] = i;\n  }\n  return r;\n}\nfunction nextCombination(m, n, r) {\n  let status = 0;\n  for (let i = n - 1; i >= 0; --i) {\n    if (r[i] < m - n + i) {\n      let j = r[i] + 1;\n      while (i < n) {\n        r[i++] = j++;\n      }\n      status = 1;\n      break;\n    }\n  }\n  return status;\n}\nfunction randomSeed(seed) {\n  seedrandom(`${seed}`, {\n    global: true\n  });\n  randomSeedValue = seed;\n}\nfunction getSeed() {\n  return randomSeedValue;\n}\nfunction random() {\n  let minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const delta = maxValue - minValue;\n  return minValue + delta * Math.random();\n}\nconst gaussian = notImplemented('gaussian');\n\n// Vect3 operations\nfunction add(a, b, out) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\nfunction subtract(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\nfunction multiplyScalar(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  vec[2] *= scalar;\n  return vec;\n}\nfunction multiplyScalar2D(vec, scalar) {\n  vec[0] *= scalar;\n  vec[1] *= scalar;\n  return vec;\n}\nfunction multiplyAccumulate(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  out[2] = a[2] + b[2] * scalar;\n  return out;\n}\nfunction multiplyAccumulate2D(a, b, scalar, out) {\n  out[0] = a[0] + b[0] * scalar;\n  out[1] = a[1] + b[1] * scalar;\n  return out;\n}\nfunction dot(x, y) {\n  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];\n}\nfunction outer(x, y, out_3x3) {\n  out_3x3[0] = x[0] * y[0];\n  out_3x3[1] = x[0] * y[1];\n  out_3x3[2] = x[0] * y[2];\n  out_3x3[3] = x[1] * y[0];\n  out_3x3[4] = x[1] * y[1];\n  out_3x3[5] = x[1] * y[2];\n  out_3x3[6] = x[2] * y[0];\n  out_3x3[7] = x[2] * y[1];\n  out_3x3[8] = x[2] * y[2];\n}\nfunction cross(x, y, out) {\n  const Zx = x[1] * y[2] - x[2] * y[1];\n  const Zy = x[2] * y[0] - x[0] * y[2];\n  const Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n  return out;\n}\nfunction norm(x) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n    default:\n      {\n        let sum = 0;\n        for (let i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n        return Math.sqrt(sum);\n      }\n  }\n}\nfunction normalize(x) {\n  const den = norm(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n  return den;\n}\nfunction perpendiculars(x, y, z, theta) {\n  const x2 = x[0] * x[0];\n  const y2 = x[1] * x[1];\n  const z2 = x[2] * x[2];\n  const r = Math.sqrt(x2 + y2 + z2);\n  let dx;\n  let dy;\n  let dz;\n\n  // transpose the vector to avoid divide-by-zero error\n  if (x2 > y2 && x2 > z2) {\n    dx = 0;\n    dy = 1;\n    dz = 2;\n  } else if (y2 > z2) {\n    dx = 1;\n    dy = 2;\n    dz = 0;\n  } else {\n    dx = 2;\n    dy = 0;\n    dz = 1;\n  }\n  const a = x[dx] / r;\n  const b = x[dy] / r;\n  const c = x[dz] / r;\n  const tmp = Math.sqrt(a * a + c * c);\n  if (theta !== 0) {\n    const sintheta = Math.sin(theta);\n    const costheta = Math.cos(theta);\n    if (y) {\n      y[dx] = (c * costheta - a * b * sintheta) / tmp;\n      y[dy] = sintheta * tmp;\n      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;\n    }\n    if (z) {\n      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;\n      z[dy] = costheta * tmp;\n      z[dz] = (a * sintheta - b * c * costheta) / tmp;\n    }\n  } else {\n    if (y) {\n      y[dx] = c / tmp;\n      y[dy] = 0;\n      y[dz] = -a / tmp;\n    }\n    if (z) {\n      z[dx] = -a * b / tmp;\n      z[dy] = tmp;\n      z[dz] = -b * c / tmp;\n    }\n  }\n}\nfunction projectVector(a, b, projection) {\n  const bSquared = dot(b, b);\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    projection[2] = 0;\n    return false;\n  }\n  const scale = dot(a, b) / bSquared;\n  for (let i = 0; i < 3; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar(projection, scale);\n  return true;\n}\nfunction dot2D(x, y) {\n  return x[0] * y[0] + x[1] * y[1];\n}\nfunction projectVector2D(a, b, projection) {\n  const bSquared = dot2D(b, b);\n  if (bSquared === 0) {\n    projection[0] = 0;\n    projection[1] = 0;\n    return false;\n  }\n  const scale = dot2D(a, b) / bSquared;\n  for (let i = 0; i < 2; i++) {\n    projection[i] = b[i];\n  }\n  multiplyScalar2D(projection, scale);\n  return true;\n}\nfunction distance2BetweenPoints(x, y) {\n  return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);\n}\nfunction angleBetweenVectors(v1, v2) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  return Math.atan2(norm(crossVect), dot(v1, v2));\n}\nfunction signedAngleBetweenVectors(v1, v2, vN) {\n  const crossVect = [0, 0, 0];\n  cross(v1, v2, crossVect);\n  const angle = Math.atan2(norm(crossVect), dot(v1, v2));\n  return dot(crossVect, vN) >= 0 ? angle : -angle;\n}\nfunction gaussianAmplitude(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nfunction gaussianWeight(mean, variance, position) {\n  const distanceFromMean = Math.abs(mean - position);\n  return Math.exp(-(distanceFromMean ** 2) / (2 * variance));\n}\nfunction outer2D(x, y, out_2x2) {\n  out_2x2[0] = x[0] * y[0];\n  out_2x2[1] = x[0] * y[1];\n  out_2x2[2] = x[1] * y[0];\n  out_2x2[3] = x[1] * y[1];\n}\nfunction norm2D(x2D) {\n  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);\n}\nfunction normalize2D(x) {\n  const den = norm2D(x);\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n  }\n  return den;\n}\nfunction rowsToMat4(row0, row1, row2, row3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[i] = row0[i];\n    mat[4 + i] = row1[i];\n    mat[8 + i] = row2[i];\n    mat[12 + i] = row3[i];\n  }\n  return mat;\n}\nfunction columnsToMat4(column0, column1, column2, column3, mat) {\n  for (let i = 0; i < 4; i++) {\n    mat[4 * i] = column0[i];\n    mat[4 * i + 1] = column1[i];\n    mat[4 * i + 2] = column2[i];\n    mat[4 * i + 3] = column3[i];\n  }\n  return mat;\n}\nfunction rowsToMat3(row0, row1, row2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[i] = row0[i];\n    mat[3 + i] = row1[i];\n    mat[6 + i] = row2[i];\n  }\n  return mat;\n}\nfunction columnsToMat3(column0, column1, column2, mat) {\n  for (let i = 0; i < 3; i++) {\n    mat[3 * i] = column0[i];\n    mat[3 * i + 1] = column1[i];\n    mat[3 * i + 2] = column2[i];\n  }\n  return mat;\n}\nfunction determinant2x2() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (args.length === 2) {\n    return args[0][0] * args[1][1] - args[1][0] * args[0][1];\n  }\n  if (args.length === 4) {\n    return args[0] * args[3] - args[1] * args[2];\n  }\n  return Number.NaN;\n}\nfunction LUFactor3x3(mat_3x3, index_3) {\n  let maxI;\n  let tmp;\n  let largest;\n  const scale = [0, 0, 0];\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    largest = Math.abs(mat_3x3[i * 3]);\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 1])) > largest) {\n      largest = tmp;\n    }\n    if ((tmp = Math.abs(mat_3x3[i * 3 + 2])) > largest) {\n      largest = tmp;\n    }\n    scale[i] = 1 / largest;\n  }\n\n  // Loop over all columns using Crout's method\n\n  // first column\n  largest = scale[0] * Math.abs(mat_3x3[0]);\n  maxI = 0;\n  if ((tmp = scale[1] * Math.abs(mat_3x3[3])) >= largest) {\n    largest = tmp;\n    maxI = 1;\n  }\n  if ((tmp = scale[2] * Math.abs(mat_3x3[6])) >= largest) {\n    maxI = 2;\n  }\n  if (maxI !== 0) {\n    swapRowsMatrix_nxn(mat_3x3, 3, maxI, 0);\n    scale[maxI] = scale[0];\n  }\n  index_3[0] = maxI;\n  mat_3x3[3] /= mat_3x3[0];\n  mat_3x3[6] /= mat_3x3[0];\n\n  // second column\n  mat_3x3[4] -= mat_3x3[3] * mat_3x3[1];\n  mat_3x3[7] -= mat_3x3[6] * mat_3x3[1];\n  largest = scale[1] * Math.abs(mat_3x3[4]);\n  maxI = 1;\n  if ((tmp = scale[2] * Math.abs(mat_3x3[7])) >= largest) {\n    maxI = 2;\n    swapRowsMatrix_nxn(mat_3x3, 3, 1, 2);\n    scale[2] = scale[1];\n  }\n  index_3[1] = maxI;\n  mat_3x3[7] /= mat_3x3[4];\n\n  // third column\n  mat_3x3[5] -= mat_3x3[3] * mat_3x3[2];\n  mat_3x3[8] -= mat_3x3[6] * mat_3x3[2] + mat_3x3[7] * mat_3x3[5];\n  index_3[2] = 2;\n}\nfunction LUSolve3x3(mat_3x3, index_3, x_3) {\n  // forward substitution\n  let sum = x_3[index_3[0]];\n  x_3[index_3[0]] = x_3[0];\n  x_3[0] = sum;\n  sum = x_3[index_3[1]];\n  x_3[index_3[1]] = x_3[1];\n  x_3[1] = sum - mat_3x3[3] * x_3[0];\n  sum = x_3[index_3[2]];\n  x_3[index_3[2]] = x_3[2];\n  x_3[2] = sum - mat_3x3[6] * x_3[0] - mat_3x3[7] * x_3[1];\n\n  // back substitution\n  x_3[2] /= mat_3x3[8];\n  x_3[1] = (x_3[1] - mat_3x3[5] * x_3[2]) / mat_3x3[4];\n  x_3[0] = (x_3[0] - mat_3x3[1] * x_3[1] - mat_3x3[2] * x_3[2]) / mat_3x3[0];\n}\nfunction linearSolve3x3(mat_3x3, x_3, y_3) {\n  const a1 = mat_3x3[0];\n  const b1 = mat_3x3[1];\n  const c1 = mat_3x3[2];\n  const a2 = mat_3x3[3];\n  const b2 = mat_3x3[4];\n  const c2 = mat_3x3[5];\n  const a3 = mat_3x3[6];\n  const b3 = mat_3x3[7];\n  const c3 = mat_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Compute the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n\n  // Multiply by the adjoint\n  const v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];\n  const v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];\n  const v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2];\n\n  // Divide by the determinant\n  y_3[0] = v1 / det;\n  y_3[1] = v2 / det;\n  y_3[2] = v3 / det;\n}\nfunction multiply3x3_vect3(mat_3x3, in_3, out_3) {\n  const x = mat_3x3[0] * in_3[0] + mat_3x3[1] * in_3[1] + mat_3x3[2] * in_3[2];\n  const y = mat_3x3[3] * in_3[0] + mat_3x3[4] * in_3[1] + mat_3x3[5] * in_3[2];\n  const z = mat_3x3[6] * in_3[0] + mat_3x3[7] * in_3[1] + mat_3x3[8] * in_3[2];\n  out_3[0] = x;\n  out_3[1] = y;\n  out_3[2] = z;\n}\nfunction multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {\n  const copyA = [...a_3x3];\n  const copyB = [...b_3x3];\n  for (let i = 0; i < 3; i++) {\n    out_3x3[i] = copyA[0] * copyB[i] + copyA[1] * copyB[i + 3] + copyA[2] * copyB[i + 6];\n    out_3x3[i + 3] = copyA[3] * copyB[i] + copyA[4] * copyB[i + 3] + copyA[5] * copyB[i + 6];\n    out_3x3[i + 6] = copyA[6] * copyB[i] + copyA[7] * copyB[i + 3] + copyA[8] * copyB[i + 6];\n  }\n}\nfunction multiplyMatrix(a, b, rowA, colA, rowB, colB, outRowAColB) {\n  // we need colA == rowB\n  if (colA !== rowB) {\n    vtkErrorMacro('Number of columns of A must match number of rows of B.');\n  }\n\n  // If a or b is used to store the result, copying them is required\n  const copyA = [...a];\n  const copyB = [...b];\n  // output matrix is rowA*colB\n  // output row\n  for (let i = 0; i < rowA; i++) {\n    // output col\n    for (let j = 0; j < colB; j++) {\n      outRowAColB[i * colB + j] = 0;\n      // sum for this point\n      for (let k = 0; k < colA; k++) {\n        outRowAColB[i * colB + j] += copyA[i * colA + k] * copyB[j + colB * k];\n      }\n    }\n  }\n}\nfunction transpose3x3(in_3x3, outT_3x3) {\n  let tmp;\n\n  // off-diagonal elements\n  tmp = in_3x3[3];\n  outT_3x3[3] = in_3x3[1];\n  outT_3x3[1] = tmp;\n  tmp = in_3x3[6];\n  outT_3x3[6] = in_3x3[2];\n  outT_3x3[2] = tmp;\n  tmp = in_3x3[7];\n  outT_3x3[7] = in_3x3[5];\n  outT_3x3[5] = tmp;\n\n  // on-diagonal elements\n  outT_3x3[0] = in_3x3[0];\n  outT_3x3[4] = in_3x3[4];\n  outT_3x3[8] = in_3x3[8];\n}\nfunction invert3x3(in_3x3, outI_3x3) {\n  const a1 = in_3x3[0];\n  const b1 = in_3x3[1];\n  const c1 = in_3x3[2];\n  const a2 = in_3x3[3];\n  const b2 = in_3x3[4];\n  const c2 = in_3x3[5];\n  const a3 = in_3x3[6];\n  const b3 = in_3x3[7];\n  const c3 = in_3x3[8];\n\n  // Compute the adjoint\n  const d1 = +determinant2x2(b2, b3, c2, c3);\n  const d2 = -determinant2x2(a2, a3, c2, c3);\n  const d3 = +determinant2x2(a2, a3, b2, b3);\n  const e1 = -determinant2x2(b1, b3, c1, c3);\n  const e2 = +determinant2x2(a1, a3, c1, c3);\n  const e3 = -determinant2x2(a1, a3, b1, b3);\n  const f1 = +determinant2x2(b1, b2, c1, c2);\n  const f2 = -determinant2x2(a1, a2, c1, c2);\n  const f3 = +determinant2x2(a1, a2, b1, b2);\n\n  // Divide by the determinant\n  const det = a1 * d1 + b1 * d2 + c1 * d3;\n  if (det === 0) {\n    vtkWarningMacro('Matrix has 0 determinant');\n  }\n  outI_3x3[0] = d1 / det;\n  outI_3x3[3] = d2 / det;\n  outI_3x3[6] = d3 / det;\n  outI_3x3[1] = e1 / det;\n  outI_3x3[4] = e2 / det;\n  outI_3x3[7] = e3 / det;\n  outI_3x3[2] = f1 / det;\n  outI_3x3[5] = f2 / det;\n  outI_3x3[8] = f3 / det;\n}\nfunction determinant3x3(mat_3x3) {\n  return mat_3x3[0] * mat_3x3[4] * mat_3x3[8] + mat_3x3[3] * mat_3x3[7] * mat_3x3[2] + mat_3x3[6] * mat_3x3[1] * mat_3x3[5] - mat_3x3[0] * mat_3x3[7] * mat_3x3[5] - mat_3x3[3] * mat_3x3[1] * mat_3x3[8] - mat_3x3[6] * mat_3x3[4] * mat_3x3[2];\n}\n\n/**\n * Returns true if elements of both arrays are equals.\n * @param {Array} a an array of numbers (vector, point, matrix...)\n * @param {Array} b an array of numbers (vector, point, matrix...)\n * @param {Number} eps tolerance\n */\nfunction areEquals(a, b) {\n  let eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EPSILON;\n  if (a.length !== b.length) {\n    return false;\n  }\n  function isEqual(element, index) {\n    return Math.abs(element - b[index]) <= eps;\n  }\n  return a.every(isEqual);\n}\nconst areMatricesEqual = areEquals;\nfunction identity3x3(mat_3x3) {\n  for (let i = 0; i < 3; i++) {\n    /* eslint-disable-next-line no-multi-assign */\n    mat_3x3[i * 3] = mat_3x3[i * 3 + 1] = mat_3x3[i * 3 + 2] = 0;\n    mat_3x3[i * 3 + i] = 1;\n  }\n}\nfunction identity(n, mat) {\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i * n + j] = 0;\n    }\n    mat[i * n + i] = 1;\n  }\n  return mat;\n}\nfunction isIdentity(mat) {\n  let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return areMatricesEqual(mat, IDENTITY, eps);\n}\nfunction isIdentity3x3(mat) {\n  let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EPSILON;\n  return areMatricesEqual(mat, IDENTITY_3X3, eps);\n}\nfunction quaternionToMatrix3x3(quat_4, mat_3x3) {\n  const ww = quat_4[0] * quat_4[0];\n  const wx = quat_4[0] * quat_4[1];\n  const wy = quat_4[0] * quat_4[2];\n  const wz = quat_4[0] * quat_4[3];\n  const xx = quat_4[1] * quat_4[1];\n  const yy = quat_4[2] * quat_4[2];\n  const zz = quat_4[3] * quat_4[3];\n  const xy = quat_4[1] * quat_4[2];\n  const xz = quat_4[1] * quat_4[3];\n  const yz = quat_4[2] * quat_4[3];\n  const rr = xx + yy + zz;\n  // normalization factor, just in case quaternion was not normalized\n  let f = 1 / (ww + rr);\n  const s = (ww - rr) * f;\n  f *= 2;\n  mat_3x3[0] = xx * f + s;\n  mat_3x3[3] = (xy + wz) * f;\n  mat_3x3[6] = (xz - wy) * f;\n  mat_3x3[1] = (xy - wz) * f;\n  mat_3x3[4] = yy * f + s;\n  mat_3x3[7] = (yz + wx) * f;\n  mat_3x3[2] = (xz + wy) * f;\n  mat_3x3[5] = (yz - wx) * f;\n  mat_3x3[8] = zz * f + s;\n}\nfunction roundNumber(num) {\n  let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!`${num}`.includes('e')) {\n    return +`${Math.round(`${num}e+${digits}`)}e-${digits}`;\n  }\n  const arr = `${num}`.split('e');\n  let sig = '';\n  if (+arr[1] + digits > 0) {\n    sig = '+';\n  }\n  return +`${Math.round(`${+arr[0]}e${sig}${+arr[1] + digits}`)}e-${digits}`;\n}\nfunction roundVector(vector) {\n  let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0];\n  let digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  out[0] = roundNumber(vector[0], digits);\n  out[1] = roundNumber(vector[1], digits);\n  out[2] = roundNumber(vector[2], digits);\n  return out;\n}\nfunction jacobiN(a, n, w, v) {\n  let i;\n  let j;\n  let k;\n  let iq;\n  let ip;\n  let numPos;\n  let tresh;\n  let theta;\n  let t;\n  let tau;\n  let sm;\n  let s;\n  let h;\n  let g;\n  let c;\n  let tmp;\n  const b = createArray(n);\n  const z = createArray(n);\n  const vtkROTATE = (aa, ii, jj) => {\n    g = aa[ii];\n    h = aa[jj];\n    aa[ii] = g - s * (h + g * tau);\n    aa[jj] = h + s * (g - h * tau);\n  };\n\n  // initialize\n  identity(n, v);\n  for (ip = 0; ip < n; ip++) {\n    b[ip] = w[ip] = a[ip + ip * n];\n    z[ip] = 0.0;\n  }\n\n  // begin rotation sequence\n  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {\n    sm = 0.0;\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        sm += Math.abs(a[ip * n + iq]);\n      }\n    }\n    if (sm === 0.0) {\n      break;\n    }\n\n    // first 3 sweeps\n    if (i < 3) {\n      tresh = 0.2 * sm / (n * n);\n    } else {\n      tresh = 0.0;\n    }\n    for (ip = 0; ip < n - 1; ip++) {\n      for (iq = ip + 1; iq < n; iq++) {\n        g = 100.0 * Math.abs(a[ip * n + iq]);\n\n        // after 4 sweeps\n        if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {\n          a[ip * n + iq] = 0.0;\n        } else if (Math.abs(a[ip * n + iq]) > tresh) {\n          h = w[iq] - w[ip];\n          if (Math.abs(h) + g === Math.abs(h)) {\n            t = a[ip * n + iq] / h;\n          } else {\n            theta = 0.5 * h / a[ip * n + iq];\n            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));\n            if (theta < 0.0) {\n              t = -t;\n            }\n          }\n          c = 1.0 / Math.sqrt(1 + t * t);\n          s = t * c;\n          tau = s / (1.0 + c);\n          h = t * a[ip * n + iq];\n          z[ip] -= h;\n          z[iq] += h;\n          w[ip] -= h;\n          w[iq] += h;\n          a[ip * n + iq] = 0.0;\n\n          // ip already shifted left by 1 unit\n          for (j = 0; j <= ip - 1; j++) {\n            vtkROTATE(a, j * n + ip, j * n + iq);\n          }\n          // ip and iq already shifted left by 1 unit\n          for (j = ip + 1; j <= iq - 1; j++) {\n            vtkROTATE(a, ip * n + j, j * n + iq);\n          }\n          // iq already shifted left by 1 unit\n          for (j = iq + 1; j < n; j++) {\n            vtkROTATE(a, ip * n + j, iq * n + j);\n          }\n          for (j = 0; j < n; j++) {\n            vtkROTATE(v, j * n + ip, j * n + iq);\n          }\n        }\n      }\n    }\n    for (ip = 0; ip < n; ip++) {\n      b[ip] += z[ip];\n      w[ip] = b[ip];\n      z[ip] = 0.0;\n    }\n  }\n\n  // this is NEVER called\n  if (i >= VTK_MAX_ROTATIONS) {\n    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');\n    return 0;\n  }\n\n  // sort eigenfunctions: these changes do not affect accuracy\n  for (j = 0; j < n - 1; j++) {\n    // boundary incorrect\n    k = j;\n    tmp = w[k];\n    for (i = j + 1; i < n; i++) {\n      // boundary incorrect, shifted already\n      if (w[i] >= tmp || Math.abs(w[i] - tmp) < VTK_SMALL_NUMBER) {\n        // why exchange if same?\n        k = i;\n        tmp = w[k];\n      }\n    }\n    if (k !== j) {\n      w[k] = w[j];\n      w[j] = tmp;\n      swapColumnsMatrix_nxn(v, n, j, k);\n    }\n  }\n  // ensure eigenvector consistency (i.e., Jacobi can compute vectors that\n  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can\n  // reek havoc in hyperstreamline/other stuff. We will select the most\n  // positive eigenvector.\n  const ceil_half_n = (n >> 1) + (n & 1);\n  for (numPos = 0, i = 0; i < n * n; i++) {\n    if (v[i] >= 0.0) {\n      numPos++;\n    }\n  }\n  //    if ( numPos < ceil(double(n)/double(2.0)) )\n  if (numPos < ceil_half_n) {\n    for (i = 0; i < n; i++) {\n      v[i * n + j] *= -1.0;\n    }\n  }\n  return 1;\n}\nfunction matrix3x3ToQuaternion(mat_3x3, quat_4) {\n  const tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  // on-diagonal elements\n  tmp[0] = mat_3x3[0] + mat_3x3[4] + mat_3x3[8];\n  tmp[5] = mat_3x3[0] - mat_3x3[4] - mat_3x3[8];\n  tmp[10] = -mat_3x3[0] + mat_3x3[4] - mat_3x3[8];\n  tmp[15] = -mat_3x3[0] - mat_3x3[4] + mat_3x3[8];\n\n  // off-diagonal elements\n  tmp[1] = tmp[4] = mat_3x3[7] - mat_3x3[5];\n  tmp[2] = tmp[8] = mat_3x3[2] - mat_3x3[6];\n  tmp[3] = tmp[12] = mat_3x3[3] - mat_3x3[1];\n  tmp[6] = tmp[9] = mat_3x3[3] + mat_3x3[1];\n  tmp[7] = tmp[13] = mat_3x3[2] + mat_3x3[6];\n  tmp[11] = tmp[14] = mat_3x3[7] + mat_3x3[5];\n  const eigenvectors = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  const eigenvalues = [0, 0, 0, 0];\n\n  // convert into format that JacobiN can use,\n  // then use Jacobi to find eigenvalues and eigenvectors\n  // tmp is copied because jacobiN may modify it\n  const NTemp = [...tmp];\n  jacobiN(NTemp, 4, eigenvalues, eigenvectors);\n\n  // the first eigenvector is the one we want\n  quat_4[0] = eigenvectors[0];\n  quat_4[1] = eigenvectors[4];\n  quat_4[2] = eigenvectors[8];\n  quat_4[3] = eigenvectors[12];\n}\nfunction multiplyQuaternion(quat_1, quat_2, quat_out) {\n  const ww = quat_1[0] * quat_2[0];\n  const wx = quat_1[0] * quat_2[1];\n  const wy = quat_1[0] * quat_2[2];\n  const wz = quat_1[0] * quat_2[3];\n  const xw = quat_1[1] * quat_2[0];\n  const xx = quat_1[1] * quat_2[1];\n  const xy = quat_1[1] * quat_2[2];\n  const xz = quat_1[1] * quat_2[3];\n  const yw = quat_1[2] * quat_2[0];\n  const yx = quat_1[2] * quat_2[1];\n  const yy = quat_1[2] * quat_2[2];\n  const yz = quat_1[2] * quat_2[3];\n  const zw = quat_1[3] * quat_2[0];\n  const zx = quat_1[3] * quat_2[1];\n  const zy = quat_1[3] * quat_2[2];\n  const zz = quat_1[3] * quat_2[3];\n  quat_out[0] = ww - xx - yy - zz;\n  quat_out[1] = wx + xw + yz - zy;\n  quat_out[2] = wy - xz + yw + zx;\n  quat_out[3] = wz + xy - yx + zw;\n}\nfunction orthogonalize3x3(a_3x3, out_3x3) {\n  // copy the matrix\n  for (let i = 0; i < 9; i++) {\n    out_3x3[i] = a_3x3[i];\n  }\n\n  // Pivot the matrix to improve accuracy\n  const scale = createArray(3);\n  const index = createArray(3);\n  let largest;\n\n  // Loop over rows to get implicit scaling information\n  for (let i = 0; i < 3; i++) {\n    const x1 = Math.abs(out_3x3[i * 3]);\n    const x2 = Math.abs(out_3x3[i * 3 + 1]);\n    const x3 = Math.abs(out_3x3[i * 3 + 2]);\n    largest = x2 > x1 ? x2 : x1;\n    largest = x3 > largest ? x3 : largest;\n    scale[i] = 1;\n    if (largest !== 0) {\n      scale[i] /= largest;\n    }\n  }\n\n  // first column\n  const x1 = Math.abs(out_3x3[0]) * scale[0];\n  const x2 = Math.abs(out_3x3[3]) * scale[1];\n  const x3 = Math.abs(out_3x3[6]) * scale[2];\n  index[0] = 0;\n  largest = x1;\n  if (x2 >= largest) {\n    largest = x2;\n    index[0] = 1;\n  }\n  if (x3 >= largest) {\n    index[0] = 2;\n  }\n  if (index[0] !== 0) {\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n    scale[index[0]] = scale[0];\n  }\n\n  // second column\n  const y2 = Math.abs(out_3x3[4]) * scale[1];\n  const y3 = Math.abs(out_3x3[7]) * scale[2];\n  index[1] = 1;\n  largest = y2;\n  if (y3 >= largest) {\n    index[1] = 2;\n    // swap vectors\n    swapColumnsMatrix_nxn(out_3x3, 3, 1, 2);\n  }\n\n  // third column\n  index[2] = 2;\n\n  // A quaternion can only describe a pure rotation, not\n  // a rotation with a flip, therefore the flip must be\n  // removed before the matrix is converted to a quaternion.\n  let flip = 0;\n  if (determinant3x3(out_3x3) < 0) {\n    flip = 1;\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Do orthogonalization using a quaternion intermediate\n  // (this, essentially, does the orthogonalization via\n  // diagonalization of an appropriately constructed symmetric\n  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)\n  const quat = createArray(4);\n  matrix3x3ToQuaternion(out_3x3, quat);\n  quaternionToMatrix3x3(quat, out_3x3);\n\n  // Put the flip back into the orthogonalized matrix.\n  if (flip) {\n    for (let i = 0; i < 9; i++) {\n      out_3x3[i] = -out_3x3[i];\n    }\n  }\n\n  // Undo the pivoting\n  if (index[1] !== 1) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[1], 1);\n  }\n  if (index[0] !== 0) {\n    swapColumnsMatrix_nxn(out_3x3, 3, index[0], 0);\n  }\n}\nfunction diagonalize3x3(a_3x3, w_3, v_3x3) {\n  let i;\n  let j;\n  let k;\n  let maxI;\n  let tmp;\n  let maxVal;\n\n  // a is copied because jacobiN may modify it\n  const copyA = [...a_3x3];\n\n  // diagonalize using Jacobi\n  jacobiN(copyA, 3, w_3, v_3x3);\n\n  // if all the eigenvalues are the same, return identity matrix\n  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {\n    identity3x3(v_3x3);\n    return;\n  }\n\n  // transpose temporarily, it makes it easier to sort the eigenvectors\n  transpose3x3(v_3x3, v_3x3);\n\n  // if two eigenvalues are the same, re-orthogonalize to optimally line\n  // up the eigenvectors with the x, y, and z axes\n  for (i = 0; i < 3; i++) {\n    // two eigenvalues are the same\n    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {\n      // find maximum element of the independent eigenvector\n      maxVal = Math.abs(v_3x3[i * 3]);\n      maxI = 0;\n      for (j = 1; j < 3; j++) {\n        if (maxVal < (tmp = Math.abs(v_3x3[i * 3 + j]))) {\n          maxVal = tmp;\n          maxI = j;\n        }\n      }\n      // swap the eigenvector into its proper position\n      if (maxI !== i) {\n        tmp = w_3[maxI];\n        w_3[maxI] = w_3[i];\n        w_3[i] = tmp;\n        swapRowsMatrix_nxn(v_3x3, 3, i, maxI);\n      }\n      // maximum element of eigenvector should be positive\n      if (v_3x3[maxI * 3 + maxI] < 0) {\n        v_3x3[maxI * 3] = -v_3x3[maxI * 3];\n        v_3x3[maxI * 3 + 1] = -v_3x3[maxI * 3 + 1];\n        v_3x3[maxI * 3 + 2] = -v_3x3[maxI * 3 + 2];\n      }\n\n      // re-orthogonalize the other two eigenvectors\n      j = (maxI + 1) % 3;\n      k = (maxI + 2) % 3;\n      v_3x3[j * 3] = 0.0;\n      v_3x3[j * 3 + 1] = 0.0;\n      v_3x3[j * 3 + 2] = 0.0;\n      v_3x3[j * 3 + j] = 1.0;\n      const vectTmp1 = cross([v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], [v_3x3[j * 3], v_3x3[j * 3 + 1], v_3x3[j * 3 + 2]], []);\n      normalize(vectTmp1);\n      const vectTmp2 = cross(vectTmp1, [v_3x3[maxI * 3], v_3x3[maxI * 3 + 1], v_3x3[maxI * 3 + 2]], []);\n      for (let t = 0; t < 3; t++) {\n        v_3x3[k * 3 + t] = vectTmp1[t];\n        v_3x3[j * 3 + t] = vectTmp2[t];\n      }\n\n      // transpose vectors back to columns\n      transpose3x3(v_3x3, v_3x3);\n      return;\n    }\n  }\n\n  // the three eigenvalues are different, just sort the eigenvectors\n  // to align them with the x, y, and z axes\n\n  // find the vector with the largest x element, make that vector\n  // the first vector\n  maxVal = Math.abs(v_3x3[0]);\n  maxI = 0;\n  for (i = 1; i < 3; i++) {\n    if (maxVal < (tmp = Math.abs(v_3x3[i * 3]))) {\n      maxVal = tmp;\n      maxI = i;\n    }\n  }\n  // swap eigenvalue and eigenvector\n  if (maxI !== 0) {\n    const eigenValTmp = w_3[maxI];\n    w_3[maxI] = w_3[0];\n    w_3[0] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, maxI, 0);\n  }\n  // do the same for the y element\n  if (Math.abs(v_3x3[4]) < Math.abs(v_3x3[7])) {\n    const eigenValTmp = w_3[2];\n    w_3[2] = w_3[1];\n    w_3[1] = eigenValTmp;\n    swapRowsMatrix_nxn(v_3x3, 3, 1, 2);\n  }\n\n  // ensure that the sign of the eigenvectors is correct\n  for (i = 0; i < 2; i++) {\n    if (v_3x3[i * 3 + i] < 0) {\n      v_3x3[i * 3] = -v_3x3[i * 3];\n      v_3x3[i * 3 + 1] = -v_3x3[i * 3 + 1];\n      v_3x3[i * 3 + 2] = -v_3x3[i * 3 + 2];\n    }\n  }\n  // set sign of final eigenvector to ensure that determinant is positive\n  if (determinant3x3(v_3x3) < 0) {\n    v_3x3[6] = -v_3x3[6];\n    v_3x3[7] = -v_3x3[7];\n    v_3x3[8] = -v_3x3[8];\n  }\n\n  // transpose the eigenvectors back again\n  transpose3x3(v_3x3, v_3x3);\n}\nfunction singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {\n  let i;\n  // copy so that A can be used for U or VT without risk\n  const B = [...a_3x3];\n\n  // temporarily flip if determinant is negative\n  const d = determinant3x3(B);\n  if (d < 0) {\n    for (i = 0; i < 9; i++) {\n      B[i] = -B[i];\n    }\n  }\n\n  // orthogonalize, diagonalize, etc.\n  orthogonalize3x3(B, u_3x3);\n  transpose3x3(B, B);\n  multiply3x3_mat3(B, u_3x3, vT_3x3);\n  diagonalize3x3(vT_3x3, w_3, vT_3x3);\n  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);\n  transpose3x3(vT_3x3, vT_3x3);\n\n  // re-create the flip\n  if (d < 0) {\n    w_3[0] = -w_3[0];\n    w_3[1] = -w_3[1];\n    w_3[2] = -w_3[2];\n  }\n}\n\n/**\n * Factor linear equations Ax = b using LU decomposition A = LU. Output factorization LU is in matrix A.\n * @param {Matrix} A square matrix\n * @param {Number} index integer array of pivot indices index[0->n-1]\n * @param {Number} size matrix size\n */\nfunction luFactorLinearSystem(A, index, size) {\n  let i;\n  let j;\n  let k;\n  let largest;\n  let maxI = 0;\n  let sum;\n  let temp1;\n  let temp2;\n  const scale = createArray(size);\n\n  //\n  // Loop over rows to get implicit scaling information\n  //\n  for (i = 0; i < size; i++) {\n    for (largest = 0.0, j = 0; j < size; j++) {\n      if ((temp2 = Math.abs(A[i * size + j])) > largest) {\n        largest = temp2;\n      }\n    }\n    if (largest === 0.0) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    scale[i] = 1.0 / largest;\n  }\n  //\n  // Loop over all columns using Crout's method\n  //\n  for (j = 0; j < size; j++) {\n    for (i = 0; i < j; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < i; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n    }\n    //\n    // Begin search for largest pivot element\n    //\n    for (largest = 0.0, i = j; i < size; i++) {\n      sum = A[i * size + j];\n      for (k = 0; k < j; k++) {\n        sum -= A[i * size + k] * A[k * size + j];\n      }\n      A[i * size + j] = sum;\n      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {\n        largest = temp1;\n        maxI = i;\n      }\n    }\n    //\n    // Check for row interchange\n    //\n    if (j !== maxI) {\n      for (k = 0; k < size; k++) {\n        temp1 = A[maxI * size + k];\n        A[maxI * size + k] = A[j * size + k];\n        A[j * size + k] = temp1;\n      }\n      scale[maxI] = scale[j];\n    }\n    //\n    // Divide by pivot element and perform elimination\n    //\n    index[j] = maxI;\n    if (Math.abs(A[j * size + j]) <= VTK_SMALL_NUMBER) {\n      vtkWarningMacro('Unable to factor linear system');\n      return 0;\n    }\n    if (j !== size - 1) {\n      temp1 = 1.0 / A[j * size + j];\n      for (i = j + 1; i < size; i++) {\n        A[i * size + j] *= temp1;\n      }\n    }\n  }\n  return 1;\n}\nfunction luSolveLinearSystem(A, index, x, size) {\n  let i;\n  let j;\n  let ii;\n  let idx;\n  let sum;\n  //\n  // Proceed with forward and backsubstitution for L and U\n  // matrices.  First, forward substitution.\n  //\n  for (ii = -1, i = 0; i < size; i++) {\n    idx = index[i];\n    sum = x[idx];\n    x[idx] = x[i];\n    if (ii >= 0) {\n      for (j = ii; j <= i - 1; j++) {\n        sum -= A[i * size + j] * x[j];\n      }\n    } else if (sum !== 0.0) {\n      ii = i;\n    }\n    x[i] = sum;\n  }\n  //\n  // Now, back substitution\n  //\n  for (i = size - 1; i >= 0; i--) {\n    sum = x[i];\n    for (j = i + 1; j < size; j++) {\n      sum -= A[i * size + j] * x[j];\n    }\n    x[i] = sum / A[i * size + i];\n  }\n}\nfunction solveLinearSystem(A, x, size) {\n  // if we solving something simple, just solve it\n  if (size === 2) {\n    const y = createArray(2);\n    const det = determinant2x2(A[0], A[1], A[2], A[3]);\n    if (det === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n    y[0] = (A[3] * x[0] - A[1] * x[1]) / det;\n    y[1] = (-(A[2] * x[0]) + A[0] * x[1]) / det;\n    x[0] = y[0];\n    x[1] = y[1];\n    return 1;\n  }\n  if (size === 1) {\n    if (A[0] === 0.0) {\n      // Unable to solve linear system\n      return 0;\n    }\n    x[0] /= A[0];\n    return 1;\n  }\n\n  //\n  // System of equations is not trivial, use Crout's method\n  //\n\n  // Check on allocation of working vectors\n  const index = createArray(size);\n\n  // Factor and solve matrix\n  if (luFactorLinearSystem(A, index, size) === 0) {\n    return 0;\n  }\n  luSolveLinearSystem(A, index, x, size);\n  return 1;\n}\n\n// Note that A is modified during the inversion !\nfunction invertMatrix(A, AI, size) {\n  let index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const tmp1Size = index || createArray(size);\n  const tmp2Size = column || createArray(size);\n\n  // Factor matrix; then begin solving for inverse one column at a time.\n  // Note: tmp1Size returned value is used later, tmp2Size is just working\n  // memory whose values are not used in LUSolveLinearSystem\n  if (luFactorLinearSystem(A, tmp1Size, size) === 0) {\n    return null;\n  }\n  for (let j = 0; j < size; j++) {\n    for (let i = 0; i < size; i++) {\n      tmp2Size[i] = 0.0;\n    }\n    tmp2Size[j] = 1.0;\n    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);\n    for (let i = 0; i < size; i++) {\n      AI[i * size + j] = tmp2Size[i];\n    }\n  }\n  return AI;\n}\nfunction estimateMatrixCondition(A, size) {\n  let minValue = +Number.MAX_VALUE;\n  let maxValue = -Number.MAX_VALUE;\n\n  // find the maximum value\n  for (let i = 0; i < size; i++) {\n    for (let j = i; j < size; j++) {\n      if (Math.abs(A[i * size + j]) > maxValue) {\n        maxValue = Math.abs(A[i * size + j]);\n      }\n    }\n  }\n\n  // find the minimum diagonal value\n  for (let i = 0; i < size; i++) {\n    if (Math.abs(A[i * size + i]) < minValue) {\n      minValue = Math.abs(A[i * size + i]);\n    }\n  }\n  if (minValue === 0.0) {\n    return Number.MAX_VALUE;\n  }\n  return maxValue / minValue;\n}\nfunction jacobi(a_3x3, w, v) {\n  return jacobiN(a_3x3, 3, w, v);\n}\nfunction solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {\n  // check dimensional consistency\n  if (numberOfSamples < xOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n  let i;\n  let j;\n  let k;\n\n  // set up intermediate variables\n  // Allocate matrix to hold X times transpose of X\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  // Allocate the array of eigenvalues and eigenvectors\n  const eigenvals = createArray(xOrder);\n  const eigenvecs = createArray(xOrder * xOrder);\n\n  // Calculate XXt upper half only, due to symmetry\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n\n  // Compute the eigenvectors and eigenvalues\n  jacobiN(XXt, xOrder, eigenvals, eigenvecs);\n\n  // Smallest eigenval is at the end of the list (xOrder-1), and solution is\n  // corresponding eigenvec.\n  for (i = 0; i < xOrder; i++) {\n    mt[i] = eigenvecs[i * xOrder + xOrder - 1];\n  }\n  return 1;\n}\nfunction solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {\n  let checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  // check dimensional consistency\n  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {\n    vtkWarningMacro('Insufficient number of samples. Underdetermined.');\n    return 0;\n  }\n  const homogenFlags = createArray(yOrder);\n  let allHomogeneous = 1;\n  let hmt;\n  let homogRC = 0;\n  let i;\n  let j;\n  let k;\n  let someHomogeneous = 0;\n\n  // Ok, first init some flags check and see if all the systems are homogeneous\n  if (checkHomogeneous) {\n    // If Y' is zero, it's a homogeneous system and can't be solved via\n    // the pseudoinverse method. Detect this case, warn the user, and\n    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't\n    // really make much sense for yOrder to be greater than one in this case,\n    // since that's just yOrder occurrences of a 0 vector on the RHS, but\n    // we allow it anyway. N\n\n    // Initialize homogeneous flags on a per-right-hand-side basis\n    for (j = 0; j < yOrder; j++) {\n      homogenFlags[j] = 1;\n    }\n    for (i = 0; i < numberOfSamples; i++) {\n      for (j = 0; j < yOrder; j++) {\n        if (Math.abs(yt[i * yOrder + j]) > VTK_SMALL_NUMBER) {\n          allHomogeneous = 0;\n          homogenFlags[j] = 0;\n        }\n      }\n    }\n\n    // If we've got one system, and it's homogeneous, do it and bail out quickly.\n    if (allHomogeneous && yOrder === 1) {\n      vtkWarningMacro('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');\n      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);\n    }\n\n    // Ok, we've got more than one system of equations.\n    // Figure out if we need to calculate the homogeneous equation solution for\n    // any of them.\n    if (allHomogeneous) {\n      someHomogeneous = 1;\n    } else {\n      for (j = 0; j < yOrder; j++) {\n        if (homogenFlags[j]) {\n          someHomogeneous = 1;\n        }\n      }\n    }\n  }\n\n  // If necessary, solve the homogeneous problem\n  if (someHomogeneous) {\n    // hmt is the homogeneous equation version of mt, the general solution.\n    // hmt should be xOrder x yOrder, but since we are solving only the homogeneous part, here it is xOrder x 1\n    hmt = createArray(xOrder);\n\n    // Ok, solve the homogeneous problem\n    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);\n  }\n\n  // set up intermediate variables\n  const XXt = createArray(xOrder * xOrder); // size x by x\n  const XXtI = createArray(xOrder * xOrder); // size x by x\n  const XYt = createArray(xOrder * yOrder); // size x by y\n\n  // first find the pseudoinverse matrix\n  for (k = 0; k < numberOfSamples; k++) {\n    for (i = 0; i < xOrder; i++) {\n      // first calculate the XXt matrix, only do the upper half (symmetrical)\n      for (j = i; j < xOrder; j++) {\n        XXt[i * xOrder + j] += xt[k * xOrder + i] * xt[k * xOrder + j];\n      }\n\n      // now calculate the XYt matrix\n      for (j = 0; j < yOrder; j++) {\n        XYt[i * yOrder + j] += xt[k * xOrder + i] * yt[k * yOrder + j];\n      }\n    }\n  }\n\n  // now fill in the lower half of the XXt matrix\n  for (i = 0; i < xOrder; i++) {\n    for (j = 0; j < i; j++) {\n      XXt[i * xOrder + j] = XXt[j * xOrder + i];\n    }\n  }\n  const successFlag = invertMatrix(XXt, XXtI, xOrder);\n\n  // next get the inverse of XXt\n  if (successFlag) {\n    for (i = 0; i < xOrder; i++) {\n      for (j = 0; j < yOrder; j++) {\n        mt[i * yOrder + j] = 0.0;\n        for (k = 0; k < xOrder; k++) {\n          mt[i * yOrder + j] += XXtI[i * xOrder + k] * XYt[k * yOrder + j];\n        }\n      }\n    }\n  }\n\n  // Fix up any of the solutions that correspond to the homogeneous equation\n  // problem.\n  if (someHomogeneous) {\n    for (j = 0; j < yOrder; j++) {\n      if (homogenFlags[j]) {\n        // Fix this one\n        for (i = 0; i < xOrder; i++) {\n          mt[i * yOrder + j] = hmt[i * yOrder];\n        }\n      }\n    }\n  }\n  if (someHomogeneous) {\n    return homogRC && successFlag;\n  }\n  return successFlag;\n}\nfunction hex2float(hexStr) {\n  let outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];\n  switch (hexStr.length) {\n    case 3:\n      // abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;\n      return outFloatArray;\n    case 4:\n      // #abc => #aabbcc\n      outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;\n      outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;\n      outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;\n      return outFloatArray;\n    case 6:\n      // ab01df => #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;\n      return outFloatArray;\n    case 7:\n      // #ab01df\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      return outFloatArray;\n    case 9:\n      // #ab01df00\n      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;\n      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;\n      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;\n      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;\n      return outFloatArray;\n    default:\n      return outFloatArray;\n  }\n}\nfunction rgb2hsv(rgb, hsv) {\n  let h;\n  let s;\n  const [r, g, b] = rgb;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  let cmax = r;\n  let cmin = r;\n  if (g > cmax) {\n    cmax = g;\n  } else if (g < cmin) {\n    cmin = g;\n  }\n  if (b > cmax) {\n    cmax = b;\n  } else if (b < cmin) {\n    cmin = b;\n  }\n  const v = cmax;\n  if (v > 0.0) {\n    s = (cmax - cmin) / cmax;\n  } else {\n    s = 0.0;\n  }\n  if (s > 0) {\n    if (r === cmax) {\n      h = onesixth * (g - b) / (cmax - cmin);\n    } else if (g === cmax) {\n      h = onethird + onesixth * (b - r) / (cmax - cmin);\n    } else {\n      h = twothird + onesixth * (r - g) / (cmax - cmin);\n    }\n    if (h < 0.0) {\n      h += 1.0;\n    }\n  } else {\n    h = 0.0;\n  }\n\n  // Set the values back to the array\n  hsv[0] = h;\n  hsv[1] = s;\n  hsv[2] = v;\n}\nfunction hsv2rgb(hsv, rgb) {\n  const [h, s, v] = hsv;\n  const onethird = 1.0 / 3.0;\n  const onesixth = 1.0 / 6.0;\n  const twothird = 2.0 / 3.0;\n  const fivesixth = 5.0 / 6.0;\n  let r;\n  let g;\n  let b;\n\n  // compute RGB from HSV\n  if (h > onesixth && h <= onethird) {\n    // green/red\n    g = 1.0;\n    r = (onethird - h) / onesixth;\n    b = 0.0;\n  } else if (h > onethird && h <= 0.5) {\n    // green/blue\n    g = 1.0;\n    b = (h - onethird) / onesixth;\n    r = 0.0;\n  } else if (h > 0.5 && h <= twothird) {\n    // blue/green\n    b = 1.0;\n    g = (twothird - h) / onesixth;\n    r = 0.0;\n  } else if (h > twothird && h <= fivesixth) {\n    // blue/red\n    b = 1.0;\n    r = (h - twothird) / onesixth;\n    g = 0.0;\n  } else if (h > fivesixth && h <= 1.0) {\n    // red/blue\n    r = 1.0;\n    b = (1.0 - h) / onesixth;\n    g = 0.0;\n  } else {\n    // red/green\n    r = 1.0;\n    g = h / onesixth;\n    b = 0.0;\n  }\n\n  // add Saturation to the equation.\n  r = s * r + (1.0 - s);\n  g = s * g + (1.0 - s);\n  b = s * b + (1.0 - s);\n  r *= v;\n  g *= v;\n  b *= v;\n\n  // Assign back to the array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction lab2xyz(lab, xyz) {\n  // LAB to XYZ\n  const [L, a, b] = lab;\n  let var_Y = (L + 16) / 116;\n  let var_X = a / 500 + var_Y;\n  let var_Z = var_Y - b / 200;\n  if (var_Y ** 3 > 0.008856) {\n    var_Y **= 3;\n  } else {\n    var_Y = (var_Y - 16.0 / 116.0) / 7.787;\n  }\n  if (var_X ** 3 > 0.008856) {\n    var_X **= 3;\n  } else {\n    var_X = (var_X - 16.0 / 116.0) / 7.787;\n  }\n  if (var_Z ** 3 > 0.008856) {\n    var_Z **= 3;\n  } else {\n    var_Z = (var_Z - 16.0 / 116.0) / 7.787;\n  }\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65\n  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000\n  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089\n}\n\nfunction xyz2lab(xyz, lab) {\n  const [x, y, z] = xyz;\n  const ref_X = 0.9505;\n  const ref_Y = 1.0;\n  const ref_Z = 1.089;\n  let var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65\n  let var_Y = y / ref_Y; // ref_Y = 1.000\n  let var_Z = z / ref_Z; // ref_Z = 1.089\n\n  if (var_X > 0.008856) var_X **= 1.0 / 3.0;else var_X = 7.787 * var_X + 16.0 / 116.0;\n  if (var_Y > 0.008856) var_Y **= 1.0 / 3.0;else var_Y = 7.787 * var_Y + 16.0 / 116.0;\n  if (var_Z > 0.008856) var_Z **= 1.0 / 3.0;else var_Z = 7.787 * var_Z + 16.0 / 116.0;\n  lab[0] = 116 * var_Y - 16;\n  lab[1] = 500 * (var_X - var_Y);\n  lab[2] = 200 * (var_Y - var_Z);\n}\nfunction xyz2rgb(xyz, rgb) {\n  const [x, y, z] = xyz;\n  let r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n  let g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n  let b = x * 0.0557 + y * -0.204 + z * 1.057;\n\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.0031308) r = 1.055 * r ** (1 / 2.4) - 0.055;else r *= 12.92;\n  if (g > 0.0031308) g = 1.055 * g ** (1 / 2.4) - 0.055;else g *= 12.92;\n  if (b > 0.0031308) b = 1.055 * b ** (1 / 2.4) - 0.055;else b *= 12.92;\n\n  // Clip colors. ideally we would do something that is perceptually closest\n  // (since we can see colors outside of the display gamut), but this seems to\n  // work well enough.\n  let maxVal = r;\n  if (maxVal < g) maxVal = g;\n  if (maxVal < b) maxVal = b;\n  if (maxVal > 1.0) {\n    r /= maxVal;\n    g /= maxVal;\n    b /= maxVal;\n  }\n  if (r < 0) r = 0;\n  if (g < 0) g = 0;\n  if (b < 0) b = 0;\n\n  // Push values back to array\n  rgb[0] = r;\n  rgb[1] = g;\n  rgb[2] = b;\n}\nfunction rgb2xyz(rgb, xyz) {\n  let [r, g, b] = rgb;\n  // The following performs a \"gamma correction\" specified by the sRGB color\n  // space.  sRGB is defined by a canonical definition of a display monitor and\n  // has been standardized by the International Electrotechnical Commission (IEC\n  // 61966-2-1).  The nonlinearity of the correction is designed to make the\n  // colors more perceptually uniform.  This color space has been adopted by\n  // several applications including Adobe Photoshop and Microsoft Windows color\n  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable\n  // to assume it is close to this one.\n  if (r > 0.04045) r = ((r + 0.055) / 1.055) ** 2.4;else r /= 12.92;\n  if (g > 0.04045) g = ((g + 0.055) / 1.055) ** 2.4;else g /= 12.92;\n  if (b > 0.04045) b = ((b + 0.055) / 1.055) ** 2.4;else b /= 12.92;\n\n  // Observer. = 2 deg, Illuminant = D65\n  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;\n  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;\n  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;\n}\nfunction rgb2lab(rgb, lab) {\n  const xyz = [0, 0, 0];\n  rgb2xyz(rgb, xyz);\n  xyz2lab(xyz, lab);\n}\nfunction lab2rgb(lab, rgb) {\n  const xyz = [0, 0, 0];\n  lab2xyz(lab, xyz);\n  xyz2rgb(xyz, rgb);\n}\nfunction uninitializeBounds(bounds) {\n  bounds[0] = 1.0;\n  bounds[1] = -1.0;\n  bounds[2] = 1.0;\n  bounds[3] = -1.0;\n  bounds[4] = 1.0;\n  bounds[5] = -1.0;\n  return bounds;\n}\nfunction areBoundsInitialized(bounds) {\n  return !(bounds[1] - bounds[0] < 0.0);\n}\n\n/**\n * @deprecated please use vtkBoundingBox.addPoints(vtkBoundingBox.reset([]), points)\n */\nfunction computeBoundsFromPoints(point1, point2, bounds) {\n  bounds[0] = Math.min(point1[0], point2[0]);\n  bounds[1] = Math.max(point1[0], point2[0]);\n  bounds[2] = Math.min(point1[1], point2[1]);\n  bounds[3] = Math.max(point1[1], point2[1]);\n  bounds[4] = Math.min(point1[2], point2[2]);\n  bounds[5] = Math.max(point1[2], point2[2]);\n  return bounds;\n}\nfunction clampValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    return minValue;\n  }\n  if (value > maxValue) {\n    return maxValue;\n  }\n  return value;\n}\nfunction clampVector(vector, minVector, maxVector) {\n  let out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [0, 0, 0];\n  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);\n  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);\n  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);\n  return out;\n}\nfunction clampAndNormalizeValue(value, range) {\n  let result = 0;\n  if (range[0] !== range[1]) {\n    // clamp\n    if (value < range[0]) {\n      result = range[0];\n    } else if (value > range[1]) {\n      result = range[1];\n    } else {\n      result = value;\n    }\n    // normalize\n    result = (result - range[0]) / (range[1] - range[0]);\n  }\n  return result;\n}\nconst getScalarTypeFittingRange = notImplemented('GetScalarTypeFittingRange');\nconst getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');\nfunction extentIsWithinOtherExtent(extent1, extent2) {\n  if (!extent1 || !extent2) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {\n  if (!bounds1_6 || !bounds2_6) {\n    return 0;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction pointIsWithinBounds(point_3, bounds_6, delta_3) {\n  if (!point_3 || !bounds_6 || !delta_3) {\n    return 0;\n  }\n  for (let i = 0; i < 3; i++) {\n    if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction solve3PointCircle(p1, p2, p3, center) {\n  const v21 = createArray(3);\n  const v32 = createArray(3);\n  const v13 = createArray(3);\n  const v12 = createArray(3);\n  const v23 = createArray(3);\n  const v31 = createArray(3);\n  for (let i = 0; i < 3; ++i) {\n    v21[i] = p1[i] - p2[i];\n    v32[i] = p2[i] - p3[i];\n    v13[i] = p3[i] - p1[i];\n    v12[i] = -v21[i];\n    v23[i] = -v32[i];\n    v31[i] = -v13[i];\n  }\n  const norm12 = norm(v12);\n  const norm23 = norm(v23);\n  const norm13 = norm(v13);\n  const crossv21v32 = createArray(3);\n  cross(v21, v32, crossv21v32);\n  const normCross = norm(crossv21v32);\n  const radius = norm12 * norm23 * norm13 / (2 * normCross);\n  const normCross22 = 2 * normCross * normCross;\n  const alpha = norm23 * norm23 * dot(v21, v31) / normCross22;\n  const beta = norm13 * norm13 * dot(v12, v32) / normCross22;\n  const gamma = norm12 * norm12 * dot(v13, v23) / normCross22;\n  for (let i = 0; i < 3; ++i) {\n    center[i] = alpha * p1[i] + beta * p2[i] + gamma * p3[i];\n  }\n  return radius;\n}\nconst inf = Infinity;\nconst negInf = -Infinity;\nconst isInf = value => !Number.isFinite(value);\nconst {\n  isFinite,\n  isNaN\n} = Number;\nconst isNan = isNaN;\n\n// JavaScript - add-on ----------------------\n\nfunction createUninitializedBounds() {\n  return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE,\n  // X\n  Number.MAX_VALUE, -Number.MAX_VALUE,\n  // Y\n  Number.MAX_VALUE, -Number.MAX_VALUE // Z\n  ]);\n}\n\nfunction getMajorAxisIndex(vector) {\n  let maxValue = -1;\n  let axisIndex = -1;\n  for (let i = 0; i < vector.length; i++) {\n    const value = Math.abs(vector[i]);\n    if (value > maxValue) {\n      axisIndex = i;\n      maxValue = value;\n    }\n  }\n  return axisIndex;\n}\n\n// Return the closest orthogonal matrix of 1, -1 and 0\n// It works for both column major and row major matrices\n// This function iteratively associate a column with a row by choosing\n// the greatest absolute value from the remaining row and columns\n// For each association, a -1 or a 1 is set in the output, depending on\n// the sign of the value in the original matrix\nfunction getSparseOrthogonalMatrix(matrix) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  // Initialize rows and columns to available indices\n  const rows = new Array(n);\n  const cols = new Array(n);\n  for (let i = 0; i < n; ++i) {\n    rows[i] = i;\n    cols[i] = i;\n  }\n  // No need for the last iteration: i = 0\n  for (let i = n - 1; i > 0; i--) {\n    // Loop invariant:\n    // rows[0:i] and cols[0:i] contain the remaining rows and columns\n    // rows]i:n[ and cols]i:n[ contain the associations found (rows[k] is associated with cols[k])\n    let bestValue = -Infinity;\n    let bestRowI = 0;\n    let bestColI = 0;\n    for (let rowI = 0; rowI <= i; ++rowI) {\n      const row = rows[rowI];\n      for (let colI = 0; colI <= i; ++colI) {\n        const col = cols[colI];\n        const absVal = Math.abs(matrix[row + n * col]);\n        if (absVal > bestValue) {\n          bestValue = absVal;\n          bestRowI = rowI;\n          bestColI = colI;\n        }\n      }\n    }\n    // Found an association between rows[bestRowI] and cols[bestColI]\n    // Put both at the end of their array by swapping with i\n    [rows[i], rows[bestRowI]] = [rows[bestRowI], rows[i]];\n    [cols[i], cols[bestColI]] = [cols[bestColI], cols[i]];\n  }\n\n  // Convert row/column association to a matrix\n  const output = new Array(n * n).fill(0);\n  for (let i = 0; i < n; ++i) {\n    const matIdx = rows[i] + n * cols[i];\n    output[matIdx] = matrix[matIdx] < 0 ? -1 : 1;\n  }\n  return output;\n}\nfunction floatToHex2(value) {\n  const integer = Math.floor(value * 255);\n  if (integer > 15) {\n    return integer.toString(16);\n  }\n  return `0${integer.toString(16)}`;\n}\nfunction floatRGB2HexCode(rgbArray) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';\n  return `${prefix}${rgbArray.map(floatToHex2).join('')}`;\n}\nfunction floatToChar(f) {\n  return Math.round(f * 255);\n}\nfunction float2CssRGBA(rgbArray) {\n  if (rgbArray.length === 3) {\n    return `rgb(${rgbArray.map(floatToChar).join(', ')})`;\n  }\n  return `rgba(${floatToChar(rgbArray[0] || 0)}, ${floatToChar(rgbArray[1] || 0)}, ${floatToChar(rgbArray[2] || 0)}, ${rgbArray[3] || 0})`;\n}\n\n// ----------------------------------------------------------------------------\n// Only Static API\n// ----------------------------------------------------------------------------\n\nvar vtkMath = {\n  Pi,\n  radiansFromDegrees,\n  degreesFromRadians,\n  round,\n  floor,\n  ceil,\n  ceilLog2,\n  min,\n  max,\n  arrayMin,\n  arrayMax,\n  arrayRange,\n  isPowerOfTwo,\n  nearestPowerOfTwo,\n  factorial,\n  binomial,\n  beginCombination,\n  nextCombination,\n  randomSeed,\n  getSeed,\n  random,\n  gaussian,\n  add,\n  subtract,\n  multiplyScalar,\n  multiplyScalar2D,\n  multiplyAccumulate,\n  multiplyAccumulate2D,\n  dot,\n  outer,\n  cross,\n  norm,\n  normalize,\n  perpendiculars,\n  projectVector,\n  projectVector2D,\n  distance2BetweenPoints,\n  angleBetweenVectors,\n  gaussianAmplitude,\n  gaussianWeight,\n  dot2D,\n  outer2D,\n  norm2D,\n  normalize2D,\n  determinant2x2,\n  LUFactor3x3,\n  LUSolve3x3,\n  linearSolve3x3,\n  multiply3x3_vect3,\n  multiply3x3_mat3,\n  multiplyMatrix,\n  transpose3x3,\n  invert3x3,\n  identity3x3,\n  identity,\n  isIdentity,\n  isIdentity3x3,\n  determinant3x3,\n  quaternionToMatrix3x3,\n  areEquals,\n  areMatricesEqual,\n  roundNumber,\n  roundVector,\n  matrix3x3ToQuaternion,\n  multiplyQuaternion,\n  orthogonalize3x3,\n  diagonalize3x3,\n  singularValueDecomposition3x3,\n  solveLinearSystem,\n  invertMatrix,\n  luFactorLinearSystem,\n  luSolveLinearSystem,\n  estimateMatrixCondition,\n  jacobi,\n  jacobiN,\n  solveHomogeneousLeastSquares,\n  solveLeastSquares,\n  hex2float,\n  rgb2hsv,\n  hsv2rgb,\n  lab2xyz,\n  xyz2lab,\n  xyz2rgb,\n  rgb2xyz,\n  rgb2lab,\n  lab2rgb,\n  uninitializeBounds,\n  areBoundsInitialized,\n  computeBoundsFromPoints,\n  clampValue,\n  clampVector,\n  clampAndNormalizeValue,\n  getScalarTypeFittingRange,\n  getAdjustedScalarRange,\n  extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds,\n  pointIsWithinBounds,\n  solve3PointCircle,\n  inf,\n  negInf,\n  isInf,\n  isNan: isNaN,\n  isNaN,\n  isFinite,\n  // JS add-on\n  createUninitializedBounds,\n  getMajorAxisIndex,\n  getSparseOrthogonalMatrix,\n  floatToHex2,\n  floatRGB2HexCode,\n  float2CssRGBA\n};\n\nvar vtkMath$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createArray: createArray,\n  Pi: Pi,\n  radiansFromDegrees: radiansFromDegrees,\n  degreesFromRadians: degreesFromRadians,\n  round: round,\n  floor: floor,\n  ceil: ceil,\n  min: min,\n  max: max,\n  arrayMin: arrayMin,\n  arrayMax: arrayMax,\n  arrayRange: arrayRange,\n  ceilLog2: ceilLog2,\n  factorial: factorial,\n  nearestPowerOfTwo: nearestPowerOfTwo,\n  isPowerOfTwo: isPowerOfTwo,\n  binomial: binomial,\n  beginCombination: beginCombination,\n  nextCombination: nextCombination,\n  randomSeed: randomSeed,\n  getSeed: getSeed,\n  random: random,\n  gaussian: gaussian,\n  add: add,\n  subtract: subtract,\n  multiplyScalar: multiplyScalar,\n  multiplyScalar2D: multiplyScalar2D,\n  multiplyAccumulate: multiplyAccumulate,\n  multiplyAccumulate2D: multiplyAccumulate2D,\n  dot: dot,\n  outer: outer,\n  cross: cross,\n  norm: norm,\n  normalize: normalize,\n  perpendiculars: perpendiculars,\n  projectVector: projectVector,\n  dot2D: dot2D,\n  projectVector2D: projectVector2D,\n  distance2BetweenPoints: distance2BetweenPoints,\n  angleBetweenVectors: angleBetweenVectors,\n  signedAngleBetweenVectors: signedAngleBetweenVectors,\n  gaussianAmplitude: gaussianAmplitude,\n  gaussianWeight: gaussianWeight,\n  outer2D: outer2D,\n  norm2D: norm2D,\n  normalize2D: normalize2D,\n  rowsToMat4: rowsToMat4,\n  columnsToMat4: columnsToMat4,\n  rowsToMat3: rowsToMat3,\n  columnsToMat3: columnsToMat3,\n  determinant2x2: determinant2x2,\n  LUFactor3x3: LUFactor3x3,\n  LUSolve3x3: LUSolve3x3,\n  linearSolve3x3: linearSolve3x3,\n  multiply3x3_vect3: multiply3x3_vect3,\n  multiply3x3_mat3: multiply3x3_mat3,\n  multiplyMatrix: multiplyMatrix,\n  transpose3x3: transpose3x3,\n  invert3x3: invert3x3,\n  determinant3x3: determinant3x3,\n  areEquals: areEquals,\n  areMatricesEqual: areMatricesEqual,\n  identity3x3: identity3x3,\n  identity: identity,\n  isIdentity: isIdentity,\n  isIdentity3x3: isIdentity3x3,\n  quaternionToMatrix3x3: quaternionToMatrix3x3,\n  roundNumber: roundNumber,\n  roundVector: roundVector,\n  jacobiN: jacobiN,\n  matrix3x3ToQuaternion: matrix3x3ToQuaternion,\n  multiplyQuaternion: multiplyQuaternion,\n  orthogonalize3x3: orthogonalize3x3,\n  diagonalize3x3: diagonalize3x3,\n  singularValueDecomposition3x3: singularValueDecomposition3x3,\n  luFactorLinearSystem: luFactorLinearSystem,\n  luSolveLinearSystem: luSolveLinearSystem,\n  solveLinearSystem: solveLinearSystem,\n  invertMatrix: invertMatrix,\n  estimateMatrixCondition: estimateMatrixCondition,\n  jacobi: jacobi,\n  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,\n  solveLeastSquares: solveLeastSquares,\n  hex2float: hex2float,\n  rgb2hsv: rgb2hsv,\n  hsv2rgb: hsv2rgb,\n  lab2xyz: lab2xyz,\n  xyz2lab: xyz2lab,\n  xyz2rgb: xyz2rgb,\n  rgb2xyz: rgb2xyz,\n  rgb2lab: rgb2lab,\n  lab2rgb: lab2rgb,\n  uninitializeBounds: uninitializeBounds,\n  areBoundsInitialized: areBoundsInitialized,\n  computeBoundsFromPoints: computeBoundsFromPoints,\n  clampValue: clampValue,\n  clampVector: clampVector,\n  clampAndNormalizeValue: clampAndNormalizeValue,\n  getScalarTypeFittingRange: getScalarTypeFittingRange,\n  getAdjustedScalarRange: getAdjustedScalarRange,\n  extentIsWithinOtherExtent: extentIsWithinOtherExtent,\n  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,\n  pointIsWithinBounds: pointIsWithinBounds,\n  solve3PointCircle: solve3PointCircle,\n  inf: inf,\n  negInf: negInf,\n  isInf: isInf,\n  isFinite: isFinite,\n  isNaN: isNaN,\n  isNan: isNan,\n  createUninitializedBounds: createUninitializedBounds,\n  getMajorAxisIndex: getMajorAxisIndex,\n  getSparseOrthogonalMatrix: getSparseOrthogonalMatrix,\n  floatToHex2: floatToHex2,\n  floatRGB2HexCode: floatRGB2HexCode,\n  float2CssRGBA: float2CssRGBA,\n  'default': vtkMath\n});\n\nexport { max as $, degreesFromRadians as A, areEquals as B, clampValue as C, arrayRange as D, getMajorAxisIndex as E, createUninitializedBounds as F, isIdentity3x3 as G, identity as H, multiplyMatrix as I, floor as J, isInf as K, rgb2hsv as L, rgb2lab as M, lab2rgb as N, round as O, normalize2D as P, nearestPowerOfTwo as Q, multiply3x3_vect3 as R, getSparseOrthogonalMatrix as S, areBoundsInitialized as T, isPowerOfTwo as U, angleBetweenVectors as V, signedAngleBetweenVectors as W, createArray as X, Pi as Y, ceil as Z, min as _, areMatricesEqual as a, float2CssRGBA as a$, arrayMin as a0, arrayMax as a1, ceilLog2 as a2, factorial as a3, binomial as a4, beginCombination as a5, nextCombination as a6, randomSeed as a7, getSeed as a8, gaussian as a9, diagonalize3x3 as aA, singularValueDecomposition3x3 as aB, luFactorLinearSystem as aC, luSolveLinearSystem as aD, invertMatrix as aE, estimateMatrixCondition as aF, solveHomogeneousLeastSquares as aG, solveLeastSquares as aH, hex2float as aI, lab2xyz as aJ, xyz2lab as aK, xyz2rgb as aL, rgb2xyz as aM, computeBoundsFromPoints as aN, clampAndNormalizeValue as aO, getScalarTypeFittingRange as aP, getAdjustedScalarRange as aQ, extentIsWithinOtherExtent as aR, boundsIsWithinOtherBounds as aS, pointIsWithinBounds as aT, solve3PointCircle as aU, inf as aV, negInf as aW, isFinite as aX, isNaN as aY, floatToHex2 as aZ, floatRGB2HexCode as a_, multiplyScalar2D as aa, multiplyAccumulate2D as ab, outer as ac, projectVector as ad, dot2D as ae, projectVector2D as af, gaussianAmplitude as ag, gaussianWeight as ah, outer2D as ai, norm2D as aj, rowsToMat4 as ak, columnsToMat4 as al, columnsToMat3 as am, LUFactor3x3 as an, LUSolve3x3 as ao, linearSolve3x3 as ap, multiply3x3_mat3 as aq, transpose3x3 as ar, invert3x3 as as, identity3x3 as at, isIdentity as au, quaternionToMatrix3x3 as av, roundNumber as aw, matrix3x3ToQuaternion as ax, multiplyQuaternion as ay, orthogonalize3x3 as az, roundVector as b, clampVector as c, dot as d, distance2BetweenPoints as e, vtkMath as f, solveLinearSystem as g, hsv2rgb as h, isNan as i, cross as j, add as k, normalize as l, multiplyAccumulate as m, norm as n, determinant2x2 as o, jacobiN as p, perpendiculars as q, radiansFromDegrees as r, subtract as s, jacobi as t, uninitializeBounds as u, vtkMath$1 as v, multiplyScalar as w, random as x, determinant3x3 as y, rowsToMat3 as z };\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import DeepEqual from 'fast-deep-equal';\nimport vtk, { vtkGlobal } from './vtk.js';\nimport ClassHierarchy from './Common/Core/ClassHierarchy.js';\n\n/**\n * macros.js is the old macro.js.\n * The name change is so we do not get eaten by babel-plugin-macros.\n */\nlet globalMTime = 0;\nconst VOID = Symbol('void');\nfunction getCurrentGlobalMTime() {\n  return globalMTime;\n}\n\n// ----------------------------------------------------------------------------\n// Logging function calls\n// ----------------------------------------------------------------------------\n/* eslint-disable no-prototype-builtins                                      */\n\nconst fakeConsole = {};\nfunction noOp() {}\nconst consoleMethods = ['log', 'debug', 'info', 'warn', 'error', 'time', 'timeEnd', 'group', 'groupEnd'];\nconsoleMethods.forEach(methodName => {\n  fakeConsole[methodName] = noOp;\n});\nvtkGlobal.console = console.hasOwnProperty('log') ? console : fakeConsole;\nconst loggerFunctions = {\n  debug: noOp,\n  // Don't print debug by default\n  error: vtkGlobal.console.error || noOp,\n  info: vtkGlobal.console.info || noOp,\n  log: vtkGlobal.console.log || noOp,\n  warn: vtkGlobal.console.warn || noOp\n};\nfunction setLoggerFunction(name, fn) {\n  if (loggerFunctions[name]) {\n    loggerFunctions[name] = fn || noOp;\n  }\n}\nfunction vtkLogMacro() {\n  loggerFunctions.log(...arguments);\n}\nfunction vtkInfoMacro() {\n  loggerFunctions.info(...arguments);\n}\nfunction vtkDebugMacro() {\n  loggerFunctions.debug(...arguments);\n}\nfunction vtkErrorMacro() {\n  loggerFunctions.error(...arguments);\n}\nfunction vtkWarningMacro() {\n  loggerFunctions.warn(...arguments);\n}\nconst ERROR_ONCE_MAP = {};\nfunction vtkOnceErrorMacro(str) {\n  if (!ERROR_ONCE_MAP[str]) {\n    loggerFunctions.error(str);\n    ERROR_ONCE_MAP[str] = true;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// TypedArray\n// ----------------------------------------------------------------------------\n\nconst TYPED_ARRAYS = Object.create(null);\nTYPED_ARRAYS.Float32Array = Float32Array;\nTYPED_ARRAYS.Float64Array = Float64Array;\nTYPED_ARRAYS.Uint8Array = Uint8Array;\nTYPED_ARRAYS.Int8Array = Int8Array;\nTYPED_ARRAYS.Uint16Array = Uint16Array;\nTYPED_ARRAYS.Int16Array = Int16Array;\nTYPED_ARRAYS.Uint32Array = Uint32Array;\nTYPED_ARRAYS.Int32Array = Int32Array;\nTYPED_ARRAYS.Uint8ClampedArray = Uint8ClampedArray;\ntry {\n  TYPED_ARRAYS.BigInt64Array = BigInt64Array;\n  TYPED_ARRAYS.BigUint64Array = BigUint64Array;\n} catch {\n  // ignore\n}\nfunction newTypedArray(type) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return new (TYPED_ARRAYS[type] || Float64Array)(...args);\n}\nfunction newTypedArrayFrom(type) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  return (TYPED_ARRAYS[type] || Float64Array).from(...args);\n}\n\n// ----------------------------------------------------------------------------\n// capitilize provided string\n// ----------------------------------------------------------------------------\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction _capitalize(str) {\n  return capitalize(str[0] === '_' ? str.slice(1) : str);\n}\nfunction uncapitalize(str) {\n  return str.charAt(0).toLowerCase() + str.slice(1);\n}\n\n// ----------------------------------------------------------------------------\n// Convert byte size into a well formatted string\n// ----------------------------------------------------------------------------\n\nfunction formatBytesToProperUnit(size) {\n  let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  let chunkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n  const units = ['TB', 'GB', 'MB', 'KB'];\n  let value = Number(size);\n  let currentUnit = 'B';\n  while (value > chunkSize) {\n    value /= chunkSize;\n    currentUnit = units.pop();\n  }\n  return `${value.toFixed(precision)} ${currentUnit}`;\n}\n\n// ----------------------------------------------------------------------------\n// Convert thousand number with proper separator\n// ----------------------------------------------------------------------------\n\nfunction formatNumbersWithThousandSeparator(n) {\n  let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n  const sections = [];\n  let size = n;\n  while (size > 1000) {\n    sections.push(`000${size % 1000}`.slice(-3));\n    size = Math.floor(size / 1000);\n  }\n  if (size > 0) {\n    sections.push(size);\n  }\n  sections.reverse();\n  return sections.join(separator);\n}\n\n// ----------------------------------------------------------------------------\n// Array helper\n// ----------------------------------------------------------------------------\n\nfunction safeArrays(model) {\n  Object.keys(model).forEach(key => {\n    if (Array.isArray(model[key])) {\n      model[key] = [].concat(model[key]);\n    }\n  });\n}\nfunction isTypedArray(value) {\n  return Object.values(TYPED_ARRAYS).some(ctor => value instanceof ctor);\n}\n\n// ----------------------------------------------------------------------------\n// shallow equals\n// ----------------------------------------------------------------------------\n\nfunction shallowEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n// ----------------------------------------------------------------------------\n\nfunction enumToString(e, value) {\n  return Object.keys(e).find(key => e[key] === value);\n}\nfunction getStateArrayMapFunc(item) {\n  if (item && item.isA) {\n    return item.getState();\n  }\n  return item;\n}\n\n// ----------------------------------------------------------------------------\n// setImmediate\n// ----------------------------------------------------------------------------\n\nfunction setImmediateVTK(fn) {\n  setTimeout(fn, 0);\n}\n\n// ----------------------------------------------------------------------------\n// measurePromiseExecution\n//\n// Measures the time it takes for a promise to finish from\n//   the time this function is invoked.\n// The callback receives the time it took for the promise to resolve or reject.\n// ----------------------------------------------------------------------------\n\nfunction measurePromiseExecution(promise, callback) {\n  const start = performance.now();\n  promise.finally(() => {\n    const delta = performance.now() - start;\n    callback(delta);\n  });\n}\n\n// ----------------------------------------------------------------------------\n// vtkObject: modified(), onModified(callback), delete()\n// ----------------------------------------------------------------------------\n\nfunction obj() {\n  let publicAPI = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Ensure each instance as a unique ref of array\n  safeArrays(model);\n  const callbacks = [];\n  if (!Number.isInteger(model.mtime)) {\n    model.mtime = ++globalMTime;\n  }\n  if (!('classHierarchy' in model)) {\n    model.classHierarchy = new ClassHierarchy('vtkObject');\n  } else if (!(model.classHierarchy instanceof ClassHierarchy)) {\n    const hierarchy = new ClassHierarchy();\n    for (let i = 0; i < model.classHierarchy.length; i++) {\n      hierarchy.push(model.classHierarchy[i]);\n    }\n    model.classHierarchy = hierarchy;\n  }\n  function off(index) {\n    callbacks[index] = null;\n  }\n  function on(index) {\n    function unsubscribe() {\n      off(index);\n    }\n    return Object.freeze({\n      unsubscribe\n    });\n  }\n  publicAPI.isDeleted = () => !!model.deleted;\n  publicAPI.modified = otherMTime => {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (otherMTime && otherMTime < publicAPI.getMTime()) {\n      return;\n    }\n    model.mtime = ++globalMTime;\n    callbacks.forEach(callback => callback && callback(publicAPI));\n  };\n  publicAPI.onModified = callback => {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return null;\n    }\n    const index = callbacks.length;\n    callbacks.push(callback);\n    return on(index);\n  };\n  publicAPI.getMTime = () => model.mtime;\n  publicAPI.isA = className => {\n    let count = model.classHierarchy.length;\n    // we go backwards as that is more likely for\n    // early termination\n    while (count--) {\n      if (model.classHierarchy[count] === className) {\n        return true;\n      }\n    }\n    return false;\n  };\n  publicAPI.getClassName = function () {\n    let depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return model.classHierarchy[model.classHierarchy.length - 1 - depth];\n  };\n  publicAPI.set = function () {\n    let map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let noWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let noFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let ret = false;\n    Object.keys(map).forEach(name => {\n      const fn = noFunction ? null : publicAPI[`set${capitalize(name)}`];\n      if (fn && Array.isArray(map[name]) && fn.length > 1) {\n        ret = fn(...map[name]) || ret;\n      } else if (fn) {\n        ret = fn(map[name]) || ret;\n      } else {\n        // Set data on model directly\n        if (['mtime'].indexOf(name) === -1 && !noWarning) {\n          vtkWarningMacro(`Warning: Set value to model directly ${name}, ${map[name]}`);\n        }\n        ret = model[name] !== map[name] || ret;\n        model[name] = map[name];\n      }\n    });\n    return ret;\n  };\n  publicAPI.get = function () {\n    for (var _len3 = arguments.length, list = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      list[_key3] = arguments[_key3];\n    }\n    if (!list.length) {\n      return model;\n    }\n    const subset = {};\n    list.forEach(name => {\n      subset[name] = model[name];\n    });\n    return subset;\n  };\n  publicAPI.getReferenceByName = val => model[val];\n  publicAPI.delete = () => {\n    Object.keys(model).forEach(field => delete model[field]);\n    callbacks.forEach((el, index) => off(index));\n\n    // Flag the instance being deleted\n    model.deleted = true;\n  };\n\n  // Add serialization support\n  publicAPI.getState = () => {\n    if (model.deleted) {\n      return null;\n    }\n    const jsonArchive = {\n      ...model,\n      vtkClass: publicAPI.getClassName()\n    };\n\n    // Convert every vtkObject to its serializable form\n    Object.keys(jsonArchive).forEach(keyName => {\n      if (jsonArchive[keyName] === null || jsonArchive[keyName] === undefined || keyName[0] === '_' // protected members start with _\n      ) {\n        delete jsonArchive[keyName];\n      } else if (jsonArchive[keyName].isA) {\n        jsonArchive[keyName] = jsonArchive[keyName].getState();\n      } else if (Array.isArray(jsonArchive[keyName])) {\n        jsonArchive[keyName] = jsonArchive[keyName].map(getStateArrayMapFunc);\n      } else if (isTypedArray(jsonArchive[keyName])) {\n        jsonArchive[keyName] = Array.from(jsonArchive[keyName]);\n      }\n    });\n\n    // Sort resulting object by key name\n    const sortedObj = {};\n    Object.keys(jsonArchive).sort().forEach(name => {\n      sortedObj[name] = jsonArchive[name];\n    });\n\n    // Remove mtime\n    if (sortedObj.mtime) {\n      delete sortedObj.mtime;\n    }\n    return sortedObj;\n  };\n\n  // Add shallowCopy(otherInstance) support\n  publicAPI.shallowCopy = function (other) {\n    let debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (other.getClassName() !== publicAPI.getClassName()) {\n      throw new Error(`Cannot ShallowCopy ${other.getClassName()} into ${publicAPI.getClassName()}`);\n    }\n    const otherModel = other.get();\n    const keyList = Object.keys(model).sort();\n    const otherKeyList = Object.keys(otherModel).sort();\n    otherKeyList.forEach(key => {\n      const keyIdx = keyList.indexOf(key);\n      if (keyIdx === -1) {\n        if (debug) {\n          vtkDebugMacro(`add ${key} in shallowCopy`);\n        }\n      } else {\n        keyList.splice(keyIdx, 1);\n      }\n      model[key] = otherModel[key];\n    });\n    if (keyList.length && debug) {\n      vtkDebugMacro(`Untouched keys: ${keyList.join(', ')}`);\n    }\n    publicAPI.modified();\n  };\n\n  // This function will get called when one invoke JSON.stringify(vtkObject)\n  // JSON.stringify will only stringify the return value of this function\n  publicAPI.toJSON = function vtkObjToJSON() {\n    return publicAPI.getState();\n  };\n\n  // Allow usage as decorator\n  return publicAPI;\n}\n\n// ----------------------------------------------------------------------------\n// getXXX: add getters\n// ----------------------------------------------------------------------------\n\nconst objectGetterMap = {\n  object(publicAPI, model, field) {\n    return function getter() {\n      return {\n        ...model[field.name]\n      };\n    };\n  }\n};\nfunction get(publicAPI, model, fieldNames) {\n  fieldNames.forEach(field => {\n    if (typeof field === 'object') {\n      const getter = objectGetterMap[field.type];\n      if (getter) {\n        publicAPI[`get${_capitalize(field.name)}`] = getter(publicAPI, model, field);\n      } else {\n        publicAPI[`get${_capitalize(field.name)}`] = () => model[field.name];\n      }\n    } else {\n      publicAPI[`get${_capitalize(field)}`] = () => model[field];\n    }\n  });\n}\n\n// ----------------------------------------------------------------------------\n// setXXX: add setters\n// ----------------------------------------------------------------------------\n\nconst objectSetterMap = {\n  enum(publicAPI, model, field) {\n    const onChanged = `_on${_capitalize(field.name)}Changed`;\n    return value => {\n      if (typeof value === 'string') {\n        if (field.enum[value] !== undefined) {\n          if (model[field.name] !== field.enum[value]) {\n            model[field.name] = field.enum[value];\n            publicAPI.modified();\n            return true;\n          }\n          return false;\n        }\n        vtkErrorMacro(`Set Enum with invalid argument ${field}, ${value}`);\n        throw new RangeError('Set Enum with invalid string argument');\n      }\n      if (typeof value === 'number') {\n        if (model[field.name] !== value) {\n          if (Object.keys(field.enum).map(key => field.enum[key]).indexOf(value) !== -1) {\n            const previousValue = model[field.name];\n            model[field.name] = value;\n            model[onChanged]?.(publicAPI, model, value, previousValue);\n            publicAPI.modified();\n            return true;\n          }\n          vtkErrorMacro(`Set Enum outside numeric range ${field}, ${value}`);\n          throw new RangeError('Set Enum outside numeric range');\n        }\n        return false;\n      }\n      vtkErrorMacro(`Set Enum with invalid argument (String/Number) ${field}, ${value}`);\n      throw new TypeError('Set Enum with invalid argument (String/Number)');\n    };\n  },\n  object(publicAPI, model, field) {\n    const onChanged = `_on${_capitalize(field.name)}Changed`;\n    return value => {\n      if (!DeepEqual(model[field.name], value)) {\n        const previousValue = model[field.name];\n        model[field.name] = value;\n        model[onChanged]?.(publicAPI, model, value, previousValue);\n        publicAPI.modified();\n        return true;\n      }\n      return false;\n    };\n  }\n};\nfunction findSetter(field) {\n  if (typeof field === 'object') {\n    const fn = objectSetterMap[field.type];\n    if (fn) {\n      return (publicAPI, model) => fn(publicAPI, model, field);\n    }\n    vtkErrorMacro(`No setter for field ${field}`);\n    throw new TypeError('No setter for field');\n  }\n  return function getSetter(publicAPI, model) {\n    const onChanged = `_on${_capitalize(field)}Changed`;\n    return function setter(value) {\n      if (model.deleted) {\n        vtkErrorMacro('instance deleted - cannot call any method');\n        return false;\n      }\n      if (model[field] !== value) {\n        const previousValue = model[field.name];\n        model[field] = value;\n        model[onChanged]?.(publicAPI, model, value, previousValue);\n        publicAPI.modified();\n        return true;\n      }\n      return false;\n    };\n  };\n}\nfunction set(publicAPI, model, fields) {\n  fields.forEach(field => {\n    if (typeof field === 'object') {\n      publicAPI[`set${_capitalize(field.name)}`] = findSetter(field)(publicAPI, model);\n    } else {\n      publicAPI[`set${_capitalize(field)}`] = findSetter(field)(publicAPI, model);\n    }\n  });\n}\n\n// ----------------------------------------------------------------------------\n// set/get XXX: add both setters and getters\n// ----------------------------------------------------------------------------\n\nfunction setGet(publicAPI, model, fieldNames) {\n  get(publicAPI, model, fieldNames);\n  set(publicAPI, model, fieldNames);\n}\n\n// ----------------------------------------------------------------------------\n// getXXX: add getters for object of type array with copy to be safe\n// getXXXByReference: add getters for object of type array without copy\n// ----------------------------------------------------------------------------\n\nfunction getArray(publicAPI, model, fieldNames) {\n  fieldNames.forEach(field => {\n    publicAPI[`get${_capitalize(field)}`] = () => model[field] ? Array.from(model[field]) : model[field];\n    publicAPI[`get${_capitalize(field)}ByReference`] = () => model[field];\n  });\n}\n\n// ----------------------------------------------------------------------------\n// setXXX: add setter for object of type array\n// if 'defaultVal' is supplied, shorter arrays will be padded to 'size' with 'defaultVal'\n// set...From: fast path to copy the content of an array to the current one without call to modified.\n// ----------------------------------------------------------------------------\n\nfunction setArray(publicAPI, model, fieldNames, size) {\n  let defaultVal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n  fieldNames.forEach(field => {\n    if (model[field] && size && model[field].length !== size) {\n      throw new RangeError(`Invalid initial number of values for array (${field})`);\n    }\n    const onChanged = `_on${_capitalize(field)}Changed`;\n    publicAPI[`set${_capitalize(field)}`] = function () {\n      if (model.deleted) {\n        vtkErrorMacro('instance deleted - cannot call any method');\n        return false;\n      }\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      let array = args;\n      let changeDetected;\n      let needCopy = false;\n      // allow null or an array to be passed as a single arg.\n      if (array.length === 1 && (array[0] == null || array[0].length >= 0)) {\n        /* eslint-disable prefer-destructuring */\n        array = array[0];\n        /* eslint-enable prefer-destructuring */\n        needCopy = true;\n      }\n      if (array == null) {\n        changeDetected = model[field] !== array;\n      } else {\n        if (size && array.length !== size) {\n          if (array.length < size && defaultVal !== undefined) {\n            array = Array.from(array);\n            needCopy = false;\n            while (array.length < size) array.push(defaultVal);\n          } else {\n            throw new RangeError(`Invalid number of values for array setter (${field})`);\n          }\n        }\n        changeDetected = model[field] == null || model[field].length !== array.length;\n        for (let i = 0; !changeDetected && i < array.length; ++i) {\n          changeDetected = model[field][i] !== array[i];\n        }\n        if (changeDetected && needCopy) {\n          array = Array.from(array);\n        }\n      }\n      if (changeDetected) {\n        const previousValue = model[field.name];\n        model[field] = array;\n        model[onChanged]?.(publicAPI, model, array, previousValue);\n        publicAPI.modified();\n      }\n      return changeDetected;\n    };\n    publicAPI[`set${_capitalize(field)}From`] = otherArray => {\n      const target = model[field];\n      otherArray.forEach((v, i) => {\n        target[i] = v;\n      });\n    };\n  });\n}\n\n// ----------------------------------------------------------------------------\n// set/get XXX: add setter and getter for object of type array\n// ----------------------------------------------------------------------------\n\nfunction setGetArray(publicAPI, model, fieldNames, size) {\n  let defaultVal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n  getArray(publicAPI, model, fieldNames);\n  setArray(publicAPI, model, fieldNames, size, defaultVal);\n}\nfunction moveToProtected(publicAPI, model, fieldNames) {\n  for (let i = 0; i < fieldNames.length; i++) {\n    const fieldName = fieldNames[i];\n    if (model[fieldName] !== undefined) {\n      model[`_${fieldName}`] = model[fieldName];\n      delete model[fieldName];\n    }\n  }\n}\n// ----------------------------------------------------------------------------\n// vtkAlgorithm: setInputData(), setInputConnection(), getOutputData(), getOutputPort()\n// ----------------------------------------------------------------------------\n\nfunction algo(publicAPI, model, numberOfInputs, numberOfOutputs) {\n  if (model.inputData) {\n    model.inputData = model.inputData.map(vtk);\n  } else {\n    model.inputData = [];\n  }\n  if (model.inputConnection) {\n    model.inputConnection = model.inputConnection.map(vtk);\n  } else {\n    model.inputConnection = [];\n  }\n  if (model.output) {\n    model.output = model.output.map(vtk);\n  } else {\n    model.output = [];\n  }\n  if (model.inputArrayToProcess) {\n    model.inputArrayToProcess = model.inputArrayToProcess.map(vtk);\n  } else {\n    model.inputArrayToProcess = [];\n  }\n\n  // Cache the argument for later manipulation\n  model.numberOfInputs = numberOfInputs;\n\n  // Methods\n  function setInputData(dataset) {\n    let port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (port >= model.numberOfInputs) {\n      vtkErrorMacro(`algorithm ${publicAPI.getClassName()} only has ${model.numberOfInputs} input ports. To add more input ports, use addInputData()`);\n      return;\n    }\n    if (model.inputData[port] !== dataset || model.inputConnection[port]) {\n      model.inputData[port] = dataset;\n      model.inputConnection[port] = null;\n      if (publicAPI.modified) {\n        publicAPI.modified();\n      }\n    }\n  }\n  function getInputData() {\n    let port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.inputConnection[port]) {\n      model.inputData[port] = model.inputConnection[port]();\n    }\n    return model.inputData[port];\n  }\n  function setInputConnection(outputPort) {\n    let port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (port >= model.numberOfInputs) {\n      let msg = `algorithm ${publicAPI.getClassName()} only has `;\n      msg += `${model.numberOfInputs}`;\n      msg += ' input ports. To add more input ports, use addInputConnection()';\n      vtkErrorMacro(msg);\n      return;\n    }\n    model.inputData[port] = null;\n    model.inputConnection[port] = outputPort;\n  }\n  function getInputConnection() {\n    let port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return model.inputConnection[port];\n  }\n  function getPortToFill() {\n    let portToFill = model.numberOfInputs;\n    while (portToFill && !model.inputData[portToFill - 1] && !model.inputConnection[portToFill - 1]) {\n      portToFill--;\n    }\n    if (portToFill === model.numberOfInputs) {\n      model.numberOfInputs++;\n    }\n    return portToFill;\n  }\n  function addInputConnection(outputPort) {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    setInputConnection(outputPort, getPortToFill());\n  }\n  function addInputData(dataset) {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    setInputData(dataset, getPortToFill());\n  }\n  function getOutputData() {\n    let port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return null;\n    }\n    if (publicAPI.shouldUpdate()) {\n      publicAPI.update();\n    }\n    return model.output[port];\n  }\n  publicAPI.shouldUpdate = () => {\n    const localMTime = publicAPI.getMTime();\n    let minOutputMTime = Infinity;\n    let count = numberOfOutputs;\n    while (count--) {\n      if (!model.output[count] || model.output[count].isDeleted()) {\n        return true;\n      }\n      const mt = model.output[count].getMTime();\n      if (mt < localMTime) {\n        return true;\n      }\n      if (mt < minOutputMTime) {\n        minOutputMTime = mt;\n      }\n    }\n    count = model.numberOfInputs;\n    while (count--) {\n      if (model.inputConnection[count]?.filter.shouldUpdate() || publicAPI.getInputData(count)?.getMTime() > minOutputMTime) {\n        return true;\n      }\n    }\n    return false;\n  };\n  function getOutputPort() {\n    let port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const outputPortAccess = () => getOutputData(port);\n    // Add reference to filter\n    outputPortAccess.filter = publicAPI;\n    return outputPortAccess;\n  }\n\n  // Handle input if needed\n  if (model.numberOfInputs) {\n    // Reserve inputs\n    let count = model.numberOfInputs;\n    while (count--) {\n      model.inputData.push(null);\n      model.inputConnection.push(null);\n    }\n\n    // Expose public methods\n    publicAPI.setInputData = setInputData;\n    publicAPI.setInputConnection = setInputConnection;\n    publicAPI.addInputData = addInputData;\n    publicAPI.addInputConnection = addInputConnection;\n    publicAPI.getInputData = getInputData;\n    publicAPI.getInputConnection = getInputConnection;\n  }\n  if (numberOfOutputs) {\n    publicAPI.getOutputData = getOutputData;\n    publicAPI.getOutputPort = getOutputPort;\n  }\n  publicAPI.update = () => {\n    const ins = [];\n    if (model.numberOfInputs) {\n      let count = 0;\n      while (count < model.numberOfInputs) {\n        ins[count] = publicAPI.getInputData(count);\n        count++;\n      }\n    }\n    if (publicAPI.shouldUpdate() && publicAPI.requestData) {\n      publicAPI.requestData(ins, model.output);\n    }\n  };\n  publicAPI.getNumberOfInputPorts = () => model.numberOfInputs;\n  publicAPI.getNumberOfOutputPorts = () => numberOfOutputs || model.output.length;\n  publicAPI.getInputArrayToProcess = inputPort => {\n    const arrayDesc = model.inputArrayToProcess[inputPort];\n    const ds = model.inputData[inputPort];\n    if (arrayDesc && ds) {\n      return ds[`get${arrayDesc.fieldAssociation}`]().getArray(arrayDesc.arrayName);\n    }\n    return null;\n  };\n  publicAPI.setInputArrayToProcess = function (inputPort, arrayName, fieldAssociation) {\n    let attributeType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Scalars';\n    while (model.inputArrayToProcess.length < inputPort) {\n      model.inputArrayToProcess.push(null);\n    }\n    model.inputArrayToProcess[inputPort] = {\n      arrayName,\n      fieldAssociation,\n      attributeType\n    };\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Event handling: onXXX(callback), invokeXXX(args...)\n// ----------------------------------------------------------------------------\n\nconst EVENT_ABORT = Symbol('Event abort');\nfunction event(publicAPI, model, eventName) {\n  const callbacks = [];\n  const previousDelete = publicAPI.delete;\n  let curCallbackID = 1;\n  function off(callbackID) {\n    for (let i = 0; i < callbacks.length; ++i) {\n      const [cbID] = callbacks[i];\n      if (cbID === callbackID) {\n        callbacks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  function on(callbackID) {\n    function unsubscribe() {\n      off(callbackID);\n    }\n    return Object.freeze({\n      unsubscribe\n    });\n  }\n  function invoke() {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    /* eslint-disable prefer-rest-params */\n    // Go through a copy of the callbacks array in case new callbacks\n    // get prepended within previous callbacks\n    const currentCallbacks = callbacks.slice();\n    for (let index = 0; index < currentCallbacks.length; ++index) {\n      const [, cb, priority] = currentCallbacks[index];\n      if (!cb) {\n        continue; // eslint-disable-line\n      }\n\n      if (priority < 0) {\n        setTimeout(() => cb.apply(publicAPI, arguments), 1 - priority);\n      } else {\n        // Abort only if the callback explicitly returns false\n        const continueNext = cb.apply(publicAPI, arguments);\n        if (continueNext === EVENT_ABORT) {\n          break;\n        }\n      }\n    }\n    /* eslint-enable prefer-rest-params */\n  }\n\n  publicAPI[`invoke${_capitalize(eventName)}`] = invoke;\n  publicAPI[`on${_capitalize(eventName)}`] = function (callback) {\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    if (!callback.apply) {\n      console.error(`Invalid callback for event ${eventName}`);\n      return null;\n    }\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return null;\n    }\n    const callbackID = curCallbackID++;\n    callbacks.push([callbackID, callback, priority]);\n    callbacks.sort((cb1, cb2) => cb2[2] - cb1[2]);\n    return on(callbackID);\n  };\n  publicAPI.delete = () => {\n    previousDelete();\n    callbacks.forEach(_ref => {\n      let [cbID] = _ref;\n      return off(cbID);\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// newInstance\n// ----------------------------------------------------------------------------\n\nfunction newInstance(extend, className) {\n  const constructor = function () {\n    let initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const model = {};\n    const publicAPI = {};\n    extend(publicAPI, model, initialValues);\n    return Object.freeze(publicAPI);\n  };\n\n  // Register constructor to factory\n  if (className) {\n    vtk.register(className, constructor);\n  }\n  return constructor;\n}\n\n// ----------------------------------------------------------------------------\n// Chain function calls\n// ----------------------------------------------------------------------------\n\nfunction chain() {\n  for (var _len5 = arguments.length, fn = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    fn[_key5] = arguments[_key5];\n  }\n  return function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    return fn.filter(i => !!i).map(i => i(...args));\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Some utility methods for vtk objects\n// ----------------------------------------------------------------------------\n\nfunction isVtkObject(instance) {\n  return instance && instance.isA && instance.isA('vtkObject');\n}\nfunction traverseInstanceTree(instance, extractFunction) {\n  let accumulator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let visitedInstances = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  if (isVtkObject(instance)) {\n    if (visitedInstances.indexOf(instance) >= 0) {\n      // avoid cycles\n      return accumulator;\n    }\n    visitedInstances.push(instance);\n    const result = extractFunction(instance);\n    if (result !== undefined) {\n      accumulator.push(result);\n    }\n\n    // Now go through this instance's model\n    const model = instance.get();\n    Object.keys(model).forEach(key => {\n      const modelObj = model[key];\n      if (Array.isArray(modelObj)) {\n        modelObj.forEach(subObj => {\n          traverseInstanceTree(subObj, extractFunction, accumulator, visitedInstances);\n        });\n      } else {\n        traverseInstanceTree(modelObj, extractFunction, accumulator, visitedInstances);\n      }\n    });\n  }\n  return accumulator;\n}\n\n// ----------------------------------------------------------------------------\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var _this = this;\n  let timeout;\n  const debounced = function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    const context = _this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n  debounced.cancel = () => clearTimeout(timeout);\n  return debounced;\n}\n\n// ----------------------------------------------------------------------------\n// Creates a throttled function that only invokes `func` at most once per\n// every `wait` milliseconds.\n\nfunction throttle(callback, delay) {\n  let isThrottled = false;\n  let argsToUse = null;\n  function next() {\n    isThrottled = false;\n    if (argsToUse !== null) {\n      wrapper(...argsToUse); // eslint-disable-line\n      argsToUse = null;\n    }\n  }\n  function wrapper() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    if (isThrottled) {\n      argsToUse = args;\n      return;\n    }\n    isThrottled = true;\n    callback(...args);\n    setTimeout(next, delay);\n  }\n  return wrapper;\n}\n\n// ----------------------------------------------------------------------------\n// keystore(publicAPI, model, initialKeystore)\n//\n//    - initialKeystore: Initial keystore. This can be either a Map or an\n//      object.\n//\n// Generated API\n//  setKey(key, value) : mixed (returns value)\n//  getKey(key) : mixed\n//  getAllKeys() : [mixed]\n//  deleteKey(key) : Boolean\n// ----------------------------------------------------------------------------\n\nfunction keystore(publicAPI, model) {\n  let initialKeystore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  model.keystore = Object.assign(model.keystore || {}, initialKeystore);\n  publicAPI.setKey = (key, value) => {\n    model.keystore[key] = value;\n  };\n  publicAPI.getKey = key => model.keystore[key];\n  publicAPI.getAllKeys = () => Object.keys(model.keystore);\n  publicAPI.deleteKey = key => delete model.keystore[key];\n  publicAPI.clearKeystore = () => publicAPI.getAllKeys().forEach(key => delete model.keystore[key]);\n}\n\n// ----------------------------------------------------------------------------\n// proxy(publicAPI, model, sectionName, propertyUI)\n//\n//    - sectionName: Name of the section for UI\n//    - propertyUI: List of props with their UI description\n//\n// Generated API\n//  getProxyId() : String\n//  listProxyProperties() : [string]\n//  updateProxyProperty(name, prop)\n//  getProxySection() => List of properties for UI generation\n// ----------------------------------------------------------------------------\nlet nextProxyId = 1;\nconst ROOT_GROUP_NAME = '__root__';\nfunction proxy(publicAPI, model) {\n  // Proxies are keystores\n  keystore(publicAPI, model);\n  const parentDelete = publicAPI.delete;\n\n  // getProxyId\n  model.proxyId = `${nextProxyId++}`;\n\n  // ui handling\n  model.ui = JSON.parse(JSON.stringify(model.ui || [])); // deep copy\n  get(publicAPI, model, ['proxyId', 'proxyGroup', 'proxyName']);\n  setGet(publicAPI, model, ['proxyManager']);\n\n  // group properties\n  const propertyMap = {};\n  const groupChildrenNames = {};\n  function registerProperties(descriptionList, currentGroupName) {\n    if (!groupChildrenNames[currentGroupName]) {\n      groupChildrenNames[currentGroupName] = [];\n    }\n    const childrenNames = groupChildrenNames[currentGroupName];\n    for (let i = 0; i < descriptionList.length; i++) {\n      childrenNames.push(descriptionList[i].name);\n      propertyMap[descriptionList[i].name] = descriptionList[i];\n      if (descriptionList[i].children && descriptionList[i].children.length) {\n        registerProperties(descriptionList[i].children, descriptionList[i].name);\n      }\n    }\n  }\n  registerProperties(model.ui, ROOT_GROUP_NAME);\n  publicAPI.updateUI = ui => {\n    model.ui = JSON.parse(JSON.stringify(ui || [])); // deep copy\n    Object.keys(propertyMap).forEach(k => delete propertyMap[k]);\n    Object.keys(groupChildrenNames).forEach(k => delete groupChildrenNames[k]);\n    registerProperties(model.ui, ROOT_GROUP_NAME);\n    publicAPI.modified();\n  };\n  function listProxyProperties() {\n    let gName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ROOT_GROUP_NAME;\n    return groupChildrenNames[gName];\n  }\n  publicAPI.updateProxyProperty = (propertyName, propUI) => {\n    const prop = propertyMap[propertyName];\n    if (prop) {\n      Object.assign(prop, propUI);\n    } else {\n      propertyMap[propertyName] = {\n        ...propUI\n      };\n    }\n  };\n  publicAPI.activate = () => {\n    if (model.proxyManager) {\n      const setActiveMethod = `setActive${_capitalize(publicAPI.getProxyGroup().slice(0, -1))}`;\n      if (model.proxyManager[setActiveMethod]) {\n        model.proxyManager[setActiveMethod](publicAPI);\n      }\n    }\n  };\n\n  // property link\n  model.propertyLinkSubscribers = {};\n  publicAPI.registerPropertyLinkForGC = (otherLink, type) => {\n    if (!(type in model.propertyLinkSubscribers)) {\n      model.propertyLinkSubscribers[type] = [];\n    }\n    model.propertyLinkSubscribers[type].push(otherLink);\n  };\n  publicAPI.gcPropertyLinks = type => {\n    const subscribers = model.propertyLinkSubscribers[type] || [];\n    while (subscribers.length) {\n      subscribers.pop().unbind(publicAPI);\n    }\n  };\n  model.propertyLinkMap = {};\n  publicAPI.getPropertyLink = function (id) {\n    let persistent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (model.propertyLinkMap[id]) {\n      return model.propertyLinkMap[id];\n    }\n    let value = null;\n    const links = [];\n    let count = 0;\n    let updateInProgress = false;\n    function update(source) {\n      let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (updateInProgress) {\n        return null;\n      }\n      const needUpdate = [];\n      let sourceLink = null;\n      count = links.length;\n      while (count--) {\n        const link = links[count];\n        if (link.instance === source) {\n          sourceLink = link;\n        } else {\n          needUpdate.push(link);\n        }\n      }\n      if (!sourceLink) {\n        return null;\n      }\n      const newValue = sourceLink.instance[`get${_capitalize(sourceLink.propertyName)}`]();\n      if (!shallowEquals(newValue, value) || force) {\n        value = newValue;\n        updateInProgress = true;\n        while (needUpdate.length) {\n          const linkToUpdate = needUpdate.pop();\n          linkToUpdate.instance.set({\n            [linkToUpdate.propertyName]: value\n          });\n        }\n        updateInProgress = false;\n      }\n      if (model.propertyLinkMap[id].persistent) {\n        model.propertyLinkMap[id].value = newValue;\n      }\n      return newValue;\n    }\n    function unbind(instance, propertyName) {\n      const indexToDelete = [];\n      count = links.length;\n      while (count--) {\n        const link = links[count];\n        if (link.instance === instance && (link.propertyName === propertyName || propertyName === undefined)) {\n          link.subscription.unsubscribe();\n          indexToDelete.push(count);\n        }\n      }\n      while (indexToDelete.length) {\n        links.splice(indexToDelete.pop(), 1);\n      }\n    }\n    function bind(instance, propertyName) {\n      let updateMe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      const subscription = instance.onModified(update);\n      const other = links[0];\n      links.push({\n        instance,\n        propertyName,\n        subscription\n      });\n      if (updateMe) {\n        if (model.propertyLinkMap[id].persistent && model.propertyLinkMap[id].value !== undefined) {\n          instance.set({\n            [propertyName]: model.propertyLinkMap[id].value\n          });\n        } else if (other) {\n          update(other.instance, true);\n        }\n      }\n      return {\n        unsubscribe: () => unbind(instance, propertyName)\n      };\n    }\n    function unsubscribe() {\n      while (links.length) {\n        links.pop().subscription.unsubscribe();\n      }\n    }\n    const linkHandler = {\n      bind,\n      unbind,\n      unsubscribe,\n      persistent\n    };\n    model.propertyLinkMap[id] = linkHandler;\n    return linkHandler;\n  };\n\n  // extract values\n  function getProperties() {\n    let groupName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ROOT_GROUP_NAME;\n    const values = [];\n    const id = model.proxyId;\n    const propertyNames = listProxyProperties(groupName) || [];\n    for (let i = 0; i < propertyNames.length; i++) {\n      const name = propertyNames[i];\n      const method = publicAPI[`get${_capitalize(name)}`];\n      const value = method ? method() : undefined;\n      const prop = {\n        id,\n        name,\n        value\n      };\n      const children = getProperties(name);\n      if (children.length) {\n        prop.children = children;\n      }\n      values.push(prop);\n    }\n    return values;\n  }\n  publicAPI.listPropertyNames = () => getProperties().map(p => p.name);\n  publicAPI.getPropertyByName = name => getProperties().find(p => p.name === name);\n  publicAPI.getPropertyDomainByName = name => (propertyMap[name] || {}).domain;\n\n  // ui section\n  publicAPI.getProxySection = () => ({\n    id: model.proxyId,\n    name: model.proxyGroup,\n    ui: model.ui,\n    properties: getProperties()\n  });\n\n  // free resources\n  publicAPI.delete = () => {\n    const list = Object.keys(model.propertyLinkMap);\n    let count = list.length;\n    while (count--) {\n      model.propertyLinkMap[list[count]].unsubscribe();\n    }\n    Object.keys(model.propertyLinkSubscribers).forEach(publicAPI.gcPropertyLinks);\n    parentDelete();\n  };\n\n  // @todo fix infinite recursion due to active source\n  publicAPI.getState = () => null;\n  function registerLinks() {\n    // Allow dynamic registration of links at the application level\n    if (model.links) {\n      for (let i = 0; i < model.links.length; i++) {\n        const {\n          link,\n          property,\n          persistent,\n          updateOnBind,\n          type\n        } = model.links[i];\n        if (type === 'application') {\n          const sLink = model.proxyManager.getPropertyLink(link, persistent);\n          publicAPI.registerPropertyLinkForGC(sLink, 'application');\n          sLink.bind(publicAPI, property, updateOnBind);\n        }\n      }\n    }\n  }\n  setImmediateVTK(registerLinks);\n}\n\n// ----------------------------------------------------------------------------\n// proxyPropertyMapping(publicAPI, model, map)\n//\n//   map = {\n//      opacity: { modelKey: 'property', property: 'opacity' },\n//   }\n//\n// Generated API:\n//  Elevate set/get methods from internal object stored in the model to current one\n// ----------------------------------------------------------------------------\n\nfunction proxyPropertyMapping(publicAPI, model, map) {\n  const parentDelete = publicAPI.delete;\n  const subscriptions = [];\n  const propertyNames = Object.keys(map);\n  let count = propertyNames.length;\n  while (count--) {\n    const propertyName = propertyNames[count];\n    const {\n      modelKey,\n      property,\n      modified = true\n    } = map[propertyName];\n    const methodSrc = _capitalize(property);\n    const methodDst = _capitalize(propertyName);\n    publicAPI[`get${methodDst}`] = model[modelKey][`get${methodSrc}`];\n    publicAPI[`set${methodDst}`] = model[modelKey][`set${methodSrc}`];\n    if (modified) {\n      subscriptions.push(model[modelKey].onModified(publicAPI.modified));\n    }\n  }\n  publicAPI.delete = () => {\n    while (subscriptions.length) {\n      subscriptions.pop().unsubscribe();\n    }\n    parentDelete();\n  };\n}\n\n// ----------------------------------------------------------------------------\n// proxyPropertyState(publicAPI, model, state, defaults)\n//\n//   state = {\n//     representation: {\n//       'Surface with edges': { property: { edgeVisibility: true, representation: 2 } },\n//       Surface: { property: { edgeVisibility: false, representation: 2 } },\n//       Wireframe: { property: { edgeVisibility: false, representation: 1 } },\n//       Points: { property: { edgeVisibility: false, representation: 0 } },\n//     },\n//   }\n//\n//   defaults = {\n//      representation: 'Surface',\n//   }\n//\n// Generated API\n//   get / set Representation ( string ) => push state to various internal objects\n// ----------------------------------------------------------------------------\n\nfunction proxyPropertyState(publicAPI, model) {\n  let state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let defaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  model.this = publicAPI;\n  function applyState(map) {\n    const modelKeys = Object.keys(map);\n    let count = modelKeys.length;\n    while (count--) {\n      const modelKey = modelKeys[count];\n      model[modelKey].set(map[modelKey]);\n    }\n  }\n  const modelKeys = Object.keys(defaults);\n  let count = modelKeys.length;\n  while (count--) {\n    // Add default\n    const key = modelKeys[count];\n    model[key] = defaults[key];\n\n    // Add set method\n    const mapping = state[key];\n    publicAPI[`set${_capitalize(key)}`] = value => {\n      if (value !== model[key]) {\n        model[key] = value;\n        const propValues = mapping[value];\n        applyState(propValues);\n        publicAPI.modified();\n      }\n    };\n  }\n\n  // Add getter\n  if (modelKeys.length) {\n    get(publicAPI, model, modelKeys);\n  }\n}\n\n// ----------------------------------------------------------------------------\n// From : https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n//\n//\n// Copyright (c) 2015, Facebook, Inc.\n// All rights reserved.\n//\n// This source code is licensed under the BSD-style license found in the\n// LICENSE file in the root directory of this source tree. An additional grant\n// of patent rights can be found in the PATENTS file in the same directory.\n//\n//\n// Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n// complicated, thus this doc is long and (hopefully) detailed enough to answer\n// your questions.\n//\n// If you need to react to the mouse wheel in a predictable way, this code is\n// like your bestest friend.// hugs//\n//\n// As of today, there are 4 DOM event types you can listen to:\n//\n//   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n//   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n//   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n//   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n//\n// So what to do?  The is the best:\n//\n//   normalizeWheel.getEventType();\n//\n// In your event callback, use this code to get sane interpretation of the\n// deltas.  This code will return an object with properties:\n//\n//   spinX   -- normalized spin speed (use for zoom) - x plane\n//   spinY   -- \" - y plane\n//   pixelX  -- normalized distance (to pixels) - x plane\n//   pixelY  -- \" - y plane\n//\n// Wheel values are provided by the browser assuming you are using the wheel to\n// scroll a web page by a number of lines or pixels (or pages).  Values can vary\n// significantly on different platforms and browsers, forgetting that you can\n// scroll at different speeds.  Some devices (like trackpads) emit more events\n// at smaller increments with fine granularity, and some emit massive jumps with\n// linear speed or acceleration.\n//\n// This code does its best to normalize the deltas for you:\n//\n//   - spin is trying to normalize how far the wheel was spun (or trackpad\n//     dragged).  This is super useful for zoom support where you want to\n//     throw away the chunky scroll steps on the PC and make those equal to\n//     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n//     resolve a single slow step on a wheel to 1.\n//\n//   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n//     get the crazy differences between browsers, but at least it'll be in\n//     pixels!\n//\n//   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n//     should translate to positive value zooming IN, negative zooming OUT.\n//     This matches the newer 'wheel' event.\n//\n// Why are there spinX, spinY (or pixels)?\n//\n//   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n//     with a mouse.  It results in side-scrolling in the browser by default.\n//\n//   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n//\n//   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n//     probably is by browsers in conjunction with fancy 3D controllers .. but\n//     you know.\n//\n// Implementation info:\n//\n// Examples of 'wheel' event if you scroll slowly (down) by one step with an\n// average mouse:\n//\n//   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n//   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n//   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n//   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n//   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n//\n// On the trackpad:\n//\n//   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n//   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n//\n// On other/older browsers.. it's more complicated as there can be multiple and\n// also missing delta values.\n//\n// The 'wheel' event is more standard:\n//\n// http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n//\n// The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n// deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n// backward compatibility with older events.  Those other values help us\n// better normalize spin speed.  Example of what the browsers provide:\n//\n//                          | event.wheelDelta | event.detail\n//        ------------------+------------------+--------------\n//          Safari v5/OS X  |       -120       |       0\n//          Safari v5/Win7  |       -120       |       0\n//         Chrome v17/OS X  |       -120       |       0\n//         Chrome v17/Win7  |       -120       |       0\n//                IE9/Win7  |       -120       |   undefined\n//         Firefox v4/OS X  |     undefined    |       1\n//         Firefox v4/Win7  |     undefined    |       3\n//\n// ----------------------------------------------------------------------------\n\n// Reasonable defaults\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\nfunction normalizeWheel(wheelEvent) {\n  let sX = 0; // spinX\n  let sY = 0; // spinY\n  let pX = 0; // pixelX\n  let pY = 0; // pixelY\n\n  // Legacy\n  if ('detail' in wheelEvent) {\n    sY = wheelEvent.detail;\n  }\n  if ('wheelDelta' in wheelEvent) {\n    sY = -wheelEvent.wheelDelta / 120;\n  }\n  if ('wheelDeltaY' in wheelEvent) {\n    sY = -wheelEvent.wheelDeltaY / 120;\n  }\n  if ('wheelDeltaX' in wheelEvent) {\n    sX = -wheelEvent.wheelDeltaX / 120;\n  }\n\n  // side scrolling on FF with DOMMouseScroll\n  if ('axis' in wheelEvent && wheelEvent.axis === wheelEvent.HORIZONTAL_AXIS) {\n    sX = sY;\n    sY = 0;\n  }\n  pX = sX * PIXEL_STEP;\n  pY = sY * PIXEL_STEP;\n  if ('deltaY' in wheelEvent) {\n    pY = wheelEvent.deltaY;\n  }\n  if ('deltaX' in wheelEvent) {\n    pX = wheelEvent.deltaX;\n  }\n  if ((pX || pY) && wheelEvent.deltaMode) {\n    if (wheelEvent.deltaMode === 1) {\n      // delta in LINE units\n      pX *= LINE_HEIGHT;\n      pY *= LINE_HEIGHT;\n    } else {\n      // delta in PAGE units\n      pX *= PAGE_HEIGHT;\n      pY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pX && !sX) {\n    sX = pX < 1 ? -1 : 1;\n  }\n  if (pY && !sY) {\n    sY = pY < 1 ? -1 : 1;\n  }\n  return {\n    spinX: sX,\n    spinY: sY || sX,\n    pixelX: pX,\n    pixelY: pY || pX\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Default export\n// ----------------------------------------------------------------------------\n\nvar macro = {\n  algo,\n  capitalize,\n  chain,\n  debounce,\n  enumToString,\n  event,\n  EVENT_ABORT,\n  formatBytesToProperUnit,\n  formatNumbersWithThousandSeparator,\n  get,\n  getArray,\n  getCurrentGlobalMTime,\n  getStateArrayMapFunc,\n  isVtkObject,\n  keystore,\n  measurePromiseExecution,\n  moveToProtected,\n  newInstance,\n  newTypedArray,\n  newTypedArrayFrom,\n  normalizeWheel,\n  obj,\n  proxy,\n  proxyPropertyMapping,\n  proxyPropertyState,\n  safeArrays,\n  set,\n  setArray,\n  setGet,\n  setGetArray,\n  setImmediate: setImmediateVTK,\n  setLoggerFunction,\n  throttle,\n  traverseInstanceTree,\n  TYPED_ARRAYS,\n  // deprecated todo remove on breaking API revision\n  uncapitalize,\n  VOID,\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkInfoMacro,\n  vtkLogMacro,\n  vtkOnceErrorMacro,\n  vtkWarningMacro\n};\n\nvar macro$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  VOID: VOID,\n  setLoggerFunction: setLoggerFunction,\n  vtkLogMacro: vtkLogMacro,\n  vtkInfoMacro: vtkInfoMacro,\n  vtkDebugMacro: vtkDebugMacro,\n  vtkErrorMacro: vtkErrorMacro,\n  vtkWarningMacro: vtkWarningMacro,\n  vtkOnceErrorMacro: vtkOnceErrorMacro,\n  TYPED_ARRAYS: TYPED_ARRAYS,\n  newTypedArray: newTypedArray,\n  newTypedArrayFrom: newTypedArrayFrom,\n  capitalize: capitalize,\n  _capitalize: _capitalize,\n  uncapitalize: uncapitalize,\n  formatBytesToProperUnit: formatBytesToProperUnit,\n  formatNumbersWithThousandSeparator: formatNumbersWithThousandSeparator,\n  setImmediateVTK: setImmediateVTK,\n  measurePromiseExecution: measurePromiseExecution,\n  obj: obj,\n  get: get,\n  set: set,\n  setGet: setGet,\n  getArray: getArray,\n  setArray: setArray,\n  setGetArray: setGetArray,\n  moveToProtected: moveToProtected,\n  algo: algo,\n  EVENT_ABORT: EVENT_ABORT,\n  event: event,\n  newInstance: newInstance,\n  chain: chain,\n  isVtkObject: isVtkObject,\n  traverseInstanceTree: traverseInstanceTree,\n  debounce: debounce,\n  throttle: throttle,\n  keystore: keystore,\n  proxy: proxy,\n  proxyPropertyMapping: proxyPropertyMapping,\n  proxyPropertyState: proxyPropertyState,\n  normalizeWheel: normalizeWheel,\n  'default': macro\n});\n\nexport { uncapitalize as A, formatBytesToProperUnit as B, formatNumbersWithThousandSeparator as C, setImmediateVTK as D, measurePromiseExecution as E, setArray as F, EVENT_ABORT as G, isVtkObject as H, debounce as I, throttle as J, keystore as K, proxyPropertyState as L, normalizeWheel as M, TYPED_ARRAYS as T, VOID as V, _capitalize as _, newTypedArray as a, newTypedArrayFrom as b, macro$1 as c, algo as d, setGet as e, event as f, get as g, chain as h, moveToProtected as i, proxyPropertyMapping as j, getArray as k, setGetArray as l, macro as m, newInstance as n, obj as o, proxy as p, capitalize as q, vtkErrorMacro as r, set as s, traverseInstanceTree as t, setLoggerFunction as u, vtkWarningMacro as v, vtkLogMacro as w, vtkInfoMacro as x, vtkDebugMacro as y, vtkOnceErrorMacro as z };\n","import globalThisShim from 'globalthis';\n\nconst vtkGlobal = globalThisShim(); // returns native globalThis if compliant\n\nconst factoryMapping = {\n  vtkObject: () => null\n};\nfunction vtk(obj) {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n  if (obj.isA) {\n    return obj;\n  }\n  if (!obj.vtkClass) {\n    if (vtkGlobal.console && vtkGlobal.console.error) {\n      vtkGlobal.console.error('Invalid VTK object');\n    }\n    return null;\n  }\n  const constructor = factoryMapping[obj.vtkClass];\n  if (!constructor) {\n    if (vtkGlobal.console && vtkGlobal.console.error) {\n      vtkGlobal.console.error(`No vtk class found for Object of type ${obj.vtkClass}`);\n    }\n    return null;\n  }\n\n  // Shallow copy object\n  const model = {\n    ...obj\n  };\n\n  // Convert into vtkObject any nested key\n  Object.keys(model).forEach(keyName => {\n    if (model[keyName] && typeof model[keyName] === 'object' && model[keyName].vtkClass) {\n      model[keyName] = vtk(model[keyName]);\n    }\n  });\n\n  // Return the root\n  const newInst = constructor(model);\n  if (newInst && newInst.modified) {\n    newInst.modified();\n  }\n  return newInst;\n}\nfunction register(vtkClassName, constructor) {\n  factoryMapping[vtkClassName] = constructor;\n}\n\n// Nest register method under the vtk function\nvtk.register = register;\n\nexport { vtk as default, vtkGlobal };\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n"],"names":["ClassHierarchy","Array","push","i","arguments","length","this","includes","super","vtkErrorMacro","DefaultDataType","fastComputeRange","arr","offset","numberOfComponents","len","x","min","Number","MAX_VALUE","max","isNaN","computeRange","values","component","undefined","numberOfValues","data","Float64Array","j","nextJ","ensureRangeSize","rangeArray","size","ranges","getDataType","typedArray","Object","prototype","toString","call","slice","STATIC","createRangeHelper","count","sum","add","value","get","mean","getRange","getMaxNorm","normArray","numComps","getNumberOfComponents","maxNorm","tuple","getNumberOfTuples","getTuple","norm$1","n","DEFAULT_VALUES","name","dataType","rangeTuple","extend","publicAPI","model","initialValues","assign","empty","TypeError","isArray","o","s","RangeError","resize","requestedNumTuples","curNumTuples","oldValues","set","dataChange","classHierarchy","modified","newSize","initialize","getElementComponentSize","BYTES_PER_ELEMENT","getComponent","tupleIdx","compIdx","setComponent","getValue","valueIdx","idx","comp","setValue","getData","subarray","componentIndex","rangeIdx","range","setRange","rangeValue","setTuple","setTuples","tuples","last","Math","insertTuple","insertTuples","end","insertNextTuple","insertNextTuples","findTuple","precision","abs","match","tupleToFill","getTuples","fromId","toId","from","to","getTupleLocation","getNumberOfValues","newClone","newInstance","getName","getMTime","setData","getState","deleted","jsonArchive","vtkClass","getClassName","buffer","keys","forEach","keyName","sortedObj","sort","mtime","deepCopy","other","currentType","currentArray","shallowCopy","interpolateTuple","source1","source1Idx","source2","source2Idx","t","tuple1","tuple2","out","vtkDataArray","vtkDataArray$1","VtkDataTypes","VOID","CHAR","SIGNED_CHAR","UNSIGNED_CHAR","UNSIGNED_CHAR_CLAMPED","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DOUBLE","Constants","DataTypeByteSize","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","IDENTITY","IDENTITY_3X3","EPSILON","VTK_SMALL_NUMBER","vtkWarningMacro","m","notImplemented","method","round","floor","ceil","a","b","subtract","dot","y","cross","Zx","Zy","Zz","norm","sqrt","roundNumber","num","digits","split","sig","roundVector","vector","clampValue","minValue","maxValue","clampVector","minVector","maxVector","isFinite","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","DesiredOutputPrecision","DEFAULT","SINGLE","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","globalMTime","Symbol","fakeConsole","noOp","methodName","console","hasOwnProperty","loggerFunctions","debug","error","info","log","warn","setLoggerFunction","fn","vtkLogMacro","vtkInfoMacro","vtkDebugMacro","ERROR_ONCE_MAP","vtkOnceErrorMacro","str","TYPED_ARRAYS","create","BigInt64Array","BigUint64Array","newTypedArray","type","_len","args","_key","newTypedArrayFrom","_len2","_key2","capitalize","charAt","toUpperCase","_capitalize","uncapitalize","toLowerCase","formatBytesToProperUnit","chunkSize","units","currentUnit","pop","toFixed","formatNumbersWithThousandSeparator","separator","sections","reverse","join","safeArrays","key","concat","getStateArrayMapFunc","item","isA","setImmediateVTK","setTimeout","measurePromiseExecution","promise","callback","start","performance","now","finally","delta","obj","callbacks","isInteger","hierarchy","off","index","isDeleted","otherMTime","onModified","freeze","unsubscribe","on","className","depth","map","noWarning","noFunction","ret","indexOf","_len3","list","_key3","subset","getReferenceByName","val","delete","field","el","some","ctor","Error","otherModel","keyList","keyIdx","splice","toJSON","objectGetterMap","object","fieldNames","getter","objectSetterMap","enum","onChanged","previousValue","findSetter","fields","setGet","getArray","setArray","defaultVal","_len4","_key4","changeDetected","array","needCopy","otherArray","target","v","setGetArray","moveToProtected","fieldName","algo","numberOfInputs","numberOfOutputs","setInputData","dataset","port","inputData","inputConnection","setInputConnection","outputPort","msg","getPortToFill","portToFill","getOutputData","shouldUpdate","update","output","inputArrayToProcess","localMTime","minOutputMTime","Infinity","mt","filter","getInputData","addInputData","addInputConnection","getInputConnection","getOutputPort","outputPortAccess","ins","requestData","getNumberOfInputPorts","getNumberOfOutputPorts","getInputArrayToProcess","inputPort","arrayDesc","ds","fieldAssociation","arrayName","setInputArrayToProcess","attributeType","EVENT_ABORT","event","eventName","previousDelete","curCallbackID","callbackID","cbID","currentCallbacks","cb","priority","apply","cb1","cb2","_ref","constructor","register","chain","_len5","_key5","_len6","_key6","isVtkObject","instance","traverseInstanceTree","extractFunction","accumulator","visitedInstances","result","modelObj","subObj","debounce","func","wait","immediate","_this","timeout","debounced","_len7","_key7","context","callNow","clearTimeout","cancel","throttle","delay","isThrottled","argsToUse","next","wrapper","_len8","_key8","keystore","initialKeystore","setKey","getKey","getAllKeys","deleteKey","clearKeystore","nextProxyId","ROOT_GROUP_NAME","proxy","parentDelete","proxyId","ui","JSON","parse","stringify","propertyMap","groupChildrenNames","registerProperties","descriptionList","currentGroupName","childrenNames","children","getProperties","groupName","id","propertyNames","listProxyProperties","prop","updateUI","k","updateProxyProperty","propertyName","propUI","activate","proxyManager","setActiveMethod","getProxyGroup","propertyLinkSubscribers","registerPropertyLinkForGC","otherLink","gcPropertyLinks","subscribers","unbind","propertyLinkMap","getPropertyLink","persistent","links","updateInProgress","source","force","needUpdate","sourceLink","link","newValue","shallowEquals","linkToUpdate","indexToDelete","subscription","linkHandler","bind","updateMe","listPropertyNames","p","getPropertyByName","find","getPropertyDomainByName","domain","getProxySection","proxyGroup","properties","property","updateOnBind","sLink","proxyPropertyMapping","subscriptions","modelKey","methodSrc","methodDst","proxyPropertyState","state","defaults","applyState","modelKeys","mapping","normalizeWheel","wheelEvent","sX","sY","pX","pY","detail","wheelDelta","wheelDeltaY","wheelDeltaX","axis","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","macro","enumToString","e","getCurrentGlobalMTime","setImmediate","macro$1","__proto__","vtkGlobal","factoryMapping","vtkObject","vtk","newInst","vtkClassName","module","exports","equal","RegExp","flags","valueOf","ARRAY_TYPE","RANDOM","random","PI","hypot","vec","fromMat4","clone","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b00","b02","b10","b12","b20","b22","translate","rotate","rad","sin","c","cos","scale","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","frob","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","mul","sub","slerp","omega","cosom","sinom","scale0","scale1","ax","ay","az","aw","bx","by","bz","bw","acos","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","squaredLength","normalize","lerp","alea","xor128","xorwow","xorshift7","xor4096","tychei","sr","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","proxyTransferHandler","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","ep","pendingListeners","Map","addEventListener","ev","resolver","createProxy","wrap","transferHandlers","serialized","isError","message","stack","globalThis","allowedOrigins","origin","allowedOrigin","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","reduce","rawValue","transfers","transferCache","transfer","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","isMessagePort","close","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","clear","r","_thisArg","rawArgumentList","processArguments","construct","registerProxy","processed","handler","serializedValue","fill","MAX_SAFE_INTEGER"],"sourceRoot":""}