{"version":3,"file":"206.bundle.11157502daa8be61c1e2.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/types/segmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../ui/src/components/DualInputRange/DualInputRange.tsx","webpack:///../../ui/src/components/DualInputRange/index.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/brushToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/cscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/paintFillToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIStartEndToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rectangleROIToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/rscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/sscissorsToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/undoToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segToolsEditSection/baseToolEdit.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segConfigurationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/segmentationIO/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getToolbarModule.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { CONSTANTS } from '@cornerstonejs/tools';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nconst loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(\n  segDisplaySet,\n  servicesManager: AppTypes.ServicesManager,\n  extensionManager,\n  headers\n) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({\n  extensionManager,\n  servicesManager,\n  segDisplaySet,\n  headers,\n}: withAppTypes) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService, uiNotificationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  let usedRecommendedDisplayCIELabValue = true;\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = data.RecommendedDisplayCIELabValue;\n\n      if (data.rgba) {\n        data.rgba = dicomlabToRGB(data.rgba);\n      } else {\n        usedRecommendedDisplayCIELabValue = false;\n        data.rgba = CONSTANTS.COLOR_LUT[i % CONSTANTS.COLOR_LUT.length];\n      }\n    }\n  });\n\n  if (results.overlappingSegments) {\n    uiNotificationService.show({\n      title: 'Overlapping Segments',\n      message:\n        'Unsupported overlapping segments detected, segmentation rendering results may be incorrect.',\n      type: 'warning',\n    });\n  }\n\n  if (!usedRecommendedDisplayCIELabValue) {\n    // Display a notification about the non-utilization of RecommendedDisplayCIELabValue\n    uiNotificationService.show({\n      title: 'DICOM SEG import',\n      message:\n        'RecommendedDisplayCIELabValue not found for one or more segments. The default color was used instead.',\n      type: 'warning',\n      duration: 5000,\n    });\n  }\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService: AppTypes.SegmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","export enum SegmentationPanelMode {\n  Expanded = 'expanded',\n  Dropdown = 'dropdown',\n}\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React from 'react';\nimport { Dialog } from '@ohif/ui';\nimport { ChromePicker } from 'react-color';\n\nimport './colorPickerDialog.css';\n\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\n  const dialogId = 'pick-color';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.rgbaColor, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment Color',\n        value: { rgbaColor },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          const handleChange = color => {\n            setValue({ rgbaColor: color.rgb });\n          };\n\n          return (\n            <ChromePicker\n              color={value.rgbaColor}\n              onChange={handleChange}\n              presetColors={[]}\n              width={300}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callColorPickerDialog;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Typography from '../Typography';\nimport './DualInputRange.css';\nimport {Button} from \"@ohif/ui\";\n\n\n/**\n * React Range Input component\n * it has two props, value and onChange\n * value is a number value\n * onChange is a function that will be called when the range input is changed\n *\n *\n */\n\nconst DualInputRange: React.FC<{\n    value1: number;\n    value2: number;\n    onChange: (value1, value2) => void;\n    minValue: number;\n    maxValue: number;\n    step: number;\n    unit?: string;\n    containerClassName?: string;\n    inputClassName?: string;\n    labelClassName?: string;\n    labelVariant?: string;\n    showLabel?: boolean;\n    labelPosition?: string;\n    trackColor?: string;\n}> = ({\n                                value1,\n                                value2,\n                                onChange,\n                                minValue,\n                                maxValue,\n                                step = 1,\n                                unit = '',\n                                containerClassName,\n                                inputClassName,\n                                labelClassName,\n                                labelVariant,\n                                showLabel = true,\n                                labelPosition = '',\n                                trackColor,\n                            }) => {\n    const [rangeValue1, setRangeValue1] = useState(value1);\n    const [rangeValue2, setRangeValue2] = useState(value2);\n\n    useEffect(() => {\n        //Change value 1\n        if(value1 < minValue) return\n        setRangeValue1(value1);\n        // if (value1 >= rangeValue2) {\n        //     setRangeValue2(value1);\n        // }\n\n        //Change value 2\n        if(value2 > maxValue) return\n        setRangeValue2(value2);\n        // if (value2 <= rangeValue1) {\n        //     setRangeValue1(value2);\n        // }\n    }, [value1, value2])\n\n    const handleChange1 = (e) => {\n        const value = Number(e.target.value);\n        if(value < minValue) return\n        setRangeValue1(value);\n        // if (value >= rangeValue2) {\n        //     setRangeValue2(value);\n        // }\n        onChange(value, rangeValue2)\n    };\n\n    const handleChange2 = (e) => {\n        const value = Number(e.target.value);\n        if(value > maxValue) return\n        setRangeValue2(value);\n        // if (value <= rangeValue1) {\n        //     setRangeValue1(value);\n        // }\n        onChange(rangeValue1, value)\n    }\n\n    const rangeValuePercentage1 = ((rangeValue1 - minValue) / (maxValue - minValue)) * 100;\n    const rangeValuePercentage2 = ((rangeValue2 - minValue) / (maxValue - minValue)) * 100;\n\n    const rangeValueForStr1 = step >= 1 ? rangeValue1.toFixed(0) : rangeValue1.toFixed(1);\n    const rangeValueForStr2 = step >= 1 ? rangeValue2.toFixed(0) : rangeValue2.toFixed(1);\n\n    return (\n        <div\n            style={{flexDirection:'column'}}\n            className={`flex items-center cursor-pointer space-x-1 ${\n                containerClassName ? containerClassName : ''\n            }`}\n        >\n            {showLabel && labelPosition === 'left' && (\n                <>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\n                    >\n                        {rangeValueForStr1}\n                        {unit}\n                    </Typography>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-8', labelClassName ?? 'text-white')}\n                    >\n                        {rangeValueForStr2}\n                        {unit}\n                    </Typography>\n                </>\n            )}\n            <div style={{flexDirection:'row'}} className={'flex pb-[5px]'}>\n                <input\n                    type=\"range\"\n                    min={minValue}\n                    max={maxValue}\n                    value={rangeValue1}\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\n                        inputClassName ? inputClassName : ''\n                    }`}\n                    style={{background: '#3a3f99',}}\n                    onChange={handleChange1}\n                    id=\"myRange1\"\n                    step={step}\n                />\n                <input\n                    type=\"range\"\n                    min={minValue}\n                    max={maxValue}\n                    value={rangeValue2}\n                    className={`appearance-none h-[3px] rounded-lg input-range-thumb-design ${\n                        inputClassName ? inputClassName : ''\n                    }`}\n                    style={{background: '#3a3f99',}}\n                    onChange={handleChange2}\n                    id=\"myRange2\"\n                    step={step}\n                />\n            </div>\n            {showLabel && (!labelPosition || labelPosition === 'right') && (\n                <div style={{flexDirection:'row', width:'100%'}} className={'flex pb-[5px]'}>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\n                    >\n                        {'Min : '}\n                        {rangeValueForStr1}\n                        {unit}\n                    </Typography>\n                    <Typography\n                        variant={labelVariant ?? 'subtitle'}\n                        component=\"p\"\n                        className={classNames('w-1/2', labelClassName ?? 'text-white', 'flex', 'justify-center')}\n                    >\n                        {'Max : '}\n                        {rangeValueForStr2}\n                        {unit}\n                    </Typography>\n                </div>\n            )}\n            <div className={'flex'} style={{width:'100%'}}>\n                <div className={'flex w-1/2 justify-center'}>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 - 10}})\n                    }}>{'--'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 - 1}})\n                    }}>{'-'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 + 1}})\n                    }}>{'+'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange1({target: {value: rangeValue1 + 10}})\n                    }}>{'++'}</Button>\n                </div>\n                <div className={'flex w-1/2 justify-center'}>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 - 10}})\n                    }}>{'--'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 - 1}})\n                    }}>{'-'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 + 1}})\n                    }}>{'+'}</Button>\n                    <Button size={'small'} color={'black'} onClick={() => {\n                        handleChange2({target: {value: rangeValue2 + 10}})\n                    }}>{'++'}</Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DualInputRange;\n","import DualInputRange from './DualInputRange';\n\nexport default DualInputRange;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport InputRange from '../../../../../platform/ui/src/components/InputRange';\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport { useTranslation } from 'react-i18next';\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nconst DefaultListItemRenderer = ({ label, activeMode, eraseReplaceFocus }) => {\n    const isActive = label === eraseReplaceFocus;\n    if (label === 'All' && activeMode === Brush_Mode.REPLACE) {\n        label = 'Background';\n    }\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Brush_Tool {\n    CIRCLE      =   'CIRCLE',\n    SPHERE      =   'SPHERE'\n}\n\nenum Brush_Mode {\n    FILL        =   'FILL',\n    THRESHOLD   =   'THRESHOLD',\n    ERASE       =   'ERASE',\n    REPLACE     =   'REPLACE'\n}\n\nconst getBrushStrategy = (tool: Brush_Tool, mode: Brush_Mode) => {\n    return mode + '_INSIDE_' + tool;\n}\n\nconst EVENT_LISTENERS = []\n\nexport default function BrushToolEdit ({ segmentationService, cornerstoneViewportService }){\n    const { t } = useTranslation('Buttons');\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [isEraseReplaceOnlyMinimized, setIsEraseReplaceOnlyMinimized] = useState(true);\n    const [eraseReplaceFocus, setEraseReplaceFocus] = useState('All');\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true});\n\n    // @ts-ignore\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n    const [activeMode, setActiveMode] = useState(Brush_Mode.FILL);\n    const [activeTool, setActiveTool] = useState(Brush_Tool.CIRCLE);\n    const [brushSize, setBrushSize] = useState(10);\n    // TODO adapt maxBrushSize on spacing\n    const [maxBrushSize, setMaxBrushSize] = useState(35);\n    const [spacing, setSpacing] = useState(0.4);\n    const [circleThresholdValue, setCircleThresholdValue] = useState([-1000, 3095]);\n    const [circleTargetSegmentIndex, setCircleTargetSegmentIndex] = useState(0);\n    const [segments, setSegments] = useState([]);\n\n    const handleSegmentClick = (args, brushInstance) => {\n        const {label, segmentIndex} = args;\n        const strategySpecificConfiguration = brushInstance.configuration.strategySpecificConfiguration;\n        strategySpecificConfiguration.REPLACE.targetSegmentIndex = segmentIndex;\n        brushInstance.setConfiguration({\n            eraseFocusIndex: segmentIndex, strategySpecificConfiguration: strategySpecificConfiguration\n        });\n        setEraseReplaceFocus(label);\n    }\n\n    const setSegmentsForToolGroup = (brushInstance) => {\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\n        segments = segments.map(s => ({\n            ...s,\n            onClick: args => handleSegmentClick(args, brushInstance)\n        }));\n        setSegments(segments);\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const brushInstance = toolGroup.getToolInstance('Brush');\n\n        setActiveMode(Brush_Mode.FILL);\n        setActiveTool(Brush_Tool.CIRCLE);\n\n        const { volume } = cornerstoneViewportService.getViewportInfo(activeViewportId).viewportData.data[0];\n        const spacing = Math.min(...volume.spacing);\n        const brushSize = Math.floor(brushInstance.configuration.brushSize / spacing);\n        // No greater than half the default dentascan thickness\n        const maxBrushSize = Math.min(Math.floor(Math.min(...volume.dimensions) / 2), 35);\n\n        setSpacing(spacing);\n        setBrushSize(brushSize);\n        setMaxBrushSize(maxBrushSize);\n        setCircleThresholdValue(brushInstance.configuration.strategySpecificConfiguration.THRESHOLD.threshold);\n        setCircleTargetSegmentIndex(brushInstance.configuration.strategySpecificConfiguration.REPLACE.targetSegmentIndex);\n        setSegmentsForToolGroup(brushInstance);\n\n        toolGroup.setToolActive('Undo', { bindings: [{ mouseButton: MouseBindings.Primary }] });\n    }, []);\n\n    // Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const brushInstance = toolGroup.getToolInstance('Brush');\n\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            const { unsubscribe } = segmentationService.subscribe(evt, () => {\n                setSegmentsForToolGroup(brushInstance);\n            });\n            subscriptions.push(unsubscribe);\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const brushInstance = toolGroup.getToolInstance('Brush');\n\n        brushInstance.setConfiguration({\n            brushSize: brushSize * spacing,\n            activeStrategy: getBrushStrategy(activeTool, activeMode),\n            strategySpecificConfiguration: {\n                THRESHOLD: {\n                    threshold: circleThresholdValue, // E.g. CT Fat // Only used during threshold strategies.\n                },\n                REPLACE: {\n                    targetSegmentIndex: circleTargetSegmentIndex, // E.g. Only used during replace strategies.\n                },\n            },\n        });\n    }, [brushSize, activeTool, activeMode, circleThresholdValue]);\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if (evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n            const worldPoints = evt.detail.currentPoints.world;\n            const imageData = viewport.getImageData();\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round);\n\n            const {scalarData, dimensions} = imageData;\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setCircleThresholdValue([value, circleThresholdValue[1]]);\n                } else {\n                    setCircleThresholdValue([circleThresholdValue[0], value]);\n                }\n            }\n        }\n    }\n\n    //Create event listeners to catch mouse click for pipette threshold tool\n    //Active probe tool is pipette active to display HU values on screen\n    //Go back to brush tool if we deactivate pipette\n    //Wrapper around addEventListener to not have multiple listeners\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const currentElement = viewport.element;\n        currentElement.addEvent = (evt, callback) => {\n            if (EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\n                EVENT_LISTENERS[evt] = null;\n            }\n            EVENT_LISTENERS[evt] = callback;\n            currentElement.addEventListener(evt, callback);\n        }\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\n            EVENT_LISTENERS[evt] = null;\n        }\n        currentElement.removeEvent(Events.MOUSE_DRAG);\n\n        if (pipetteMode.active) {\n            if (toolGroup.getToolOptions('DragProbe').mode !== csToolsEnums.ToolModes.Active) {\n                toolGroup.setToolActive('DragProbe', { bindings: [{ mouseButton: MouseBindings.Primary }] });\n                toolGroup.setToolPassive('Brush');\n            }\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => { setThresholdCallback(evt, pipetteMode.minimum) });\n        } else {\n            toolGroup.setToolActive('Brush', { bindings: [{ mouseButton: MouseBindings.Primary, }] });\n            toolGroup.setToolPassive('DragProbe');\n        }\n\n        return () => {\n            currentElement.removeEvent(Events.MOUSE_DRAG);\n        }\n    }, [pipetteMode.active, pipetteMode.minimum]);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Paint Brush Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                            {'Tool and mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeTool === Brush_Tool.CIRCLE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveTool(Brush_Tool.CIRCLE)}}\n                            >{'Circle'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeTool === Brush_Tool.SPHERE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveTool(Brush_Tool.SPHERE)}}\n                            >{'Sphere'}</Button>\n\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.FILL ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.FILL)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.THRESHOLD ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.THRESHOLD)}}\n                            >{'Threshold'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.ERASE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.ERASE)}}\n                            >{'Erase'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeMode === Brush_Mode.REPLACE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveMode(Brush_Mode.REPLACE)}}\n                            >{'Replace'}</Button>\n                        </div>\n                        <div className=\"flex items-center col-span-2\">\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Radius'}</div>\n                            <InputRange\n                                minValue={0}\n                                maxValue={maxBrushSize}\n                                value={brushSize}\n                                onChange={(value) => {setBrushSize(value)}}\n                                step={1}\n                                containerClassName=\"mt-[4px] mb-[4px]\"\n                                inputClassName=\"w-[64px]\"\n                                labelClassName=\"text-white text-[12px]\"\n                                unit=\"px\"\n                            />\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseReplaceOnlyMinimized(!isEraseReplaceOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseReplaceOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase/replace options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseReplaceOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                            {'Erase/replace focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, activeMode, eraseReplaceFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        {\n                            activeMode === Brush_Mode.THRESHOLD && (\n                                <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\n                                    <div className=\"h-[1px] bg-[#212456] mb-[8px] mx-1\" style={{width: '100%'}}></div>\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>\n                                        {'Threshold values'}\n                                    </div>\n                                    <DualInputRange\n                                        minValue={-1000}\n                                        maxValue={3095}\n                                        value1={circleThresholdValue[0]}\n                                        value2={circleThresholdValue[1]}\n                                        onChange={(vmin, vmax) => {setCircleThresholdValue([vmin, vmax])}}\n                                        step={5}\n                                        containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                        inputClassName=\"w-full\"\n                                        labelClassName=\"text-white text-[12px] w-full\"\n                                        unit=\"HU\"\n                                    />\n                                    <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>\n                                        {'Select threshold value with pipette for :'}\n                                    </div>\n                                    <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                        <Button\n                                            fullWidth={true}\n                                            size={'small'}\n                                            color={'secondary'}\n                                            onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                        >{'Minimum'}</Button>\n                                        <Button\n                                            fullWidth={true}\n                                            size={'small'}\n                                            color={'secondary'}\n                                            onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                        >{'Maximum'}</Button>\n                                    </div>\n                                    {\n                                        pipetteMode.active && (\n                                            <Button\n                                                size={'small'}\n                                                color={'secondary'}\n                                                onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                            >{'Back to annotation'}</Button>\n                                        )\n                                    }\n                                </div>\n                            )\n                        }\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Circle_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function CircleScissorsToolEdit({ segmentationService, cornerstoneViewportService }) {\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Circle_Strategies.FILL_INSIDE);\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([]);\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All');\n\n    const handleSegmentClick = (args, circleInstance) => {\n        const {label, segmentIndex} = args;\n        circleInstance.setConfiguration({eraseFocusIndex: segmentIndex});\n\n        setEraseFocus(label);\n    }\n\n    const setSegmentsForToolGroup = (circleInstance) => {\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\n        segments = segments.map(s => ({\n            ...s,\n            onClick: args => handleSegmentClick(args, circleInstance)\n        }));\n        setSegments(segments);\n    }\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\n\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                setSegmentsForToolGroup(circleInstance);\n            });\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\n\n        setActiveStrategy(circleInstance.configuration.activeStrategy);\n        setSegmentsForToolGroup(circleInstance);\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const circleInstance = toolGroup.getToolInstance('CircleScissor');\n\n        circleInstance.setConfiguration({ activeStrategy: activeStrategy });\n    }, [activeStrategy]);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Circle Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Circle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Circle_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Circle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Circle_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\n\nexport default function PaintFillToolEdit({}) {\n    const [isMinimized, setIsMinimized] = useState(false);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Fill Holes Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'No configurations for this tool'}\n                        </span>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport InputRange from '../../../../../platform/ui/src/components/InputRange'\nimport {Button, useViewportGrid} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\n\nconst EVENT_LISTENERS = []\n\nexport default function RectangleROIStartEndThresholdToolEdit({ segmentationService, cornerstoneViewportService }) {\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n\n    const [thresholdValue, setThresholdValue] = useState([-1000, 3095]);\n    const [slicesToPropagate, setSlicesToPropagate] = useState(0);\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true});\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\n\n        setSlicesToPropagate(rectangleROIInstance.configuration.numSlicesToPropagate);\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const rectangleROIInstance = toolGroup.getToolInstance('RectangleROIStartEndThreshold');\n\n        rectangleROIInstance.setConfiguration({ numSlicesToPropagate: slicesToPropagate });\n        console.log('SET CONFIGURATION', slicesToPropagate);\n    }, [slicesToPropagate]);\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if(evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n            const worldPoints = evt.detail.currentPoints.world;\n            const imageData = viewport.getImageData();\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round);\n\n            const {scalarData, dimensions} = imageData;\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setThresholdValue([value, thresholdValue[1]]);\n                } else {\n                    setThresholdValue([thresholdValue[0], value]);\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId)\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const currentElement = viewport.element;\n        currentElement.addEvent = (evt, callback) => {\n            if(EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\n                EVENT_LISTENERS[evt] = null;\n            }\n            EVENT_LISTENERS[evt] = callback;\n            currentElement.addEventListener(evt, callback);\n        };\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\n            EVENT_LISTENERS[evt] = null\n        };\n\n        if (pipetteMode.active) {\n            toolGroup.setToolPassive('RectangleROIStartEndThreshold');\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            });\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        } else {\n            toolGroup.setToolPassive('DragProbe');\n            toolGroup.setToolActive('RectangleROIStartEndThreshold', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            });\n            currentElement.removeEvent(Events.MOUSE_DRAG);\n        }\n    }, [pipetteMode.active, pipetteMode.minimum]);\n\n    const computeThreshold = () => {\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors();\n        const imageVolumes = actors\n            .map((va) => {\n                // prefer the referenceUID if it is set, since it can be a derived actor\n                // and the uid does not necessarily match the volumeId\n                const actorUID = va.referenceId ?? va.uid;\n                return cache.getVolume(actorUID);\n            })\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\n            .filter((iv) => !!iv);\n\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIStartEndThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        const annotation = csTools.annotation.state.getAnnotation(\n            annotationUID\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIStartEndThresholdAnnotation;\n\n        if (!annotation) return\n\n        // Todo: this only works for volumeViewport\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        const segmentations = segmentationService.getSegmentations();\n\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n            selectedAnnotationUIDs,\n            segmentationVolume,\n            [\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\n            ],\n            {\n                numSlicesToProject: 0,\n                overwrite: false,\n                overlapType: 1,\n                segmentIndex: segmentations[0].activeSegmentIndex,\n            }\n        );\n    }\n\n    const deleteRegion = () => {\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIStartEndThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n        console.log('selected annotation uid', selectedAnnotationUIDs);\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        console.log('CSTOOLS STATE', csTools.annotation.state);\n        csTools.annotation.state.removeAnnotation(annotationUID);\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'3D Rectangle Threshold Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"flex items-center col-span-2\" style={{flexDirection:'column', width:'100%'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                            <DualInputRange\n                                minValue={-1000}\n                                maxValue={5000}\n                                value1={thresholdValue[0]}\n                                value2={thresholdValue[1]}\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\n                                step={5}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"\"\n                            />\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                >{'Minimum'}</Button>\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                >{'Maximum'}</Button>\n                            </div>\n                            {\n                                pipetteMode.active && (\n                                    <Button\n                                        size={'small'}\n                                        color={'secondary'}\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                    >\n                                        {'Back to annotation'}\n                                    </Button>\n                                )\n                            }\n                        </div>\n                        <div className=\"flex items-center col-span-2\" style={{width:'100%', flexDirection:'column'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px]\" style={{width:'100%'}}>{'Slices Propagation'}</div>\n                            <InputRange\n                                minValue={0}\n                                maxValue={200}\n                                value={slicesToPropagate}\n                                onChange={(value) => {setSlicesToPropagate(value)}}\n                                step={1}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"\"\n                            />\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {computeThreshold()}}\n                            >{'Compute Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {deleteRegion()}}\n                            >{'Delete selected region'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport DualInputRange from '../../../../../platform/ui/src/components/DualInputRange';\nimport {Button, useViewportGrid} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {cache, utilities as csUtils} from \"@cornerstonejs/core\";\nimport { ImageVolume } from '@cornerstonejs/core/src/cache/classes/ImageVolume';\nimport {computeNormal} from \"@kitware/vtk.js/Common/DataModel/Triangle\";\nconst { Enums: csToolsEnums } = csTools\nconst { MouseBindings, Events } = csToolsEnums;\n\nconst EVENT_LISTENERS = []\n\nexport default function RectangleROIThresholdToolEdit({ segmentationService, cornerstoneViewportService }) {\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n\n    const [thresholdValue, setThresholdValue] = useState([-1000, 3095]);\n    const [pipetteMode, setPipetteMode] = useState({active: false, minimum: true});\n\n    const setThresholdCallback = (evt, minimum) => {\n        //If left click\n        if (evt.detail.mouseButton === 1) {\n            const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n            const worldPoints = evt.detail.currentPoints.world;\n            const imageData = viewport.getImageData();\n            const index = imageData.imageData.worldToIndex(worldPoints).map(Math.round);\n\n            const {scalarData, dimensions} = imageData;\n            if (csUtils.indexWithinDimensions(index, dimensions)) {\n                const yMultiple = dimensions[0];\n                const zMultiple = dimensions[0] * dimensions[1];\n\n                const value = scalarData[index[2] * zMultiple + index[1] * yMultiple + index[0]];\n                if (minimum) {\n                    setThresholdValue([value, thresholdValue[1]]);\n                } else {\n                    setThresholdValue([thresholdValue[0], value]);\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const currentElement = viewport.element;\n        currentElement.addEvent = (evt, callback) => {\n            if (EVENT_LISTENERS[evt]) {\n                currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\n                EVENT_LISTENERS[evt] = null;\n            }\n            EVENT_LISTENERS[evt] = callback;\n            currentElement.addEventListener(evt, callback);\n        };\n        currentElement.removeEvent = (evt) => {\n            currentElement.removeEventListener(evt, EVENT_LISTENERS[evt]);\n            EVENT_LISTENERS[evt] = null;\n        };\n\n        if (pipetteMode.active) {\n            toolGroup.setToolPassive('RectangleROIThreshold');\n            toolGroup.setToolActive('DragProbe', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            });\n            currentElement.addEvent(Events.MOUSE_DRAG, (evt) => {setThresholdCallback(evt, pipetteMode.minimum)});\n        } else {\n            toolGroup.setToolPassive('DragProbe');\n            toolGroup.setToolActive('RectangleROIThreshold', {\n                bindings: [\n                    {\n                        mouseButton: MouseBindings.Primary, // Left Click\n                    },\n                ],\n            });\n            currentElement.removeEvent(Events.MOUSE_DRAG);\n        }\n    }, [pipetteMode.active, pipetteMode.minimum]);\n\n    const computeThreshold = () => {\n        const actors = cornerstoneViewportService.getCornerstoneViewport(activeViewportId).getActors();\n        const imageVolumes = actors\n            .map((va) => {\n                // prefer the referenceUID if it is set, since it can be a derived actor\n                // and the uid does not necessarily match the volumeId\n                const actorUID = va.referenceId ?? va.uid;\n                return cache.getVolume(actorUID);\n            })\n            //filter to get only ImageVolume instances (and not StreamingImageVolume)\n            .filter((iv) => !!iv);\n\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        const annotation = csTools.annotation.state.getAnnotation(\n            annotationUID\n        ) as csTools.Types.ToolSpecificAnnotationTypes.RectangleROIThresholdAnnotation;\n\n        if (!annotation) return\n\n        // Todo: this only works for volumeViewport\n        const ctVolume = imageVolumes.filter(iv => iv.imageIds.length)[0];\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        const segmentations = segmentationService.getSegmentations();\n\n        csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\n            selectedAnnotationUIDs,\n            segmentationVolume,\n            [\n                { volume: ctVolume, lower: thresholdValue[0], upper: thresholdValue[1] },\n            ],\n            {\n                numSlicesToProject: 0,\n                overwrite: false,\n                overlapType: 1,\n                segmentIndex: segmentations[0].activeSegmentIndex,\n            }\n        );\n    }\n\n    const deleteRegion = () => {\n        const selectedAnnotationUIDs = csTools.annotation.selection.getAnnotationsSelectedByToolName(\n            'RectangleROIThreshold'\n        ) as Array<string>;\n\n        if (!selectedAnnotationUIDs) {\n            throw new Error('No annotation selected ');\n        }\n        console.log('selected annotation uid', selectedAnnotationUIDs);\n\n        const annotationUID = selectedAnnotationUIDs[0];\n        console.log('CSTOOLS STATE', csTools.annotation.state);\n        csTools.annotation.state.removeAnnotation(annotationUID);\n        cornerstoneViewportService.getCornerstoneViewport(activeViewportId).render();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Rectangle Threshold Segmentation Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div className=\"flex items-center col-span-2 pb-[9px]\" style={{flexDirection:'column', width:'100%'}}>\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pb-[3px]\" style={{width:'100%'}}>{'Threshold values'}</div>\n                            <DualInputRange\n                                minValue={-1000}\n                                maxValue={5000}\n                                value1={thresholdValue[0]}\n                                value2={thresholdValue[1]}\n                                onChange={(vmin, vmax) => {setThresholdValue([vmin, vmax])}}\n                                step={5}\n                                containerClassName=\"mt-[4px] mb-[4px] w-full pb-[3px]\"\n                                inputClassName=\"w-full\"\n                                labelClassName=\"text-white text-[12px] w-full\"\n                                unit=\"HU\"\n                            />\n                            <div className=\"text-[#ffffff] text-[12px] pr-[9px] pt-[9px] mb-[3px]\" style={{width:'100%'}}>{'Select threshold value with pipette for :'}</div>\n                            <div className=\"flex flex-row justify-evenly w-full mb-[8px]\">\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: true})}}\n                                >{'Minimum'}</Button>\n                                <Button\n                                    fullWidth={true}\n                                    size={'small'}\n                                    color={'secondary'}\n                                    onClick={() => { setPipetteMode({active: true, minimum: false})}}\n                                >{'Maximum'}</Button>\n                            </div>\n                            {\n                                pipetteMode.active && (\n                                    <Button\n                                        size={'small'}\n                                        color={'secondary'}\n                                        onClick={() => { setPipetteMode({active: false, minimum: true})}}\n                                    >\n                                        {'Back to annotation'}\n                                    </Button>\n                                )\n                            }\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {computeThreshold()}}\n                            >{'Compute Threshold'}</Button>\n                        </div>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={() => {deleteRegion()}}\n                            >{'Delete selected region'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Rectangle_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function RectangleScissorsToolEdit ({ segmentationService, cornerstoneViewportService }){\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Rectangle_Strategies.FILL_INSIDE)\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([])\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All')\n\n    const handleSegmentClick = (args, rectangleInstance) => {\n        const {label, segmentIndex} = args;\n        rectangleInstance.setConfiguration({eraseFocusIndex: segmentIndex})\n\n        setEraseFocus(label);\n    }\n\n    const setSegmentsForToolGroup = (rectangleInstance) => {\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\n        segments = segments.map(s => ({\n            ...s,\n            onClick: args => handleSegmentClick(args, rectangleInstance)\n        }));\n        setSegments(segments);\n    }\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                setSegmentsForToolGroup(rectangleInstance);\n            });\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n\n        setActiveStrategy(rectangleInstance.configuration.activeStrategy);\n        setSegmentsForToolGroup(rectangleInstance);\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const rectangleInstance = toolGroup.getToolInstance('RectangleScissor');\n\n        rectangleInstance.setConfiguration({ activeStrategy: activeStrategy });\n    }, [activeStrategy]);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Rectangle Scissors Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Rectangle_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Rectangle_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Rectangle_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\n\nconst DefaultListItemRenderer = ({ label, t, eraseFocus }) => {\n    const isActive = label === eraseFocus;\n\n    return (\n        <div\n            className={classNames(\n                'flex flex-row items-center p-3 h-8 w-full hover:bg-primary-dark',\n                'text-base whitespace-pre',\n                isActive && 'bg-primary-dark',\n                isActive\n                    ? 'text-[#348CFD]'\n                    : 'text-common-bright hover:bg-primary-dark hover:text-primary-light'\n            )}\n        >\n            <span className=\"mr-5\">{label}</span>\n        </div>\n    );\n};\nconst listItemRenderer = DefaultListItemRenderer\n\nenum Sphere_Strategies {\n    FILL_INSIDE = 'FILL_INSIDE',\n    ERASE_INSIDE = 'ERASE_INSIDE'\n}\n\nexport default function SphereScissorsToolEdit({ segmentationService, cornerstoneViewportService }) {\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [activeStrategy, setActiveStrategy] = useState(Sphere_Strategies.FILL_INSIDE);\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n\n    const [segments, setSegments] = useState([]);\n    const [isEraseOnlyMinimized, setIsEraseOnlyMinimized] = useState(true);\n    const [eraseFocus, setEraseFocus] = useState('All');\n\n    const handleSegmentClick = (args, sphereInstance) => {\n        const {label, segmentIndex} = args;\n        sphereInstance.setConfiguration({eraseFocusIndex: segmentIndex});\n\n        setEraseFocus(label);\n    }\n\n    const setSegmentsForToolGroup = (sphereInstance) => {\n        const segmentation = segmentationService.getSegmentations().filter(s => s.isActive)[0];\n        let segments = [{label: 'All', segmentIndex: 0}, ...segmentation.segments.filter(s => s)];\n        segments = segments.map(s => ({\n            ...s,\n            onClick: args => handleSegmentClick(args, sphereInstance)\n        }));\n        setSegments(segments);\n    }\n\n    //Update \"erase more\" list on segment modified\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n\n        const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n        const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n        const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n        const subscriptions = [];\n\n        [added, updated, removed].forEach(evt => {\n            segmentationService.subscribe(evt, () => {\n                setSegmentsForToolGroup(sphereInstance);\n            });\n        });\n\n        return () => {\n            subscriptions.forEach(unsub => {\n                unsub();\n            });\n        };\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n\n        setActiveStrategy(sphereInstance.configuration.activeStrategy);\n        setSegmentsForToolGroup(sphereInstance);\n    }, []);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const toolGroup = csTools.ToolGroupManager.getToolGroupForViewport(viewport.id, viewport.renderingEngineId);\n        const sphereInstance = toolGroup.getToolInstance('SphereScissor');\n\n        sphereInstance.setConfiguration({ activeStrategy: activeStrategy });\n    }, [activeStrategy]);\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={() => setIsMinimized(!isMinimized)}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Sphere Scissors Tool Edit'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\">\n                          {'Mode'}\n                        </span>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[9px]\"\n                            style={{display:'inline-flex', justifyContent:'space-evenly'}}\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Sphere_Strategies.FILL_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.FILL_INSIDE)}}\n                            >{'Fill'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={activeStrategy === Sphere_Strategies.ERASE_INSIDE ? 'primary' : 'secondary'}\n                                onClick={() => {setActiveStrategy(Sphere_Strategies.ERASE_INSIDE)}}\n                            >{'Erase'}</Button>\n                        </div>\n                        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n                            <div className=\"bg-primary-dark\">\n                                <div\n                                    className=\"flex cursor-pointer items-center\"\n                                    onClick={evt => {\n                                        evt.stopPropagation();\n                                        setIsEraseOnlyMinimized(!isEraseOnlyMinimized);\n                                    }}\n                                >\n                                    <Icon\n                                        name=\"panel-group-open-close\"\n                                        className={classNames(\n                                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                                            {\n                                                'transform rotate-90': !isEraseOnlyMinimized,\n                                            }\n                                        )}\n                                    />\n                                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                                        {'Erase Options'}\n                                    </span>\n                                </div>\n                                {/* active segmentation */}\n                                {!isEraseOnlyMinimized && (\n                                    <div className=\"pl-2 pr-2\" style={{display:'flex', flexDirection:\"column\"}}>\n                                        <span className=\"text-[#d8d8d8] text-[12px] font-[300] pb-[6px]\">\n                                          {'Erase focus on:'}\n                                        </span>\n                                        <ListMenu\n                                            items={segments}\n                                            renderer={args => listItemRenderer({...args, t, eraseFocus})}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState, useCallback } from 'react';\nimport classNames from \"classnames\";\nimport Icon from '../../../../../platform/ui/src/components/Icon'\nimport {Button, useViewportGrid, ListMenu} from \"@ohif/ui\";\nimport * as csTools from '@cornerstonejs/tools';\nimport {useTranslation} from \"react-i18next\";\nconst { Enums: csToolsEnums } = csTools\nconst { Events } = csToolsEnums\n\nclass CappedArray extends Array {\n    private readonly maxLength: number;\n\n    constructor(maxLength) {\n        super();\n        this.maxLength = maxLength;\n    }\n\n    push(...elements) {\n        // Appeler la méthode push de la classe Array parente\n        const r = super.push(...elements);\n\n        // Si la longueur dépasse maxLength, retirer les éléments les plus anciens\n        if (this.length > this.maxLength) {\n            const excess = this.length - this.maxLength;\n            this.splice(0, excess);\n        }\n\n        return r;\n    }\n}\n\nconst MAX_CACHE_LENGTH = 10;\nconst CACHE_SEGMENTATION_VOLUMES = new CappedArray(MAX_CACHE_LENGTH);\n\nexport default function UndoToolEdit ({ segmentationService, cornerstoneViewportService }) {\n    const { t } = useTranslation('Buttons');\n\n    const [isMinimized, setIsMinimized] = useState(false);\n    const [{ activeViewportId }, viewportGridService] = useViewportGrid();\n    const [currentCacheIndex, setCurrentCacheIndex] = useState(CACHE_SEGMENTATION_VOLUMES.length);\n\n    useEffect(() => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const currentElement = viewport.element\n        // Save previous segmentation states for \"undo\" functionality\n        currentElement.addEventListener(Events.MOUSE_DOWN, evt => {\n            const old_segmentation = segmentationService.getSegmentations()[0]\n            const old_seg_volume = new Uint8ClampedArray(segmentationService.getLabelmapVolume(old_segmentation.id).getScalarData());\n\n            //Add current segmentation volume in cache to save its state\n            if (CACHE_SEGMENTATION_VOLUMES.length === MAX_CACHE_LENGTH) {\n                CACHE_SEGMENTATION_VOLUMES.shift();\n            }\n            CACHE_SEGMENTATION_VOLUMES.push(old_seg_volume);\n            setCurrentCacheIndex(CACHE_SEGMENTATION_VOLUMES.length);\n        });\n    }, []);\n\n    const apply_replace = (cacheIndex) => {\n        const viewport = cornerstoneViewportService.getCornerstoneViewport(activeViewportId);\n        const currentElement = viewport.element\n\n        const previous_volume = CACHE_SEGMENTATION_VOLUMES[cacheIndex]\n        if(!previous_volume) return\n\n        const replace_event = new CustomEvent('UNDO_REDO_TOOL', {\n            detail: {\n                element: currentElement,\n                oldScalarData: previous_volume\n            }\n        });\n        window.dispatchEvent(replace_event);\n        setCurrentCacheIndex(cacheIndex);\n    }\n\n    const undo = () => {\n        if (currentCacheIndex > 0) {\n            apply_replace(currentCacheIndex - 1);\n        }\n    }\n\n    const redo = () => {\n        if (currentCacheIndex < MAX_CACHE_LENGTH) {\n            apply_replace(currentCacheIndex + 1);\n        }\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark\">\n                <div\n                    className=\"flex cursor-pointer items-center\"\n                    onClick={evt => {\n                        evt.stopPropagation();\n                        setIsMinimized(!isMinimized);\n                    }}\n                >\n                    <Icon\n                        name=\"panel-group-open-close\"\n                        className={classNames(\n                            'w-5 h-5 text-white transition duration-300 cursor-pointer',\n                            {\n                                'transform rotate-90': !isMinimized,\n                            }\n                        )}\n                    />\n                    <span className=\"text-[#d8d8d8] text-[12px] font-[300]\">\n                        {'Undo/redo Segmentation'}\n                    </span>\n                </div>\n                {/* active segmentation */}\n                {!isMinimized && (\n                    <div className=\"pl-2 pr-2 pb-[9px] pt-[9px]\" style={{display:'flex', flexDirection:\"column\"}}>\n                        <div\n                            className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly inline-flex\"\n                        >\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={undo}\n                            >{'Undo'}</Button>\n                            <Button\n                                fullWidth={true}\n                                size={'small'}\n                                color={'secondary'}\n                                onClick={redo}\n                            >{'Redo'}</Button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"h-[6px] bg-black \"></div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport {useViewportGrid} from '@ohif/ui';\nimport { useToolbar } from '@ohif/core';\nimport * as csTools from '@cornerstonejs/tools';\nconst { Enums: csToolsEnums } = csTools\nconst { Events } = csToolsEnums\nconst { state } = csTools\n\nimport BrushToolEdit from \"./brushToolEdit\";\nimport CircleScissorsToolEdit from \"./cscissorsToolEdit\";\nimport PaintFillToolEdit from \"./paintFillToolEdit\";\nimport RectangleROIStartEndThresholdToolEdit from \"./rectangleROIStartEndToolEdit\";\nimport RectangleROIThresholdToolEdit from \"./rectangleROIToolEdit\";\nimport RectangleScissorsToolEdit from \"./rscissorsToolEdit\";\nimport SphereScissorsToolEdit from \"./sscissorsToolEdit\";\nimport UndoToolEdit from \"./undoToolEdit\";\n\nconst SEG_TOOL_NAMES = [\n    'Brush',\n    'CircleScissor',\n    'PaintFill',\n    'RectangleROIStartEndThreshold',\n    'RectangleROIThreshold',\n    'RectangleScissor',\n    'SphereScissor'\n]\n\nexport default function BaseToolEdit ({ segmentationService, cornerstoneViewportService, toolbarService }) {\n    const [activeSegTool, setActiveSegTool] = useState(null);\n\n    const searchActiveSegTool = () => {\n        const toolStates = state.toolGroups.filter(tg => tg.id === 'mpr')[0]?.toolOptions;\n        if (!toolStates) {\n            setActiveSegTool(null);\n        }\n        const activeSegTool = Object.entries(toolStates).find(\n            //Check if tool is a segmentation tool and is active\n            ([toolname, toolOptions]) => SEG_TOOL_NAMES.includes(toolname) && toolOptions.mode === 'Active'\n        );\n        setActiveSegTool(activeSegTool ? activeSegTool[0] : null);\n    }\n\n    useEffect(() => {\n        searchActiveSegTool();\n    },[]);\n\n    useEffect(() => {\n        const { unsubscribe } = toolbarService.subscribe(\n            toolbarService.EVENTS.TOOL_BAR_MODIFIED,\n            searchActiveSegTool\n        );\n\n        return () => {\n            unsubscribe();\n        };\n    }, [toolbarService]);\n\n    const renderActiveTool = () => {\n        switch (activeSegTool) {\n            case 'Brush':\n            case 'DragProbe':\n                // TODO DragProbe displays Brush Panel, otherwise the Threshold Minimum button would not work\n                return <BrushToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'CircleScissor':\n                return <CircleScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'PaintFill':\n                return <PaintFillToolEdit/>\n            case 'RectangleROIStartEndThreshold':\n                return <RectangleROIStartEndThresholdToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'RectangleROIThreshold':\n                return <RectangleROIThresholdToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'RectangleScissor':\n                return <RectangleScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            case 'SphereScissor':\n                return <SphereScissorsToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            default:\n                return null;\n        };\n    }\n\n    return (\n        <>\n            {activeSegTool && (\n                <UndoToolEdit\n                    cornerstoneViewportService={cornerstoneViewportService}\n                    segmentationService={segmentationService}\n                />\n            )}\n            {renderActiveTool()}\n        </>\n    );\n}","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\nimport React, {useState} from \"react\";\nimport classNames from \"classnames\";\nimport {Segmentation} from \"@ohif/extension-cornerstone/src/services/SegmentationService/SegmentationServiceTypes\";\nimport PropTypes from \"prop-types\";\nimport {saveAs, FileSaver} from 'file-saver'\nimport { segmentation as cstSegmentation } from '@cornerstonejs/tools';\n\nfunction SegmentsConfigurationImportExport({segmentations, segmentationService}) : React.JSX.Element {\n    const [isMinimized, setIsMinimized] = useState(false);\n    // @ts-ignore\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    const exportConfiguration = () : void => {\n        const json = JSON.stringify(segmentations[0].segments)\n        const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n        saveAs(json_blob, 'segments_configuration.json')\n    }\n\n    const importConfiguration = () : void => {\n        console.log('SEGS AT IMPORT', segmentations);\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/json';\n        input.onchange = _ => {\n            const json_file = Array.from(input.files)[0];\n            const reader = new FileReader();\n            reader.onload = function(event) {\n                try {\n                    if (typeof event.target.result === \"string\") {\n                        for (let i = 1; i < segmentations[0].segments.length; i++) {\n                            segmentationService.removeSegment(segmentations[0].id, i);\n                        }\n\n                        const jsonContent = JSON.parse(event.target.result);\n                        for (const segment of jsonContent) {\n                            if (segment) {\n                                const {segmentIndex} = segment;\n                                segmentationService.addSegment(segmentations[0].id, {\n                                    segmentIndex: segmentIndex,\n                                    toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\n                                    properties: segment,\n                                    override: true\n                                });\n                            }\n                        }\n                    } else {\n                        console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\n                    }\n                } catch (error) {\n                    console.error(\"ERROR::JSON_READING\", error);\n                }\n            };\n            reader.readAsText(json_file);\n        };\n        input.click();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark pt-[6px] pb-[6px]\">\n                <p className=\"text-[#d8d8d8] text-[12px] font-[300] pl-[9px] pr-[9px] pb-[6px] flex\">{'Configuration'}</p>\n                <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\n                    <Button\n                        fullWidth={true}\n                        size={'small'}\n                        color={'secondary'}\n                        onClick={importConfiguration}\n                    >{'Import'}</Button>\n                    <Button\n                        fullWidth={true}\n                        size={'small'}\n                        color={'secondary'}\n                        onClick={exportConfiguration}\n                    >{'Export'}</Button>\n                </div>\n            </div>\n            <div className=\"h-[6px] bg-black \"></div>\n        </div>\n        );\n}\n\nSegmentsConfigurationImportExport.propTypes = {\n    segmentations: PropTypes.array.isRequired\n}\n\nexport default SegmentsConfigurationImportExport\n","import {Button, useViewportGrid, Icon} from \"@ohif/ui\";\nimport React, {useEffect, useState} from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport {saveAs, FileSaver} from 'file-saver'\nimport JSZip from \"jszip\";\nimport { segmentation as cstSegmentation, utilities as csToolsUtils, Enums } from '@cornerstonejs/tools';\nimport { cache } from '@cornerstonejs/core';\nimport FileLoaderService from '../../../../../platform/app/src/routes/Local/fileLoaderService.js'\nimport { PanoramicState } from \"extensions/cornerstone/src/types/Panoramic.js\";\n\nfunction SegmentationImportExport({\n    segmentations,\n    segmentationService,\n    cornerstoneViewportService,\n    panoramicService}) : React.JSX.Element {\n\n    const [isProcessingLayer, setIsProcessingLayer] = useState(false);\n    const [processingLayerPercent, setProcessingLayerPercent] = useState(0);\n    const [isMinimized, setIsMinimized] = useState(false);\n    // @ts-ignore\n    const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n\n    useEffect(() => {\n        /*if (isProcessingLayer) {\n            setProcessingLayerPercent(0);\n            setTimeout(exportSegmentation, 500);\n        }*/\n    }, [isProcessingLayer])\n\n    const exportSegmentation = async () => {\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\n        const {\n            dimensions,\n            direction,\n            scalarData\n        } = labelmapVolume;\n        const segments_info = segmentations[0].segments;\n        const existing_segment_indexes = segments_info.map((s, i) => s ? i : 0).filter(i => i !== 0);\n        const data = new Uint32Array(scalarData);\n        console.log('START COMPUTING INDEX ARRAY...');\n\n        // Convert segmentation in PNG Images using JSON\n        // Iterate through one layer (one PNG image)\n        const all_layers_blobs = new Array<Blob>(dimensions[2] - 1);\n        const layer_size = dimensions[0] * dimensions[1];\n        for (let layer_i = 0; layer_i < data.length; layer_i += layer_size) {\n            const current_processed_layer = layer_i / layer_size;\n            const segmented_layer = new Uint8ClampedArray(layer_size * 4)\n                .fill(0)\n                .map((el, i) => { return (i - 3) % 4 === 0 ? 255 : el });\n            const scalar_layer = data.slice(layer_i, layer_i + layer_size);\n            // Map through existing segment indexes\n            const indexes_array = await Promise.allSettled(existing_segment_indexes.map(\n                // Get indexes of values that matches the segment_index in parameter\n                segment_index => scalar_layer.map((v, i) => v !== 0 && v === segment_index ? i : 0)\n                                             .filter(i => i !== 0)\n            ));\n\n            // List of arrays of indexes matching a segment index (length = number of segment indexes)\n\n            indexes_array.forEach((promise, i) => {\n                const segment_array = promise.value;\n                // Fill segmented layer with corresponding segment color\n                if (segment_array.length !== 0) {\n                    const corresponding_segment_index = existing_segment_indexes[i];\n                    const color_to_fill = [...segments_info[corresponding_segment_index].color, 255];\n                    for (const index_to_color of segment_array) {\n                        segmented_layer[index_to_color * 4] = color_to_fill[0];\n                        segmented_layer[index_to_color * 4 + 1] = color_to_fill[1];\n                        segmented_layer[index_to_color * 4 + 2] = color_to_fill[2];\n                    };\n                }\n            });\n\n            // console.log(`SEGMENTED ${current_processed_layer}`, segmented_layer)\n\n            const fillingPromise = () => {\n                return new Promise<void>((resolve, reject) => {\n                    const canvas = document.createElement('canvas');\n                    const ctx = canvas.getContext('2d');\n                    canvas.width = dimensions[0];\n                    canvas.height = dimensions[1];\n                    const imgData = new ImageData(segmented_layer, dimensions[0], dimensions[1], {colorSpace: \"srgb\"});\n                    ctx.putImageData(imgData, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            all_layers_blobs[current_processed_layer] = blob;\n                            resolve();\n                        }\n                    }, \"image/png\");\n                });\n            }\n            await fillingPromise();\n            const completed_layers = all_layers_blobs.filter(el =>  el).length;\n            setProcessingLayerPercent(~~((completed_layers * 100) / dimensions[2]));\n        }\n\n        const waitUntilArrayDone = () => {\n            return new Promise<void>((resolve, reject) => {\n                (function waitForArray() {\n                    const completed_layers = all_layers_blobs.filter(el => {return el}).length;\n                    if (completed_layers === dimensions[2]) {\n                        return resolve();\n                    } else {\n                        setTimeout(waitForArray, 500);\n                    }\n                })();\n            });\n        }\n        await waitUntilArrayDone();\n        const zip = new JSZip();\n        // Add layers in zip as PNG files\n        all_layers_blobs.forEach((blob, index) => {\n            zip.file(`layer_${index}.png`, blob)\n        });\n\n        // Add segments information as JSON File\n        const json = JSON.stringify(segmentations[0].segments, null, '\\t');\n        const json_blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n        zip.file('segmentation_informations.json', json_blob);\n\n        // Add scalar data as binary file\n        const dataBlob = new Blob([scalarData], { type: 'application/octet-stream' });\n        zip.file('scalarData.bin', dataBlob);\n\n        const content = await zip.generateAsync({type:'blob'});\n        saveAs(content, 'segmentation.zip');\n        setIsProcessingLayer(false);\n    }\n\n    const importConfiguration = (configurationFile) => {\n        const reader = new FileReader();\n        reader.onload = function(event) {\n            try {\n                if (typeof event.target.result === \"string\") {\n                    const jsonContent = JSON.parse(event.target.result);\n                    jsonContent.forEach(segment => {\n                        if (segment) {\n                            const {segmentIndex} = segment;\n                            segmentationService.addSegment(segmentations[0].id, {\n                                segmentIndex: segmentIndex,\n                                toolGroupId: viewports.get(activeViewportId).viewportOptions.toolGroupId,\n                                properties: segment,\n                                override: true\n                            });\n                        }\n                    })\n                    cstSegmentation.triggerSegmentationEvents.triggerSegmentationModified(segmentations[0].id);\n                } else {\n                    console.error(\"ERROR::JSON_READING::CORRUPTED_CONTENT\");\n                }\n            } catch (error) {\n                console.error(\"ERROR::JSON_READING\", error);\n            }\n        };\n        reader.readAsText(configurationFile);\n    }\n\n    const _sortFiles = (files) => {\n        const indexedFiles = files.map(file => ({\n            file: file,\n            index: Number(file.name.slice(6, file.name.length - 4)),\n        }));\n        indexedFiles.sort((a, b) => a.index - b.index);\n        const sortedFiles = indexedFiles.map(item => item.file);\n\n        return sortedFiles;\n    }\n\n    const importSegmentationFromFolder = () => {\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\n        const {dimensions, scalarData} = labelmapVolume; //TODO\n        const layerSize = dimensions[0] * dimensions[1];\n        console.log('SEGS AT IMPORT', segmentations);\n\n        /*let viewport = viewports.get(activeViewportId);\n        if (viewport.viewportOptions.viewportType !== 'volume') {\n            viewport = viewports.find(vp => vp.viewportOptions.viewportType === 'volume');\n            console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\n            viewportGridService.setActiveViewportId(viewport.viewportId);\n        }\n        const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.id);\n        const actorEntries = cornerstoneVP.getActors();\n        console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\n        const imageVolumes = actorEntries.map((va) => {\n            const actorUID = va.referenceId ?? va.uid;\n            return cache.getVolume(actorUID);\n        });\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        const segmentationId = segmentationVolume.volumeId;\n        const scalarData = segmentationVolume.getScalarData();*/\n\n        const segmentsHashes = {255: 0};\n        for (const segment of segmentations[0].segments) {\n            if (segment) {\n                const [r, g, b] = segment.color;\n                const rgbHash = (r << 24) + (g << 16) + (b << 8) + 255;\n                segmentsHashes[rgbHash] = segment.segmentIndex;\n            }\n        }\n\n        // Load binary file\n        const input = document.createElement('input');\n        input.type = 'file';\n        //input.accept = 'image/png';\n        input.webkitdirectory = true;\n        input.onchange = async _ => {\n            const files = Array.from(input.files);\n            const configurationFile = files.filter(filter => filter.type === 'application/json')[0];\n            importConfiguration(configurationFile);\n\n            let imageFiles = files.filter(file => file.type === 'image/png');\n            if (imageFiles.length !== dimensions[2]) {\n                // TODO Error\n                return;\n            }\n            imageFiles = _sortFiles(imageFiles);\n            for (let index = 0; index < imageFiles.length; index++) {\n                const file = imageFiles[index];\n                const fileLoaderService = new FileLoaderService(file)\n                const imageId = fileLoaderService.addFile(file)\n                const img = await fileLoaderService.loadFile(file, imageId);\n                const dataset = await fileLoaderService.getDataset(img, imageId);\n                const newScalarData = new Uint32Array(dataset.PixelData[0]);\n                if (newScalarData.length * imageFiles.length !== scalarData.length) {\n                    // TODO Error\n                    return;\n                }\n                newScalarData.map(value => segmentsHashes[value]);\n                const processedData = new Uint8Array(newScalarData);\n                // Replace values of current scalar data\n                //scalarData.set(processedData, index * layerSize)\n                const offset = index * layerSize;\n                for (let i = 0; i < processedData.length; i++) {\n                    scalarData[offset + i] = processedData[i];\n                }\n            }\n            /*segmentationService.addOrUpdateSegmentation(segmentations[0]);\n            const representation = segmentationService.getSegmentationRepresentationsForToolGroup(\"mpr\");\n            const segmentationRepresentationUID = representation[0].segmentationRepresentationUID;\n            const toolGroupId = viewports.get(activeViewportId).viewportOptions.toolGroupId;\n            console.log(cstSegmentation.state.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID))\n            segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n            csToolsUtils.segmentation.triggerSegmentationRender(toolGroupId);*/\n            cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentations[0].id);\n        };\n        input.click();\n    }\n\n    const importSegmentationFromBinary = async () => {\n        console.log('SEGS AT IMPORT', segmentations);\n\n        let viewport = viewports.get(activeViewportId);\n        if (viewport.viewportOptions.viewportType !== 'volume') {\n            viewport = Array.from(viewports.values()).find(vp => vp.viewportOptions.viewportType === 'volume');\n            console.assert(viewport, 'ImportSegmentation: Could not find \"volume\" viewport');\n            viewportGridService.setActiveViewportId(viewport.viewportId);\n        }\n        const cornerstoneVP = cornerstoneViewportService.getCornerstoneViewport(viewport.viewportId);\n        const actorEntries = cornerstoneVP.getActors();\n        console.assert(actorEntries && actorEntries.length, 'ImportSegmentation: No actors on volume viewport');\n        const imageVolumes = actorEntries.map(va => cache.getVolume(va.referenceId ?? va.uid));\n        const segmentationVolume = imageVolumes.filter(iv => !iv.imageIds.length)[0];\n        if (!segmentationVolume) {\n            const options = { label: `Segmentation ${segmentations.length + 1}` };\n            const segId = await segmentationService.createSegmentationForDisplaySet(\n                viewport.displaySetInstanceUIDs[0], options\n            );\n\n            const segmentation = segmentationService.getSegmentation(segId);\n            console.log('CREATED SEGMENTATION', segmentation);\n            const LABELMAP = Enums.SegmentationRepresentations.Labelmap;\n            await segmentationService.addSegmentationRepresentationToToolGroup('mpr', segId, true, LABELMAP);\n\n            segmentationService.setActiveSegmentationForToolGroup(segId, 'mpr');\n        }\n        const segmentationId = segmentationVolume.volumeId;\n        const segmentationScalarData = segmentationVolume.getScalarData();\n\n        // Load binary file\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'application/octet-stream';\n        input.onchange = async _ => {\n            const file = Array.from(input.files)[0];\n            const reader = new FileReader();\n            reader.onload = async function(event) {\n                const newScalarData = new Uint8Array(event.target.result as ArrayBuffer);\n                // Replace values of current scalar data\n                for (let i = 0; i < segmentationScalarData.length; i++) {\n                    segmentationScalarData[i] = newScalarData[i];\n                }\n                // Trigger rendering\n                cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentationId);\n            }\n            reader.readAsArrayBuffer(file);\n        };\n        input.click();\n    }\n\n    const convertDentascanSegmentation = async () => {\n        // TODO No validity check currently\n        const labelmapVolume = segmentationService.getLabelmapVolume(segmentations[0].id);\n        const scalarData = labelmapVolume.getScalarData();\n\n        const volumeViewportData = cornerstoneViewportService.getViewportInfo('default').getViewportData().data[0];\n        const volumeDisplaySetInstanceUID = volumeViewportData.displaySetInstanceUID;\n        const [volumeWidth, volumeHeight, nbLayers] = volumeViewportData.volume.dimensions;\n        const toolGroupId = viewports.get(activeViewportId).viewportOptions.toolGroupId;\n\n        const panoramicState = panoramicService.getPanoramicState(volumeDisplaySetInstanceUID);\n\n        // Creation of new segmentation in volume\n        const options = { label: `Converted segmentation ${segmentations.length + 1}` };\n        const segId = await segmentationService.createSegmentationForDisplaySet(volumeDisplaySetInstanceUID, options);\n        const LABELMAP = Enums.SegmentationRepresentations.Labelmap;\n        await segmentationService.addSegmentationRepresentationToToolGroup(toolGroupId, segId, true, LABELMAP);\n        segmentationService.setActiveSegmentationForToolGroup(segId, toolGroupId);\n        for (const segment of segmentations[0].segments) {\n            if (segment) {\n                const {segmentIndex} = segment;\n                segmentationService.addSegment(segId, {\n                    segmentIndex: segmentIndex,\n                    toolGroupId: toolGroupId,\n                    properties: segment,\n                    override: true\n                });\n            }\n        }\n\n        // Access to scalarData;\n        const segmentation = segmentationService.getSegmentation(segId);\n\n        const segmentationVolumeId = segmentation.representationData.LABELMAP.volumeId;\n        const segmentationVolume = cache.getVolume(segmentationVolumeId);\n        const segmentationScalarData = segmentationVolume.getScalarData();\n\n        // Replace values of current scalar data\n        panoramicState.dentascans.forEach((dentascan, i) => {\n            const [minPoint, maxPoint] = dentascan.interval;\n            const [minX, minY] = minPoint[0].map(Math.floor);\n            const [maxX, maxY] = maxPoint[0].map(Math.floor);\n            const deltaX = maxX - minX;\n            const deltaY = maxY - minY;\n            const steps = Math.abs(deltaX) + Math.abs(deltaY);\n            const vx = deltaX / steps;\n            const vy = deltaY / steps;\n            // TODO Consider Pixel crossing algorithm\n            // https://stackoverflow.com/questions/24679963/precise-subpixel-line-drawing-algorithm-rasterization-algorithm\n            // Use DDA algorithm to draw thick line crossing all the line's pixels\n            for (let k = 0; k < steps; k++) {\n                const xk = Math.floor(minX + k * vx);\n                const yk = Math.floor(minY + k * vy);\n                if (xk >= 0 && yk >= 0 && xk < volumeWidth && yk < volumeHeight) {\n                    for (let layer = 0; layer < dentascan.height; layer++) {\n                        // Layer order is reversed between volume and dentascans\n                        const volumeIndex = (dentascan.height + dentascan.minLayer - layer) * volumeWidth * volumeHeight\n                                            + yk * volumeWidth + xk;\n                        // Axes are [width, height, nbDentascans] but data are stored in [nbDentascans, height, width] order\n                        const dentascanK = Math.floor(k * dentascan.width / steps);\n                        const dentascansIndex = i * dentascan.width * dentascan.height + layer * dentascan.width + dentascanK;\n                        segmentationScalarData[volumeIndex] = scalarData[dentascansIndex];\n                    }\n                }\n            }\n        });\n        for (let i = 0; i < segmentationScalarData.length; i++) {\n            segmentationScalarData[i] = segmentationScalarData[i];\n        }\n        // Trigger rendering\n        cstSegmentation.triggerSegmentationEvents.triggerSegmentationDataModified(segmentationVolumeId);\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-0 font-inter font-[300]\">\n            <div className=\"bg-primary-dark pt-[6px] pb-[6px]\">\n                <p className=\"text-[#d8d8d8] text-[12px] font-[300] pl-[9px] pr-[9px] pb-[6px] flex\">{'Segmentation'}</p>\n                <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\n                    <Button\n                        fullWidth={true}\n                        size={'small'}\n                        color={'secondary'}\n                        onClick={importSegmentationFromBinary}\n                    >{'Import'}</Button>\n                    <Button\n                        fullWidth={true}\n                        size={'small'}\n                        color={'secondary'}\n                        onClick={() => {\n                            setIsProcessingLayer(true);\n                            exportSegmentation();\n                        }}\n                    >{'Export'}</Button>\n                </div>\n            </div>\n            <div className=\"h-[6px] bg-black \"></div>\n            { /*<div className=\"bg-primary-dark pt-[6px] pb-[6px]\">\n                <p className=\"text-[#d8d8d8] text-[12px] font-[300] pl-[9px] pr-[9px] pb-[6px] flex\">{'Dentascan segmentation'}</p>\n                <div className=\"text-[#d8d8d8] text-[12px] font-[300] justify-evenly flex\">\n                    <Button\n                        fullWidth={true}\n                        size={'small'}\n                        color={'secondary'}\n                        onClick={convertDentascanSegmentation}\n                    >{'Convert dentascan'}</Button>\n                </div>\n            </div>\n            <div className=\"h-[6px] bg-black \"></div> */ }\n        </div>\n    );\n}\n\nSegmentationImportExport.propTypes = {\n    segmentations: PropTypes.array.isRequired\n}\n\nexport default SegmentationImportExport\n","import { createReportAsync } from '@ohif/extension-default';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport PropTypes, {element} from 'prop-types';\nimport {Button, SegmentationGroupTable, SegmentationGroupTableExpanded, useViewportGrid, ListMenu} from '@ohif/ui';\nimport { SegmentationPanelMode } from '../types/segmentation';\nimport callInputDialog from './callInputDialog';\nimport callColorPickerDialog from './colorPickerDialog';\nimport BaseToolEdit from \"./segToolsEditSection/baseToolEdit\";\nimport SegmentsConfigurationImportExport from \"./segConfigurationIO\";\nimport SegmentationImportExport from \"./segmentationIO\";\nimport {useTranslation} from 'react-i18next';\nimport { DisplaySet, RGB } from 'platform/core/src/types';\nimport { VolumeData } from 'extensions/cornerstone/src/types/CornerstoneCacheService';\nimport { Enums as csEnums } from '@cornerstonejs/core';\nimport { Enums as cstEnums } from '@cornerstonejs/tools';\n\nconst LABELMAP = cstEnums.SegmentationRepresentations.Labelmap;\nconst components = {\n  [SegmentationPanelMode.Expanded]: SegmentationGroupTableExpanded,\n  [SegmentationPanelMode.Dropdown]: SegmentationGroupTable,\n};\n\nconst seededRandom = (seed: number) => {\n  let value = seed % 2147483647;\n  return () => {\n      value = (value * 16807) % 2147483647;\n      return value / 2147483647;\n  };\n}\nconst myRandom = seededRandom(42);\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n}: withAppTypes) {\n  const [{ activeViewportId, viewports }] = useViewportGrid();\n  const {\n    segmentationService,\n    viewportGridService,\n    uiDialogService,\n    displaySetService,\n    cornerstoneViewportService,\n    toolbarService,\n    uiNotificationService,\n    panoramicService,\n  } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSegmentation');\n\n  const [addSegmentationClassName, setAddSegmentationClassName] = useState('');\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const isDentascanViewport = (viewportId): boolean => {\n    const { volume } = cornerstoneViewportService.getViewportInfo(viewportId).getViewportData().data[0] as VolumeData;\n    return volume?.metadata.SeriesInstanceUID.includes('dentascan') || false;\n  }\n\n  const isActiveViewportDentascan = isDentascanViewport(viewportGridService.getActiveViewportId());\n  const [visibleSegmentations, setVisibleSegmentations] = useState(\n    () => isActiveViewportDentascan ? segmentationService.getDentascanSegmentations()\n                                    : segmentationService.getAxialSegmentations()\n  );\n  const [hiddenSegmentations, setHiddenSegmentations] = useState(\n    () => isActiveViewportDentascan ? segmentationService.getAxialSegmentations()\n                                    : segmentationService.getDentascanSegmentations()\n  );\n  const [isMinimized, setIsMinimized] = useState({});\n\n  const onToggleMinimizeSegmentation = useCallback(id => {\n    setIsMinimized(prevState => ({ ...prevState, [id]: !prevState[id] }));\n  }, [setIsMinimized]);\n\n  // Only expand the last segmentation added to the list and collapse the rest\n  useEffect(() => {\n    const lastSegmentationId = visibleSegmentations[visibleSegmentations.length - 1]?.id;\n    if (lastSegmentationId) {\n      setIsMinimized(prevState => ({ ...prevState, [lastSegmentationId]: false, }));\n    }\n  }, [visibleSegmentations, setIsMinimized]);\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const isActiveViewportDentascan = isDentascanViewport(viewportGridService.getActiveViewportId());\n        setVisibleSegmentations(isActiveViewportDentascan ? segmentationService.getDentascanSegmentations()\n                                                          : segmentationService.getAxialSegmentations());\n        setHiddenSegmentations(isActiveViewportDentascan ? segmentationService.getAxialSegmentations()\n                                                         : segmentationService.getDentascanSegmentations());\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  // temporary measure to not allow add segmentation when the selected viewport\n  // is stack viewport\n  useEffect(() => {\n    const handleActiveViewportChange = viewportId => {\n      const activeDisplaySetsUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\n        viewportId || viewportGridService.getActiveViewportId()\n      );\n\n      if (!activeDisplaySetsUIDs) {\n        return;\n      }\n\n      const isReconstructable =\n          activeDisplaySetsUIDs?.some(displaySetUID => {\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetUID);\n          return displaySet?.isReconstructable;\n        }) || false;\n\n      if (isReconstructable) {\n        setAddSegmentationClassName('');\n      } else {\n        setAddSegmentationClassName('ohif-disabled');\n      }\n    };\n\n    // Handle initial state\n    handleActiveViewportChange();\n\n    const changedGrid = viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED;\n    const ready = viewportGridService.EVENTS.VIEWPORTS_READY;\n\n    const subsGrid = [];\n    [ready, changedGrid].forEach(evt => {\n      const { unsubscribe } = viewportGridService.subscribe(evt, ({ viewportId }) => {\n        handleActiveViewportChange(viewportId);\n      });\n\n      subsGrid.push(unsubscribe);\n    });\n\n    const changedData = cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED;\n\n    const subsData = [];\n    [changedData].forEach(evt => {\n      const { unsubscribe } = cornerstoneViewportService.subscribe(evt, () => {\n        handleActiveViewportChange();\n      });\n\n      subsData.push(unsubscribe);\n    });\n\n    // Clean up\n    return () => {\n      subsGrid.forEach(unsub => unsub());\n      subsData.forEach(unsub => unsub());\n    };\n  }, []);\n\n  const onSegmentationAdd = async () => {\n    commandsManager.runCommand('createEmptySegmentationForViewport', {\n      viewportId: viewportGridService.getActiveViewportId(),\n    });\n  };\n\n  const onSegmentationClick = (segmentationId: string) => {\n    for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(segmentationId)) {\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n    };\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    // Also delete hidden segmentation\n    // Delete hidden segmentation first so the new active segmentation is visible\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n    if (hiddenSegmentation) {\n      segmentationService.remove(hiddenSegmentation.id);\n    }\n\n    segmentationService.remove(segmentationId);\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\n\n    for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(segmentationId)) {\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    };\n\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n    if (hiddenSegmentation) {\n      segmentationService.setActiveSegment(hiddenSegmentation.id, segmentIndex);\n      // Also jump for hidden segment\n      for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(hiddenSegmentation.id)) {\n        segmentationService.jumpToSegmentCenter(hiddenSegmentation.id, segmentIndex, toolGroupId);\n      }\n    }\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n      // Also edit hidden segment\n      const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n      if (hiddenSegmentation) {\n        segmentationService.setSegmentLabel(hiddenSegmentation.id, segmentIndex, label);\n      }\n    });\n  };\n\n  const onSegmentAdd = (segmentationId) => {\n    const segmentIndex = segmentationService.getSegmentation(segmentationId).segments.length;\n\n    const config = {\n      segmentIndex: segmentIndex,\n      properties: {\n        label: `Segment ${segmentIndex}`,\n        color: [Math.floor(myRandom() * 256), Math.floor(myRandom() * 256), Math.floor(myRandom() * 256)] as RGB,\n        opacity: 255,\n        visibility: true,\n        isLocked: false,\n        active: true\n      }\n    }\n\n    segmentationService.addSegment(segmentationId, config);\n\n    // Also add on hidden segmentation\n    // Add also on dentascan segmentation\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n    if (hiddenSegmentation) {\n      segmentationService.addSegment(hiddenSegmentation.id, config);\n    }\n  }\n\n  const onSegmentationEdit = (segmentationId) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n\n      // Also update hidden segmentation\n      const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n      if (hiddenSegmentation) {\n        segmentationService.addOrUpdateSegmentation({ id: hiddenSegmentation.id, label }, false, true);\n      }\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { color, opacity } = segment;\n\n    const rgbaColor = {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: opacity / 255.0,\n    };\n\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\n      if (actionId === 'cancel') {\n        return;\n      }\n\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\n        newRgbaColor.r,\n        newRgbaColor.g,\n        newRgbaColor.b,\n        newRgbaColor.a * 255.0,\n      ]);\n\n      // Also update hidden segment\n      const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n      if (hiddenSegmentation) {\n        segmentationService.setSegmentRGBAColor(hiddenSegmentation.id, segmentIndex, [\n          newRgbaColor.r,\n          newRgbaColor.g,\n          newRgbaColor.b,\n          newRgbaColor.a * 255.0,\n        ]);\n      }\n    });\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    segmentationService.removeSegment(segmentationId, segmentIndex);\n    // Also delete hidden segment\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n    if (hiddenSegmentation) {\n      segmentationService.removeSegment(hiddenSegmentation.id, segmentIndex);\n    }\n  };\n\n  // segment hide\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n\n    // Todo: right now we apply the visibility to all tool groups\n    for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(segmentationId)) {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    };\n\n    // Also hide hidden segment\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n    if (hiddenSegmentation) {\n      for (const toolGroupId of segmentationService.getToolGroupIdsWithSegmentation(hiddenSegmentation.id)) {\n        segmentationService.setSegmentVisibility(\n          hiddenSegmentation.id,\n          segmentIndex,\n          isVisible,\n          toolGroupId\n        );\n      };\n    }\n  };\n\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n    // Also lock hidden segment\n    const hiddenSegmentation = segmentationService.getHiddenSegmentation(segmentationId);\n    if (hiddenSegmentation) {\n      segmentationService.toggleSegmentLocked(hiddenSegmentation.id, segmentIndex);\n    }\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const isVisible = segmentation.isVisible;\n    const segments = segmentation.segments;\n\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      segments.forEach((segment, segmentIndex) => {\n        segmentationService.setSegmentVisibility(\n          segmentationId,\n          segmentIndex,\n          isVisible,\n          toolGroupId\n        );\n      });\n    });\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (key, value) => {\n      segmentationService.setConfiguration({[key]: value});\n    }, [segmentationService]\n  );\n\n  const createSegmentation = async () => {\n    // TODO Maybe method not relevant\n\n    const toolGroupId = 'mpr';\n    const activeDisplaySets = displaySetService.getActiveDisplaySets();\n    const options = { label: `Segmentation ${visibleSegmentations.length + 1}` };\n    const segmentConfig = {\n      segmentIndex: 1,\n      toolGroupId: toolGroupId,\n      properties: {\n        label: `Segment 1`,\n        color: [255, 0, 0] as RGB,\n        opacity: 255,\n        visibility: true,\n        isLocked: false,\n        active: true\n      }\n    };\n\n    // Create segmentation for main volume\n    const axialDisplaySet = activeDisplaySets.find(displaySet => displaySet.Modality === 'CT');\n    const axialDisplaySetUID = axialDisplaySet.displaySetInstanceUID;\n    const segId = await segmentationService.createSegmentationForDisplaySet(axialDisplaySetUID, options);\n    const segmentation = segmentationService.getSegmentation(segId);\n    console.log('CREATED SEGMENTATION', segmentation);\n    await segmentationService.addSegmentationRepresentationToToolGroup(toolGroupId, segId, true, LABELMAP);\n    segmentationService.addSegment(segId, segmentConfig);\n\n    // Create segmentation for dentascan volume\n    const dentascanDisplaySet = activeDisplaySets.find(\n      displaySet => displaySet.SeriesInstanceUID.includes('dentascan')\n    );\n    if (dentascanDisplaySet) {\n      const dentascanDisplaySetUID = dentascanDisplaySet.displaySetInstanceUID;\n      const dentascanSegId = await segmentationService.createSegmentationForDisplaySet(dentascanDisplaySetUID, options);\n      await segmentationService.addSegmentationRepresentationToToolGroup(toolGroupId, dentascanSegId, true, LABELMAP);\n      segmentationService.addSegment(dentascanSegId, segmentConfig);\n\n      // Set active segmentation according to the current viewport\n      const activeSegId = isDentascanViewport(viewportGridService.getActiveViewportId()) ? dentascanSegId : segId;\n      segmentationService.setActiveSegmentationForToolGroup(activeSegId, toolGroupId);\n    }\n\n    // Add segmentation tools to toolbar\n    console.log('MTOOLS', toolbarService.getButtonSection('MeasurementTools', {}));\n    toolbarService.createButtonSection('primary', [\n      'MeasurementTools',\n      'Zoom',\n      'Pan',\n      'TrackballRotate',\n      'WindowLevel',\n      'Capture',\n      'Layout',\n      'MPR',\n      'Panoramic',\n      'Crosshairs',\n      'MoreTools',\n      'SegmentationTools',\n    ]);\n  }\n\n  const onSegmentationDownload = segmentationId => {\n    commandsManager.runCommand('downloadSegmentation', {\n      segmentationId,\n    });\n  };\n\n  const storeSegmentation = async segmentationId => {\n    const datasources = extensionManager.getActiveDataSource();\n\n    const displaySetInstanceUIDs = await createReportAsync({\n      servicesManager,\n      getReport: () =>\n        commandsManager.runCommand('storeSegmentation', {\n          segmentationId,\n          dataSource: datasources[0],\n        }),\n      reportType: 'Segmentation',\n    });\n\n    // Show the exported report in the active viewport as read only (similar to SR)\n    if (displaySetInstanceUIDs) {\n      // clear the segmentation that we exported, similar to the storeMeasurement\n      // where we remove the measurements and prompt again the user if they would like\n      // to re-read the measurements in a SR read only viewport\n      segmentationService.remove(segmentationId);\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: viewportGridService.getActiveViewportId(),\n        displaySetInstanceUIDs,\n      });\n    }\n  };\n\n  const onSegmentationDownloadRTSS = segmentationId => {\n    commandsManager.runCommand('downloadRTSS', {\n      segmentationId,\n    });\n  };\n\n  const SegmentationGroupTableComponent =\n    components[configuration?.segmentationPanelMode] || SegmentationGroupTable;\n  const allowAddSegment = configuration?.addSegment;\n  const onSegmentationAddWrapper =\n    configuration?.onSegmentationAdd && typeof configuration?.onSegmentationAdd === 'function'\n      ? configuration?.onSegmentationAdd\n      : onSegmentationAdd;\n\n  const viewportTypeCheck = () => {\n    const viewportType = cornerstoneViewportService.getViewportInfo(activeViewportId).getViewportType();\n    let warning = '';\n    if (viewportType === csEnums.ViewportType.VOLUME_3D) {\n      warning = 'Can\\'t use segmentation panel in viewport 3D, select a 2D viewport'\n\n    } else if (viewportType === csEnums.ViewportType.STACK) {\n      // TODO Ensure only panoramic Viewport fits this criteria. May also check toolGroupId\n      warning = 'Can\\'t use segmentation panel in panoramic viewport, select an other viewport'\n    }\n\n    if (warning) {\n      uiNotificationService.show({\n        title: 'Segmentation Panel',\n        message: warning,\n        type: 'info',\n      });\n    }\n\n    return warning === '';\n  }\n\n  return (\n    <>\n      { viewportTypeCheck() && (\n        <div className=\"flex flex-col flex-auto min-h-0F mt-1\">\n          {/* Segmentation tool edition */}\n          <BaseToolEdit\n            segmentationService={segmentationService}\n            cornerstoneViewportService={cornerstoneViewportService}\n            toolbarService={toolbarService}\n          />\n          {/* show segmentation table */}\n          <SegmentationGroupTableComponent\n            title={t('Segmentations')}\n            segmentations={visibleSegmentations}\n            hiddenSegmentations={hiddenSegmentations}\n            segmentationConfig={{ initialConfig: segmentationConfiguration }}\n            disableEditing={configuration.disableEditing}\n            showAddSegment={allowAddSegment}\n            showDeleteSegment={true}\n            onSegmentationAdd={onSegmentationAddWrapper}\n            onSegmentationEdit={onSegmentationEdit}\n            onSegmentationClick={onSegmentationClick}\n            onSegmentationDelete={onSegmentationDelete}\n            onSegmentationDownload={onSegmentationDownload}\n            onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\n            storeSegmentation={storeSegmentation}\n            onSegmentClick={onSegmentClick}\n            onSegmentAdd={onSegmentAdd}\n            onSegmentDelete={onSegmentDelete}\n            onSegmentEdit={onSegmentEdit}\n            onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n            onToggleSegmentVisibility={onToggleSegmentVisibility}\n            onToggleSegmentLock={onToggleSegmentLock}\n            onSegmentColorClick={onSegmentColorClick}\n            setFillAlpha={value => _setSegmentationConfiguration('fillAlpha', value)}\n            setFillAlphaInactive={value => _setSegmentationConfiguration('fillAlphaInactive', value)}\n            setOutlineWidthActive={value => _setSegmentationConfiguration('outlineWidthActive', value)}\n            setOutlineOpacityActive={value => _setSegmentationConfiguration('outlineOpacity', value)}\n            setRenderFill={value => _setSegmentationConfiguration('renderFill', value)}\n            setRenderInactiveSegmentations={value => _setSegmentationConfiguration('renderInactiveSegmentations', value)}\n            setRenderOutline={value => _setSegmentationConfiguration('renderOutline', value)}\n\n            addSegmentationClassName={addSegmentationClassName}\n          />\n          <div className=\"h-[6px] bg-black \"></div>\n          <Button\n            className={'pt-1/10 pb-1/10'}\n            onClick={createSegmentation}\n            style={{marginTop:'10%'}}\n          >{`Create segmentation`}</Button>\n          <div className=\"h-[6px] bg-black \"></div>\n          <SegmentsConfigurationImportExport\n            segmentations={visibleSegmentations}\n            segmentationService={segmentationService}\n          />\n          <SegmentationImportExport\n            segmentations={visibleSegmentations}\n            segmentationService={segmentationService}\n            cornerstoneViewportService={cornerstoneViewportService}\n            panoramicService={panoramicService}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React from 'react';\n\nimport { useAppConfig } from '@state';\nimport { Toolbox } from '@ohif/ui';\nimport PanelSegmentation from './panels/PanelSegmentation';\n\nconst getPanelModule = ({\n  commandsManager,\n  servicesManager,\n  extensionManager,\n  configuration,\n  title,\n}: withAppTypes) => {\n  const { customizationService } = servicesManager.services;\n\n  const wrappedPanelSegmentation = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n          disableEditing: appConfig.disableEditing,\n          ...customizationService.get('segmentation.panel'),\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = configuration => {\n    const [appConfig] = useAppConfig();\n\n    return (\n      <>\n        <Toolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          buttonSectionId=\"segmentationToolbox\"\n          title=\"Segmentation Tools\"\n          configuration={{\n            ...configuration,\n          }}\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n            disableEditing: appConfig.disableEditing,\n            ...customizationService.get('segmentation.panel'),\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { Enums, cache } from '@cornerstonejs/core';\n\n/**\n * Updates the viewports in preparation for rendering segmentations.\n * Evaluates each viewport to determine which need modifications,\n * then for those viewports, changes them to a volume type and ensures\n * they are ready for segmentation rendering.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - ID of the viewport to be updated.\n * @param params.loadFn - Function to load the segmentation data.\n * @param params.servicesManager - The services manager.\n * @param params.displaySet -  the display set.\n * @param params.initialSliceIndex - The initial slice index.\n *\n * @returns Returns true upon successful update of viewports for segmentation rendering.\n */\nasync function updateViewportsForSegmentationRendering({\n  viewportId,\n  loadFn,\n  servicesManager,\n  displaySet,\n  initialSliceIndex = null,\n}: {\n  viewportId: string;\n  loadFn: () => Promise<string>;\n  servicesManager: AppTypes.ServicesManager;\n  displaySet?: any;\n  initialSliceIndex?: number;\n}) {\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const referencedDisplaySetInstanceUID =\n    displaySet?.referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\n\n  const updatedViewports = getUpdatedViewportsForSegmentation({\n    viewportId,\n    servicesManager,\n    displaySet,\n  });\n\n  // create Segmentation callback which needs to be waited until\n  // the volume is created (if coming from stack)\n  const createSegmentationForVolume = async () => {\n    const segmentationId = await loadFn();\n    segmentationService.hydrateSegmentation(segmentationId);\n  };\n\n  // the reference volume that is used to draw the segmentation. so check if the\n  // volume exists in the cache (the target Viewport is already a volume viewport)\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\n    volumeId.includes(referencedDisplaySetInstanceUID)\n  );\n\n  updatedViewports.forEach(async viewport => {\n    viewport.viewportOptions = {\n      ...viewport.viewportOptions,\n      viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\n      needsRerendering: true,\n    };\n    const viewportId = viewport.viewportId;\n\n    // maintain the prehydration slice on the target viewport only\n    if (viewportId === targetViewportId) {\n      viewport.viewportOptions.initialImageOptions = {\n        index: initialSliceIndex,\n        useOnce: true,\n      };\n    }\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const prevCamera = csViewport.getCamera();\n\n    // only run the createSegmentationForVolume for the targetViewportId\n    // since the rest will get handled by cornerstoneViewportService\n    if ((volumeExists || displaySet.Modality === 'RTSTRUCT') && viewportId === targetViewportId) {\n      await createSegmentationForVolume();\n      return;\n    }\n\n    const createNewSegmentationWhenVolumeMounts = async evt => {\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\n        ac.uid.includes(referencedDisplaySetInstanceUID)\n      );\n\n      // Note: make sure to re-grab the viewport since it might have changed\n      // during the time it took for the volume to be mounted, for instance\n      // the stack viewport has been changed to a volume viewport\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      volumeViewport.setCamera(prevCamera);\n\n      volumeViewport.element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        createNewSegmentationWhenVolumeMounts\n      );\n\n      if (!isTheActiveViewportVolumeMounted) {\n        // it means it is one of those other updated viewports so just update the camera\n        return;\n      }\n\n      if (viewportId === targetViewportId) {\n        await createSegmentationForVolume();\n      }\n    };\n\n    csViewport.element.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      createNewSegmentationWhenVolumeMounts\n    );\n  });\n\n  // Set the displaySets for the viewports that require to be updated\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\n/**\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n * This function evaluates viewports based on their compatibility with the provided segmentation's\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - the ID of the viewport to be updated.\n * @param params.servicesManager - The services manager\n * @param params.displaySet -  the display set.\n *\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n */\nfunction getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  displaySet,\n}: withAppTypes) {\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const { viewports, isHangingProtocolLayout } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\n\n  const referenceDisplaySetInstanceUID =\n    displaySet?.referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    referenceDisplaySetInstanceUID,\n    isHangingProtocolLayout\n  );\n\n  viewports.forEach((viewport, viewportId) => {\n    if (\n      targetViewportId === viewportId ||\n      updatedViewports.find(v => v.viewportId === viewportId)\n    ) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segmentationFrameOfReferenceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: displaySet?.Modality === 'RTSTRUCT' ? 'stack' : 'volume',\n          needsRerendering: true,\n        },\n      });\n    }\n  });\n\n  return updatedViewports.filter(v => v.viewportOptions?.viewportType !== 'volume3d');\n}\n\nexport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n};\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n  utilities,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nimport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n} from './utils/hydrationUtils';\nconst { segmentation: segmentationUtils } = utilities;\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    uiNotificationService,\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n    toolGroupService,\n    cornerstoneViewportService,\n  } = servicesManager.services;\n\n  const actions = {\n    /**\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the ID of the viewport to be updated.\n     * @param params.servicesManager - The services manager\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n     *\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n     */\n    getUpdatedViewportsForSegmentation,\n    /**\n     * Creates an empty segmentation for a specified viewport.\n     * It first checks if the display set associated with the viewport is reconstructable.\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\n     * for the display set after handling the necessary steps for making the viewport\n     * a volume viewport first\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (!displaySet.isReconstructable) {\n        uiNotificationService.show({\n          title: 'Segmentation',\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\n          type: 'error',\n        });\n        return;\n      }\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        displaySet,\n        loadFn: async () => {\n          const currentSegmentations = segmentationService.getSegmentations();\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n            displaySetInstanceUID,\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\n          );\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          // Add only one segment for now\n          segmentationService.addSegment(segmentationId, {\n            toolGroupId,\n            segmentIndex: 1,\n            properties: {\n              label: 'Segment 1',\n            },\n          });\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          // Todo: handle adding more than one segmentation\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n          const segmentation = segmentations[0];\n          const segmentationId = segmentation.id;\n          const label = segmentation.label;\n          const segments = segmentation.segments;\n\n          delete segmentation.segments;\n\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\n            segmentationId,\n            label,\n          });\n\n          if (segmentation.scalarData) {\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n            labelmapVolume.scalarData.set(segmentation.scalarData);\n          }\n\n          segmentationService.addOrUpdateSegmentation(segmentation);\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          segments.forEach(segment => {\n            if (segment === null) {\n              return;\n            }\n            segmentationService.addSegment(segmentationId, {\n              segmentIndex: segment.segmentIndex,\n              toolGroupId,\n              properties: {\n                color: segment.color,\n                label: segment.label,\n                opacity: segment.opacity,\n                isLocked: segment.isLocked,\n                visibility: segment.isVisible,\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\n              },\n            });\n          });\n\n          if (segmentation.centroidsIJK) {\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\n          }\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentation display sets for a specified viewport.\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\n     * it chooses the appropriate service function to create\n     * the segmentation for the display set.\n     * The function then prepares the viewport for rendering segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\n     *\n     */\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\n      // Todo: handle adding more than one segmentation\n      const displaySet = displaySets[0];\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(\n        displaySet.referencedDisplaySetInstanceUID\n      );\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      const initialSliceIndex = viewport.getSliceIndex();\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        displaySet,\n        loadFn: async () => {\n          const segDisplaySet = displaySet;\n          const suppressEvents = false;\n          const serviceFunction =\n            segDisplaySet.Modality === 'SEG'\n              ? 'createSegmentationForSEGDisplaySet'\n              : 'createSegmentationForRTDisplaySet';\n\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\n          const segmentation = segmentationService.getSegmentation(segmentationId);\n          segmentation.description = `S${referencedDisplaySet.SeriesNumber}: ${referencedDisplaySet.SeriesDescription}`;\n          return segmentationId;\n        },\n        initialSliceIndex,\n      });\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\n\n      const segmentationVolume = cache.getVolume(segmentationId);\n      const referencedVolume = cache.getVolume(referencedVolumeId);\n      const referencedImages = referencedVolume.getCornerstoneImages();\n\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\n\n      // Generate fake metadata as an example\n      labelmapObj.metadata = [];\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      segmentationInOHIF.segments.forEach(segment => {\n        // segmentation service already has a color for each segment\n        if (!segment) {\n          return;\n        }\n        const segmentIndex = segment.segmentIndex;\n        const { label, color } = segment;\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: segment?.algorithmType || 'MANUAL',\n          SegmentAlgorithmName: segment?.algorithmName || 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmapObj,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\n        extensionManager,\n      });\n\n      if (promptResult.action !== 1 && promptResult.value) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n\n      const { label } = segmentation;\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      DicomMetadataStore.addInstances([naturalizedReport], true);\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n    setBrushSize: ({ value, toolNames }) => {\n      const brushSize = Number(value);\n\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        if (toolNames?.length === 0) {\n          segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize);\n        } else {\n          toolNames?.forEach(toolName => {\n            segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n          });\n        }\n      });\n    },\n    setThresholdRange: ({\n      value,\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'],\n    }) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n        toolNames?.forEach(toolName => {\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD: {\n                threshold: value,\n              },\n            },\n          });\n        });\n      });\n    },\n  };\n\n  const definitions = {\n    getUpdatedViewportsForSegmentation: {\n      commandFn: actions.getUpdatedViewportsForSegmentation,\n    },\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n    createEmptySegmentationForViewport: {\n      commandFn: actions.createEmptySegmentationForViewport,\n    },\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n    setBrushSize: {\n      commandFn: actions.setBrushSize,\n    },\n    setThresholdRange: {\n      commandFn: actions.setThresholdRange,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n    defaultContext: 'SEGMENTATION',\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './commandsModule';\nimport { getToolbarModule } from './getToolbarModule';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  getCommandsModule,\n  getToolbarModule,\n  getViewportModule({ servicesManager, extensionManager, commandsManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","export function getToolbarModule({ servicesManager }: withAppTypes) {\n  const { segmentationService, toolbarService, toolGroupService } = servicesManager.services;\n  return [\n    {\n      name: 'evaluate.cornerstone.segmentation',\n      evaluate: ({ viewportId, button, toolNames, disabledText }) => {\n        // Todo: we need to pass in the button section Id since we are kind of\n        // forcing the button to have black background since initially\n        // it is designed for the toolbox not the toolbar on top\n        // we should then branch the buttonSectionId to have different styles\n        const segmentations = segmentationService.getSegmentations();\n        if (!segmentations?.length) {\n          return {\n            disabled: true,\n            className: '!text-common-bright !bg-black opacity-50',\n            disabledText: disabledText ?? 'No segmentations available',\n          };\n        }\n\n        const toolGroup = toolGroupService.getToolGroupForViewport(viewportId);\n\n        if (!toolGroup) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const toolName = toolbarService.getToolNameForButton(button);\n\n        if (!toolGroup.hasTool(toolName) && !toolNames) {\n          return {\n            disabled: true,\n            className: '!text-common-bright ohif-disabled',\n            disabledText: disabledText ?? 'Not available on the current viewport',\n          };\n        }\n\n        const isPrimaryActive = toolNames\n          ? toolNames.includes(toolGroup.getActivePrimaryMouseButtonTool())\n          : toolGroup.getActivePrimaryMouseButtonTool() === toolName;\n\n        return {\n          disabled: false,\n          className: isPrimaryActive\n            ? '!text-black !bg-primary-light hover:bg-primary-light hover-text-black hover:cursor-pointer'\n            : '!text-common-bright !bg-black hover:bg-primary-light hover:cursor-pointer hover:text-black',\n          // Todo: isActive right now is used for nested buttons where the primary\n          // button needs to be fully rounded (vs partial rounded) when active\n          // otherwise it does not have any other use\n          isActive: isPrimaryActive,\n        };\n      },\n    },\n  ];\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","utilityModule","getModuleEntry","uiNotificationService","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","usedRecommendedDisplayCIELabValue","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","CONSTANTS","overlappingSegments","show","title","message","type","duration","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","SegmentationPanelMode","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","noCloseButton","onClose","actions","text","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","DualInputRange","value1","value2","minValue","maxValue","step","unit","containerClassName","inputClassName","labelVariant","showLabel","labelPosition","trackColor","rangeValue1","setRangeValue1","useState","rangeValue2","setRangeValue2","useEffect","handleChange1","e","Number","handleChange2","rangeValueForStr1","toFixed","rangeValueForStr2","style","flexDirection","Typography","variant","component","classNames","min","max","background","Button","size","onClick","csToolsEnums","csTools","MouseBindings","listItemRenderer","DefaultListItemRenderer","activeMode","eraseReplaceFocus","isActive","Brush_Mode","REPLACE","Brush_Tool","EVENT_LISTENERS","BrushToolEdit","cornerstoneViewportService","t","useTranslation","isMinimized","setIsMinimized","isEraseReplaceOnlyMinimized","setIsEraseReplaceOnlyMinimized","setEraseReplaceFocus","pipetteMode","setPipetteMode","active","minimum","activeViewportId","viewportGridService","useViewportGrid","setActiveMode","FILL","activeTool","setActiveTool","CIRCLE","brushSize","setBrushSize","maxBrushSize","setMaxBrushSize","spacing","setSpacing","circleThresholdValue","setCircleThresholdValue","circleTargetSegmentIndex","setCircleTargetSegmentIndex","setSegments","setSegmentsForToolGroup","brushInstance","segmentIndex","getSegmentations","filter","s","args","handleSegmentClick","strategySpecificConfiguration","configuration","targetSegmentIndex","setConfiguration","eraseFocusIndex","viewport","getCornerstoneViewport","toolGroup","renderingEngineId","getToolInstance","volume","getViewportInfo","viewportData","floor","dimensions","THRESHOLD","threshold","setToolActive","bindings","mouseButton","Primary","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","getBrushStrategy","tool","mode","activeStrategy","currentElement","element","addEvent","removeEventListener","removeEvent","MOUSE_DRAG","getToolOptions","ToolModes","Active","setToolPassive","setThresholdCallback","worldPoints","currentPoints","world","imageData","getImageData","index","worldToIndex","scalarData","csUtils","yMultiple","zMultiple","Icon","display","justifyContent","fullWidth","SPHERE","ERASE","InputRange","stopPropagation","ListMenu","items","renderer","vmin","vmax","eraseFocus","Circle_Strategies","CircleScissorsToolEdit","setActiveStrategy","FILL_INSIDE","isEraseOnlyMinimized","setIsEraseOnlyMinimized","setEraseFocus","circleInstance","ERASE_INSIDE","PaintFillToolEdit","RectangleROIStartEndThresholdToolEdit","thresholdValue","setThresholdValue","slicesToPropagate","setSlicesToPropagate","rectangleROIInstance","numSlicesToPropagate","log","computeThreshold","imageVolumes","getActors","va","actorUID","referenceId","uid","iv","selectedAnnotationUIDs","annotationUID","ctVolume","segmentationVolume","segmentations","lower","upper","numSlicesToProject","overwrite","overlapType","activeSegmentIndex","deleteRegion","render","RectangleROIThresholdToolEdit","Rectangle_Strategies","RectangleScissorsToolEdit","rectangleInstance","Sphere_Strategies","SphereScissorsToolEdit","sphereInstance","CACHE_SEGMENTATION_VOLUMES","Array","constructor","maxLength","super","this","elements","r","excess","splice","UndoToolEdit","currentCacheIndex","setCurrentCacheIndex","MOUSE_DOWN","old_segmentation","old_seg_volume","Uint8ClampedArray","getLabelmapVolume","getScalarData","shift","apply_replace","cacheIndex","previous_volume","replace_event","CustomEvent","oldScalarData","window","dispatchEvent","undo","redo","state","SEG_TOOL_NAMES","BaseToolEdit","toolbarService","activeSegTool","setActiveSegTool","searchActiveSegTool","toolStates","toolGroups","tg","toolOptions","entries","find","toolname","includes","TOOL_BAR_MODIFIED","renderActiveTool","SegmentsConfigurationImportExport","importConfiguration","input","document","createElement","accept","onchange","_","json_file","from","files","reader","FileReader","onload","result","removeSegment","jsonContent","JSON","parse","segment","addSegment","get","override","readAsText","click","exportConfiguration","json","stringify","json_blob","Blob","saveAs","propTypes","PropTypes","isRequired","SegmentationImportExport","panoramicService","isProcessingLayer","setIsProcessingLayer","processingLayerPercent","setProcessingLayerPercent","values","vp","assert","setActiveViewportId","viewportId","actorEntries","options","segId","createSegmentationForDisplaySet","displaySetInstanceUIDs","segmentation","LABELMAP","Labelmap","addSegmentationRepresentationToToolGroup","setActiveSegmentationForToolGroup","segmentationId","volumeId","segmentationScalarData","file","newScalarData","Uint8Array","cstSegmentation","readAsArrayBuffer","labelmapVolume","direction","segments_info","existing_segment_indexes","Uint32Array","all_layers_blobs","layer_size","layer_i","current_processed_layer","segmented_layer","fill","el","scalar_layer","slice","allSettled","segment_index","v","promise","segment_array","corresponding_segment_index","color_to_fill","index_to_color","fillingPromise","canvas","ctx","getContext","height","imgData","ImageData","colorSpace","putImageData","toBlob","blob","completed_layers","waitForArray","setTimeout","zip","JSZip","dataBlob","generateAsync","exportSegmentation","cstEnums","components","Expanded","SegmentationGroupTableExpanded","Dropdown","SegmentationGroupTable","myRandom","seed","seededRandom","PanelSegmentation","commandsManager","addSegmentationClassName","setAddSegmentationClassName","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","isDentascanViewport","getViewportData","metadata","isActiveViewportDentascan","getActiveViewportId","visibleSegmentations","setVisibleSegmentations","getDentascanSegmentations","getAxialSegmentations","hiddenSegmentations","setHiddenSegmentations","useCallback","prevState","lastSegmentationId","handleActiveViewportChange","activeDisplaySetsUIDs","getDisplaySetsUIDsForViewport","some","displaySetUID","getDisplaySetByUID","changedGrid","ACTIVE_VIEWPORT_ID_CHANGED","ready","VIEWPORTS_READY","subsGrid","changedData","VIEWPORT_DATA_CHANGED","subsData","_setSegmentationConfiguration","SegmentationGroupTableComponent","segmentationPanelMode","allowAddSegment","onSegmentationAddWrapper","onSegmentationAdd","runCommand","viewportTypeCheck","getViewportType","warning","csEnums","VOLUME_3D","STACK","segmentationConfig","initialConfig","disableEditing","showAddSegment","showDeleteSegment","onSegmentationEdit","callInputDialog","actionId","addOrUpdateSegmentation","hiddenSegmentation","getHiddenSegmentation","onSegmentationClick","getToolGroupIdsWithSegmentation","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","onSegmentClick","setActiveSegment","jumpToSegmentCenter","onSegmentAdd","config","opacity","visibility","isLocked","onSegmentDelete","onSegmentEdit","setSegmentLabel","onToggleSegmentationVisibility","toggleSegmentationVisibility","isVisible","setSegmentVisibility","onToggleSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onSegmentColorClick","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","setFillAlpha","setFillAlphaInactive","setOutlineWidthActive","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setRenderOutline","activeDisplaySets","getActiveDisplaySets","segmentConfig","axialDisplaySetUID","dentascanDisplaySet","dentascanDisplaySetUID","dentascanSegId","activeSegId","getButtonSection","createButtonSection","marginTop","getPanelModule","customizationService","iconName","iconLabel","appConfig","useAppConfig","Toolbox","buttonSectionId","updateViewportsForSegmentationRendering","loadFn","initialSliceIndex","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","_volumeCache","needsRerendering","initialImageOptions","useOnce","csViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","ac","volumeViewport","setCamera","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","getState","hangingProtocolService","isHangingProtocolLayout","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","FrameOfReferenceUID","getViewportsRequireUpdate","shouldRenderSegmentation","segmentationUtils","utilities","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","commandsModule","toolGroupService","createEmptySegmentationForViewport","currentSegmentations","loadSegmentationsForViewport","set","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","getSliceIndex","serviceFunction","boundFn","bind","description","cornerstoneToolsSegmentation","representationData","getCornerstoneImages","labelmapObj","rgb2DICOMLAB","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","algorithmType","SegmentAlgorithmName","algorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","segmentationInOHIF","generatedSegmentation","dataset","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","location","warn","toolNames","getToolGroupIds","setBrushSizeForToolGroup","toolName","setThresholdRange","getToolGroup","setToolConfiguration","definitions","commandFn","defaultContext","Component","OHIFCornerstoneSEGViewport","props","fallback","getCommandsModule","getToolbarModule","evaluate","button","disabledText","disabled","getToolGroupForViewport","getToolNameForButton","hasTool","isPrimaryActive","getActivePrimaryMouseButtonTool","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}